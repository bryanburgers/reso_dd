// THIS IS A GENERATED FILE
// If anything in this file needs to be updated, it needs to be fixed in reso_dd_generator
use serde::{Deserialize, Serialize};

/// [Property Resource](https://ddwiki.reso.org/display/DDW17/Property+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct Property {
    /// Finished area within the structure that is at or above the surface of the ground.
    ///
    /// [AboveGradeFinishedArea](https://ddwiki.reso.org/display/DDW17/AboveGradeFinishedArea+Field)
    #[serde(
        rename = "AboveGradeFinishedArea",
        skip_serializing_if = "Option::is_none"
    )]
    pub above_grade_finished_area: Option<f64>,

    /// The source of the measurements. This is a pick list of options showing the source of the measurement. i.e. Agent, Assessor, Estimate, etc.
    ///
    /// [AboveGradeFinishedAreaSource](https://ddwiki.reso.org/display/DDW17/AboveGradeFinishedAreaSource+Field)
    #[serde(
        rename = "AboveGradeFinishedAreaSource",
        skip_serializing_if = "Option::is_none"
    )]
    pub above_grade_finished_area_source: Option<AreaSource>,

    /// A pick list of the unit of measurement for the area. i.e. Square Feet, Square Meters, Acres, etc.
    ///
    /// [AboveGradeFinishedAreaUnits](https://ddwiki.reso.org/display/DDW17/AboveGradeFinishedAreaUnits+Field)
    #[serde(
        rename = "AboveGradeFinishedAreaUnits",
        skip_serializing_if = "Option::is_none"
    )]
    pub above_grade_finished_area_units: Option<AreaUnits>,

    /// If the property is located behind an unmanned security gate such as in a Gated Community, what is the code to gain access through the secured gate.
    ///
    /// [AccessCode](https://ddwiki.reso.org/display/DDW17/AccessCode+Field)
    #[serde(rename = "AccessCode", skip_serializing_if = "Option::is_none")]
    pub access_code: Option<String>,

    /// A list or description of the accessibility features included in the sale/lease.
    ///
    /// [AccessibilityFeatures](https://ddwiki.reso.org/display/DDW17/AccessibilityFeatures+Field)
    #[serde(
        rename = "AccessibilityFeatures",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_accessibility_features_format")]
    pub accessibility_features: Option<Vec<AccessibilityFeatures>>,

    /// If additional parcels are included in the sale, a list of those parcel's IDs separated by commas.  Do not include the first or primary parcel number, that should be located in the Parcel Number field.
    ///
    /// [AdditionalParcelsDescription](https://ddwiki.reso.org/display/DDW17/AdditionalParcelsDescription+Field)
    #[serde(
        rename = "AdditionalParcelsDescription",
        skip_serializing_if = "Option::is_none"
    )]
    pub additional_parcels_description: Option<String>,

    /// Are there more than one parcel or lot included in the sale?
    ///
    /// [AdditionalParcelsYN](https://ddwiki.reso.org/display/DDW17/AdditionalParcelsYN+Field)
    #[serde(
        rename = "AdditionalParcelsYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub additional_parcels_yn: Option<bool>,

    /// The main or most notable tenants as well as other tenants of the shopping center or mall in which the commercial property is located.
    ///
    /// [AnchorsCoTenants](https://ddwiki.reso.org/display/DDW17/AnchorsCoTenants+Field)
    #[serde(rename = "AnchorsCoTenants", skip_serializing_if = "Option::is_none")]
    pub anchors_co_tenants: Option<String>,

    /// A list of the appliances that will be included in the sale/lease of the property.
    ///
    /// [Appliances](https://ddwiki.reso.org/display/DDW17/Appliances+Field)
    #[serde(rename = "Appliances", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_appliances_format")]
    pub appliances: Option<Vec<Appliances>>,

    /// A list describing the style of the structure. For example, Victorian, Ranch, Craftsman, etc.
    ///
    /// [ArchitecturalStyle](https://ddwiki.reso.org/display/DDW17/ArchitecturalStyle+Field)
    #[serde(rename = "ArchitecturalStyle", skip_serializing_if = "Option::is_none")]
    pub architectural_style: Option<String>,

    /// Amenities provided by the Home Owners Association, Mobile Park or Complex. For example Pool, Clubhouse, etc.
    ///
    /// [AssociationAmenities](https://ddwiki.reso.org/display/DDW17/AssociationAmenities+Field)
    #[serde(
        rename = "AssociationAmenities",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_association_amenities_format")]
    pub association_amenities: Option<Vec<AssociationAmenities>>,

    /// A fee paid by the homeowner to the Home Owners Association which is used for the upkeep of the common area, neighborhood or other association related benefits.
    ///
    /// [AssociationFee](https://ddwiki.reso.org/display/DDW17/AssociationFee+Field)
    #[serde(rename = "AssociationFee", skip_serializing_if = "Option::is_none")]
    pub association_fee: Option<f64>,

    /// A fee paid by the homeowner to the second of two Home Owners Associations, which is used for the upkeep of the common area, neighborhood or other association related benefits.
    ///
    /// [AssociationFee2](https://ddwiki.reso.org/display/DDW17/AssociationFee2+Field)
    #[serde(rename = "AssociationFee2", skip_serializing_if = "Option::is_none")]
    pub association_fee2: Option<f64>,

    /// The frequency the association fee is paid.  For example, Weekly, Monthly, Annually, Bi-Monthly, One Time, etc.
    ///
    /// [AssociationFee2Frequency](https://ddwiki.reso.org/display/DDW17/AssociationFee2Frequency+Field)
    #[serde(
        rename = "AssociationFee2Frequency",
        skip_serializing_if = "Option::is_none"
    )]
    pub association_fee2_frequency: Option<FeeFrequency>,

    /// The frequency the association fee is paid.  For example, Weekly, Monthly, Annually, Bi-Monthly, One Time, etc.
    ///
    /// [AssociationFeeFrequency](https://ddwiki.reso.org/display/DDW17/AssociationFeeFrequency+Field)
    #[serde(
        rename = "AssociationFeeFrequency",
        skip_serializing_if = "Option::is_none"
    )]
    pub association_fee_frequency: Option<FeeFrequency>,

    /// Services included with the association fee.  For example Landscaping, Trash, Water, etc.
    ///
    /// [AssociationFeeIncludes](https://ddwiki.reso.org/display/DDW17/AssociationFeeIncludes+Field)
    #[serde(
        rename = "AssociationFeeIncludes",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_association_fee_includes_format")]
    pub association_fee_includes: Option<Vec<AssociationFeeIncludes>>,

    /// The name of the Home Owners Association.
    ///
    /// [AssociationName](https://ddwiki.reso.org/display/DDW17/AssociationName+Field)
    #[serde(rename = "AssociationName", skip_serializing_if = "Option::is_none")]
    pub association_name: Option<String>,

    /// The name of the second of two Home Owners Association.
    ///
    /// [AssociationName2](https://ddwiki.reso.org/display/DDW17/AssociationName2+Field)
    #[serde(rename = "AssociationName2", skip_serializing_if = "Option::is_none")]
    pub association_name2: Option<String>,

    /// The phone number of the Home Owners Association. North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [AssociationPhone](https://ddwiki.reso.org/display/DDW17/AssociationPhone+Field)
    #[serde(rename = "AssociationPhone", skip_serializing_if = "Option::is_none")]
    pub association_phone: Option<String>,

    /// The phone number of the second of two Home Owners Association. North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [AssociationPhone2](https://ddwiki.reso.org/display/DDW17/AssociationPhone2+Field)
    #[serde(rename = "AssociationPhone2", skip_serializing_if = "Option::is_none")]
    pub association_phone2: Option<String>,

    /// Is there a Home Owners Association.  A separate Y/N field is needed because not all associations have dues.
    ///
    /// [AssociationYN](https://ddwiki.reso.org/display/DDW17/AssociationYN+Field)
    #[serde(rename = "AssociationYN", skip_serializing_if = "Option::is_none")]
    pub association_yn: Option<bool>,

    /// A flag indicating that the garage attached to the dwelling.
    ///
    /// [AttachedGarageYN](https://ddwiki.reso.org/display/DDW17/AttachedGarageYN+Field)
    #[serde(rename = "AttachedGarageYN", skip_serializing_if = "Option::is_none")]
    pub attached_garage_yn: Option<bool>,

    /// The date the property will be available for possession/occupation.
    ///
    /// [AvailabilityDate](https://ddwiki.reso.org/display/DDW17/AvailabilityDate+Field)
    #[serde(rename = "AvailabilityDate", skip_serializing_if = "Option::is_none")]
    pub availability_date: Option<chrono::NaiveDate>,

    /// A list of information and features about the basement. i.e. None/Slab, Finished, Partially Finished, Crawl Space, Dirt, Outside Entrance, Radon Mitigation
    ///
    /// [Basement](https://ddwiki.reso.org/display/DDW17/Basement+Field)
    #[serde(rename = "Basement", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_basement_format")]
    pub basement: Option<Vec<Basement>>,

    /// Does the property have a basement?
    ///
    /// [BasementYN](https://ddwiki.reso.org/display/DDW17/BasementYN+Field)
    #[serde(rename = "BasementYN", skip_serializing_if = "Option::is_none")]
    pub basement_yn: Option<bool>,

    /// A room containing all 4 of the 4 elements constituting a bath, which are; Toilet, Sink, Bathtub or Shower Head.  A Full Bath will typically contain four elements; Sink, Toilet, Tub and Shower Head (in tub or stall).  However, some may considered a Sink, Toilet and Tub (without a shower) a Full Bath, others consider this to be a Three Quarter Bath.  In the event that BathroomsThreeQuarter is not in use, this field may represent the sum of all Full and Three Quarter bathrooms.
    ///
    /// [BathroomsFull](https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field)
    #[serde(rename = "BathroomsFull", skip_serializing_if = "Option::is_none")]
    pub bathrooms_full: Option<f64>,

    /// A room containing 2 of the 4 elements constituting a bath, which are; Toilet, Sink, Bathtub or Shower Head.  A Half Bath will typically contain a Sink and Toilet.
    ///
    /// [BathroomsHalf](https://ddwiki.reso.org/display/DDW17/BathroomsHalf+Field)
    #[serde(rename = "BathroomsHalf", skip_serializing_if = "Option::is_none")]
    pub bathrooms_half: Option<f64>,

    /// A room containing 1 of the 4 elements constituting a bath which are; Toilet, Sink, Bathtub or Shower Head.  Examples are a vanity with a sink or a WC (Water Closet, which is a room with only a toilet).
    ///
    /// [BathroomsOneQuarter](https://ddwiki.reso.org/display/DDW17/BathroomsOneQuarter+Field)
    #[serde(
        rename = "BathroomsOneQuarter",
        skip_serializing_if = "Option::is_none"
    )]
    pub bathrooms_one_quarter: Option<f64>,

    /// The number of partial bathrooms in the property being sold/leased.  When used in combination with the BathroomsFull field, this replaces (or is the sum of) all Half and One Quarter bathrooms; and in the event BathroomsThreeQuarter is not used, BathroomsFull replaces (or is the sum of) all Full and Three Quarter baths.  This field should not be used in combination with the BathroomsOneQuarter or the BathroomsHalf.
    ///
    /// [BathroomsPartial](https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field)
    #[serde(rename = "BathroomsPartial", skip_serializing_if = "Option::is_none")]
    pub bathrooms_partial: Option<f64>,

    /// A room containing 3 of the 4 elements constituting a bath, which are; Toilet, Sink, Bathtub or Shower Head. A typical Three Quarter Bath will contain Sink, Toilet and Shower.  Some may considered a Sink, Toilet and Tub (without a shower) a Three Quarter Bath, others consider this to be a Full Bath.
    ///
    /// [BathroomsThreeQuarter](https://ddwiki.reso.org/display/DDW17/BathroomsThreeQuarter+Field)
    #[serde(
        rename = "BathroomsThreeQuarter",
        skip_serializing_if = "Option::is_none"
    )]
    pub bathrooms_three_quarter: Option<f64>,

    /// The simple sum of the number of bathrooms.  For example for a property with two Full Bathrooms and one Half Bathroom, the Bathrooms Total Integer will be 3.  Expressing this example as 2.5, you will need to use a non-standard field name.  Decimal based bathrooms are not recommended but possible via the Dictionary's extensibility.
    ///
    /// [BathroomsTotalInteger](https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field)
    #[serde(
        rename = "BathroomsTotalInteger",
        skip_serializing_if = "Option::is_none"
    )]
    pub bathrooms_total_integer: Option<f64>,

    /// The sum of BedroomsTotal plus other rooms that may be used as a bedroom but are not defined as bedroom per local policy.
    ///
    /// [BedroomsPossible](https://ddwiki.reso.org/display/DDW17/BedroomsPossible+Field)
    #[serde(rename = "BedroomsPossible", skip_serializing_if = "Option::is_none")]
    pub bedrooms_possible: Option<f64>,

    /// The total number of bedrooms in the dwelling.
    ///
    /// [BedroomsTotal](https://ddwiki.reso.org/display/DDW17/BedroomsTotal+Field)
    #[serde(rename = "BedroomsTotal", skip_serializing_if = "Option::is_none")]
    pub bedrooms_total: Option<f64>,

    /// Finished area within the structure that is below ground.
    ///
    /// [BelowGradeFinishedArea](https://ddwiki.reso.org/display/DDW17/BelowGradeFinishedArea+Field)
    #[serde(
        rename = "BelowGradeFinishedArea",
        skip_serializing_if = "Option::is_none"
    )]
    pub below_grade_finished_area: Option<f64>,

    /// The source of the measurements. This is a pick list of options showing the source of the measurement. i.e. Agent, Assessor, Estimate, etc.
    ///
    /// [BelowGradeFinishedAreaSource](https://ddwiki.reso.org/display/DDW17/BelowGradeFinishedAreaSource+Field)
    #[serde(
        rename = "BelowGradeFinishedAreaSource",
        skip_serializing_if = "Option::is_none"
    )]
    pub below_grade_finished_area_source: Option<AreaSource>,

    /// A pick list of the unit of measurement for the area.  i.e. Square Feet, Square Meters, Acres, etc.
    ///
    /// [BelowGradeFinishedAreaUnits](https://ddwiki.reso.org/display/DDW17/BelowGradeFinishedAreaUnits+Field)
    #[serde(
        rename = "BelowGradeFinishedAreaUnits",
        skip_serializing_if = "Option::is_none"
    )]
    pub below_grade_finished_area_units: Option<AreaUnits>,

    /// Type of mobile home.
    ///
    /// [BodyType](https://ddwiki.reso.org/display/DDW17/BodyType+Field)
    #[serde(rename = "BodyType", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_body_type_format")]
    pub body_type: Option<Vec<BodyType>>,

    /// The builders model name or number for the property.
    ///
    /// [BuilderModel](https://ddwiki.reso.org/display/DDW17/BuilderModel+Field)
    #[serde(rename = "BuilderModel", skip_serializing_if = "Option::is_none")]
    pub builder_model: Option<String>,

    /// Name of the builder of the property or builder's tract.
    ///
    /// [BuilderName](https://ddwiki.reso.org/display/DDW17/BuilderName+Field)
    #[serde(rename = "BuilderName", skip_serializing_if = "Option::is_none")]
    pub builder_name: Option<String>,

    /// The source of the measurements. This is a pick list of options showing the source of the measurement. i.e. Agent, Assessor, Estimate, etc.
    ///
    /// [BuildingAreaSource](https://ddwiki.reso.org/display/DDW17/BuildingAreaSource+Field)
    #[serde(rename = "BuildingAreaSource", skip_serializing_if = "Option::is_none")]
    pub building_area_source: Option<AreaSource>,

    /// Total area of the structure. Includes both finished and unfinished areas.
    ///
    /// [BuildingAreaTotal](https://ddwiki.reso.org/display/DDW17/BuildingAreaTotal+Field)
    #[serde(rename = "BuildingAreaTotal", skip_serializing_if = "Option::is_none")]
    pub building_area_total: Option<f64>,

    /// A pick list of the unit of measurement for the area.  i.e. Square Feet, Square Meters, Acres, etc.
    ///
    /// [BuildingAreaUnits](https://ddwiki.reso.org/display/DDW17/BuildingAreaUnits+Field)
    #[serde(rename = "BuildingAreaUnits", skip_serializing_if = "Option::is_none")]
    pub building_area_units: Option<AreaUnits>,

    /// Features or amenities of the building or business park.
    ///
    /// [BuildingFeatures](https://ddwiki.reso.org/display/DDW17/BuildingFeatures+Field)
    #[serde(rename = "BuildingFeatures", skip_serializing_if = "Option::is_none")]
    pub building_features: Option<String>,

    /// Name of the building or business park.
    ///
    /// [BuildingName](https://ddwiki.reso.org/display/DDW17/BuildingName+Field)
    #[serde(rename = "BuildingName", skip_serializing_if = "Option::is_none")]
    pub building_name: Option<String>,

    /// Name of the business being sold.
    ///
    /// [BusinessName](https://ddwiki.reso.org/display/DDW17/BusinessName+Field)
    #[serde(rename = "BusinessName", skip_serializing_if = "Option::is_none")]
    pub business_name: Option<String>,

    /// The type of business being sold. Retail, Wholesale, Grocery, Food & Bev, etc.
    ///
    /// [BusinessType](https://ddwiki.reso.org/display/DDW17/BusinessType+Field)
    #[serde(rename = "BusinessType", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_business_type_format")]
    pub business_type: Option<Vec<BusinessType>>,

    /// The total commission to be paid for this sale, expressed as either a percentage or a constant currency amount.
    ///
    /// [BuyerAgencyCompensation](https://ddwiki.reso.org/display/DDW17/BuyerAgencyCompensation+Field)
    #[serde(
        rename = "BuyerAgencyCompensation",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agency_compensation: Option<String>,

    /// A list of types to clarify the value entered in the BuyerAgencyCompensation field.  For example $, % or some other clarification of the BuyerAgencyCompensation.
    ///
    /// [BuyerAgencyCompensationType](https://ddwiki.reso.org/display/DDW17/BuyerAgencyCompensationType+Field)
    #[serde(
        rename = "BuyerAgencyCompensationType",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agency_compensation_type: Option<CompensationType>,

    /// The Buyer's Agent's Board or Association of REALTORS.
    ///
    /// [BuyerAgentAOR](https://ddwiki.reso.org/display/DDW17/BuyerAgentAOR+Field)
    #[serde(rename = "BuyerAgentAOR", skip_serializing_if = "Option::is_none")]
    pub buyer_agent_aor: Option<String>,

    /// Designations and certifications acknowledging experience and expertise in various real estate sectors are awarded by NAR and each affiliated group upon completion of required courses.
    ///
    /// [BuyerAgentDesignation](https://ddwiki.reso.org/display/DDW17/BuyerAgentDesignation+Field)
    #[serde(
        rename = "BuyerAgentDesignation",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_buyer_agent_designation_format")]
    pub buyer_agent_designation: Option<Vec<BuyerAgentDesignation>>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [BuyerAgentDirectPhone](https://ddwiki.reso.org/display/DDW17/BuyerAgentDirectPhone+Field)
    #[serde(
        rename = "BuyerAgentDirectPhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_direct_phone: Option<String>,

    /// The email address of the Buyer's Agent.
    ///
    /// [BuyerAgentEmail](https://ddwiki.reso.org/display/DDW17/BuyerAgentEmail+Field)
    #[serde(rename = "BuyerAgentEmail", skip_serializing_if = "Option::is_none")]
    pub buyer_agent_email: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [BuyerAgentFax](https://ddwiki.reso.org/display/DDW17/BuyerAgentFax+Field)
    #[serde(rename = "BuyerAgentFax", skip_serializing_if = "Option::is_none")]
    pub buyer_agent_fax: Option<String>,

    /// The first name of the buyer's agent.
    ///
    /// [BuyerAgentFirstName](https://ddwiki.reso.org/display/DDW17/BuyerAgentFirstName+Field)
    #[serde(
        rename = "BuyerAgentFirstName",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_first_name: Option<String>,

    /// The full name of the buyer's agent. (First Middle Last)
    ///
    /// [BuyerAgentFullName](https://ddwiki.reso.org/display/DDW17/BuyerAgentFullName+Field)
    #[serde(rename = "BuyerAgentFullName", skip_serializing_if = "Option::is_none")]
    pub buyer_agent_full_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [BuyerAgentHomePhone](https://ddwiki.reso.org/display/DDW17/BuyerAgentHomePhone+Field)
    #[serde(
        rename = "BuyerAgentHomePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_home_phone: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set. This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [BuyerAgentKey](https://ddwiki.reso.org/display/DDW17/BuyerAgentKey+Field)
    #[serde(rename = "BuyerAgentKey", skip_serializing_if = "Option::is_none")]
    pub buyer_agent_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set. This is a foreign key relating to the Member resource's MemberKey. This is the numeric only key and used as an alternative to the BuyerAgentKey field.
    ///
    /// [BuyerAgentKeyNumeric](https://ddwiki.reso.org/display/DDW17/BuyerAgentKeyNumeric+Field)
    #[serde(
        rename = "BuyerAgentKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_key_numeric: Option<f64>,

    /// The last name of the buyer's agent.
    ///
    /// [BuyerAgentLastName](https://ddwiki.reso.org/display/DDW17/BuyerAgentLastName+Field)
    #[serde(rename = "BuyerAgentLastName", skip_serializing_if = "Option::is_none")]
    pub buyer_agent_last_name: Option<String>,

    /// The middle name of the buyer's agent.
    ///
    /// [BuyerAgentMiddleName](https://ddwiki.reso.org/display/DDW17/BuyerAgentMiddleName+Field)
    #[serde(
        rename = "BuyerAgentMiddleName",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_middle_name: Option<String>,

    /// The local, well-known identifier. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [BuyerAgentMlsId](https://ddwiki.reso.org/display/DDW17/BuyerAgentMlsId+Field)
    #[serde(rename = "BuyerAgentMlsId", skip_serializing_if = "Option::is_none")]
    pub buyer_agent_mls_id: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [BuyerAgentMobilePhone](https://ddwiki.reso.org/display/DDW17/BuyerAgentMobilePhone+Field)
    #[serde(
        rename = "BuyerAgentMobilePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_mobile_phone: Option<String>,

    /// Prefix to the name (e.g. Dr. Mr. Ms. etc.)
    ///
    /// [BuyerAgentNamePrefix](https://ddwiki.reso.org/display/DDW17/BuyerAgentNamePrefix+Field)
    #[serde(
        rename = "BuyerAgentNamePrefix",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_name_prefix: Option<String>,

    /// Suffix to the BuyerAgentLastName (e.g. Esq., Jr., III etc.)
    ///
    /// [BuyerAgentNameSuffix](https://ddwiki.reso.org/display/DDW17/BuyerAgentNameSuffix+Field)
    #[serde(
        rename = "BuyerAgentNameSuffix",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_name_suffix: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [BuyerAgentOfficePhone](https://ddwiki.reso.org/display/DDW17/BuyerAgentOfficePhone+Field)
    #[serde(
        rename = "BuyerAgentOfficePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_office_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [BuyerAgentOfficePhoneExt](https://ddwiki.reso.org/display/DDW17/BuyerAgentOfficePhoneExt+Field)
    #[serde(
        rename = "BuyerAgentOfficePhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_office_phone_ext: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [BuyerAgentPager](https://ddwiki.reso.org/display/DDW17/BuyerAgentPager+Field)
    #[serde(rename = "BuyerAgentPager", skip_serializing_if = "Option::is_none")]
    pub buyer_agent_pager: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [BuyerAgentPreferredPhone](https://ddwiki.reso.org/display/DDW17/BuyerAgentPreferredPhone+Field)
    #[serde(
        rename = "BuyerAgentPreferredPhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_preferred_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [BuyerAgentPreferredPhoneExt](https://ddwiki.reso.org/display/DDW17/BuyerAgentPreferredPhoneExt+Field)
    #[serde(
        rename = "BuyerAgentPreferredPhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_preferred_phone_ext: Option<String>,

    /// The license of the buyers agent. Separate multiple licenses with a comma and space.
    ///
    /// [BuyerAgentStateLicense](https://ddwiki.reso.org/display/DDW17/BuyerAgentStateLicense+Field)
    #[serde(
        rename = "BuyerAgentStateLicense",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_state_license: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [BuyerAgentTollFreePhone](https://ddwiki.reso.org/display/DDW17/BuyerAgentTollFreePhone+Field)
    #[serde(
        rename = "BuyerAgentTollFreePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_toll_free_phone: Option<String>,

    /// The website URI of the buyers agent.
    ///
    /// [BuyerAgentURL](https://ddwiki.reso.org/display/DDW17/BuyerAgentURL+Field)
    #[serde(rename = "BuyerAgentURL", skip_serializing_if = "Option::is_none")]
    pub buyer_agent_url: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [BuyerAgentVoiceMail](https://ddwiki.reso.org/display/DDW17/BuyerAgentVoiceMail+Field)
    #[serde(
        rename = "BuyerAgentVoiceMail",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_voice_mail: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [BuyerAgentVoiceMailExt](https://ddwiki.reso.org/display/DDW17/BuyerAgentVoiceMailExt+Field)
    #[serde(
        rename = "BuyerAgentVoiceMailExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_agent_voice_mail_ext: Option<String>,

    /// A list of options that describe the type of financing used.  This field is used when setting a listing to Closed.  i.e. cash, FHA loan, etc.
    ///
    /// [BuyerFinancing](https://ddwiki.reso.org/display/DDW17/BuyerFinancing+Field)
    #[serde(rename = "BuyerFinancing", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_buyer_financing_format")]
    pub buyer_financing: Option<Vec<BuyerFinancing>>,

    /// The Buyer's Office's Board or Association of REALTORS.
    ///
    /// [BuyerOfficeAOR](https://ddwiki.reso.org/display/DDW17/BuyerOfficeAOR+Field)
    #[serde(rename = "BuyerOfficeAOR", skip_serializing_if = "Option::is_none")]
    pub buyer_office_aor: Option<String>,

    /// The email address of the Buyer's Office.
    ///
    /// [BuyerOfficeEmail](https://ddwiki.reso.org/display/DDW17/BuyerOfficeEmail+Field)
    #[serde(rename = "BuyerOfficeEmail", skip_serializing_if = "Option::is_none")]
    pub buyer_office_email: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [BuyerOfficeFax](https://ddwiki.reso.org/display/DDW17/BuyerOfficeFax+Field)
    #[serde(rename = "BuyerOfficeFax", skip_serializing_if = "Option::is_none")]
    pub buyer_office_fax: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set.  This is a foreign key relating to the Office resource's OfficeKey.
    ///
    /// [BuyerOfficeKey](https://ddwiki.reso.org/display/DDW17/BuyerOfficeKey+Field)
    #[serde(rename = "BuyerOfficeKey", skip_serializing_if = "Option::is_none")]
    pub buyer_office_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set.  This is a foreign key relating to the Office resource's OfficeKey.  This is the numeric only key and used as an alternative to the BuyerOfficeKey field.
    ///
    /// [BuyerOfficeKeyNumeric](https://ddwiki.reso.org/display/DDW17/BuyerOfficeKeyNumeric+Field)
    #[serde(
        rename = "BuyerOfficeKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_office_key_numeric: Option<f64>,

    /// The local, well-known identifier. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [BuyerOfficeMlsId](https://ddwiki.reso.org/display/DDW17/BuyerOfficeMlsId+Field)
    #[serde(rename = "BuyerOfficeMlsId", skip_serializing_if = "Option::is_none")]
    pub buyer_office_mls_id: Option<String>,

    /// The legal name of the brokerage representing the buyer.
    ///
    /// [BuyerOfficeName](https://ddwiki.reso.org/display/DDW17/BuyerOfficeName+Field)
    #[serde(rename = "BuyerOfficeName", skip_serializing_if = "Option::is_none")]
    pub buyer_office_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [BuyerOfficePhone](https://ddwiki.reso.org/display/DDW17/BuyerOfficePhone+Field)
    #[serde(rename = "BuyerOfficePhone", skip_serializing_if = "Option::is_none")]
    pub buyer_office_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [BuyerOfficePhoneExt](https://ddwiki.reso.org/display/DDW17/BuyerOfficePhoneExt+Field)
    #[serde(
        rename = "BuyerOfficePhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_office_phone_ext: Option<String>,

    /// The website URI for the buyers office.
    ///
    /// [BuyerOfficeURL](https://ddwiki.reso.org/display/DDW17/BuyerOfficeURL+Field)
    #[serde(rename = "BuyerOfficeURL", skip_serializing_if = "Option::is_none")]
    pub buyer_office_url: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set.  This is a foreign key relating to the Teams resource's TeamKey.
    ///
    /// [BuyerTeamKey](https://ddwiki.reso.org/display/DDW17/BuyerTeamKey+Field)
    #[serde(rename = "BuyerTeamKey", skip_serializing_if = "Option::is_none")]
    pub buyer_team_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set.  This is a foreign key relating to the Teams resource's TeamKey.  This is the numeric only key and used as an alternative to the BuyerTeamKey field.
    ///
    /// [BuyerTeamKeyNumeric](https://ddwiki.reso.org/display/DDW17/BuyerTeamKeyNumeric+Field)
    #[serde(
        rename = "BuyerTeamKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub buyer_team_key_numeric: Option<f64>,

    /// The name of the team representing the buyer.
    ///
    /// [BuyerTeamName](https://ddwiki.reso.org/display/DDW17/BuyerTeamName+Field)
    #[serde(rename = "BuyerTeamName", skip_serializing_if = "Option::is_none")]
    pub buyer_team_name: Option<String>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [CableTvExpense](https://ddwiki.reso.org/display/DDW17/CableTvExpense+Field)
    #[serde(rename = "CableTvExpense", skip_serializing_if = "Option::is_none")]
    pub cable_tv_expense: Option<f64>,

    /// Date the listing contract between the seller and listing agent was cancelled. This is the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS.
    ///
    /// [CancellationDate](https://ddwiki.reso.org/display/DDW17/CancellationDate+Field)
    #[serde(rename = "CancellationDate", skip_serializing_if = "Option::is_none")]
    pub cancellation_date: Option<chrono::NaiveDate>,

    /// Cap Rate is equivalent to the return on investment you would receive if you pay cash for a property. The ratio between the net operating income produced by an asset and its capital cost (the original price paid to buy the asset) or alternatively its current market value.
    ///
    /// [CapRate](https://ddwiki.reso.org/display/DDW17/CapRate+Field)
    #[serde(rename = "CapRate", skip_serializing_if = "Option::is_none")]
    pub cap_rate: Option<f64>,

    /// The number of carport spaces included in the sale.
    ///
    /// [CarportSpaces](https://ddwiki.reso.org/display/DDW17/CarportSpaces+Field)
    #[serde(rename = "CarportSpaces", skip_serializing_if = "Option::is_none")]
    pub carport_spaces: Option<f64>,

    /// A flag indicating that the listing has a car port. This flag may be T/F, Y/N or other true, false or unknown indicator. As with all flags, the field may be null.
    ///
    /// [CarportYN](https://ddwiki.reso.org/display/DDW17/CarportYN+Field)
    #[serde(rename = "CarportYN", skip_serializing_if = "Option::is_none")]
    pub carport_yn: Option<bool>,

    /// The group of addresses to which the USPS assigns the same code to aid in mail delivery. For the USPS, these codes are 9 digits: 5 numbers for the ZIP Code, one letter for the carrier route type, and 3 numbers for the carrier route number.
    ///
    /// [CarrierRoute](https://ddwiki.reso.org/display/DDW17/CarrierRoute+Field)
    #[serde(rename = "CarrierRoute", skip_serializing_if = "Option::is_none")]
    pub carrier_route: Option<String>,

    /// The city in listing address.
    ///
    /// [City](https://ddwiki.reso.org/display/DDW17/City+Field)
    #[serde(rename = "City", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,

    /// A sub-section or area of a defined city.  Examples would be SOHO in New York, NY, Ironbound in Newark, NJ or Inside the Beltway.
    ///
    /// [CityRegion](https://ddwiki.reso.org/display/DDW17/CityRegion+Field)
    #[serde(rename = "CityRegion", skip_serializing_if = "Option::is_none")]
    pub city_region: Option<String>,

    /// With for-sale listings, the date the purchase agreement was fulfilled. With lease listings, the date the requirements were fulfilled, such as contract and/or deposit.  This is the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS.
    ///
    /// [CloseDate](https://ddwiki.reso.org/display/DDW17/CloseDate+Field)
    #[serde(rename = "CloseDate", skip_serializing_if = "Option::is_none")]
    pub close_date: Option<chrono::NaiveDate>,

    /// The amount of money paid by the purchaser to the seller for the property under the agreement.
    ///
    /// [ClosePrice](https://ddwiki.reso.org/display/DDW17/ClosePrice+Field)
    #[serde(rename = "ClosePrice", skip_serializing_if = "Option::is_none")]
    pub close_price: Option<f64>,

    /// The Co Buyer's Agent's Board or Association of REALTORS.
    ///
    /// [CoBuyerAgentAOR](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentAOR+Field)
    #[serde(rename = "CoBuyerAgentAOR", skip_serializing_if = "Option::is_none")]
    pub co_buyer_agent_aor: Option<String>,

    /// Designations and certifications acknowledging experience and expertise in various real estate sectors are awarded by NAR and each affiliated group upon completion of required courses.
    ///
    /// [CoBuyerAgentDesignation](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentDesignation+Field)
    #[serde(
        rename = "CoBuyerAgentDesignation",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_co_buyer_agent_designation_format")]
    pub co_buyer_agent_designation: Option<Vec<CoBuyerAgentDesignation>>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoBuyerAgentDirectPhone](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentDirectPhone+Field)
    #[serde(
        rename = "CoBuyerAgentDirectPhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_direct_phone: Option<String>,

    /// The email address of the Buyer's Co Agent.
    ///
    /// [CoBuyerAgentEmail](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentEmail+Field)
    #[serde(rename = "CoBuyerAgentEmail", skip_serializing_if = "Option::is_none")]
    pub co_buyer_agent_email: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoBuyerAgentFax](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentFax+Field)
    #[serde(rename = "CoBuyerAgentFax", skip_serializing_if = "Option::is_none")]
    pub co_buyer_agent_fax: Option<String>,

    /// The first name of the buyer's co-agent.
    ///
    /// [CoBuyerAgentFirstName](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentFirstName+Field)
    #[serde(
        rename = "CoBuyerAgentFirstName",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_first_name: Option<String>,

    /// The full name of the buyer's co-agent. (First Middle Last)
    ///
    /// [CoBuyerAgentFullName](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentFullName+Field)
    #[serde(
        rename = "CoBuyerAgentFullName",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_full_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoBuyerAgentHomePhone](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentHomePhone+Field)
    #[serde(
        rename = "CoBuyerAgentHomePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_home_phone: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set. This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [CoBuyerAgentKey](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentKey+Field)
    #[serde(rename = "CoBuyerAgentKey", skip_serializing_if = "Option::is_none")]
    pub co_buyer_agent_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set. This is a foreign key relating to the Member resource's MemberKey. This is the numeric only key and used as an alternative to the CoBuyerAgentKey field.
    ///
    /// [CoBuyerAgentKeyNumeric](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentKeyNumeric+Field)
    #[serde(
        rename = "CoBuyerAgentKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_key_numeric: Option<f64>,

    /// The last name of the buyer's co-agent.
    ///
    /// [CoBuyerAgentLastName](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentLastName+Field)
    #[serde(
        rename = "CoBuyerAgentLastName",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_last_name: Option<String>,

    /// The middle name of the buyer's co-agent.
    ///
    /// [CoBuyerAgentMiddleName](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentMiddleName+Field)
    #[serde(
        rename = "CoBuyerAgentMiddleName",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_middle_name: Option<String>,

    /// The local, well-known identifier. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [CoBuyerAgentMlsId](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentMlsId+Field)
    #[serde(rename = "CoBuyerAgentMlsId", skip_serializing_if = "Option::is_none")]
    pub co_buyer_agent_mls_id: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoBuyerAgentMobilePhone](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentMobilePhone+Field)
    #[serde(
        rename = "CoBuyerAgentMobilePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_mobile_phone: Option<String>,

    /// Prefix to the name (e.g. Dr. Mr. Ms. etc.)
    ///
    /// [CoBuyerAgentNamePrefix](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentNamePrefix+Field)
    #[serde(
        rename = "CoBuyerAgentNamePrefix",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_name_prefix: Option<String>,

    /// Suffix to the CoBuyerAgentLastName (e.g. Esq., Jr., III etc.)
    ///
    /// [CoBuyerAgentNameSuffix](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentNameSuffix+Field)
    #[serde(
        rename = "CoBuyerAgentNameSuffix",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_name_suffix: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoBuyerAgentOfficePhone](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentOfficePhone+Field)
    #[serde(
        rename = "CoBuyerAgentOfficePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_office_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [CoBuyerAgentOfficePhoneExt](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentOfficePhoneExt+Field)
    #[serde(
        rename = "CoBuyerAgentOfficePhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_office_phone_ext: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoBuyerAgentPager](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentPager+Field)
    #[serde(rename = "CoBuyerAgentPager", skip_serializing_if = "Option::is_none")]
    pub co_buyer_agent_pager: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoBuyerAgentPreferredPhone](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentPreferredPhone+Field)
    #[serde(
        rename = "CoBuyerAgentPreferredPhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_preferred_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [CoBuyerAgentPreferredPhoneExt](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentPreferredPhoneExt+Field)
    #[serde(
        rename = "CoBuyerAgentPreferredPhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_preferred_phone_ext: Option<String>,

    /// The license of the co-buyers agent. Separate multiple licenses with a comma and space.
    ///
    /// [CoBuyerAgentStateLicense](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentStateLicense+Field)
    #[serde(
        rename = "CoBuyerAgentStateLicense",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_state_license: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoBuyerAgentTollFreePhone](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentTollFreePhone+Field)
    #[serde(
        rename = "CoBuyerAgentTollFreePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_toll_free_phone: Option<String>,

    /// The website URI of the co-buyers agent.
    ///
    /// [CoBuyerAgentURL](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentURL+Field)
    #[serde(rename = "CoBuyerAgentURL", skip_serializing_if = "Option::is_none")]
    pub co_buyer_agent_url: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoBuyerAgentVoiceMail](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentVoiceMail+Field)
    #[serde(
        rename = "CoBuyerAgentVoiceMail",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_voice_mail: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [CoBuyerAgentVoiceMailExt](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentVoiceMailExt+Field)
    #[serde(
        rename = "CoBuyerAgentVoiceMailExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_agent_voice_mail_ext: Option<String>,

    /// The Co Buyer's Office's Board or Association of REALTORS.
    ///
    /// [CoBuyerOfficeAOR](https://ddwiki.reso.org/display/DDW17/CoBuyerOfficeAOR+Field)
    #[serde(rename = "CoBuyerOfficeAOR", skip_serializing_if = "Option::is_none")]
    pub co_buyer_office_aor: Option<String>,

    /// The email address of the Buyer's Co Office.
    ///
    /// [CoBuyerOfficeEmail](https://ddwiki.reso.org/display/DDW17/CoBuyerOfficeEmail+Field)
    #[serde(rename = "CoBuyerOfficeEmail", skip_serializing_if = "Option::is_none")]
    pub co_buyer_office_email: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [CoBuyerOfficeFax](https://ddwiki.reso.org/display/DDW17/CoBuyerOfficeFax+Field)
    #[serde(rename = "CoBuyerOfficeFax", skip_serializing_if = "Option::is_none")]
    pub co_buyer_office_fax: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set.  This is a foreign key relating to the Office resource's OfficeKey.
    ///
    /// [CoBuyerOfficeKey](https://ddwiki.reso.org/display/DDW17/CoBuyerOfficeKey+Field)
    #[serde(rename = "CoBuyerOfficeKey", skip_serializing_if = "Option::is_none")]
    pub co_buyer_office_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set.  This is a foreign key relating to the Office resource's OfficeKey.  This is the numeric only key and used as an alternative to the CoBuyerOfficeKey field.
    ///
    /// [CoBuyerOfficeKeyNumeric](https://ddwiki.reso.org/display/DDW17/CoBuyerOfficeKeyNumeric+Field)
    #[serde(
        rename = "CoBuyerOfficeKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_office_key_numeric: Option<f64>,

    /// The local, well-known identifier. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [CoBuyerOfficeMlsId](https://ddwiki.reso.org/display/DDW17/CoBuyerOfficeMlsId+Field)
    #[serde(rename = "CoBuyerOfficeMlsId", skip_serializing_if = "Option::is_none")]
    pub co_buyer_office_mls_id: Option<String>,

    /// The legal name of the brokerage co-representing the buyer.
    ///
    /// [CoBuyerOfficeName](https://ddwiki.reso.org/display/DDW17/CoBuyerOfficeName+Field)
    #[serde(rename = "CoBuyerOfficeName", skip_serializing_if = "Option::is_none")]
    pub co_buyer_office_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [CoBuyerOfficePhone](https://ddwiki.reso.org/display/DDW17/CoBuyerOfficePhone+Field)
    #[serde(rename = "CoBuyerOfficePhone", skip_serializing_if = "Option::is_none")]
    pub co_buyer_office_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [CoBuyerOfficePhoneExt](https://ddwiki.reso.org/display/DDW17/CoBuyerOfficePhoneExt+Field)
    #[serde(
        rename = "CoBuyerOfficePhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_buyer_office_phone_ext: Option<String>,

    /// The website URI for the co-buyers office.
    ///
    /// [CoBuyerOfficeURL](https://ddwiki.reso.org/display/DDW17/CoBuyerOfficeURL+Field)
    #[serde(rename = "CoBuyerOfficeURL", skip_serializing_if = "Option::is_none")]
    pub co_buyer_office_url: Option<String>,

    /// The Co Listing Agent's Board or Association of REALTORS.
    ///
    /// [CoListAgentAOR](https://ddwiki.reso.org/display/DDW17/CoListAgentAOR+Field)
    #[serde(rename = "CoListAgentAOR", skip_serializing_if = "Option::is_none")]
    pub co_list_agent_aor: Option<String>,

    /// Designations and certifications acknowledging experience and expertise in various real estate sectors are awarded by NAR and each affiliated group upon completion of required courses.
    ///
    /// [CoListAgentDesignation](https://ddwiki.reso.org/display/DDW17/CoListAgentDesignation+Field)
    #[serde(
        rename = "CoListAgentDesignation",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_co_list_agent_designation_format")]
    pub co_list_agent_designation: Option<Vec<CoListAgentDesignation>>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoListAgentDirectPhone](https://ddwiki.reso.org/display/DDW17/CoListAgentDirectPhone+Field)
    #[serde(
        rename = "CoListAgentDirectPhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_direct_phone: Option<String>,

    /// The email address of the Co Listing Agent.
    ///
    /// [CoListAgentEmail](https://ddwiki.reso.org/display/DDW17/CoListAgentEmail+Field)
    #[serde(rename = "CoListAgentEmail", skip_serializing_if = "Option::is_none")]
    pub co_list_agent_email: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoListAgentFax](https://ddwiki.reso.org/display/DDW17/CoListAgentFax+Field)
    #[serde(rename = "CoListAgentFax", skip_serializing_if = "Option::is_none")]
    pub co_list_agent_fax: Option<String>,

    /// The first name of the co-listing agent.
    ///
    /// [CoListAgentFirstName](https://ddwiki.reso.org/display/DDW17/CoListAgentFirstName+Field)
    #[serde(
        rename = "CoListAgentFirstName",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_first_name: Option<String>,

    /// The full name of the co-listing agent. (First Middle Last)
    ///
    /// [CoListAgentFullName](https://ddwiki.reso.org/display/DDW17/CoListAgentFullName+Field)
    #[serde(
        rename = "CoListAgentFullName",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_full_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoListAgentHomePhone](https://ddwiki.reso.org/display/DDW17/CoListAgentHomePhone+Field)
    #[serde(
        rename = "CoListAgentHomePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_home_phone: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set. This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [CoListAgentKey](https://ddwiki.reso.org/display/DDW17/CoListAgentKey+Field)
    #[serde(rename = "CoListAgentKey", skip_serializing_if = "Option::is_none")]
    pub co_list_agent_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set. This is a foreign key relating to the Member resource's MemberKey. This is the numeric only key and used as an alternative to the CoListAgentKey field.
    ///
    /// [CoListAgentKeyNumeric](https://ddwiki.reso.org/display/DDW17/CoListAgentKeyNumeric+Field)
    #[serde(
        rename = "CoListAgentKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_key_numeric: Option<f64>,

    /// The last name of the co-listing agent.
    ///
    /// [CoListAgentLastName](https://ddwiki.reso.org/display/DDW17/CoListAgentLastName+Field)
    #[serde(
        rename = "CoListAgentLastName",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_last_name: Option<String>,

    /// The middle name of the co-listing agent.
    ///
    /// [CoListAgentMiddleName](https://ddwiki.reso.org/display/DDW17/CoListAgentMiddleName+Field)
    #[serde(
        rename = "CoListAgentMiddleName",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_middle_name: Option<String>,

    /// The local, well-known identifier. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [CoListAgentMlsId](https://ddwiki.reso.org/display/DDW17/CoListAgentMlsId+Field)
    #[serde(rename = "CoListAgentMlsId", skip_serializing_if = "Option::is_none")]
    pub co_list_agent_mls_id: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoListAgentMobilePhone](https://ddwiki.reso.org/display/DDW17/CoListAgentMobilePhone+Field)
    #[serde(
        rename = "CoListAgentMobilePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_mobile_phone: Option<String>,

    /// Prefix to the name (e.g. Dr. Mr. Ms. etc.)
    ///
    /// [CoListAgentNamePrefix](https://ddwiki.reso.org/display/DDW17/CoListAgentNamePrefix+Field)
    #[serde(
        rename = "CoListAgentNamePrefix",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_name_prefix: Option<String>,

    /// Suffix to the CoListAgentLastName (e.g. Esq., Jr., III etc.)
    ///
    /// [CoListAgentNameSuffix](https://ddwiki.reso.org/display/DDW17/CoListAgentNameSuffix+Field)
    #[serde(
        rename = "CoListAgentNameSuffix",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_name_suffix: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoListAgentOfficePhone](https://ddwiki.reso.org/display/DDW17/CoListAgentOfficePhone+Field)
    #[serde(
        rename = "CoListAgentOfficePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_office_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [CoListAgentOfficePhoneExt](https://ddwiki.reso.org/display/DDW17/CoListAgentOfficePhoneExt+Field)
    #[serde(
        rename = "CoListAgentOfficePhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_office_phone_ext: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoListAgentPager](https://ddwiki.reso.org/display/DDW17/CoListAgentPager+Field)
    #[serde(rename = "CoListAgentPager", skip_serializing_if = "Option::is_none")]
    pub co_list_agent_pager: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoListAgentPreferredPhone](https://ddwiki.reso.org/display/DDW17/CoListAgentPreferredPhone+Field)
    #[serde(
        rename = "CoListAgentPreferredPhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_preferred_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [CoListAgentPreferredPhoneExt](https://ddwiki.reso.org/display/DDW17/CoListAgentPreferredPhoneExt+Field)
    #[serde(
        rename = "CoListAgentPreferredPhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_preferred_phone_ext: Option<String>,

    /// The license of the co-listing agent. Separate multiple licenses with a comma and space.
    ///
    /// [CoListAgentStateLicense](https://ddwiki.reso.org/display/DDW17/CoListAgentStateLicense+Field)
    #[serde(
        rename = "CoListAgentStateLicense",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_state_license: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoListAgentTollFreePhone](https://ddwiki.reso.org/display/DDW17/CoListAgentTollFreePhone+Field)
    #[serde(
        rename = "CoListAgentTollFreePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_toll_free_phone: Option<String>,

    /// The website URI of the co-listing agent.
    ///
    /// [CoListAgentURL](https://ddwiki.reso.org/display/DDW17/CoListAgentURL+Field)
    #[serde(rename = "CoListAgentURL", skip_serializing_if = "Option::is_none")]
    pub co_list_agent_url: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [CoListAgentVoiceMail](https://ddwiki.reso.org/display/DDW17/CoListAgentVoiceMail+Field)
    #[serde(
        rename = "CoListAgentVoiceMail",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_voice_mail: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [CoListAgentVoiceMailExt](https://ddwiki.reso.org/display/DDW17/CoListAgentVoiceMailExt+Field)
    #[serde(
        rename = "CoListAgentVoiceMailExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_agent_voice_mail_ext: Option<String>,

    /// The Co Listing Office's Board or Association of REALTORS.
    ///
    /// [CoListOfficeAOR](https://ddwiki.reso.org/display/DDW17/CoListOfficeAOR+Field)
    #[serde(rename = "CoListOfficeAOR", skip_serializing_if = "Option::is_none")]
    pub co_list_office_aor: Option<String>,

    /// The email address of the Co Listing Office.
    ///
    /// [CoListOfficeEmail](https://ddwiki.reso.org/display/DDW17/CoListOfficeEmail+Field)
    #[serde(rename = "CoListOfficeEmail", skip_serializing_if = "Option::is_none")]
    pub co_list_office_email: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [CoListOfficeFax](https://ddwiki.reso.org/display/DDW17/CoListOfficeFax+Field)
    #[serde(rename = "CoListOfficeFax", skip_serializing_if = "Option::is_none")]
    pub co_list_office_fax: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set.  This is a foreign key relating to the Office resource's OfficeKey.
    ///
    /// [CoListOfficeKey](https://ddwiki.reso.org/display/DDW17/CoListOfficeKey+Field)
    #[serde(rename = "CoListOfficeKey", skip_serializing_if = "Option::is_none")]
    pub co_list_office_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set.  This is a foreign key relating to the Office resource's OfficeKey.  This is the numeric only key and used as an alternative to the CoListOfficeKey field.
    ///
    /// [CoListOfficeKeyNumeric](https://ddwiki.reso.org/display/DDW17/CoListOfficeKeyNumeric+Field)
    #[serde(
        rename = "CoListOfficeKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_office_key_numeric: Option<f64>,

    /// The local, well-known identifier. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [CoListOfficeMlsId](https://ddwiki.reso.org/display/DDW17/CoListOfficeMlsId+Field)
    #[serde(rename = "CoListOfficeMlsId", skip_serializing_if = "Option::is_none")]
    pub co_list_office_mls_id: Option<String>,

    /// The legal name of the brokerage co-representing the seller.
    ///
    /// [CoListOfficeName](https://ddwiki.reso.org/display/DDW17/CoListOfficeName+Field)
    #[serde(rename = "CoListOfficeName", skip_serializing_if = "Option::is_none")]
    pub co_list_office_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [CoListOfficePhone](https://ddwiki.reso.org/display/DDW17/CoListOfficePhone+Field)
    #[serde(rename = "CoListOfficePhone", skip_serializing_if = "Option::is_none")]
    pub co_list_office_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [CoListOfficePhoneExt](https://ddwiki.reso.org/display/DDW17/CoListOfficePhoneExt+Field)
    #[serde(
        rename = "CoListOfficePhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub co_list_office_phone_ext: Option<String>,

    /// The website URI for the co-listing office.
    ///
    /// [CoListOfficeURL](https://ddwiki.reso.org/display/DDW17/CoListOfficeURL+Field)
    #[serde(rename = "CoListOfficeURL", skip_serializing_if = "Option::is_none")]
    pub co_list_office_url: Option<String>,

    /// Common Interest is a type of ownership in a property that is composed of an individual lot or  unit and a share of the ownership or use of common areas. A Common Interest Development (CID) is usually governed by a recorded set of Covenants, Conditions & Restrictions (CC&Rs).
    ///
    /// [CommonInterest](https://ddwiki.reso.org/display/DDW17/CommonInterest+Field)
    #[serde(rename = "CommonInterest", skip_serializing_if = "Option::is_none")]
    pub common_interest: Option<CommonInterest>,

    /// A multi select list with options like 1 Common Wall, 2 Common Walls, No Common Walls, No One Above, No One Below. Implementation should include rules preventing illogical selection combinations and to ensure consistency with the Property Attached Y/N field.
    ///
    /// [CommonWalls](https://ddwiki.reso.org/display/DDW17/CommonWalls+Field)
    #[serde(rename = "CommonWalls", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_common_walls_format")]
    pub common_walls: Option<Vec<CommonWalls>>,

    /// A list of features related to, or available within, the community.
    ///
    /// [CommunityFeatures](https://ddwiki.reso.org/display/DDW17/CommunityFeatures+Field)
    #[serde(rename = "CommunityFeatures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_community_features_format")]
    pub community_features: Option<Vec<CommunityFeatures>>,

    /// Are there concessions included in the sales agreement? Yes, No or Call Listing Agent
    ///
    /// [Concessions](https://ddwiki.reso.org/display/DDW17/Concessions+Field)
    #[serde(rename = "Concessions", skip_serializing_if = "Option::is_none")]
    pub concessions: Option<Concessions>,

    /// The dollar amount of the concessions.  If the concessions are made by the seller, some may subtract this value from the sales price as a means of calculating their own true price.  If concessions are made by the buyer, some may add this amount to the sale price to create their own true price.  Concessions made by both buyer and seller should be subtracted from each other providing a net value.  Details of this calculation should be added to the Concessions Comments field.
    ///
    /// [ConcessionsAmount](https://ddwiki.reso.org/display/DDW17/ConcessionsAmount+Field)
    #[serde(rename = "ConcessionsAmount", skip_serializing_if = "Option::is_none")]
    pub concessions_amount: Option<f64>,

    /// Comments describing the concessions made by the buyer or the seller.
    ///
    /// [ConcessionsComments](https://ddwiki.reso.org/display/DDW17/ConcessionsComments+Field)
    #[serde(
        rename = "ConcessionsComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub concessions_comments: Option<String>,

    /// A list of the materials that were used in the construction of the property.
    ///
    /// [ConstructionMaterials](https://ddwiki.reso.org/display/DDW17/ConstructionMaterials+Field)
    #[serde(
        rename = "ConstructionMaterials",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_construction_materials_format")]
    pub construction_materials: Option<Vec<ConstructionMaterials>>,

    /// A sub-section or area of a continent.  Examples would be Southern Europe or Scandinavia.
    ///
    /// [ContinentRegion](https://ddwiki.reso.org/display/DDW17/ContinentRegion+Field)
    #[serde(rename = "ContinentRegion", skip_serializing_if = "Option::is_none")]
    pub continent_region: Option<String>,

    /// A list of contingencies that must be satisfied in order to complete the transaction.
    ///
    /// [Contingency](https://ddwiki.reso.org/display/DDW17/Contingency+Field)
    #[serde(rename = "Contingency", skip_serializing_if = "Option::is_none")]
    pub contingency: Option<String>,

    /// The date an offer was made with a contingency. The Listing remains On Market.  This is the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS.
    ///
    /// [ContingentDate](https://ddwiki.reso.org/display/DDW17/ContingentDate+Field)
    #[serde(rename = "ContingentDate", skip_serializing_if = "Option::is_none")]
    pub contingent_date: Option<chrono::NaiveDate>,

    /// The date of the listings contractual status change. This is not necessarily the time the agent made the change in the MLS system, but rather the date of the contractual change.
    ///
    /// [ContractStatusChangeDate](https://ddwiki.reso.org/display/DDW17/ContractStatusChangeDate+Field)
    #[serde(
        rename = "ContractStatusChangeDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub contract_status_change_date: Option<chrono::NaiveDate>,

    /// A list describing the cooling or air conditioning features of the property.
    ///
    /// [Cooling](https://ddwiki.reso.org/display/DDW17/Cooling+Field)
    #[serde(rename = "Cooling", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_cooling_format")]
    pub cooling: Option<Vec<Cooling>>,

    /// The property has cooling or Air Conditioning.
    ///
    /// [CoolingYN](https://ddwiki.reso.org/display/DDW17/CoolingYN+Field)
    #[serde(rename = "CoolingYN", skip_serializing_if = "Option::is_none")]
    pub cooling_yn: Option<bool>,

    /// Notice of the legal rights of the owner of the information or data.
    ///
    /// [CopyrightNotice](https://ddwiki.reso.org/display/DDW17/CopyrightNotice+Field)
    #[serde(rename = "CopyrightNotice", skip_serializing_if = "Option::is_none")]
    pub copyright_notice: Option<String>,

    /// The country abbreviation in a postal address.
    ///
    /// [Country](https://ddwiki.reso.org/display/DDW17/Country+Field)
    #[serde(rename = "Country", skip_serializing_if = "Option::is_none")]
    pub country: Option<Country>,

    /// A sub-section or area of a defined country.  Examples would be Napa Valley in the US, or the Amalfi Coast in Italy.
    ///
    /// [CountryRegion](https://ddwiki.reso.org/display/DDW17/CountryRegion+Field)
    #[serde(rename = "CountryRegion", skip_serializing_if = "Option::is_none")]
    pub country_region: Option<String>,

    /// The County, Parish or other regional authority
    ///
    /// [CountyOrParish](https://ddwiki.reso.org/display/DDW17/CountyOrParish+Field)
    #[serde(rename = "CountyOrParish", skip_serializing_if = "Option::is_none")]
    pub county_or_parish: Option<String>,

    /// The total number of garage and carport spaces.
    ///
    /// [CoveredSpaces](https://ddwiki.reso.org/display/DDW17/CoveredSpaces+Field)
    #[serde(rename = "CoveredSpaces", skip_serializing_if = "Option::is_none")]
    pub covered_spaces: Option<f64>,

    /// Are crops included in the sale of the property.
    ///
    /// [CropsIncludedYN](https://ddwiki.reso.org/display/DDW17/CropsIncludedYN+Field)
    #[serde(rename = "CropsIncludedYN", skip_serializing_if = "Option::is_none")]
    pub crops_included_yn: Option<bool>,

    /// Nearest cross streets to the property. This field is in addition to, and independent of, the driving directions field.
    ///
    /// [CrossStreet](https://ddwiki.reso.org/display/DDW17/CrossStreet+Field)
    #[serde(rename = "CrossStreet", skip_serializing_if = "Option::is_none")]
    pub cross_street: Option<String>,

    /// Measurement or percentage of the property that has been cultivated.
    ///
    /// [CultivatedArea](https://ddwiki.reso.org/display/DDW17/CultivatedArea+Field)
    #[serde(rename = "CultivatedArea", skip_serializing_if = "Option::is_none")]
    pub cultivated_area: Option<f64>,

    /// The number of days the property is on market, as defined by the MLS business rules.
    ///
    /// [CumulativeDaysOnMarket](https://ddwiki.reso.org/display/DDW17/CumulativeDaysOnMarket+Field)
    #[serde(
        rename = "CumulativeDaysOnMarket",
        skip_serializing_if = "Option::is_none"
    )]
    pub cumulative_days_on_market: Option<f64>,

    /// A list of options that describe the type of financing that the seller currently has in place for the property being sold.  i.e. cash, assumable, FHA loan, etc.
    ///
    /// [CurrentFinancing](https://ddwiki.reso.org/display/DDW17/CurrentFinancing+Field)
    #[serde(rename = "CurrentFinancing", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_current_financing_format")]
    pub current_financing: Option<Vec<CurrentFinancing>>,

    /// A list of the type(s) of current use of the property. The current use of the property is an important factor in understanding the overall condition of the land and determining it's appropriateness for intended use.
    ///
    /// [CurrentUse](https://ddwiki.reso.org/display/DDW17/CurrentUse+Field)
    #[serde(rename = "CurrentUse", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_current_use_format")]
    pub current_use: Option<Vec<CurrentUse>>,

    /// Department of Housing decal number for the mobile or manufactured home.  For the first or only unit/section use DOH 1 over DOH 2 or 3.
    ///
    /// [DOH1](https://ddwiki.reso.org/display/DDW17/DOH1+Field)
    #[serde(rename = "DOH1", skip_serializing_if = "Option::is_none")]
    pub doh1: Option<String>,

    /// Department of Housing decal number for the mobile or manufactured home.  For two units/sections use DOH 1 and 2 over DOH 3.
    ///
    /// [DOH2](https://ddwiki.reso.org/display/DDW17/DOH2+Field)
    #[serde(rename = "DOH2", skip_serializing_if = "Option::is_none")]
    pub doh2: Option<String>,

    /// Department of Housing decal number for the mobile or manufactured home.  For two units/sections use DOH 1 and 2 over DOH 3.
    ///
    /// [DOH3](https://ddwiki.reso.org/display/DDW17/DOH3+Field)
    #[serde(rename = "DOH3", skip_serializing_if = "Option::is_none")]
    pub doh3: Option<String>,

    /// The number of days the listing is on market, as defined by the MLS business rules.
    ///
    /// [DaysOnMarket](https://ddwiki.reso.org/display/DDW17/DaysOnMarket+Field)
    #[serde(rename = "DaysOnMarket", skip_serializing_if = "Option::is_none")]
    pub days_on_market: Option<f64>,

    /// A list of the Development Status of the property. The developmental status of land is an important factor in selling, purchasing and developing of land properties.
    ///
    /// [DevelopmentStatus](https://ddwiki.reso.org/display/DDW17/DevelopmentStatus+Field)
    #[serde(rename = "DevelopmentStatus", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_development_status_format")]
    pub development_status: Option<Vec<DevelopmentStatus>>,

    /// The compass direction that the main entrance to the building faces. For example, North, South, East, West, South-West, etc. It may also be known as the building exposure.
    ///
    /// [DirectionFaces](https://ddwiki.reso.org/display/DDW17/DirectionFaces+Field)
    #[serde(rename = "DirectionFaces", skip_serializing_if = "Option::is_none")]
    pub direction_faces: Option<DirectionFaces>,

    /// Driving directions to the property.
    ///
    /// [Directions](https://ddwiki.reso.org/display/DDW17/Directions+Field)
    #[serde(rename = "Directions", skip_serializing_if = "Option::is_none")]
    pub directions: Option<String>,

    /// Text that serves as the negation or limitation of the rights under a warranty given by a seller to a buyer.
    ///
    /// [Disclaimer](https://ddwiki.reso.org/display/DDW17/Disclaimer+Field)
    #[serde(rename = "Disclaimer", skip_serializing_if = "Option::is_none")]
    pub disclaimer: Option<String>,

    /// Legal or pertinent information that should be disclosed to potential buyer's agents.
    ///
    /// [Disclosures](https://ddwiki.reso.org/display/DDW17/Disclosures+Field)
    #[serde(rename = "Disclosures", skip_serializing_if = "Option::is_none")]
    pub disclosures: Option<String>,

    /// A textual description of the distance to local bus stops.
    ///
    /// [DistanceToBusComments](https://ddwiki.reso.org/display/DDW17/DistanceToBusComments+Field)
    #[serde(
        rename = "DistanceToBusComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_bus_comments: Option<String>,

    /// Numeric distance from the property to the nearest bus stop.
    ///
    /// [DistanceToBusNumeric](https://ddwiki.reso.org/display/DDW17/DistanceToBusNumeric+Field)
    #[serde(
        rename = "DistanceToBusNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_bus_numeric: Option<f64>,

    /// A pick list of the unit linear measurement. i.e. feed, meters, yards, kilometers, miles, etc.
    ///
    /// [DistanceToBusUnits](https://ddwiki.reso.org/display/DDW17/DistanceToBusUnits+Field)
    #[serde(rename = "DistanceToBusUnits", skip_serializing_if = "Option::is_none")]
    pub distance_to_bus_units: Option<LinearUnits>,

    /// If the property does not currently have electrical utility, is service available and if so, what is the distance.
    ///
    /// [DistanceToElectricComments](https://ddwiki.reso.org/display/DDW17/DistanceToElectricComments+Field)
    #[serde(
        rename = "DistanceToElectricComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_electric_comments: Option<String>,

    /// Numeric distance from the property to the electrical utility.
    ///
    /// [DistanceToElectricNumeric](https://ddwiki.reso.org/display/DDW17/DistanceToElectricNumeric+Field)
    #[serde(
        rename = "DistanceToElectricNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_electric_numeric: Option<f64>,

    /// A pick list of the unit linear measurement.  i.e. feed, meters, yards, kilometers, miles, etc.
    ///
    /// [DistanceToElectricUnits](https://ddwiki.reso.org/display/DDW17/DistanceToElectricUnits+Field)
    #[serde(
        rename = "DistanceToElectricUnits",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_electric_units: Option<LinearUnits>,

    /// A textual description of the distance to freeways.
    ///
    /// [DistanceToFreewayComments](https://ddwiki.reso.org/display/DDW17/DistanceToFreewayComments+Field)
    #[serde(
        rename = "DistanceToFreewayComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_freeway_comments: Option<String>,

    /// Numeric distance from the property to the nearest freeway.
    ///
    /// [DistanceToFreewayNumeric](https://ddwiki.reso.org/display/DDW17/DistanceToFreewayNumeric+Field)
    #[serde(
        rename = "DistanceToFreewayNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_freeway_numeric: Option<f64>,

    /// A pick list of the unit linear measurement.  i.e. feed, meters, yards, kilometers, miles, etc.
    ///
    /// [DistanceToFreewayUnits](https://ddwiki.reso.org/display/DDW17/DistanceToFreewayUnits+Field)
    #[serde(
        rename = "DistanceToFreewayUnits",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_freeway_units: Option<LinearUnits>,

    /// If the property does not currently have natural gas utility, is service available and if so, what is the distance.
    ///
    /// [DistanceToGasComments](https://ddwiki.reso.org/display/DDW17/DistanceToGasComments+Field)
    #[serde(
        rename = "DistanceToGasComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_gas_comments: Option<String>,

    /// Numeric distance from the property to the gas utility.
    ///
    /// [DistanceToGasNumeric](https://ddwiki.reso.org/display/DDW17/DistanceToGasNumeric+Field)
    #[serde(
        rename = "DistanceToGasNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_gas_numeric: Option<f64>,

    /// A pick list of the unit linear measurement.  i.e. feed, meters, yards, kilometers, miles, etc.
    ///
    /// [DistanceToGasUnits](https://ddwiki.reso.org/display/DDW17/DistanceToGasUnits+Field)
    #[serde(rename = "DistanceToGasUnits", skip_serializing_if = "Option::is_none")]
    pub distance_to_gas_units: Option<LinearUnits>,

    /// If the property does not currently have phone service, is service available and if so, what is the distance.
    ///
    /// [DistanceToPhoneServiceComments](https://ddwiki.reso.org/display/DDW17/DistanceToPhoneServiceComments+Field)
    #[serde(
        rename = "DistanceToPhoneServiceComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_phone_service_comments: Option<String>,

    /// Numeric distance from the property to the phone utility.
    ///
    /// [DistanceToPhoneServiceNumeric](https://ddwiki.reso.org/display/DDW17/DistanceToPhoneServiceNumeric+Field)
    #[serde(
        rename = "DistanceToPhoneServiceNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_phone_service_numeric: Option<f64>,

    /// A pick list of the unit linear measurement. i.e. feet, meters, yards, kilometers, miles, etc.
    ///
    /// [DistanceToPhoneServiceUnits](https://ddwiki.reso.org/display/DDW17/DistanceToPhoneServiceUnits+Field)
    #[serde(
        rename = "DistanceToPhoneServiceUnits",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_phone_service_units: Option<LinearUnits>,

    /// A textual description of the distance to local places of worship.
    ///
    /// [DistanceToPlaceofWorshipComments](https://ddwiki.reso.org/display/DDW17/DistanceToPlaceofWorshipComments+Field)
    #[serde(
        rename = "DistanceToPlaceofWorshipComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_placeof_worship_comments: Option<String>,

    /// Numeric distance from the property to the nearest place of worship.
    ///
    /// [DistanceToPlaceofWorshipNumeric](https://ddwiki.reso.org/display/DDW17/DistanceToPlaceofWorshipNumeric+Field)
    #[serde(
        rename = "DistanceToPlaceofWorshipNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_placeof_worship_numeric: Option<f64>,

    /// A pick list of the unit linear measurement.  i.e. feed, meters, yards, kilometers, miles, etc.
    ///
    /// [DistanceToPlaceofWorshipUnits](https://ddwiki.reso.org/display/DDW17/DistanceToPlaceofWorshipUnits+Field)
    #[serde(
        rename = "DistanceToPlaceofWorshipUnits",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_placeof_worship_units: Option<LinearUnits>,

    /// Distance from the property to the nearest school bus pickup point.
    ///
    /// [DistanceToSchoolBusComments](https://ddwiki.reso.org/display/DDW17/DistanceToSchoolBusComments+Field)
    #[serde(
        rename = "DistanceToSchoolBusComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_school_bus_comments: Option<String>,

    /// Numeric distance from the property to the nearest school bus pickup point.
    ///
    /// [DistanceToSchoolBusNumeric](https://ddwiki.reso.org/display/DDW17/DistanceToSchoolBusNumeric+Field)
    #[serde(
        rename = "DistanceToSchoolBusNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_school_bus_numeric: Option<f64>,

    /// A pick list of the unit linear measurement.  i.e. feed, meters, yards, kilometers, miles, etc.
    ///
    /// [DistanceToSchoolBusUnits](https://ddwiki.reso.org/display/DDW17/DistanceToSchoolBusUnits+Field)
    #[serde(
        rename = "DistanceToSchoolBusUnits",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_school_bus_units: Option<LinearUnits>,

    /// A textual description of the distance to local schools.
    ///
    /// [DistanceToSchoolsComments](https://ddwiki.reso.org/display/DDW17/DistanceToSchoolsComments+Field)
    #[serde(
        rename = "DistanceToSchoolsComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_schools_comments: Option<String>,

    /// Numeric distance from the property to the nearest school.
    ///
    /// [DistanceToSchoolsNumeric](https://ddwiki.reso.org/display/DDW17/DistanceToSchoolsNumeric+Field)
    #[serde(
        rename = "DistanceToSchoolsNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_schools_numeric: Option<f64>,

    /// A pick list of the unit linear measurement.  i.e. feed, meters, yards, kilometers, miles, etc.
    ///
    /// [DistanceToSchoolsUnits](https://ddwiki.reso.org/display/DDW17/DistanceToSchoolsUnits+Field)
    #[serde(
        rename = "DistanceToSchoolsUnits",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_schools_units: Option<LinearUnits>,

    /// If the property does not currently have sewer or septic, is sewer service available and if so, what is the distance.
    ///
    /// [DistanceToSewerComments](https://ddwiki.reso.org/display/DDW17/DistanceToSewerComments+Field)
    #[serde(
        rename = "DistanceToSewerComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_sewer_comments: Option<String>,

    /// Numeric distance from the property to the sewer utility.
    ///
    /// [DistanceToSewerNumeric](https://ddwiki.reso.org/display/DDW17/DistanceToSewerNumeric+Field)
    #[serde(
        rename = "DistanceToSewerNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_sewer_numeric: Option<f64>,

    /// A pick list of the unit linear measurement.  i.e. feed, meters, yards, kilometers, miles, etc.
    ///
    /// [DistanceToSewerUnits](https://ddwiki.reso.org/display/DDW17/DistanceToSewerUnits+Field)
    #[serde(
        rename = "DistanceToSewerUnits",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_sewer_units: Option<LinearUnits>,

    /// A description of the distance to primary shopping sources such as groceries, gasoline, clothing or department stores.
    ///
    /// [DistanceToShoppingComments](https://ddwiki.reso.org/display/DDW17/DistanceToShoppingComments+Field)
    #[serde(
        rename = "DistanceToShoppingComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_shopping_comments: Option<String>,

    /// Numeric distance from the property to the nearest shopping.
    ///
    /// [DistanceToShoppingNumeric](https://ddwiki.reso.org/display/DDW17/DistanceToShoppingNumeric+Field)
    #[serde(
        rename = "DistanceToShoppingNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_shopping_numeric: Option<f64>,

    /// A pick list of the unit linear measurement.  i.e. feed, meters, yards, kilometers, miles, etc.
    ///
    /// [DistanceToShoppingUnits](https://ddwiki.reso.org/display/DDW17/DistanceToShoppingUnits+Field)
    #[serde(
        rename = "DistanceToShoppingUnits",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_shopping_units: Option<LinearUnits>,

    /// If the property does not have a maintained road or street adjacent to the lot, what are the conditions of access and distance to a maintained road.
    ///
    /// [DistanceToStreetComments](https://ddwiki.reso.org/display/DDW17/DistanceToStreetComments+Field)
    #[serde(
        rename = "DistanceToStreetComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_street_comments: Option<String>,

    /// Numeric distance from the property to the street.
    ///
    /// [DistanceToStreetNumeric](https://ddwiki.reso.org/display/DDW17/DistanceToStreetNumeric+Field)
    #[serde(
        rename = "DistanceToStreetNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_street_numeric: Option<f64>,

    /// A pick list of the unit linear measurement.  i.e. feed, meters, yards, kilometers, miles, etc.
    ///
    /// [DistanceToStreetUnits](https://ddwiki.reso.org/display/DDW17/DistanceToStreetUnits+Field)
    #[serde(
        rename = "DistanceToStreetUnits",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_street_units: Option<LinearUnits>,

    /// If the property does not currently have water utility, is service available and if so, what is the distance.
    ///
    /// [DistanceToWaterComments](https://ddwiki.reso.org/display/DDW17/DistanceToWaterComments+Field)
    #[serde(
        rename = "DistanceToWaterComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_water_comments: Option<String>,

    /// Numeric distance from the property to the water utility.
    ///
    /// [DistanceToWaterNumeric](https://ddwiki.reso.org/display/DDW17/DistanceToWaterNumeric+Field)
    #[serde(
        rename = "DistanceToWaterNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_water_numeric: Option<f64>,

    /// A pick list of the unit linear measurement.  i.e. feed, meters, yards, kilometers, miles, etc.
    ///
    /// [DistanceToWaterUnits](https://ddwiki.reso.org/display/DDW17/DistanceToWaterUnits+Field)
    #[serde(
        rename = "DistanceToWaterUnits",
        skip_serializing_if = "Option::is_none"
    )]
    pub distance_to_water_units: Option<LinearUnits>,

    /// A list of the Documents available for the property.  Knowing what documents are available for the property is valuable information.
    ///
    /// [DocumentsAvailable](https://ddwiki.reso.org/display/DDW17/DocumentsAvailable+Field)
    #[serde(rename = "DocumentsAvailable", skip_serializing_if = "Option::is_none")]
    pub documents_available: Option<String>,

    /// System generated timestamp of when the last update or change to the documents for this listing was made.
    ///
    /// [DocumentsChangeTimestamp](https://ddwiki.reso.org/display/DDW17/DocumentsChangeTimestamp+Field)
    #[serde(
        rename = "DocumentsChangeTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub documents_change_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The total number of documents or supplements included with the listings.
    ///
    /// [DocumentsCount](https://ddwiki.reso.org/display/DDW17/DocumentsCount+Field)
    #[serde(rename = "DocumentsCount", skip_serializing_if = "Option::is_none")]
    pub documents_count: Option<f64>,

    /// A list of features or description of the doors included in the sale/lease.
    ///
    /// [DoorFeatures](https://ddwiki.reso.org/display/DDW17/DoorFeatures+Field)
    #[serde(rename = "DoorFeatures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_door_features_format")]
    pub door_features: Option<Vec<DoorFeatures>>,

    /// A commission arrangement in which the seller agrees to pay a specified commission to the listing broker if the property is sold through the efforts of a cooperating broker, but the seller pays the Listing broker a different commission amount if the sale occurs if:1) there is no cooperating broker involved or 2) due to the efforts of the seller directly.
    ///
    /// [DualVariableCompensationYN](https://ddwiki.reso.org/display/DDW17/DualVariableCompensationYN+Field)
    #[serde(
        rename = "DualVariableCompensationYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub dual_variable_compensation_yn: Option<bool>,

    /// A list of electric-service related features of the property (e.g. 110 Volt, 3 Phase, 220 Volt, RV Hookup). Note: the previous "Electric" field was renamed to DistanceToElectricComments
    ///
    /// [Electric](https://ddwiki.reso.org/display/DDW17/Electric+Field)
    #[serde(rename = "Electric", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_electric_format")]
    pub electric: Option<Vec<Electric>>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [ElectricExpense](https://ddwiki.reso.org/display/DDW17/ElectricExpense+Field)
    #[serde(rename = "ElectricExpense", skip_serializing_if = "Option::is_none")]
    pub electric_expense: Option<f64>,

    /// Does the property currently have electrical utility available on the property.
    ///
    /// [ElectricOnPropertyYN](https://ddwiki.reso.org/display/DDW17/ElectricOnPropertyYN+Field)
    #[serde(
        rename = "ElectricOnPropertyYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub electric_on_property_yn: Option<bool>,

    /// The name of the primary school having a catchment area that includes the associated property.
    ///
    /// [ElementarySchool](https://ddwiki.reso.org/display/DDW17/ElementarySchool+Field)
    #[serde(rename = "ElementarySchool", skip_serializing_if = "Option::is_none")]
    pub elementary_school: Option<String>,

    /// The name of the elementary school district having a catchment area that includes the associated property.
    ///
    /// [ElementarySchoolDistrict](https://ddwiki.reso.org/display/DDW17/ElementarySchoolDistrict+Field)
    #[serde(
        rename = "ElementarySchoolDistrict",
        skip_serializing_if = "Option::is_none"
    )]
    pub elementary_school_district: Option<String>,

    /// The elevation of the property in relation to sea level.  Use the Elevation Units field to communicate the unit of measurement.  i.e. Feet or Meters.
    ///
    /// [Elevation](https://ddwiki.reso.org/display/DDW17/Elevation+Field)
    #[serde(rename = "Elevation", skip_serializing_if = "Option::is_none")]
    pub elevation: Option<f64>,

    /// A pick list of the unit of measurement used in the Elevation field.  i.e. Feet, Meters.
    ///
    /// [ElevationUnits](https://ddwiki.reso.org/display/DDW17/ElevationUnits+Field)
    #[serde(rename = "ElevationUnits", skip_serializing_if = "Option::is_none")]
    pub elevation_units: Option<LinearUnits>,

    /// A numeric field that describes the level within the structure, SFR or a unit in a building, where the main entry to the dwelling is located. When a unit has one floor it is implicit that this is also the level of the unit itself.
    ///
    /// [EntryLevel](https://ddwiki.reso.org/display/DDW17/EntryLevel+Field)
    #[serde(rename = "EntryLevel", skip_serializing_if = "Option::is_none")]
    pub entry_level: Option<f64>,

    /// A description of the main entry way to the property. i.e. Elevator, Ground Level w/ Steps, Ground Level w/o Steps, Mid Level, Top Level, etc.
    ///
    /// [EntryLocation](https://ddwiki.reso.org/display/DDW17/EntryLocation+Field)
    #[serde(rename = "EntryLocation", skip_serializing_if = "Option::is_none")]
    pub entry_location: Option<String>,

    /// Elements of the property that will not be included in the sale.  i.e. Chandeliers will be removed prior to close.
    ///
    /// [Exclusions](https://ddwiki.reso.org/display/DDW17/Exclusions+Field)
    #[serde(rename = "Exclusions", skip_serializing_if = "Option::is_none")]
    pub exclusions: Option<String>,

    /// Information about the status of the existing lease on the property.  i.e. Net, NNN, NN, Gross, Absolute Net, Escalation Clause, Ground Lease, etc.
    ///
    /// [ExistingLeaseType](https://ddwiki.reso.org/display/DDW17/ExistingLeaseType+Field)
    #[serde(rename = "ExistingLeaseType", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_existing_lease_type_format")]
    pub existing_lease_type: Option<Vec<ExistingLeaseType>>,

    /// The date when the listing agreement will expire.  This is the date entered by the agent reflecting when the change occurred, or will occur, contractually, not a timestamp of when the change was made in the MLS.  The expiration date of listings, prior to their expiration, cancellation, sale or lease, is confidential information and should be restricted to the agent and their managers, partners or broker.
    ///
    /// [ExpirationDate](https://ddwiki.reso.org/display/DDW17/ExpirationDate+Field)
    #[serde(rename = "ExpirationDate", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<chrono::NaiveDate>,

    /// A list of features or description of the exterior of the property included in the sale/lease.
    ///
    /// [ExteriorFeatures](https://ddwiki.reso.org/display/DDW17/ExteriorFeatures+Field)
    #[serde(rename = "ExteriorFeatures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_exterior_features_format")]
    pub exterior_features: Option<Vec<ExteriorFeatures>>,

    /// Specifies whether or not Farm Credit Service shares are included in the price of the property.
    ///
    /// [FarmCreditServiceInclYN](https://ddwiki.reso.org/display/DDW17/FarmCreditServiceInclYN+Field)
    #[serde(
        rename = "FarmCreditServiceInclYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub farm_credit_service_incl_yn: Option<bool>,

    /// The source of the measurements. This may be a pick list of options showing the source of the measurement. i.e. Agent, Assessor, Estimate, etc. This field applies to all farm area fields (Cultivated, Pasture, Range, Wooded)
    ///
    /// [FarmLandAreaSource](https://ddwiki.reso.org/display/DDW17/FarmLandAreaSource+Field)
    #[serde(rename = "FarmLandAreaSource", skip_serializing_if = "Option::is_none")]
    pub farm_land_area_source: Option<AreaSource>,

    /// A pick list of the unit of measurement for the area.  i.e. Square Feet, Square Meters, Acres, etc.  This field applies to all farm area fields (Cultivated, Pasture, Range, Wooded)
    ///
    /// [FarmLandAreaUnits](https://ddwiki.reso.org/display/DDW17/FarmLandAreaUnits+Field)
    #[serde(rename = "FarmLandAreaUnits", skip_serializing_if = "Option::is_none")]
    pub farm_land_area_units: Option<AreaUnits>,

    /// A list of types of fencing found at the property being sold.
    ///
    /// [Fencing](https://ddwiki.reso.org/display/DDW17/Fencing+Field)
    #[serde(rename = "Fencing", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_fencing_format")]
    pub fencing: Option<Vec<Fencing>>,

    /// The source of the Rental information. For example Accountant, Owner, etc.
    ///
    /// [FinancialDataSource](https://ddwiki.reso.org/display/DDW17/FinancialDataSource+Field)
    #[serde(
        rename = "FinancialDataSource",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_financial_data_source_format")]
    pub financial_data_source: Option<Vec<FinancialDataSource>>,

    /// A list of features or description of the fireplace(s) included in the sale/lease.
    ///
    /// [FireplaceFeatures](https://ddwiki.reso.org/display/DDW17/FireplaceFeatures+Field)
    #[serde(rename = "FireplaceFeatures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_fireplace_features_format")]
    pub fireplace_features: Option<Vec<FireplaceFeatures>>,

    /// Does the property include a fireplace.
    ///
    /// [FireplaceYN](https://ddwiki.reso.org/display/DDW17/FireplaceYN+Field)
    #[serde(rename = "FireplaceYN", skip_serializing_if = "Option::is_none")]
    pub fireplace_yn: Option<bool>,

    /// The total number of fireplaces included in the property.
    ///
    /// [FireplacesTotal](https://ddwiki.reso.org/display/DDW17/FireplacesTotal+Field)
    #[serde(rename = "FireplacesTotal", skip_serializing_if = "Option::is_none")]
    pub fireplaces_total: Option<f64>,

    /// A list of the type(s) of flooring found within the property.
    ///
    /// [Flooring](https://ddwiki.reso.org/display/DDW17/Flooring+Field)
    #[serde(rename = "Flooring", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_flooring_format")]
    pub flooring: Option<Vec<Flooring>>,

    /// The area or dimensions of the footprint of the structure on the lot.
    ///
    /// [FoundationArea](https://ddwiki.reso.org/display/DDW17/FoundationArea+Field)
    #[serde(rename = "FoundationArea", skip_serializing_if = "Option::is_none")]
    pub foundation_area: Option<f64>,

    /// A list of the type(s) of foundation on which the property sits.
    ///
    /// [FoundationDetails](https://ddwiki.reso.org/display/DDW17/FoundationDetails+Field)
    #[serde(rename = "FoundationDetails", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_foundation_details_format")]
    pub foundation_details: Option<Vec<FoundationDetails>>,

    /// Textual description of the length of the frontages selected in the Frontage Type field.
    ///
    /// [FrontageLength](https://ddwiki.reso.org/display/DDW17/FrontageLength+Field)
    #[serde(rename = "FrontageLength", skip_serializing_if = "Option::is_none")]
    pub frontage_length: Option<String>,

    /// Pick list of types of frontage. i.e. Oceanfront, Lakefront, Golf course, etc. Information about roads or road frontage should be located in the Road Frontage Type and Road Surface Type fields.
    ///
    /// [FrontageType](https://ddwiki.reso.org/display/DDW17/FrontageType+Field)
    #[serde(rename = "FrontageType", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_frontage_type_format")]
    pub frontage_type: Option<Vec<FrontageType>>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [FuelExpense](https://ddwiki.reso.org/display/DDW17/FuelExpense+Field)
    #[serde(rename = "FuelExpense", skip_serializing_if = "Option::is_none")]
    pub fuel_expense: Option<f64>,

    /// The property being leased is furnished, unfurnished or partially furnished.
    ///
    /// [Furnished](https://ddwiki.reso.org/display/DDW17/Furnished+Field)
    #[serde(rename = "Furnished", skip_serializing_if = "Option::is_none")]
    pub furnished: Option<Furnished>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [FurnitureReplacementExpense](https://ddwiki.reso.org/display/DDW17/FurnitureReplacementExpense+Field)
    #[serde(
        rename = "FurnitureReplacementExpense",
        skip_serializing_if = "Option::is_none"
    )]
    pub furniture_replacement_expense: Option<f64>,

    /// The number of spaces in the garage(s).
    ///
    /// [GarageSpaces](https://ddwiki.reso.org/display/DDW17/GarageSpaces+Field)
    #[serde(rename = "GarageSpaces", skip_serializing_if = "Option::is_none")]
    pub garage_spaces: Option<f64>,

    /// A flag indicating that the listing has a garage. This flag may be T/F, Y/N or other true, false or unknown indicator. As with all flags, the field may be null.
    ///
    /// [GarageYN](https://ddwiki.reso.org/display/DDW17/GarageYN+Field)
    #[serde(rename = "GarageYN", skip_serializing_if = "Option::is_none")]
    pub garage_yn: Option<bool>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [GardenerExpense](https://ddwiki.reso.org/display/DDW17/GardenerExpense+Field)
    #[serde(rename = "GardenerExpense", skip_serializing_if = "Option::is_none")]
    pub gardener_expense: Option<f64>,

    /// Specifies whether or not the property owner has grazing permits from the Bureau of Land Management.
    ///
    /// [GrazingPermitsBlmYN](https://ddwiki.reso.org/display/DDW17/GrazingPermitsBlmYN+Field)
    #[serde(
        rename = "GrazingPermitsBlmYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub grazing_permits_blm_yn: Option<bool>,

    /// Specifies whether or not the property owner has grazing permits from the Forestry Service.
    ///
    /// [GrazingPermitsForestServiceYN](https://ddwiki.reso.org/display/DDW17/GrazingPermitsForestServiceYN+Field)
    #[serde(
        rename = "GrazingPermitsForestServiceYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub grazing_permits_forest_service_yn: Option<bool>,

    /// Specifies whether or not the property owner has private grazing permits.
    ///
    /// [GrazingPermitsPrivateYN](https://ddwiki.reso.org/display/DDW17/GrazingPermitsPrivateYN+Field)
    #[serde(
        rename = "GrazingPermitsPrivateYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub grazing_permits_private_yn: Option<bool>,

    /// A collection of verifications or certifications awarded to a new or pre-existing residential or commercial structure. For example: LEED, Energy Star, ICC-700. The collection includes information about the type, year, rating and other details about the awarded performance verification.
    ///
    /// [GreenBuildingVerification](https://ddwiki.reso.org/display/DDW17/GreenBuildingVerification+Field)
    #[serde(
        rename = "GreenBuildingVerification",
        skip_serializing_if = "Option::is_none"
    )]
    pub green_building_verification: Option<String>,

    /// The name of the verification or certification awarded to a new or pre-existing residential or commercial structure. For example: LEED, Energy Star, ICC-700.  In cases where more than one certification have been awarded, leverage multiple iterations of the green verification fields via the repeating element method.
    ///
    /// [GreenBuildingVerificationType](https://ddwiki.reso.org/display/DDW17/GreenBuildingVerificationType+Field)
    #[serde(
        rename = "GreenBuildingVerificationType",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_green_building_verification_type_format")]
    pub green_building_verification_type: Option<Vec<GreenBuildingVerificationType>>,

    /// Pick list of general green attributes such as energy efficient doors, or appliances without naming specific elements with ratings that may wane over time.
    ///
    /// [GreenEnergyEfficient](https://ddwiki.reso.org/display/DDW17/GreenEnergyEfficient+Field)
    #[serde(
        rename = "GreenEnergyEfficient",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_green_energy_efficient_format")]
    pub green_energy_efficient: Option<Vec<GreenEnergyEfficient>>,

    /// Methods of generating power that are included in the sale or lease.
    ///
    /// [GreenEnergyGeneration](https://ddwiki.reso.org/display/DDW17/GreenEnergyGeneration+Field)
    #[serde(
        rename = "GreenEnergyGeneration",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_green_energy_generation_format")]
    pub green_energy_generation: Option<Vec<GreenEnergyGeneration>>,

    /// Pick list of indoor air quality measures without naming specific elements with ratings that may wane over time.
    ///
    /// [GreenIndoorAirQuality](https://ddwiki.reso.org/display/DDW17/GreenIndoorAirQuality+Field)
    #[serde(
        rename = "GreenIndoorAirQuality",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_green_indoor_air_quality_format")]
    pub green_indoor_air_quality: Option<Vec<GreenIndoorAirQuality>>,

    /// Pick list describing efficiencies involved with the property's location such as walkability or transportation proximity without naming specific elements with ratings that may wane over time.
    ///
    /// [GreenLocation](https://ddwiki.reso.org/display/DDW17/GreenLocation+Field)
    #[serde(rename = "GreenLocation", skip_serializing_if = "Option::is_none")]
    pub green_location: Option<String>,

    /// Pick list of sustainable elements used in the construction of the structure without naming specific elements with ratings that may wane over time.
    ///
    /// [GreenSustainability](https://ddwiki.reso.org/display/DDW17/GreenSustainability+Field)
    #[serde(
        rename = "GreenSustainability",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_green_sustainability_format")]
    pub green_sustainability: Option<Vec<GreenSustainability>>,

    /// Pick list of general water conserving attributes of the property such as landscaping or reclamation without naming specific elements with ratings that may wane over time.
    ///
    /// [GreenWaterConservation](https://ddwiki.reso.org/display/DDW17/GreenWaterConservation+Field)
    #[serde(
        rename = "GreenWaterConservation",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_green_water_conservation_format")]
    pub green_water_conservation: Option<Vec<GreenWaterConservation>>,

    /// The actual current income from rent and all other revenue generating sources.
    ///
    /// [GrossIncome](https://ddwiki.reso.org/display/DDW17/GrossIncome+Field)
    #[serde(rename = "GrossIncome", skip_serializing_if = "Option::is_none")]
    pub gross_income: Option<f64>,

    /// The maximum amount of annual rent collected if the property were 100% occupied all year and all tenants paid their rent.
    ///
    /// [GrossScheduledIncome](https://ddwiki.reso.org/display/DDW17/GrossScheduledIncome+Field)
    #[serde(
        rename = "GrossScheduledIncome",
        skip_serializing_if = "Option::is_none"
    )]
    pub gross_scheduled_income: Option<f64>,

    /// Does the property include a structure that can be lived in.
    ///
    /// [HabitableResidenceYN](https://ddwiki.reso.org/display/DDW17/HabitableResidenceYN+Field)
    #[serde(
        rename = "HabitableResidenceYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub habitable_residence_yn: Option<bool>,

    /// A list describing the heating features of the property.
    ///
    /// [Heating](https://ddwiki.reso.org/display/DDW17/Heating+Field)
    #[serde(rename = "Heating", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_heating_format")]
    pub heating: Option<Vec<Heating>>,

    /// The property has heating.
    ///
    /// [HeatingYN](https://ddwiki.reso.org/display/DDW17/HeatingYN+Field)
    #[serde(rename = "HeatingYN", skip_serializing_if = "Option::is_none")]
    pub heating_yn: Option<bool>,

    /// The name of the high school having a catchment area that includes the associated property.
    ///
    /// [HighSchool](https://ddwiki.reso.org/display/DDW17/HighSchool+Field)
    #[serde(rename = "HighSchool", skip_serializing_if = "Option::is_none")]
    pub high_school: Option<String>,

    /// The name of the high school district having a catchment area that includes the associated property.  When only one school district is used, this field should be used over the Junior or Elementary Districts.
    ///
    /// [HighSchoolDistrict](https://ddwiki.reso.org/display/DDW17/HighSchoolDistrict+Field)
    #[serde(rename = "HighSchoolDistrict", skip_serializing_if = "Option::is_none")]
    pub high_school_district: Option<String>,

    /// Is a home warranty included in the sale of the property? Single select.
    ///
    /// [HomeWarrantyYN](https://ddwiki.reso.org/display/DDW17/HomeWarrantyYN+Field)
    #[serde(rename = "HomeWarrantyYN", skip_serializing_if = "Option::is_none")]
    pub home_warranty_yn: Option<bool>,

    /// A list of horse amenities on the lot or in the community.
    ///
    /// [HorseAmenities](https://ddwiki.reso.org/display/DDW17/HorseAmenities+Field)
    #[serde(rename = "HorseAmenities", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_horse_amenities_format")]
    pub horse_amenities: Option<Vec<HorseAmenities>>,

    /// The Property is allowed to raise horses.
    ///
    /// [HorseYN](https://ddwiki.reso.org/display/DDW17/HorseYN+Field)
    #[serde(rename = "HorseYN", skip_serializing_if = "Option::is_none")]
    pub horse_yn: Option<bool>,

    /// A simplified enumerated list of the days and hours of operation of the business being sold. i.e. Open 24 Hours or Open 7 Days. For more detailed descriptions use the HoursDaysofOperationDescription field.
    ///
    /// [HoursDaysOfOperation](https://ddwiki.reso.org/display/DDW17/HoursDaysOfOperation+Field)
    #[serde(
        rename = "HoursDaysOfOperation",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_hours_days_of_operation_format")]
    pub hours_days_of_operation: Option<Vec<HoursDaysOfOperation>>,

    /// A detailed description of the hours and days the business being sold is open for business. For a specific list of simplified times the business is open, use the HoursDaysOfOperation Field (enumerated).
    ///
    /// [HoursDaysOfOperationDescription](https://ddwiki.reso.org/display/DDW17/HoursDaysOfOperationDescription+Field)
    #[serde(
        rename = "HoursDaysOfOperationDescription",
        skip_serializing_if = "Option::is_none"
    )]
    pub hours_days_of_operation_description: Option<String>,

    /// Portable elements of the property that will be included in the sale.
    ///
    /// [Inclusions](https://ddwiki.reso.org/display/DDW17/Inclusions+Field)
    #[serde(rename = "Inclusions", skip_serializing_if = "Option::is_none")]
    pub inclusions: Option<String>,

    /// A list of income sources included in the GrossScheduledIncome and GrossIncome.  i.e. Laundry, Parking, Recreation, Storage, etc.
    ///
    /// [IncomeIncludes](https://ddwiki.reso.org/display/DDW17/IncomeIncludes+Field)
    #[serde(rename = "IncomeIncludes", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_income_includes_format")]
    pub income_includes: Option<Vec<IncomeIncludes>>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [InsuranceExpense](https://ddwiki.reso.org/display/DDW17/InsuranceExpense+Field)
    #[serde(rename = "InsuranceExpense", skip_serializing_if = "Option::is_none")]
    pub insurance_expense: Option<f64>,

    /// A list of features or description of the interior of the property included in the sale/lease.
    ///
    /// [InteriorFeatures](https://ddwiki.reso.org/display/DDW17/InteriorFeatures+Field)
    #[serde(rename = "InteriorFeatures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_interior_or_room_features_format")]
    pub interior_features: Option<Vec<InteriorOrRoomFeatures>>,

    /// A yes/no field that states the seller has allowed the listing address to be displayed on Internet sites.
    ///
    /// [InternetAddressDisplayYN](https://ddwiki.reso.org/display/DDW17/InternetAddressDisplayYN+Field)
    #[serde(
        rename = "InternetAddressDisplayYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub internet_address_display_yn: Option<bool>,

    /// A yes/no field that states the seller allows the listing can be displayed with an AVM on Internet sites.
    ///
    /// [InternetAutomatedValuationDisplayYN](https://ddwiki.reso.org/display/DDW17/InternetAutomatedValuationDisplayYN+Field)
    #[serde(
        rename = "InternetAutomatedValuationDisplayYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub internet_automated_valuation_display_yn: Option<bool>,

    /// A yes/no field that states the seller allows a comment or blog system to be attached to the listing on Internet sites.
    ///
    /// [InternetConsumerCommentYN](https://ddwiki.reso.org/display/DDW17/InternetConsumerCommentYN+Field)
    #[serde(
        rename = "InternetConsumerCommentYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub internet_consumer_comment_yn: Option<bool>,

    /// A yes/no field that states the seller has allowed the listing to be displayed on Internet sites.
    ///
    /// [InternetEntireListingDisplayYN](https://ddwiki.reso.org/display/DDW17/InternetEntireListingDisplayYN+Field)
    #[serde(
        rename = "InternetEntireListingDisplayYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub internet_entire_listing_display_yn: Option<bool>,

    /// The source which the property receives its water for irrigation.
    ///
    /// [IrrigationSource](https://ddwiki.reso.org/display/DDW17/IrrigationSource+Field)
    #[serde(rename = "IrrigationSource", skip_serializing_if = "Option::is_none")]
    pub irrigation_source: Option<String>,

    /// The number of acres allowed under the property's water rights.
    ///
    /// [IrrigationWaterRightsAcres](https://ddwiki.reso.org/display/DDW17/IrrigationWaterRightsAcres+Field)
    #[serde(
        rename = "IrrigationWaterRightsAcres",
        skip_serializing_if = "Option::is_none"
    )]
    pub irrigation_water_rights_acres: Option<f64>,

    /// Does the property include water rights for irrigation?  A Boolean or Yes / No field.
    ///
    /// [IrrigationWaterRightsYN](https://ddwiki.reso.org/display/DDW17/IrrigationWaterRightsYN+Field)
    #[serde(
        rename = "IrrigationWaterRightsYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub irrigation_water_rights_yn: Option<bool>,

    /// Information about labor laws that are applicable to the business being sold. i.e. Union, Non-Union, Employee License Required.
    ///
    /// [LaborInformation](https://ddwiki.reso.org/display/DDW17/LaborInformation+Field)
    #[serde(rename = "LaborInformation", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_labor_information_format")]
    pub labor_information: Option<Vec<LaborInformation>>,

    /// When the land is not included in the sale, but is leased, the amount of the lease.  This is the Space Rent for Mobile homes in a Park.
    ///
    /// [LandLeaseAmount](https://ddwiki.reso.org/display/DDW17/LandLeaseAmount+Field)
    #[serde(rename = "LandLeaseAmount", skip_serializing_if = "Option::is_none")]
    pub land_lease_amount: Option<f64>,

    /// When the land is not included in the sale, but is leased, the frequency the Land Lease Fee is paid.
    ///
    /// [LandLeaseAmountFrequency](https://ddwiki.reso.org/display/DDW17/LandLeaseAmountFrequency+Field)
    #[serde(
        rename = "LandLeaseAmountFrequency",
        skip_serializing_if = "Option::is_none"
    )]
    pub land_lease_amount_frequency: Option<FeeFrequency>,

    /// When the land is not included in the sale, but is leased, the expiration date of the Land Lease.
    ///
    /// [LandLeaseExpirationDate](https://ddwiki.reso.org/display/DDW17/LandLeaseExpirationDate+Field)
    #[serde(
        rename = "LandLeaseExpirationDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub land_lease_expiration_date: Option<chrono::NaiveDate>,

    /// The land is not included in the sale and a lease exists.
    ///
    /// [LandLeaseYN](https://ddwiki.reso.org/display/DDW17/LandLeaseYN+Field)
    #[serde(rename = "LandLeaseYN", skip_serializing_if = "Option::is_none")]
    pub land_lease_yn: Option<bool>,

    /// The geographic latitude of some reference point on the property, specified in degrees and decimal parts.  Positive numbers must not include the plus symbol.
    ///
    /// [Latitude](https://ddwiki.reso.org/display/DDW17/Latitude+Field)
    #[serde(rename = "Latitude", skip_serializing_if = "Option::is_none")]
    pub latitude: Option<f64>,

    /// Add this pick list of features and locations where the laundry is located in the property being sold. i.e. Gas Dryer Hookup, In Kitchen, In Garage, etc.
    ///
    /// [LaundryFeatures](https://ddwiki.reso.org/display/DDW17/LaundryFeatures+Field)
    #[serde(rename = "LaundryFeatures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_laundry_features_format")]
    pub laundry_features: Option<Vec<LaundryFeatures>>,

    /// The area that may be leased within the commercial property.
    ///
    /// [LeasableArea](https://ddwiki.reso.org/display/DDW17/LeasableArea+Field)
    #[serde(rename = "LeasableArea", skip_serializing_if = "Option::is_none")]
    pub leasable_area: Option<f64>,

    /// A pick list of the unit of measurement for the area.  i.e. Square Feet, Square Meters, Acres, etc.
    ///
    /// [LeasableAreaUnits](https://ddwiki.reso.org/display/DDW17/LeasableAreaUnits+Field)
    #[serde(rename = "LeasableAreaUnits", skip_serializing_if = "Option::is_none")]
    pub leasable_area_units: Option<AreaUnits>,

    /// The amount of any lease the business pays for it's current location.
    ///
    /// [LeaseAmount](https://ddwiki.reso.org/display/DDW17/LeaseAmount+Field)
    #[serde(rename = "LeaseAmount", skip_serializing_if = "Option::is_none")]
    pub lease_amount: Option<f64>,

    /// The frequency of the LeaseAmount is paid.  Monthly, weekly, annual, etc.
    ///
    /// [LeaseAmountFrequency](https://ddwiki.reso.org/display/DDW17/LeaseAmountFrequency+Field)
    #[serde(
        rename = "LeaseAmountFrequency",
        skip_serializing_if = "Option::is_none"
    )]
    pub lease_amount_frequency: Option<FeeFrequency>,

    /// Can the lease at the business' current location be assigned to another party.
    ///
    /// [LeaseAssignableYN](https://ddwiki.reso.org/display/DDW17/LeaseAssignableYN+Field)
    #[serde(rename = "LeaseAssignableYN", skip_serializing_if = "Option::is_none")]
    pub lease_assignable_yn: Option<bool>,

    /// Will the seller consider leasing the property instead of selling?  Single select.
    ///
    /// [LeaseConsideredYN](https://ddwiki.reso.org/display/DDW17/LeaseConsideredYN+Field)
    #[serde(rename = "LeaseConsideredYN", skip_serializing_if = "Option::is_none")]
    pub lease_considered_yn: Option<bool>,

    /// The expiration date of the lease for the business' current location.
    ///
    /// [LeaseExpiration](https://ddwiki.reso.org/display/DDW17/LeaseExpiration+Field)
    #[serde(rename = "LeaseExpiration", skip_serializing_if = "Option::is_none")]
    pub lease_expiration: Option<chrono::NaiveDate>,

    /// A list of compensations other than the original Selling Office Compensation.  i.e. Compensation Paid on Renewal, Compensation Paid on Tennant Purchase, No Renewal Commission, Call Listing Office, etc.
    ///
    /// [LeaseRenewalCompensation](https://ddwiki.reso.org/display/DDW17/LeaseRenewalCompensation+Field)
    #[serde(
        rename = "LeaseRenewalCompensation",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_lease_renewal_compensation_format")]
    pub lease_renewal_compensation: Option<Vec<LeaseRenewalCompensation>>,

    /// Is there an option to renew the lease at the business' current location.
    ///
    /// [LeaseRenewalOptionYN](https://ddwiki.reso.org/display/DDW17/LeaseRenewalOptionYN+Field)
    #[serde(
        rename = "LeaseRenewalOptionYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub lease_renewal_option_yn: Option<bool>,

    /// A pick list of lengths that represent the length of the lease.  i.e. Weekly, Month to Month, 6 Month Lease, 12 Month Lease, 24 Month Lease.
    ///
    /// [LeaseTerm](https://ddwiki.reso.org/display/DDW17/LeaseTerm+Field)
    #[serde(rename = "LeaseTerm", skip_serializing_if = "Option::is_none")]
    pub lease_term: Option<LeaseTerm>,

    /// The number of levels in the property being sold. For example, One Level, Two Levels, Three or More Levels, <a href="http://ddwiki.reso.org/pages/viewpage.action?pageId=9941240">Multi/Split</a>, Loft. A discreet horizontal plane of interior living space (excluding basements).
    ///
    /// [Levels](https://ddwiki.reso.org/display/DDW17/Levels+Field)
    #[serde(rename = "Levels", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_levels_format")]
    pub levels: Option<Vec<Levels>>,

    /// License number of the mobile or manufactured home.  Also known as the Department of Housing label/insignia number. For the first or only unit/section use License 1 over License 2 or 3.
    ///
    /// [License1](https://ddwiki.reso.org/display/DDW17/License1+Field)
    #[serde(rename = "License1", skip_serializing_if = "Option::is_none")]
    pub license1: Option<String>,

    /// License number of the mobile or manufactured home.  Also known as the Department of Housing label/insignia number. For two units/sections use License 1 and 2 over License 3.
    ///
    /// [License2](https://ddwiki.reso.org/display/DDW17/License2+Field)
    #[serde(rename = "License2", skip_serializing_if = "Option::is_none")]
    pub license2: Option<String>,

    /// License number of the mobile or manufactured home.  Also known as the Department of Housing label/insignia number. For two units/sections use License 1 and 2 over License 3.
    ///
    /// [License3](https://ddwiki.reso.org/display/DDW17/License3+Field)
    #[serde(rename = "License3", skip_serializing_if = "Option::is_none")]
    pub license3: Option<String>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [LicensesExpense](https://ddwiki.reso.org/display/DDW17/LicensesExpense+Field)
    #[serde(rename = "LicensesExpense", skip_serializing_if = "Option::is_none")]
    pub licenses_expense: Option<f64>,

    /// The responsible Board or Association of REALTORS for this listing.
    ///
    /// [ListAOR](https://ddwiki.reso.org/display/DDW17/ListAOR+Field)
    #[serde(rename = "ListAOR", skip_serializing_if = "Option::is_none")]
    pub list_aor: Option<String>,

    /// The Listing Agent's Board or Association of REALTORS.
    ///
    /// [ListAgentAOR](https://ddwiki.reso.org/display/DDW17/ListAgentAOR+Field)
    #[serde(rename = "ListAgentAOR", skip_serializing_if = "Option::is_none")]
    pub list_agent_aor: Option<String>,

    /// Designations and certifications acknowledging experience and expertise in various real estate sectors are awarded by NAR and each affiliated group upon completion of required courses.
    ///
    /// [ListAgentDesignation](https://ddwiki.reso.org/display/DDW17/ListAgentDesignation+Field)
    #[serde(
        rename = "ListAgentDesignation",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_list_agent_designation_format")]
    pub list_agent_designation: Option<Vec<ListAgentDesignation>>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [ListAgentDirectPhone](https://ddwiki.reso.org/display/DDW17/ListAgentDirectPhone+Field)
    #[serde(
        rename = "ListAgentDirectPhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_agent_direct_phone: Option<String>,

    /// The email address of the Listing Agent.
    ///
    /// [ListAgentEmail](https://ddwiki.reso.org/display/DDW17/ListAgentEmail+Field)
    #[serde(rename = "ListAgentEmail", skip_serializing_if = "Option::is_none")]
    pub list_agent_email: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [ListAgentFax](https://ddwiki.reso.org/display/DDW17/ListAgentFax+Field)
    #[serde(rename = "ListAgentFax", skip_serializing_if = "Option::is_none")]
    pub list_agent_fax: Option<String>,

    /// The first name of the listing agent.
    ///
    /// [ListAgentFirstName](https://ddwiki.reso.org/display/DDW17/ListAgentFirstName+Field)
    #[serde(rename = "ListAgentFirstName", skip_serializing_if = "Option::is_none")]
    pub list_agent_first_name: Option<String>,

    /// The full name of the listing agent. (First Middle Last)
    ///
    /// [ListAgentFullName](https://ddwiki.reso.org/display/DDW17/ListAgentFullName+Field)
    #[serde(rename = "ListAgentFullName", skip_serializing_if = "Option::is_none")]
    pub list_agent_full_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [ListAgentHomePhone](https://ddwiki.reso.org/display/DDW17/ListAgentHomePhone+Field)
    #[serde(rename = "ListAgentHomePhone", skip_serializing_if = "Option::is_none")]
    pub list_agent_home_phone: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the ListAgentKey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId. This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [ListAgentKey](https://ddwiki.reso.org/display/DDW17/ListAgentKey+Field)
    #[serde(rename = "ListAgentKey", skip_serializing_if = "Option::is_none")]
    pub list_agent_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the ListAgentKey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId. This is a foreign key relating to the Member resource's MemberKey. This is the numeric only key and used as an alternative to the ListAgentKey field.
    ///
    /// [ListAgentKeyNumeric](https://ddwiki.reso.org/display/DDW17/ListAgentKeyNumeric+Field)
    #[serde(
        rename = "ListAgentKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_agent_key_numeric: Option<f64>,

    /// The last name of the listing agent.
    ///
    /// [ListAgentLastName](https://ddwiki.reso.org/display/DDW17/ListAgentLastName+Field)
    #[serde(rename = "ListAgentLastName", skip_serializing_if = "Option::is_none")]
    pub list_agent_last_name: Option<String>,

    /// The middle name of the listing agent.
    ///
    /// [ListAgentMiddleName](https://ddwiki.reso.org/display/DDW17/ListAgentMiddleName+Field)
    #[serde(
        rename = "ListAgentMiddleName",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_agent_middle_name: Option<String>,

    /// The local, well-known identifier for the member. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [ListAgentMlsId](https://ddwiki.reso.org/display/DDW17/ListAgentMlsId+Field)
    #[serde(rename = "ListAgentMlsId", skip_serializing_if = "Option::is_none")]
    pub list_agent_mls_id: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [ListAgentMobilePhone](https://ddwiki.reso.org/display/DDW17/ListAgentMobilePhone+Field)
    #[serde(
        rename = "ListAgentMobilePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_agent_mobile_phone: Option<String>,

    /// Prefix to the name (e.g. Dr. Mr. Ms. etc.)
    ///
    /// [ListAgentNamePrefix](https://ddwiki.reso.org/display/DDW17/ListAgentNamePrefix+Field)
    #[serde(
        rename = "ListAgentNamePrefix",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_agent_name_prefix: Option<String>,

    /// Suffix to the ListAgentLastName (e.g. Esq., Jr., III etc.)
    ///
    /// [ListAgentNameSuffix](https://ddwiki.reso.org/display/DDW17/ListAgentNameSuffix+Field)
    #[serde(
        rename = "ListAgentNameSuffix",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_agent_name_suffix: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [ListAgentOfficePhone](https://ddwiki.reso.org/display/DDW17/ListAgentOfficePhone+Field)
    #[serde(
        rename = "ListAgentOfficePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_agent_office_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [ListAgentOfficePhoneExt](https://ddwiki.reso.org/display/DDW17/ListAgentOfficePhoneExt+Field)
    #[serde(
        rename = "ListAgentOfficePhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_agent_office_phone_ext: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [ListAgentPager](https://ddwiki.reso.org/display/DDW17/ListAgentPager+Field)
    #[serde(rename = "ListAgentPager", skip_serializing_if = "Option::is_none")]
    pub list_agent_pager: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [ListAgentPreferredPhone](https://ddwiki.reso.org/display/DDW17/ListAgentPreferredPhone+Field)
    #[serde(
        rename = "ListAgentPreferredPhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_agent_preferred_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [ListAgentPreferredPhoneExt](https://ddwiki.reso.org/display/DDW17/ListAgentPreferredPhoneExt+Field)
    #[serde(
        rename = "ListAgentPreferredPhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_agent_preferred_phone_ext: Option<String>,

    /// The license of the listing agent. Separate multiple licenses with a comma and space.
    ///
    /// [ListAgentStateLicense](https://ddwiki.reso.org/display/DDW17/ListAgentStateLicense+Field)
    #[serde(
        rename = "ListAgentStateLicense",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_agent_state_license: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [ListAgentTollFreePhone](https://ddwiki.reso.org/display/DDW17/ListAgentTollFreePhone+Field)
    #[serde(
        rename = "ListAgentTollFreePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_agent_toll_free_phone: Option<String>,

    /// The website URI of the listing agent.
    ///
    /// [ListAgentURL](https://ddwiki.reso.org/display/DDW17/ListAgentURL+Field)
    #[serde(rename = "ListAgentURL", skip_serializing_if = "Option::is_none")]
    pub list_agent_url: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [ListAgentVoiceMail](https://ddwiki.reso.org/display/DDW17/ListAgentVoiceMail+Field)
    #[serde(rename = "ListAgentVoiceMail", skip_serializing_if = "Option::is_none")]
    pub list_agent_voice_mail: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [ListAgentVoiceMailExt](https://ddwiki.reso.org/display/DDW17/ListAgentVoiceMailExt+Field)
    #[serde(
        rename = "ListAgentVoiceMailExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_agent_voice_mail_ext: Option<String>,

    /// The Listing Office's Board or Association of REALTORS.
    ///
    /// [ListOfficeAOR](https://ddwiki.reso.org/display/DDW17/ListOfficeAOR+Field)
    #[serde(rename = "ListOfficeAOR", skip_serializing_if = "Option::is_none")]
    pub list_office_aor: Option<String>,

    /// The email address of the Listing Office.
    ///
    /// [ListOfficeEmail](https://ddwiki.reso.org/display/DDW17/ListOfficeEmail+Field)
    #[serde(rename = "ListOfficeEmail", skip_serializing_if = "Option::is_none")]
    pub list_office_email: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [ListOfficeFax](https://ddwiki.reso.org/display/DDW17/ListOfficeFax+Field)
    #[serde(rename = "ListOfficeFax", skip_serializing_if = "Option::is_none")]
    pub list_office_fax: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set.  This is a foreign key relating to the Office resource's OfficeKey.
    ///
    /// [ListOfficeKey](https://ddwiki.reso.org/display/DDW17/ListOfficeKey+Field)
    #[serde(rename = "ListOfficeKey", skip_serializing_if = "Option::is_none")]
    pub list_office_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set.  This is a foreign key relating to the Office resource's OfficeKey.  This is the numeric only key and used as an alternative to the ListOfficeKey field.
    ///
    /// [ListOfficeKeyNumeric](https://ddwiki.reso.org/display/DDW17/ListOfficeKeyNumeric+Field)
    #[serde(
        rename = "ListOfficeKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub list_office_key_numeric: Option<f64>,

    /// The local, well-known identifier. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [ListOfficeMlsId](https://ddwiki.reso.org/display/DDW17/ListOfficeMlsId+Field)
    #[serde(rename = "ListOfficeMlsId", skip_serializing_if = "Option::is_none")]
    pub list_office_mls_id: Option<String>,

    /// The legal name of the brokerage representing the seller.
    ///
    /// [ListOfficeName](https://ddwiki.reso.org/display/DDW17/ListOfficeName+Field)
    #[serde(rename = "ListOfficeName", skip_serializing_if = "Option::is_none")]
    pub list_office_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [ListOfficePhone](https://ddwiki.reso.org/display/DDW17/ListOfficePhone+Field)
    #[serde(rename = "ListOfficePhone", skip_serializing_if = "Option::is_none")]
    pub list_office_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [ListOfficePhoneExt](https://ddwiki.reso.org/display/DDW17/ListOfficePhoneExt+Field)
    #[serde(rename = "ListOfficePhoneExt", skip_serializing_if = "Option::is_none")]
    pub list_office_phone_ext: Option<String>,

    /// The website URI for the listing office.
    ///
    /// [ListOfficeURL](https://ddwiki.reso.org/display/DDW17/ListOfficeURL+Field)
    #[serde(rename = "ListOfficeURL", skip_serializing_if = "Option::is_none")]
    pub list_office_url: Option<String>,

    /// The current price of the property as determined by the seller and the seller's broker.  For auctions this is the minimum or reserve price.
    ///
    /// [ListPrice](https://ddwiki.reso.org/display/DDW17/ListPrice+Field)
    #[serde(rename = "ListPrice", skip_serializing_if = "Option::is_none")]
    pub list_price: Option<f64>,

    /// The lower price used for Value Range Pricing.  The List Price must be greater than or equal to the ListPriceLow.
    ///
    /// [ListPriceLow](https://ddwiki.reso.org/display/DDW17/ListPriceLow+Field)
    #[serde(rename = "ListPriceLow", skip_serializing_if = "Option::is_none")]
    pub list_price_low: Option<f64>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set.  This is a foreign key relating to the Teams resource's TeamKey.
    ///
    /// [ListTeamKey](https://ddwiki.reso.org/display/DDW17/ListTeamKey+Field)
    #[serde(rename = "ListTeamKey", skip_serializing_if = "Option::is_none")]
    pub list_team_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set.  This is a foreign key relating to the Teams resource's TeamKey.  This is the numeric only key and used as an alternative to the ListTeamKey field.
    ///
    /// [ListTeamKeyNumeric](https://ddwiki.reso.org/display/DDW17/ListTeamKeyNumeric+Field)
    #[serde(rename = "ListTeamKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub list_team_key_numeric: Option<f64>,

    /// The name of the team representing the seller.
    ///
    /// [ListTeamName](https://ddwiki.reso.org/display/DDW17/ListTeamName+Field)
    #[serde(rename = "ListTeamName", skip_serializing_if = "Option::is_none")]
    pub list_team_name: Option<String>,

    /// The nature of the agreement between the seller and the listing agent. Examples are Exclusive Agency, Open Listing, etc.
    ///
    /// [ListingAgreement](https://ddwiki.reso.org/display/DDW17/ListingAgreement+Field)
    #[serde(rename = "ListingAgreement", skip_serializing_if = "Option::is_none")]
    pub listing_agreement: Option<ListingAgreement>,

    /// The effective date of the agreement between the seller and the seller's broker. This is the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS.
    ///
    /// [ListingContractDate](https://ddwiki.reso.org/display/DDW17/ListingContractDate+Field)
    #[serde(
        rename = "ListingContractDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub listing_contract_date: Option<chrono::NaiveDate>,

    /// The well known identifier for the listing. The value may be identical to that of the Listing Key, but the Listing ID is intended to be the value used by a human to retrieve the information about a specific listing. In a multiple originating system or a merged system, this value may not be unique and may require the use of the provider system to create a synthetic unique value.
    ///
    /// [ListingId](https://ddwiki.reso.org/display/DDW17/ListingId+Field)
    #[serde(rename = "ListingId", skip_serializing_if = "Option::is_none")]
    pub listing_id: Option<String>,

    /// A unique identifier for this record from the immediate source. This is a string that can include URI or other forms.  Alternatively use the ListingKeyNumeric for a numeric only key field.  This is the local key of the system.  When records are received from other systems, a local key is commonly applied.  If conveying the original keys from the source or originating systems, see SourceSystemKey and OriginatingSystemKey.
    ///
    /// [ListingKey](https://ddwiki.reso.org/display/DDW17/ListingKey+Field)
    #[serde(rename = "ListingKey", skip_serializing_if = "Option::is_none")]
    pub listing_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This is the numeric only key and used as an alternative to the ListingKey fields.  This is the local key of the system.  When records are received from other systems, a local key is commonly applied.  If conveying the original keys from the source or originating systems, see SourceSystemKey and OriginatingSystemKey.
    ///
    /// [ListingKeyNumeric](https://ddwiki.reso.org/display/DDW17/ListingKeyNumeric+Field)
    #[serde(rename = "ListingKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub listing_key_numeric: Option<f64>,

    /// Defines the type or level of service the listing member will be providing to the selling home owner.  This will typically be a single selection.  Examples include Full Service, Limited Service or Entry Only.
    ///
    /// [ListingService](https://ddwiki.reso.org/display/DDW17/ListingService+Field)
    #[serde(rename = "ListingService", skip_serializing_if = "Option::is_none")]
    pub listing_service: Option<ListingService>,

    /// Terms of the listing such as Lien Release, Subject to Court Approval or Owner Will Carry. Also may include options that describe the financing terms that are acceptable to the seller, i.e. cash, assumable, FHA loan, etc.
    ///
    /// [ListingTerms](https://ddwiki.reso.org/display/DDW17/ListingTerms+Field)
    #[serde(rename = "ListingTerms", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_listing_terms_format")]
    pub listing_terms: Option<Vec<ListingTerms>>,

    /// The total livable area within the structure.
    ///
    /// [LivingArea](https://ddwiki.reso.org/display/DDW17/LivingArea+Field)
    #[serde(rename = "LivingArea", skip_serializing_if = "Option::is_none")]
    pub living_area: Option<f64>,

    /// The source of the measurements. This is a pick list of options showing the source of the measurement. i.e. Agent, Assessor, Estimate, etc.
    ///
    /// [LivingAreaSource](https://ddwiki.reso.org/display/DDW17/LivingAreaSource+Field)
    #[serde(rename = "LivingAreaSource", skip_serializing_if = "Option::is_none")]
    pub living_area_source: Option<AreaSource>,

    /// A pick list of the unit of measurement for the area.  i.e. Square Feet, Square Meters, Acres, etc.
    ///
    /// [LivingAreaUnits](https://ddwiki.reso.org/display/DDW17/LivingAreaUnits+Field)
    #[serde(rename = "LivingAreaUnits", skip_serializing_if = "Option::is_none")]
    pub living_area_units: Option<AreaUnits>,

    /// A field describing the location of the lock box.
    ///
    /// [LockBoxLocation](https://ddwiki.reso.org/display/DDW17/LockBoxLocation+Field)
    #[serde(rename = "LockBoxLocation", skip_serializing_if = "Option::is_none")]
    pub lock_box_location: Option<String>,

    /// The serial number of the lockbox placed on the property.
    ///
    /// [LockBoxSerialNumber](https://ddwiki.reso.org/display/DDW17/LockBoxSerialNumber+Field)
    #[serde(
        rename = "LockBoxSerialNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub lock_box_serial_number: Option<String>,

    /// A field describing the type of lock box.
    ///
    /// [LockBoxType](https://ddwiki.reso.org/display/DDW17/LockBoxType+Field)
    #[serde(rename = "LockBoxType", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_lock_box_type_format")]
    pub lock_box_type: Option<Vec<LockBoxType>>,

    /// The geographic longitude of some reference point on the property, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.
    ///
    /// [Longitude](https://ddwiki.reso.org/display/DDW17/Longitude+Field)
    #[serde(rename = "Longitude", skip_serializing_if = "Option::is_none")]
    pub longitude: Option<f64>,

    /// The source of the measurements. This may be a pick list of options showing the source of the measurement. i.e. Agent, Assessor, Estimate, etc.
    ///
    /// [LotDimensionsSource](https://ddwiki.reso.org/display/DDW17/LotDimensionsSource+Field)
    #[serde(
        rename = "LotDimensionsSource",
        skip_serializing_if = "Option::is_none"
    )]
    pub lot_dimensions_source: Option<LotDimensionsSource>,

    /// A list of features or description of the lot included in the sale/lease.
    ///
    /// [LotFeatures](https://ddwiki.reso.org/display/DDW17/LotFeatures+Field)
    #[serde(rename = "LotFeatures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_lot_features_format")]
    pub lot_features: Option<Vec<LotFeatures>>,

    /// The total Acres of the lot.  This field is related to the Lot Size Area and Lot Size Units and must be in sync with the values represented in those fields.  Lot Size Source also applies to this field when used.
    ///
    /// [LotSizeAcres](https://ddwiki.reso.org/display/DDW17/LotSizeAcres+Field)
    #[serde(rename = "LotSizeAcres", skip_serializing_if = "Option::is_none")]
    pub lot_size_acres: Option<f64>,

    /// The total area of the lot.  See Lot Size Units for the units of measurement (Square Feet, Square Meters, Acres, etc.).
    ///
    /// [LotSizeArea](https://ddwiki.reso.org/display/DDW17/LotSizeArea+Field)
    #[serde(rename = "LotSizeArea", skip_serializing_if = "Option::is_none")]
    pub lot_size_area: Option<f64>,

    /// The dimensions of the lot minimally represented as length and width (i.e. 250 x 180) or a measurement of all sides of the polygon representing the property lines of the property.  i.e. 30 x 50 x 120 x 60 x 22.
    ///
    /// [LotSizeDimensions](https://ddwiki.reso.org/display/DDW17/LotSizeDimensions+Field)
    #[serde(rename = "LotSizeDimensions", skip_serializing_if = "Option::is_none")]
    pub lot_size_dimensions: Option<String>,

    /// The source of the measurements. This may be a pick list of options showing the source of the measurement. i.e. Agent, Assessor, Estimate, etc.
    ///
    /// [LotSizeSource](https://ddwiki.reso.org/display/DDW17/LotSizeSource+Field)
    #[serde(rename = "LotSizeSource", skip_serializing_if = "Option::is_none")]
    pub lot_size_source: Option<LotSizeSource>,

    /// The total square footage of the lot.  This field is related to the Lot Size Area and Lot Size Units and must be in sync with the values represented in those fields.  Lot Size Source also applies to this field when used.
    ///
    /// [LotSizeSquareFeet](https://ddwiki.reso.org/display/DDW17/LotSizeSquareFeet+Field)
    #[serde(rename = "LotSizeSquareFeet", skip_serializing_if = "Option::is_none")]
    pub lot_size_square_feet: Option<f64>,

    /// A pick list of the unit of measurement for the area.  i.e. Square Feet, Square Meters, Acres, etc.
    ///
    /// [LotSizeUnits](https://ddwiki.reso.org/display/DDW17/LotSizeUnits+Field)
    #[serde(rename = "LotSizeUnits", skip_serializing_if = "Option::is_none")]
    pub lot_size_units: Option<LotSizeUnits>,

    /// The major marketing area name, as defined by the MLS or other non-governmental organization.  If there is only one MLS Area in use, it must be the MLSAreaMajor.
    ///
    /// [MLSAreaMajor](https://ddwiki.reso.org/display/DDW17/MLSAreaMajor+Field)
    #[serde(rename = "MLSAreaMajor", skip_serializing_if = "Option::is_none")]
    pub mlsarea_major: Option<String>,

    /// The minor/sub marketing area name, as defined by the MLS or other non-governmental organization.  If there is only one MLS Area in use, it must be the MLSAreaMajor.
    ///
    /// [MLSAreaMinor](https://ddwiki.reso.org/display/DDW17/MLSAreaMinor+Field)
    #[serde(rename = "MLSAreaMinor", skip_serializing_if = "Option::is_none")]
    pub mlsarea_minor: Option<String>,

    /// The number of bathrooms located on the main or entry level of the property.
    ///
    /// [MainLevelBathrooms](https://ddwiki.reso.org/display/DDW17/MainLevelBathrooms+Field)
    #[serde(rename = "MainLevelBathrooms", skip_serializing_if = "Option::is_none")]
    pub main_level_bathrooms: Option<f64>,

    /// The number of bedrooms located on the main or entry level of the property.
    ///
    /// [MainLevelBedrooms](https://ddwiki.reso.org/display/DDW17/MainLevelBedrooms+Field)
    #[serde(rename = "MainLevelBedrooms", skip_serializing_if = "Option::is_none")]
    pub main_level_bedrooms: Option<f64>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [MaintenanceExpense](https://ddwiki.reso.org/display/DDW17/MaintenanceExpense+Field)
    #[serde(rename = "MaintenanceExpense", skip_serializing_if = "Option::is_none")]
    pub maintenance_expense: Option<f64>,

    /// Timestamp of the last major change on the listing (see also MajorChangeType).
    ///
    /// [MajorChangeTimestamp](https://ddwiki.reso.org/display/DDW17/MajorChangeTimestamp+Field)
    #[serde(
        rename = "MajorChangeTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub major_change_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// Description of the last major change on the listing, i.e. “price reduction”, “back on market”, etc.  May be used to display on a summary view of listing results to quickly identify listings that have had major changes recently.
    ///
    /// [MajorChangeType](https://ddwiki.reso.org/display/DDW17/MajorChangeType+Field)
    #[serde(rename = "MajorChangeType", skip_serializing_if = "Option::is_none")]
    pub major_change_type: Option<ChangeType>,

    /// Make of the mobile or manufactured home.
    ///
    /// [Make](https://ddwiki.reso.org/display/DDW17/Make+Field)
    #[serde(rename = "Make", skip_serializing_if = "Option::is_none")]
    pub make: Option<String>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.  This is for an individual manager.  Use ProfessionalManagementExpense for a management company.
    ///
    /// [ManagerExpense](https://ddwiki.reso.org/display/DDW17/ManagerExpense+Field)
    #[serde(rename = "ManagerExpense", skip_serializing_if = "Option::is_none")]
    pub manager_expense: Option<f64>,

    /// A map coordinate for the property, as determined by local custom. This is not necessarily the same as the geographic coordinate but may depend on the coordinate system used by whatever mapping service is customarily used by the listing service.
    ///
    /// [MapCoordinate](https://ddwiki.reso.org/display/DDW17/MapCoordinate+Field)
    #[serde(rename = "MapCoordinate", skip_serializing_if = "Option::is_none")]
    pub map_coordinate: Option<String>,

    /// Name of the map or map book publisher.
    ///
    /// [MapCoordinateSource](https://ddwiki.reso.org/display/DDW17/MapCoordinateSource+Field)
    #[serde(
        rename = "MapCoordinateSource",
        skip_serializing_if = "Option::is_none"
    )]
    pub map_coordinate_source: Option<String>,

    /// URI to a map of the property.
    ///
    /// [MapURL](https://ddwiki.reso.org/display/DDW17/MapURL+Field)
    #[serde(rename = "MapURL", skip_serializing_if = "Option::is_none")]
    pub map_url: Option<String>,

    /// The name of the junior or middle school having a catchment area that includes the associated property.
    ///
    /// [MiddleOrJuniorSchool](https://ddwiki.reso.org/display/DDW17/MiddleOrJuniorSchool+Field)
    #[serde(
        rename = "MiddleOrJuniorSchool",
        skip_serializing_if = "Option::is_none"
    )]
    pub middle_or_junior_school: Option<String>,

    /// The name of the junior or middle school district having a catchment area that includes the associated property.
    ///
    /// [MiddleOrJuniorSchoolDistrict](https://ddwiki.reso.org/display/DDW17/MiddleOrJuniorSchoolDistrict+Field)
    #[serde(
        rename = "MiddleOrJuniorSchoolDistrict",
        skip_serializing_if = "Option::is_none"
    )]
    pub middle_or_junior_school_district: Option<String>,

    /// Local or regional status that are well known by business users. Each MlsStatus must map to a single StandardStatus. Multiple MlsStatus may map to a single StandardStatus.
    ///
    /// [MlsStatus](https://ddwiki.reso.org/display/DDW17/MlsStatus+Field)
    #[serde(rename = "MlsStatus", skip_serializing_if = "Option::is_none")]
    pub mls_status: Option<String>,

    /// A pick list of the unit linear measurement.  i.e. feed, meters, yards, kilometers, miles, etc.
    ///
    /// [MobileDimUnits](https://ddwiki.reso.org/display/DDW17/MobileDimUnits+Field)
    #[serde(rename = "MobileDimUnits", skip_serializing_if = "Option::is_none")]
    pub mobile_dim_units: Option<LinearUnits>,

    /// Is the mobile home to remain and be included in the sale of the property.
    ///
    /// [MobileHomeRemainsYN](https://ddwiki.reso.org/display/DDW17/MobileHomeRemainsYN+Field)
    #[serde(
        rename = "MobileHomeRemainsYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub mobile_home_remains_yn: Option<bool>,

    /// Length of the mobile/manufactured home.
    ///
    /// [MobileLength](https://ddwiki.reso.org/display/DDW17/MobileLength+Field)
    #[serde(rename = "MobileLength", skip_serializing_if = "Option::is_none")]
    pub mobile_length: Option<f64>,

    /// Width of the mobile/manufactured home.
    ///
    /// [MobileWidth](https://ddwiki.reso.org/display/DDW17/MobileWidth+Field)
    #[serde(rename = "MobileWidth", skip_serializing_if = "Option::is_none")]
    pub mobile_width: Option<f64>,

    /// Model of the mobile or manufactured home.
    ///
    /// [Model](https://ddwiki.reso.org/display/DDW17/Model+Field)
    #[serde(rename = "Model", skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,

    /// The transactional timestamp automatically recorded by the MLS system representing the date/time the listing was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// Net operating income is the revenue from a property after operating expenses have been deducted, but before deducting income taxes and financing expenses (interest and Principal Payments).   For example, Gross Income - Operating Expenses = Net Operating Income (NOI).
    ///
    /// [NetOperatingIncome](https://ddwiki.reso.org/display/DDW17/NetOperatingIncome+Field)
    #[serde(rename = "NetOperatingIncome", skip_serializing_if = "Option::is_none")]
    pub net_operating_income: Option<f64>,

    /// Is the property newly constructed and has not been previously occupied?
    ///
    /// [NewConstructionYN](https://ddwiki.reso.org/display/DDW17/NewConstructionYN+Field)
    #[serde(rename = "NewConstructionYN", skip_serializing_if = "Option::is_none")]
    pub new_construction_yn: Option<bool>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [NewTaxesExpense](https://ddwiki.reso.org/display/DDW17/NewTaxesExpense+Field)
    #[serde(rename = "NewTaxesExpense", skip_serializing_if = "Option::is_none")]
    pub new_taxes_expense: Option<f64>,

    /// Total number of separate buildings included in the income property.
    ///
    /// [NumberOfBuildings](https://ddwiki.reso.org/display/DDW17/NumberOfBuildings+Field)
    #[serde(rename = "NumberOfBuildings", skip_serializing_if = "Option::is_none")]
    pub number_of_buildings: Option<f64>,

    /// The current number of individuals employed by the business on a full-time basis.
    ///
    /// [NumberOfFullTimeEmployees](https://ddwiki.reso.org/display/DDW17/NumberOfFullTimeEmployees+Field)
    #[serde(
        rename = "NumberOfFullTimeEmployees",
        skip_serializing_if = "Option::is_none"
    )]
    pub number_of_full_time_employees: Option<f64>,

    /// Total number of lots on the property or included in the sale. Land properties are often sold with multiple lots. It is important to be able to describe how many lots are in the property and not in all cases do lots have separate Parcel IDs.
    ///
    /// [NumberOfLots](https://ddwiki.reso.org/display/DDW17/NumberOfLots+Field)
    #[serde(rename = "NumberOfLots", skip_serializing_if = "Option::is_none")]
    pub number_of_lots: Option<f64>,

    /// The number of pads or spaces in the mobile home park.
    ///
    /// [NumberOfPads](https://ddwiki.reso.org/display/DDW17/NumberOfPads+Field)
    #[serde(rename = "NumberOfPads", skip_serializing_if = "Option::is_none")]
    pub number_of_pads: Option<f64>,

    /// The current number of individuals employed by the business on a part-time basis.
    ///
    /// [NumberOfPartTimeEmployees](https://ddwiki.reso.org/display/DDW17/NumberOfPartTimeEmployees+Field)
    #[serde(
        rename = "NumberOfPartTimeEmployees",
        skip_serializing_if = "Option::is_none"
    )]
    pub number_of_part_time_employees: Option<f64>,

    /// Total number of separate meters on the property.
    ///
    /// [NumberOfSeparateElectricMeters](https://ddwiki.reso.org/display/DDW17/NumberOfSeparateElectricMeters+Field)
    #[serde(
        rename = "NumberOfSeparateElectricMeters",
        skip_serializing_if = "Option::is_none"
    )]
    pub number_of_separate_electric_meters: Option<f64>,

    /// Total number of separate meters on the property.
    ///
    /// [NumberOfSeparateGasMeters](https://ddwiki.reso.org/display/DDW17/NumberOfSeparateGasMeters+Field)
    #[serde(
        rename = "NumberOfSeparateGasMeters",
        skip_serializing_if = "Option::is_none"
    )]
    pub number_of_separate_gas_meters: Option<f64>,

    /// Total number of separate meters on the property.
    ///
    /// [NumberOfSeparateWaterMeters](https://ddwiki.reso.org/display/DDW17/NumberOfSeparateWaterMeters+Field)
    #[serde(
        rename = "NumberOfSeparateWaterMeters",
        skip_serializing_if = "Option::is_none"
    )]
    pub number_of_separate_water_meters: Option<f64>,

    /// The total number of units in the building, complex or community.  This is not the number of units being sold, but rather the size of the community in which the dwelling being sold is located.
    ///
    /// [NumberOfUnitsInCommunity](https://ddwiki.reso.org/display/DDW17/NumberOfUnitsInCommunity+Field)
    #[serde(
        rename = "NumberOfUnitsInCommunity",
        skip_serializing_if = "Option::is_none"
    )]
    pub number_of_units_in_community: Option<f64>,

    /// Total number of units currently under a lease agreement.
    ///
    /// [NumberOfUnitsLeased](https://ddwiki.reso.org/display/DDW17/NumberOfUnitsLeased+Field)
    #[serde(
        rename = "NumberOfUnitsLeased",
        skip_serializing_if = "Option::is_none"
    )]
    pub number_of_units_leased: Option<f64>,

    /// The total number of units leasable month to month.
    ///
    /// [NumberOfUnitsMoMo](https://ddwiki.reso.org/display/DDW17/NumberOfUnitsMoMo+Field)
    #[serde(rename = "NumberOfUnitsMoMo", skip_serializing_if = "Option::is_none")]
    pub number_of_units_mo_mo: Option<f64>,

    /// Total number of units included in the income property, occupied or unoccupied.
    ///
    /// [NumberOfUnitsTotal](https://ddwiki.reso.org/display/DDW17/NumberOfUnitsTotal+Field)
    #[serde(rename = "NumberOfUnitsTotal", skip_serializing_if = "Option::is_none")]
    pub number_of_units_total: Option<f64>,

    /// The number of units currently vacant.
    ///
    /// [NumberOfUnitsVacant](https://ddwiki.reso.org/display/DDW17/NumberOfUnitsVacant+Field)
    #[serde(
        rename = "NumberOfUnitsVacant",
        skip_serializing_if = "Option::is_none"
    )]
    pub number_of_units_vacant: Option<f64>,

    /// Name of the current occupant, if any, of the property being sold.
    ///
    /// [OccupantName](https://ddwiki.reso.org/display/DDW17/OccupantName+Field)
    #[serde(rename = "OccupantName", skip_serializing_if = "Option::is_none")]
    pub occupant_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [OccupantPhone](https://ddwiki.reso.org/display/DDW17/OccupantPhone+Field)
    #[serde(rename = "OccupantPhone", skip_serializing_if = "Option::is_none")]
    pub occupant_phone: Option<String>,

    /// A field that describes the type of occupant, i.e. Owner, Tenant, Vacant.
    ///
    /// [OccupantType](https://ddwiki.reso.org/display/DDW17/OccupantType+Field)
    #[serde(rename = "OccupantType", skip_serializing_if = "Option::is_none")]
    pub occupant_type: Option<OccupantType>,

    /// The date the listing was taken off market. Where possible, this date is reflective of the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS.
    ///
    /// [OffMarketDate](https://ddwiki.reso.org/display/DDW17/OffMarketDate+Field)
    #[serde(rename = "OffMarketDate", skip_serializing_if = "Option::is_none")]
    pub off_market_date: Option<chrono::NaiveDate>,

    /// The transactional timestamp automatically recorded by the MLS system representing the most recent date/time the listing's status was set to and off market status (not Active or Backup)
    ///
    /// [OffMarketTimestamp](https://ddwiki.reso.org/display/DDW17/OffMarketTimestamp+Field)
    #[serde(rename = "OffMarketTimestamp", skip_serializing_if = "Option::is_none")]
    pub off_market_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The date the listing was placed on market. Where possible, this date is reflective of the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS.
    ///
    /// [OnMarketDate](https://ddwiki.reso.org/display/DDW17/OnMarketDate+Field)
    #[serde(rename = "OnMarketDate", skip_serializing_if = "Option::is_none")]
    pub on_market_date: Option<chrono::NaiveDate>,

    /// The transactional timestamp automatically recorded by the MLS system representing the most recent date/time the listing's status was set to Active or Backup.  This also includes initial input of the listing to Active/Backup or from a draft or approval status to Active/Backup.
    ///
    /// [OnMarketTimestamp](https://ddwiki.reso.org/display/DDW17/OnMarketTimestamp+Field)
    #[serde(rename = "OnMarketTimestamp", skip_serializing_if = "Option::is_none")]
    pub on_market_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The number of open or uncovered parking spaces included in the sale.
    ///
    /// [OpenParkingSpaces](https://ddwiki.reso.org/display/DDW17/OpenParkingSpaces+Field)
    #[serde(rename = "OpenParkingSpaces", skip_serializing_if = "Option::is_none")]
    pub open_parking_spaces: Option<f64>,

    /// A flag indicating that any parking spaces associated with the property are not covered by a roof.
    ///
    /// [OpenParkingYN](https://ddwiki.reso.org/display/DDW17/OpenParkingYN+Field)
    #[serde(rename = "OpenParkingYN", skip_serializing_if = "Option::is_none")]
    pub open_parking_yn: Option<bool>,

    /// The costs associated with the operation and maintenance of an income-producing property.
    ///
    /// [OperatingExpense](https://ddwiki.reso.org/display/DDW17/OperatingExpense+Field)
    #[serde(rename = "OperatingExpense", skip_serializing_if = "Option::is_none")]
    pub operating_expense: Option<f64>,

    /// When individual expense fields are not used and only a total is entered, this lists the expenses that are included in the OperatingExpense field.
    ///
    /// [OperatingExpenseIncludes](https://ddwiki.reso.org/display/DDW17/OperatingExpenseIncludes+Field)
    #[serde(
        rename = "OperatingExpenseIncludes",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_operating_expense_includes_format")]
    pub operating_expense_includes: Option<Vec<OperatingExpenseIncludes>>,

    /// The transactional timestamp automatically recorded by the MLS system representing the date/time the listing was entered and made visible to members of the MLS.
    ///
    /// [OriginalEntryTimestamp](https://ddwiki.reso.org/display/DDW17/OriginalEntryTimestamp+Field)
    #[serde(
        rename = "OriginalEntryTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub original_entry_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The original price of the property on the initial agreement between the seller and the seller's broker.
    ///
    /// [OriginalListPrice](https://ddwiki.reso.org/display/DDW17/OriginalListPrice+Field)
    #[serde(rename = "OriginalListPrice", skip_serializing_if = "Option::is_none")]
    pub original_list_price: Option<f64>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the listing was input.  In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [OriginatingSystemID](https://ddwiki.reso.org/display/DDW17/OriginatingSystemID+Field)
    #[serde(
        rename = "OriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Originating system.  The Originating system is the system with authoritative control over the record.  For example, the Multiple Listing Service where the listing was input.  There may be cases where the Source System (how you received the record) is not the Originating System.  See Source System Key for more information.
    ///
    /// [OriginatingSystemKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemKey+Field)
    #[serde(
        rename = "OriginatingSystemKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_key: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the listing is originally input by the member.  The legal name of the company.
    ///
    /// [OriginatingSystemName](https://ddwiki.reso.org/display/DDW17/OriginatingSystemName+Field)
    #[serde(
        rename = "OriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_name: Option<String>,

    /// A list of other equipment that will be included in the sale of the property.
    ///
    /// [OtherEquipment](https://ddwiki.reso.org/display/DDW17/OtherEquipment+Field)
    #[serde(rename = "OtherEquipment", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_other_equipment_format")]
    pub other_equipment: Option<Vec<OtherEquipment>>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [OtherExpense](https://ddwiki.reso.org/display/DDW17/OtherExpense+Field)
    #[serde(rename = "OtherExpense", skip_serializing_if = "Option::is_none")]
    pub other_expense: Option<f64>,

    /// Other types of parking available to, or part of, the property.
    ///
    /// [OtherParking](https://ddwiki.reso.org/display/DDW17/OtherParking+Field)
    #[serde(rename = "OtherParking", skip_serializing_if = "Option::is_none")]
    pub other_parking: Option<String>,

    /// A list of structures other than the main dwelling. For example, Guest House, Barn, Shed, etc.
    ///
    /// [OtherStructures](https://ddwiki.reso.org/display/DDW17/OtherStructures+Field)
    #[serde(rename = "OtherStructures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_other_structures_format")]
    pub other_structures: Option<Vec<OtherStructures>>,

    /// Name of the owner of the property being sold.
    ///
    /// [OwnerName](https://ddwiki.reso.org/display/DDW17/OwnerName+Field)
    #[serde(rename = "OwnerName", skip_serializing_if = "Option::is_none")]
    pub owner_name: Option<String>,

    /// A list of expenses for the property paid for by the owner as opposed to the tenant (e.g. Water, Trash, Electric).
    ///
    /// [OwnerPays](https://ddwiki.reso.org/display/DDW17/OwnerPays+Field)
    #[serde(rename = "OwnerPays", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_owner_pays_format")]
    pub owner_pays: Option<Vec<OwnerPays>>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [OwnerPhone](https://ddwiki.reso.org/display/DDW17/OwnerPhone+Field)
    #[serde(rename = "OwnerPhone", skip_serializing_if = "Option::is_none")]
    pub owner_phone: Option<String>,

    /// A text description of the manner in which title to a property is held.  Trust, Corporation, Joint Tennant, Individual.
    ///
    /// [Ownership](https://ddwiki.reso.org/display/DDW17/Ownership+Field)
    #[serde(rename = "Ownership", skip_serializing_if = "Option::is_none")]
    pub ownership: Option<String>,

    /// Current type of ownership of the business being sold.  i.e. Corporation, LLC, Sole P, Partnership, etc.,
    ///
    /// [OwnershipType](https://ddwiki.reso.org/display/DDW17/OwnershipType+Field)
    #[serde(rename = "OwnershipType", skip_serializing_if = "Option::is_none")]
    pub ownership_type: Option<OwnershipType>,

    /// A number used to uniquely identify a parcel or lot.  This number is typically issued by the county or county assessor.  The AP number format varies from county to county.  It is recommended that all Parcel Numbers be transmitted without dashes or hyphens.
    ///
    /// [ParcelNumber](https://ddwiki.reso.org/display/DDW17/ParcelNumber+Field)
    #[serde(rename = "ParcelNumber", skip_serializing_if = "Option::is_none")]
    pub parcel_number: Option<String>,

    /// Name of the manager of the mobile home park.
    ///
    /// [ParkManagerName](https://ddwiki.reso.org/display/DDW17/ParkManagerName+Field)
    #[serde(rename = "ParkManagerName", skip_serializing_if = "Option::is_none")]
    pub park_manager_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [ParkManagerPhone](https://ddwiki.reso.org/display/DDW17/ParkManagerPhone+Field)
    #[serde(rename = "ParkManagerPhone", skip_serializing_if = "Option::is_none")]
    pub park_manager_phone: Option<String>,

    /// Name of the mobile home park or corporate/commercial park.
    ///
    /// [ParkName](https://ddwiki.reso.org/display/DDW17/ParkName+Field)
    #[serde(rename = "ParkName", skip_serializing_if = "Option::is_none")]
    pub park_name: Option<String>,

    /// A list of features or description of the parking included in the sale/lease.
    ///
    /// [ParkingFeatures](https://ddwiki.reso.org/display/DDW17/ParkingFeatures+Field)
    #[serde(rename = "ParkingFeatures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_parking_features_format")]
    pub parking_features: Option<Vec<ParkingFeatures>>,

    /// The total number of parking spaces included in the sale.
    ///
    /// [ParkingTotal](https://ddwiki.reso.org/display/DDW17/ParkingTotal+Field)
    #[serde(rename = "ParkingTotal", skip_serializing_if = "Option::is_none")]
    pub parking_total: Option<f64>,

    /// Measurement or percentage of the property that has been allocated as pasture or grazing area.
    ///
    /// [PastureArea](https://ddwiki.reso.org/display/DDW17/PastureArea+Field)
    #[serde(rename = "PastureArea", skip_serializing_if = "Option::is_none")]
    pub pasture_area: Option<f64>,

    /// A list of features or description of the patio or porch included in the sale/lease.
    ///
    /// [PatioAndPorchFeatures](https://ddwiki.reso.org/display/DDW17/PatioAndPorchFeatures+Field)
    #[serde(
        rename = "PatioAndPorchFeatures",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_patio_and_porch_features_format")]
    pub patio_and_porch_features: Option<Vec<PatioAndPorchFeatures>>,

    /// The transactional timestamp automatically recorded by the MLS system representing the most recent date/time the listing's status was set to Pending.
    ///
    /// [PendingTimestamp](https://ddwiki.reso.org/display/DDW17/PendingTimestamp+Field)
    #[serde(rename = "PendingTimestamp", skip_serializing_if = "Option::is_none")]
    pub pending_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [PestControlExpense](https://ddwiki.reso.org/display/DDW17/PestControlExpense+Field)
    #[serde(rename = "PestControlExpense", skip_serializing_if = "Option::is_none")]
    pub pest_control_expense: Option<f64>,

    /// Are pets allowed at the property being leased?  A list of yes, no and more detailed restrictions/allowances.
    ///
    /// [PetsAllowed](https://ddwiki.reso.org/display/DDW17/PetsAllowed+Field)
    #[serde(rename = "PetsAllowed", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_pets_allowed_format")]
    pub pets_allowed: Option<Vec<PetsAllowed>>,

    /// System generated timestamp of when the last update or change to the photos for this listing was made.
    ///
    /// [PhotosChangeTimestamp](https://ddwiki.reso.org/display/DDW17/PhotosChangeTimestamp+Field)
    #[serde(
        rename = "PhotosChangeTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub photos_change_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The total number of pictures or photos included with the listing.
    ///
    /// [PhotosCount](https://ddwiki.reso.org/display/DDW17/PhotosCount+Field)
    #[serde(rename = "PhotosCount", skip_serializing_if = "Option::is_none")]
    pub photos_count: Option<f64>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [PoolExpense](https://ddwiki.reso.org/display/DDW17/PoolExpense+Field)
    #[serde(rename = "PoolExpense", skip_serializing_if = "Option::is_none")]
    pub pool_expense: Option<f64>,

    /// A list of features or description of the pool included in the sale/lease.
    ///
    /// [PoolFeatures](https://ddwiki.reso.org/display/DDW17/PoolFeatures+Field)
    #[serde(rename = "PoolFeatures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_pool_features_format")]
    pub pool_features: Option<Vec<PoolFeatures>>,

    /// The property has a privately owned pool that is included in the sale/lease.
    ///
    /// [PoolPrivateYN](https://ddwiki.reso.org/display/DDW17/PoolPrivateYN+Field)
    #[serde(rename = "PoolPrivateYN", skip_serializing_if = "Option::is_none")]
    pub pool_private_yn: Option<bool>,

    /// A list defining when possession will occur.  i.e. COE, COE+1, etc.
    ///
    /// [Possession](https://ddwiki.reso.org/display/DDW17/Possession+Field)
    #[serde(rename = "Possession", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_possession_format")]
    pub possession: Option<Vec<Possession>>,

    /// A list of the type(s) of possible or best uses of the property. Probable use gives a good indication of what the best use or potential use of the property could be. i.e. Primary, Vacation, Investment, Rental, Retirement
    ///
    /// [PossibleUse](https://ddwiki.reso.org/display/DDW17/PossibleUse+Field)
    #[serde(rename = "PossibleUse", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_possible_use_format")]
    pub possible_use: Option<Vec<PossibleUse>>,

    /// The official city per the USPS.  May be different from the "City".
    ///
    /// [PostalCity](https://ddwiki.reso.org/display/DDW17/PostalCity+Field)
    #[serde(rename = "PostalCity", skip_serializing_if = "Option::is_none")]
    pub postal_city: Option<String>,

    /// The postal code portion of a street or mailing address.
    ///
    /// [PostalCode](https://ddwiki.reso.org/display/DDW17/PostalCode+Field)
    #[serde(rename = "PostalCode", skip_serializing_if = "Option::is_none")]
    pub postal_code: Option<String>,

    /// The postal code +4 portion of a street or mailing address.
    ///
    /// [PostalCodePlus4](https://ddwiki.reso.org/display/DDW17/PostalCodePlus4+Field)
    #[serde(rename = "PostalCodePlus4", skip_serializing_if = "Option::is_none")]
    pub postal_code_plus4: Option<String>,

    /// A collection of the types of power production system(s) available on the property. The collection includes the type of system and other details about the power produced and age of the system.
    ///
    /// [PowerProduction](https://ddwiki.reso.org/display/DDW17/PowerProduction+Field)
    #[serde(rename = "PowerProduction", skip_serializing_if = "Option::is_none")]
    pub power_production: Option<String>,

    /// This field is a list of the types of power production system(s) available on the property. The key characteristics of the system are expected to appear as the "[type]" in the related power production fields in a flattened implementation (RETS 1.x only) of the power production fields.  A relational implementation of power production must omit the type from the field name and use PowerProductionType to create a vertical representation of the various types of power production available.  **Note that PV Solar is the only type of power production currently justified in multiple markets and thus shown. Up and coming renewables that could be added in the future depending on uptake: Wind, Geothermal, Thin Film Solar.
    ///
    /// [PowerProductionType](https://ddwiki.reso.org/display/DDW17/PowerProductionType+Field)
    #[serde(
        rename = "PowerProductionType",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_power_production_type_format")]
    pub power_production_type: Option<Vec<PowerProductionType>>,

    /// The most recent previous ListPrice of the listing.
    ///
    /// [PreviousListPrice](https://ddwiki.reso.org/display/DDW17/PreviousListPrice+Field)
    #[serde(rename = "PreviousListPrice", skip_serializing_if = "Option::is_none")]
    pub previous_list_price: Option<f64>,

    /// The transactional timestamp automatically recorded by the MLS system representing the date/time the listing's price was last changed.
    ///
    /// [PriceChangeTimestamp](https://ddwiki.reso.org/display/DDW17/PriceChangeTimestamp+Field)
    #[serde(
        rename = "PriceChangeTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub price_change_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// A remarks field that is only visible to members of the same offices as the listing agent.
    ///
    /// [PrivateOfficeRemarks](https://ddwiki.reso.org/display/DDW17/PrivateOfficeRemarks+Field)
    #[serde(
        rename = "PrivateOfficeRemarks",
        skip_serializing_if = "Option::is_none"
    )]
    pub private_office_remarks: Option<String>,

    /// Remarks that may contain security or proprietary information and should be restricted from public view.
    ///
    /// [PrivateRemarks](https://ddwiki.reso.org/display/DDW17/PrivateRemarks+Field)
    #[serde(rename = "PrivateRemarks", skip_serializing_if = "Option::is_none")]
    pub private_remarks: Option<String>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.  This is for a management company.  Use ManagerExpense for a individual manager.
    ///
    /// [ProfessionalManagementExpense](https://ddwiki.reso.org/display/DDW17/ProfessionalManagementExpense+Field)
    #[serde(
        rename = "ProfessionalManagementExpense",
        skip_serializing_if = "Option::is_none"
    )]
    pub professional_management_expense: Option<f64>,

    /// A flag indicating that the primary structure is attached to another structure that is not included in the sale. i.e. one unit of a duplex. This flag may be T/F, Y/N or a list of attached or detached. As with all flags, the field may be null. In some systems this information may be part of the Property Sub Type.
    ///
    /// [PropertyAttachedYN](https://ddwiki.reso.org/display/DDW17/PropertyAttachedYN+Field)
    #[serde(rename = "PropertyAttachedYN", skip_serializing_if = "Option::is_none")]
    pub property_attached_yn: Option<bool>,

    /// A list describing the condition of the property and any structures included in the sale.
    ///
    /// [PropertyCondition](https://ddwiki.reso.org/display/DDW17/PropertyCondition+Field)
    #[serde(rename = "PropertyCondition", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_property_condition_format")]
    pub property_condition: Option<Vec<PropertyCondition>>,

    /// A list of types of residential and residential lease properties, i.e. SFR, Condo, etc. Or a list of Sub Types for Mobile, such as Expando, Manufactured, Modular, etc.
    ///
    /// [PropertySubType](https://ddwiki.reso.org/display/DDW17/PropertySubType+Field)
    #[serde(rename = "PropertySubType", skip_serializing_if = "Option::is_none")]
    pub property_sub_type: Option<PropertySubType>,

    /// A list of types of properties such as Residential, Lease, Income, Land, Mobile, Commercial Sale, etc...
    ///
    /// [PropertyType](https://ddwiki.reso.org/display/DDW17/PropertyType+Field)
    #[serde(rename = "PropertyType", skip_serializing_if = "Option::is_none")]
    pub property_type: Option<PropertyType>,

    /// Text remarks that may be displayed to the public. In an MLS, it is the field where information is entered for the public. This information is intended to be visible on-line. This is typically information that describes the selling points of the building and/or land for sale. Local conditions and rules will determine what such content can contain. Generally, the following information is excluded: any information pertaining to entry to the property, the seller and/or tenant, listing member contact information. In other systems, these remarks will be determined by local business rules.
    ///
    /// [PublicRemarks](https://ddwiki.reso.org/display/DDW17/PublicRemarks+Field)
    #[serde(rename = "PublicRemarks", skip_serializing_if = "Option::is_none")]
    pub public_remarks: Option<String>,

    /// This field specifically identifies the Range identified by the Public Land Survey System (PLSS).
    ///
    /// [PublicSurveyRange](https://ddwiki.reso.org/display/DDW17/PublicSurveyRange+Field)
    #[serde(rename = "PublicSurveyRange", skip_serializing_if = "Option::is_none")]
    pub public_survey_range: Option<String>,

    /// This field specifically identifies the Section identified by the Public Land Survey System (PLSS).
    ///
    /// [PublicSurveySection](https://ddwiki.reso.org/display/DDW17/PublicSurveySection+Field)
    #[serde(
        rename = "PublicSurveySection",
        skip_serializing_if = "Option::is_none"
    )]
    pub public_survey_section: Option<String>,

    /// This field specifically identifies the Township identified by the Public Land Survey System (PLSS).
    ///
    /// [PublicSurveyTownship](https://ddwiki.reso.org/display/DDW17/PublicSurveyTownship+Field)
    #[serde(
        rename = "PublicSurveyTownship",
        skip_serializing_if = "Option::is_none"
    )]
    pub public_survey_township: Option<String>,

    /// With for-sale listings, the date an offer was accepted and the listing was no longer on market.  This is the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS.  With lease listings this may represent a meeting of the minds to lease, but some contractual requirements are yet to be fulfilled, such as contract signing or receipt of the deposit.
    ///
    /// [PurchaseContractDate](https://ddwiki.reso.org/display/DDW17/PurchaseContractDate+Field)
    #[serde(
        rename = "PurchaseContractDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub purchase_contract_date: Option<chrono::NaiveDate>,

    /// The dimensions of the RV parking area minimally represented as length and width (i.e. 25 x 18) or a measurement of all sides of the polygon representing the usable RV parking space. i.e. 33 x 15 x 12 x 60.
    ///
    /// [RVParkingDimensions](https://ddwiki.reso.org/display/DDW17/RVParkingDimensions+Field)
    #[serde(
        rename = "RVParkingDimensions",
        skip_serializing_if = "Option::is_none"
    )]
    pub rvparking_dimensions: Option<String>,

    /// Measurement or percentage of the property that has been allocated as range.
    ///
    /// [RangeArea](https://ddwiki.reso.org/display/DDW17/RangeArea+Field)
    #[serde(rename = "RangeArea", skip_serializing_if = "Option::is_none")]
    pub range_area: Option<f64>,

    /// Is the property in a rent control area?
    ///
    /// [RentControlYN](https://ddwiki.reso.org/display/DDW17/RentControlYN+Field)
    #[serde(rename = "RentControlYN", skip_serializing_if = "Option::is_none")]
    pub rent_control_yn: Option<bool>,

    /// A list of services or items that the tenant is not responsible to pay.
    ///
    /// [RentIncludes](https://ddwiki.reso.org/display/DDW17/RentIncludes+Field)
    #[serde(rename = "RentIncludes", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_rent_includes_format")]
    pub rent_includes: Option<Vec<RentIncludes>>,

    /// Pick list of types of Road frontage. i.e. Freeway frontage, No Road Frontage, etc. The road frontage of the property is an important factor in determining value of the property and it’s appropriateness for intended use.
    ///
    /// [RoadFrontageType](https://ddwiki.reso.org/display/DDW17/RoadFrontageType+Field)
    #[serde(rename = "RoadFrontageType", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_road_frontage_type_format")]
    pub road_frontage_type: Option<Vec<RoadFrontageType>>,

    /// The person or entity responsible for road maintenance (e.g., City, County, Private).
    ///
    /// [RoadResponsibility](https://ddwiki.reso.org/display/DDW17/RoadResponsibility+Field)
    #[serde(rename = "RoadResponsibility", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_road_responsibility_format")]
    pub road_responsibility: Option<Vec<RoadResponsibility>>,

    /// Pick list of types of surface of the Road to access the property. The surface of the road(s) for access to the property is an important factor in determining value of the property and it’s appropriateness for intended use.
    ///
    /// [RoadSurfaceType](https://ddwiki.reso.org/display/DDW17/RoadSurfaceType+Field)
    #[serde(rename = "RoadSurfaceType", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_road_surface_type_format")]
    pub road_surface_type: Option<Vec<RoadSurfaceType>>,

    /// A list describing the type or style of roof.  For example Spanish Tile, Composite, Shake, etc.
    ///
    /// [Roof](https://ddwiki.reso.org/display/DDW17/Roof+Field)
    #[serde(rename = "Roof", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_roof_format")]
    pub roof: Option<Vec<Roof>>,

    /// This field is a list of the types used in the rooms repeating elements. The Type is a list of possible room types. i.e. Bedroom, Bathroom, Living Room, Workshop, etc. Each selected are expected to appear as the "[type]" in the related rooms fields in a flattened implementation (RETS 1.x only) of the room fields. A relational implementation of rooms must omit the type from the field name and use RoomType to create a vertical representation of the various rooms. **Note that Garage or Basement should not be added as a room type and are represented by the ParkingFeatures and Basement fields respectively.
    ///
    /// [RoomType](https://ddwiki.reso.org/display/DDW17/RoomType+Field)
    #[serde(rename = "RoomType", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_room_type_format")]
    pub room_type: Option<Vec<RoomType>>,

    /// A collection of types of rooms and details/features about the given room.
    ///
    /// [Rooms](https://ddwiki.reso.org/display/DDW17/Rooms+Field)
    #[serde(rename = "Rooms", skip_serializing_if = "Option::is_none")]
    pub rooms: Option<String>,

    /// The number of rooms in the dwelling.
    ///
    /// [RoomsTotal](https://ddwiki.reso.org/display/DDW17/RoomsTotal+Field)
    #[serde(rename = "RoomsTotal", skip_serializing_if = "Option::is_none")]
    pub rooms_total: Option<f64>,

    /// The seating capacity of the business being sold.
    ///
    /// [SeatingCapacity](https://ddwiki.reso.org/display/DDW17/SeatingCapacity+Field)
    #[serde(rename = "SeatingCapacity", skip_serializing_if = "Option::is_none")]
    pub seating_capacity: Option<f64>,

    /// A list describing the security features included in the sale/lease.
    ///
    /// [SecurityFeatures](https://ddwiki.reso.org/display/DDW17/SecurityFeatures+Field)
    #[serde(rename = "SecurityFeatures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_security_features_format")]
    pub security_features: Option<Vec<SecurityFeatures>>,

    /// The community is a senior community.
    ///
    /// [SeniorCommunityYN](https://ddwiki.reso.org/display/DDW17/SeniorCommunityYN+Field)
    #[serde(rename = "SeniorCommunityYN", skip_serializing_if = "Option::is_none")]
    pub senior_community_yn: Option<bool>,

    /// Serial number of the mobile or manufactured home.  For the first or only unit/section use Serial U over Serial X or Serial XX.
    ///
    /// [SerialU](https://ddwiki.reso.org/display/DDW17/SerialU+Field)
    #[serde(rename = "SerialU", skip_serializing_if = "Option::is_none")]
    pub serial_u: Option<String>,

    /// Serial number of the mobile or manufactured home.  For two units/sections, Serial U should be used first, Serial X second over or Serial XX.
    ///
    /// [SerialX](https://ddwiki.reso.org/display/DDW17/SerialX+Field)
    #[serde(rename = "SerialX", skip_serializing_if = "Option::is_none")]
    pub serial_x: Option<String>,

    /// Serial number of the mobile or manufactured home.  For two units/sections, Serial U should be used first, Serial X second over or Serial XX.
    ///
    /// [SerialXX](https://ddwiki.reso.org/display/DDW17/SerialXX+Field)
    #[serde(rename = "SerialXX", skip_serializing_if = "Option::is_none")]
    pub serial_xx: Option<String>,

    /// A list describing the sewer or septic features of the property.
    ///
    /// [Sewer](https://ddwiki.reso.org/display/DDW17/Sewer+Field)
    #[serde(rename = "Sewer", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_sewer_format")]
    pub sewer: Option<Vec<Sewer>>,

    /// The hours of advance notice required to schedule a showing.
    ///
    /// [ShowingAdvanceNotice](https://ddwiki.reso.org/display/DDW17/ShowingAdvanceNotice+Field)
    #[serde(
        rename = "ShowingAdvanceNotice",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_advance_notice: Option<f64>,

    /// Does this home require an attended showing?  i.e. Yes = licensed agent representing the seller must be present during showing.
    ///
    /// [ShowingAttendedYN](https://ddwiki.reso.org/display/DDW17/ShowingAttendedYN+Field)
    #[serde(rename = "ShowingAttendedYN", skip_serializing_if = "Option::is_none")]
    pub showing_attended_yn: Option<bool>,

    /// The name of the contact for the showing of the listed property.
    ///
    /// [ShowingContactName](https://ddwiki.reso.org/display/DDW17/ShowingContactName+Field)
    #[serde(rename = "ShowingContactName", skip_serializing_if = "Option::is_none")]
    pub showing_contact_name: Option<String>,

    /// A telephone number that should be called to arrange showing the property.
    ///
    /// [ShowingContactPhone](https://ddwiki.reso.org/display/DDW17/ShowingContactPhone+Field)
    #[serde(
        rename = "ShowingContactPhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_contact_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [ShowingContactPhoneExt](https://ddwiki.reso.org/display/DDW17/ShowingContactPhoneExt+Field)
    #[serde(
        rename = "ShowingContactPhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_contact_phone_ext: Option<String>,

    /// The type of contact for the showing.  i.e. Agent, Broker, Seller.
    ///
    /// [ShowingContactType](https://ddwiki.reso.org/display/DDW17/ShowingContactType+Field)
    #[serde(rename = "ShowingContactType", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_showing_contact_type_format")]
    pub showing_contact_type: Option<Vec<ShowingContactType>>,

    /// The days of the week that the property is available for showing.  i.e. Sundays, Mondays, Tuesdays, Wednesdays, Thursdays, Fridays, Saturdays
    ///
    /// [ShowingDays](https://ddwiki.reso.org/display/DDW17/ShowingDays+Field)
    #[serde(rename = "ShowingDays", skip_serializing_if = "Option::is_none")]
    pub showing_days: Option<String>,

    /// From the days selected in the ShowingDays field, the end time that the property is available for showing.
    ///
    /// [ShowingEndTime](https://ddwiki.reso.org/display/DDW17/ShowingEndTime+Field)
    #[serde(rename = "ShowingEndTime", skip_serializing_if = "Option::is_none")]
    pub showing_end_time: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// Remarks that detail the seller's instructions for showing the subject property. Showing instructions may include: contact information, showing times, notice required or other information. These remarks are privileged and are not for public viewing.
    ///
    /// [ShowingInstructions](https://ddwiki.reso.org/display/DDW17/ShowingInstructions+Field)
    #[serde(
        rename = "ShowingInstructions",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_instructions: Option<String>,

    /// A pick list of types of notice required to see the home.  i.e. Appointment Required, Courtesy Call Only, Go Direct, etc.
    ///
    /// [ShowingRequirements](https://ddwiki.reso.org/display/DDW17/ShowingRequirements+Field)
    #[serde(
        rename = "ShowingRequirements",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_showing_requirements_format")]
    pub showing_requirements: Option<Vec<ShowingRequirements>>,

    /// From the days selected in the ShowingDays field, the start time that the property is available for showing.
    ///
    /// [ShowingStartTime](https://ddwiki.reso.org/display/DDW17/ShowingStartTime+Field)
    #[serde(rename = "ShowingStartTime", skip_serializing_if = "Option::is_none")]
    pub showing_start_time: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// Is there a sign on the property.
    ///
    /// [SignOnPropertyYN](https://ddwiki.reso.org/display/DDW17/SignOnPropertyYN+Field)
    #[serde(rename = "SignOnPropertyYN", skip_serializing_if = "Option::is_none")]
    pub sign_on_property_yn: Option<bool>,

    /// A list of types of mobile home skirting.
    ///
    /// [Skirt](https://ddwiki.reso.org/display/DDW17/Skirt+Field)
    #[serde(rename = "Skirt", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_skirt_format")]
    pub skirt: Option<Vec<Skirt>>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider. The source system is the system from which the record was directly received. In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemID](https://ddwiki.reso.org/display/DDW17/SourceSystemID+Field)
    #[serde(rename = "SourceSystemID", skip_serializing_if = "Option::is_none")]
    pub source_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Source System. The Source System is the system from which the record was directly received. In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemKey](https://ddwiki.reso.org/display/DDW17/SourceSystemKey+Field)
    #[serde(rename = "SourceSystemKey", skip_serializing_if = "Option::is_none")]
    pub source_system_key: Option<String>,

    /// The name of the immediate record provider. The system from which the record was directly received. The legal name of the company.
    ///
    /// [SourceSystemName](https://ddwiki.reso.org/display/DDW17/SourceSystemName+Field)
    #[serde(rename = "SourceSystemName", skip_serializing_if = "Option::is_none")]
    pub source_system_name: Option<String>,

    /// A list of features or description of the spa included in the sale/lease.
    ///
    /// [SpaFeatures](https://ddwiki.reso.org/display/DDW17/SpaFeatures+Field)
    #[serde(rename = "SpaFeatures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_spa_features_format")]
    pub spa_features: Option<Vec<SpaFeatures>>,

    /// The property has a spa.
    ///
    /// [SpaYN](https://ddwiki.reso.org/display/DDW17/SpaYN+Field)
    #[serde(rename = "SpaYN", skip_serializing_if = "Option::is_none")]
    pub spa_yn: Option<bool>,

    /// Special licenses required/used by the business being sold.  i.e. Beer/Wine, Class H, Professional, Gambling, None.
    ///
    /// [SpecialLicenses](https://ddwiki.reso.org/display/DDW17/SpecialLicenses+Field)
    #[serde(rename = "SpecialLicenses", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_special_licenses_format")]
    pub special_licenses: Option<Vec<SpecialLicenses>>,

    /// A list of options that describe the type of sale.  i.e. Standard, REO, Short Sale, Probate, Auction, NOD, etc., at the time of listing.
    ///
    /// [SpecialListingConditions](https://ddwiki.reso.org/display/DDW17/SpecialListingConditions+Field)
    #[serde(
        rename = "SpecialListingConditions",
        skip_serializing_if = "Option::is_none"
    )]
    #[serde(default, with = "option_vec_special_listing_conditions_format")]
    pub special_listing_conditions: Option<Vec<SpecialListingConditions>>,

    /// The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (Active, Active Under Contract, Canceled, Closed, Expired, Pending, Withdrawn).  This is a Single Select field.
    ///
    /// [StandardStatus](https://ddwiki.reso.org/display/DDW17/StandardStatus+Field)
    #[serde(rename = "StandardStatus", skip_serializing_if = "Option::is_none")]
    pub standard_status: Option<StandardStatus>,

    /// Text field containing the accepted postal abbreviation for the state or province.
    ///
    /// [StateOrProvince](https://ddwiki.reso.org/display/DDW17/StateOrProvince+Field)
    #[serde(rename = "StateOrProvince", skip_serializing_if = "Option::is_none")]
    pub state_or_province: Option<StateOrProvince>,

    /// A sub-section or area of a defined state or province.  Examples would be the Keys in FL or Hudson Valley in NY.
    ///
    /// [StateRegion](https://ddwiki.reso.org/display/DDW17/StateRegion+Field)
    #[serde(rename = "StateRegion", skip_serializing_if = "Option::is_none")]
    pub state_region: Option<String>,

    /// The transactional timestamp automatically recorded by the MLS system representing the date/time the listing's status was last changed.
    ///
    /// [StatusChangeTimestamp](https://ddwiki.reso.org/display/DDW17/StatusChangeTimestamp+Field)
    #[serde(
        rename = "StatusChangeTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub status_change_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The number of floors in the property being sold.
    ///
    /// [Stories](https://ddwiki.reso.org/display/DDW17/Stories+Field)
    #[serde(rename = "Stories", skip_serializing_if = "Option::is_none")]
    pub stories: Option<f64>,

    /// The total number of floors in the building. In the case of multi-dwelling structures, this is the entire structure and not the individual dwelling being sold.
    ///
    /// [StoriesTotal](https://ddwiki.reso.org/display/DDW17/StoriesTotal+Field)
    #[serde(rename = "StoriesTotal", skip_serializing_if = "Option::is_none")]
    pub stories_total: Option<f64>,

    /// Information other than a prefix or suffix for the street portion of a postal address.
    ///
    /// [StreetAdditionalInfo](https://ddwiki.reso.org/display/DDW17/StreetAdditionalInfo+Field)
    #[serde(
        rename = "StreetAdditionalInfo",
        skip_serializing_if = "Option::is_none"
    )]
    pub street_additional_info: Option<String>,

    /// The direction indicator that precedes the listed property's street name.
    ///
    /// [StreetDirPrefix](https://ddwiki.reso.org/display/DDW17/StreetDirPrefix+Field)
    #[serde(rename = "StreetDirPrefix", skip_serializing_if = "Option::is_none")]
    pub street_dir_prefix: Option<StreetDirection>,

    /// The direction indicator that follows a listed property's street address.
    ///
    /// [StreetDirSuffix](https://ddwiki.reso.org/display/DDW17/StreetDirSuffix+Field)
    #[serde(rename = "StreetDirSuffix", skip_serializing_if = "Option::is_none")]
    pub street_dir_suffix: Option<StreetDirection>,

    /// The street name portion of a listed property's street address.
    ///
    /// [StreetName](https://ddwiki.reso.org/display/DDW17/StreetName+Field)
    #[serde(rename = "StreetName", skip_serializing_if = "Option::is_none")]
    pub street_name: Option<String>,

    /// The street number portion of a listed property's street address.  In some areas the street number may contain non-numeric characters.  This field can also contain extensions and modifiers to the street number, such as "1/2" or "-B".  This street number field should not include Prefixes, Direction or Suffixes.
    ///
    /// [StreetNumber](https://ddwiki.reso.org/display/DDW17/StreetNumber+Field)
    #[serde(rename = "StreetNumber", skip_serializing_if = "Option::is_none")]
    pub street_number: Option<String>,

    /// The integer portion of the street number.
    ///
    /// [StreetNumberNumeric](https://ddwiki.reso.org/display/DDW17/StreetNumberNumeric+Field)
    #[serde(
        rename = "StreetNumberNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub street_number_numeric: Option<f64>,

    /// The suffix portion of a listed property's street address.
    ///
    /// [StreetSuffix](https://ddwiki.reso.org/display/DDW17/StreetSuffix+Field)
    #[serde(rename = "StreetSuffix", skip_serializing_if = "Option::is_none")]
    pub street_suffix: Option<String>,

    /// The Street Suffix Modifier allows the member to enter a unique Street Suffix that was not found in the Street Suffix pick list or to extend or prefix the suffix.
    ///
    /// [StreetSuffixModifier](https://ddwiki.reso.org/display/DDW17/StreetSuffixModifier+Field)
    #[serde(
        rename = "StreetSuffixModifier",
        skip_serializing_if = "Option::is_none"
    )]
    pub street_suffix_modifier: Option<String>,

    /// The type of structure that the property completely or partially encompasses.  For example, House or Cabin are the overall structure and typically sold or leased as a whole.  Multi Family and Docks may be sold in whole, but are often sold or leased by unit/slip.  This field is the type of structure as opposed to style, which is under the Architectural Style field.
    ///
    /// [StructureType](https://ddwiki.reso.org/display/DDW17/StructureType+Field)
    #[serde(rename = "StructureType", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_structure_type_format")]
    pub structure_type: Option<Vec<StructureType>>,

    /// The total commission to be paid to the Sub Agency, expressed as either a percentage or a constant currency amount.
    ///
    /// [SubAgencyCompensation](https://ddwiki.reso.org/display/DDW17/SubAgencyCompensation+Field)
    #[serde(
        rename = "SubAgencyCompensation",
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_agency_compensation: Option<String>,

    /// A list of types to clarify the value entered in the SubAgencyCompensation field.  For example $, % or some other clarification of the SubAgencyCompensation.
    ///
    /// [SubAgencyCompensationType](https://ddwiki.reso.org/display/DDW17/SubAgencyCompensationType+Field)
    #[serde(
        rename = "SubAgencyCompensationType",
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_agency_compensation_type: Option<CompensationType>,

    /// A neighborhood, community, complex or builder tract.
    ///
    /// [SubdivisionName](https://ddwiki.reso.org/display/DDW17/SubdivisionName+Field)
    #[serde(rename = "SubdivisionName", skip_serializing_if = "Option::is_none")]
    pub subdivision_name: Option<String>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [SuppliesExpense](https://ddwiki.reso.org/display/DDW17/SuppliesExpense+Field)
    #[serde(rename = "SuppliesExpense", skip_serializing_if = "Option::is_none")]
    pub supplies_expense: Option<f64>,

    /// When permitted by the broker, the options made by the agent on behalf of the seller, where they would like their listings syndicated. i.e. Zillow, Trulia, Homes.com, etc.
    ///
    /// [SyndicateTo](https://ddwiki.reso.org/display/DDW17/SyndicateTo+Field)
    #[serde(rename = "SyndicateTo", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_syndicate_to_format")]
    pub syndicate_to: Option<Vec<SyndicateTo>>,

    /// Becoming more common in the industry, MLS's are hosting a separate "Public Remarks" for syndication purposes.  This field should be defaulted to containing the Public Remarks, but upon broker decision, modified to include contact and other information denied by IDX rules, but allowed under local and national regulations.
    ///
    /// [SyndicationRemarks](https://ddwiki.reso.org/display/DDW17/SyndicationRemarks+Field)
    #[serde(rename = "SyndicationRemarks", skip_serializing_if = "Option::is_none")]
    pub syndication_remarks: Option<String>,

    /// The annual property tax amount as of the last assessment made by the taxing authority.
    ///
    /// [TaxAnnualAmount](https://ddwiki.reso.org/display/DDW17/TaxAnnualAmount+Field)
    #[serde(rename = "TaxAnnualAmount", skip_serializing_if = "Option::is_none")]
    pub tax_annual_amount: Option<f64>,

    /// The property value as of the last assessment made by the taxing authority.
    ///
    /// [TaxAssessedValue](https://ddwiki.reso.org/display/DDW17/TaxAssessedValue+Field)
    #[serde(rename = "TaxAssessedValue", skip_serializing_if = "Option::is_none")]
    pub tax_assessed_value: Option<f64>,

    /// A type of legal description for land in developed areas where streets or other rights-of-ways delineate large parcels of land referred to as divided into lots on which homes or other types of developments are built.  An example would read "Lot 12 of Block 45 of Tract 3002 of the City of San Dunes, Desert County." Such a description would also reference an official plat filed with the clerk or recorder for that area which shows the location of the block and often the dimensions of the lots therein.
    ///
    /// [TaxBlock](https://ddwiki.reso.org/display/DDW17/TaxBlock+Field)
    #[serde(rename = "TaxBlock", skip_serializing_if = "Option::is_none")]
    pub tax_block: Option<String>,

    /// Some systems of parcel identification incorporate a method which utilizes a county identifier, a tax book number, a tax map number and a parcel identification number.
    ///
    /// [TaxBookNumber](https://ddwiki.reso.org/display/DDW17/TaxBookNumber+Field)
    #[serde(rename = "TaxBookNumber", skip_serializing_if = "Option::is_none")]
    pub tax_book_number: Option<String>,

    /// A type of legal description for land in developed areas where streets or other rights-of-ways delineate large parcels of land referred to as divided into lots on which homes or other types of developments are built.  An example would read "Lot 12 of Block 45 of Tract 3002 of the City of San Dunes, Desert County." Such a description would also reference an official plat filed with the clerk or recorder for that area which shows the location of the block and often the dimensions of the lots therein. The text here is also an index into the property as described by the County Recorder.
    ///
    /// [TaxLegalDescription](https://ddwiki.reso.org/display/DDW17/TaxLegalDescription+Field)
    #[serde(
        rename = "TaxLegalDescription",
        skip_serializing_if = "Option::is_none"
    )]
    pub tax_legal_description: Option<String>,

    /// A type of legal description for land in developed areas where streets or other rights-of-ways delineate large parcels of land referred to as divided into lots on which homes or other types of developments are built.  An example would read "Lot 12 of Block 45 of Tract 3002 of the City of San Dunes, Desert County." Such a description would also reference an official plat filed with the clerk or recorder for that area which shows the location of the block and often the dimensions of the lots therein.
    ///
    /// [TaxLot](https://ddwiki.reso.org/display/DDW17/TaxLot+Field)
    #[serde(rename = "TaxLot", skip_serializing_if = "Option::is_none")]
    pub tax_lot: Option<String>,

    /// Some systems of parcel identification incorporate a method which utilizes a county identifier, a tax book number, a tax map number and a parcel identification number.
    ///
    /// [TaxMapNumber](https://ddwiki.reso.org/display/DDW17/TaxMapNumber+Field)
    #[serde(rename = "TaxMapNumber", skip_serializing_if = "Option::is_none")]
    pub tax_map_number: Option<String>,

    /// Any other annual taxes, not including the tax reported in the TaxAmount field, as of the last assessment made by the taxing authority.
    ///
    /// [TaxOtherAnnualAssessmentAmount](https://ddwiki.reso.org/display/DDW17/TaxOtherAnnualAssessmentAmount+Field)
    #[serde(
        rename = "TaxOtherAnnualAssessmentAmount",
        skip_serializing_if = "Option::is_none"
    )]
    pub tax_other_annual_assessment_amount: Option<f64>,

    /// Some systems of parcel identification incorporate a method which utilizes a county identifier, a tax book number, a tax map number and a parcel identification number.
    ///
    /// [TaxParcelLetter](https://ddwiki.reso.org/display/DDW17/TaxParcelLetter+Field)
    #[serde(rename = "TaxParcelLetter", skip_serializing_if = "Option::is_none")]
    pub tax_parcel_letter: Option<String>,

    /// The current tax status of the mobile home in cases where the land or space is included in the sale.
    ///
    /// [TaxStatusCurrent](https://ddwiki.reso.org/display/DDW17/TaxStatusCurrent+Field)
    #[serde(rename = "TaxStatusCurrent", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_tax_status_current_format")]
    pub tax_status_current: Option<Vec<TaxStatusCurrent>>,

    /// A type of legal description for land in developed areas where streets or other rights-of-ways delineate large parcels of land referred to as divided into lots on which homes or other types of developments are built.  An example would read "Lot 12 of Block 45 of Tract 3002 of the City of San Dunes, Desert County." Such a description would also reference an official plat filed with the clerk or recorder for that area which shows the location of the block and often the dimensions of the lots therein.
    ///
    /// [TaxTract](https://ddwiki.reso.org/display/DDW17/TaxTract+Field)
    #[serde(rename = "TaxTract", skip_serializing_if = "Option::is_none")]
    pub tax_tract: Option<String>,

    /// The year in with the last assessment of the property value/tax was made.
    ///
    /// [TaxYear](https://ddwiki.reso.org/display/DDW17/TaxYear+Field)
    #[serde(rename = "TaxYear", skip_serializing_if = "Option::is_none")]
    pub tax_year: Option<f64>,

    /// A list of services or items that the tenant is responsible to pay.
    ///
    /// [TenantPays](https://ddwiki.reso.org/display/DDW17/TenantPays+Field)
    #[serde(rename = "TenantPays", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_tenant_pays_format")]
    pub tenant_pays: Option<Vec<TenantPays>>,

    /// The state of the surface of the land included with the property.  i.e. flat, rolling, etc.
    ///
    /// [Topography](https://ddwiki.reso.org/display/DDW17/Topography+Field)
    #[serde(rename = "Topography", skip_serializing_if = "Option::is_none")]
    pub topography: Option<String>,

    /// Total actual rent currently being collected from tenants of the income property.
    ///
    /// [TotalActualRent](https://ddwiki.reso.org/display/DDW17/TotalActualRent+Field)
    #[serde(rename = "TotalActualRent", skip_serializing_if = "Option::is_none")]
    pub total_actual_rent: Option<f64>,

    /// A subdivision of the county.
    ///
    /// [Township](https://ddwiki.reso.org/display/DDW17/Township+Field)
    #[serde(rename = "Township", skip_serializing_if = "Option::is_none")]
    pub township: Option<String>,

    /// The total commission to be paid to the transaction facilitator, expressed as either a percentage or a constant currency amount.
    ///
    /// [TransactionBrokerCompensation](https://ddwiki.reso.org/display/DDW17/TransactionBrokerCompensation+Field)
    #[serde(
        rename = "TransactionBrokerCompensation",
        skip_serializing_if = "Option::is_none"
    )]
    pub transaction_broker_compensation: Option<String>,

    /// A list of types to clarify the value entered in the TransactionBrokerCompensation field.  For example $, % or some other clarification of the TransactionBrokerCompensation.
    ///
    /// [TransactionBrokerCompensationType](https://ddwiki.reso.org/display/DDW17/TransactionBrokerCompensationType+Field)
    #[serde(
        rename = "TransactionBrokerCompensationType",
        skip_serializing_if = "Option::is_none"
    )]
    pub transaction_broker_compensation_type: Option<CompensationType>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [TrashExpense](https://ddwiki.reso.org/display/DDW17/TrashExpense+Field)
    #[serde(rename = "TrashExpense", skip_serializing_if = "Option::is_none")]
    pub trash_expense: Option<f64>,

    /// Text field containing the number or portion of a larger building or complex. Unit Number should appear following the street suffix or, if it exists, the street suffix direction, in the street address. Examples are: "APT G", "55", etc.
    ///
    /// [UnitNumber](https://ddwiki.reso.org/display/DDW17/UnitNumber+Field)
    #[serde(rename = "UnitNumber", skip_serializing_if = "Option::is_none")]
    pub unit_number: Option<String>,

    /// This field is a list of the types used in the Unit Type repeating elements. The Type is a list of possible Unit Types. i.e. 1, 2, 3 or 2 Bed, Studio, Special Loft, etc. Each selected are expected to appear as the "[type]" in the related UnitType fields in a flattened implementation (RETS 1.x only) of the room fields. A relational implementation of UnitTypes must omit the type from the field name and use UnitTypeType to create a vertical representation of the various unit types. The fact that the field repeats the word "type" is intentional.
    ///
    /// [UnitTypeType](https://ddwiki.reso.org/display/DDW17/UnitTypeType+Field)
    #[serde(rename = "UnitTypeType", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_unit_type_type_format")]
    pub unit_type_type: Option<Vec<UnitTypeType>>,

    /// A collection of types of units included in the income (multi-family) property. The collection includes a type, beds, baths and other aspects of the type of unit behind described.
    ///
    /// [UnitTypes](https://ddwiki.reso.org/display/DDW17/UnitTypes+Field)
    #[serde(rename = "UnitTypes", skip_serializing_if = "Option::is_none")]
    pub unit_types: Option<String>,

    /// Are the units furnished? i.e. All Units, Varies By Unit, None.
    ///
    /// [UnitsFurnished](https://ddwiki.reso.org/display/DDW17/UnitsFurnished+Field)
    #[serde(rename = "UnitsFurnished", skip_serializing_if = "Option::is_none")]
    pub units_furnished: Option<UnitsFurnished>,

    /// The Universal Property Identifier is a unique identifier for all real property in the US and Canada.  It is based on country and local identification methods and is limited to real property.  For cases such as shares of real property, units, and other more granular cases, please utilize the UniversalPropertySubId.
    ///
    /// [UniversalPropertyId](https://ddwiki.reso.org/display/DDW17/UniversalPropertyId+Field)
    #[serde(
        rename = "UniversalPropertyId",
        skip_serializing_if = "Option::is_none"
    )]
    pub universal_property_id: Option<String>,

    /// The Universal Property Sub Identifier is a unique identifier for all sub sets or shares of real property in the US and Canada.  This may include Stock Cooperatives, Community Apartment, Units for Rent, etc.  Informally abbreviated as "UPSI", It is based on country and local identification methods just as the UPI, but is limited to sub sets or shares of real property.  For cases of complete real property, please utilize the UniversalPropertyId field.
    ///
    /// [UniversalPropertySubId](https://ddwiki.reso.org/display/DDW17/UniversalPropertySubId+Field)
    #[serde(
        rename = "UniversalPropertySubId",
        skip_serializing_if = "Option::is_none"
    )]
    pub universal_property_sub_id: Option<String>,

    /// The UnparsedAddress is a text representation of the address with the full civic location as a single entity. It may optionally include any of City, StateOrProvince, PostalCode and Country.
    ///
    /// [UnparsedAddress](https://ddwiki.reso.org/display/DDW17/UnparsedAddress+Field)
    #[serde(rename = "UnparsedAddress", skip_serializing_if = "Option::is_none")]
    pub unparsed_address: Option<String>,

    /// A list of the utilities for the property being sold/leased.
    ///
    /// [Utilities](https://ddwiki.reso.org/display/DDW17/Utilities+Field)
    #[serde(rename = "Utilities", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_utilities_format")]
    pub utilities: Option<Vec<Utilities>>,

    /// An estimate of the amount of rent that may be foregone because of unoccupied units.
    ///
    /// [VacancyAllowance](https://ddwiki.reso.org/display/DDW17/VacancyAllowance+Field)
    #[serde(rename = "VacancyAllowance", skip_serializing_if = "Option::is_none")]
    pub vacancy_allowance: Option<f64>,

    /// An estimate of the percent of rent that may be foregone because of unoccupied units.
    ///
    /// [VacancyAllowanceRate](https://ddwiki.reso.org/display/DDW17/VacancyAllowanceRate+Field)
    #[serde(
        rename = "VacancyAllowanceRate",
        skip_serializing_if = "Option::is_none"
    )]
    pub vacancy_allowance_rate: Option<f64>,

    /// A list of the type(s) of vegetation on the property. Note that this is not for farm crops, but more residential type vegetation.
    ///
    /// [Vegetation](https://ddwiki.reso.org/display/DDW17/Vegetation+Field)
    #[serde(rename = "Vegetation", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_vegetation_format")]
    pub vegetation: Option<Vec<Vegetation>>,

    /// System generated timestamp of when the last update or change to the videos for this listing was made.
    ///
    /// [VideosChangeTimestamp](https://ddwiki.reso.org/display/DDW17/VideosChangeTimestamp+Field)
    #[serde(
        rename = "VideosChangeTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub videos_change_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The total number of videos or virtual tours included with the listing.
    ///
    /// [VideosCount](https://ddwiki.reso.org/display/DDW17/VideosCount+Field)
    #[serde(rename = "VideosCount", skip_serializing_if = "Option::is_none")]
    pub videos_count: Option<f64>,

    /// A view as seen from the listed property.
    ///
    /// [View](https://ddwiki.reso.org/display/DDW17/View+Field)
    #[serde(rename = "View", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_view_format")]
    pub view: Option<Vec<View>>,

    /// The property has a view.
    ///
    /// [ViewYN](https://ddwiki.reso.org/display/DDW17/ViewYN+Field)
    #[serde(rename = "ViewYN", skip_serializing_if = "Option::is_none")]
    pub view_yn: Option<bool>,

    /// A text field that holds the URL for a branded virtual tour of the property.
    ///
    /// [VirtualTourURLBranded](https://ddwiki.reso.org/display/DDW17/VirtualTourURLBranded+Field)
    #[serde(
        rename = "VirtualTourURLBranded",
        skip_serializing_if = "Option::is_none"
    )]
    pub virtual_tour_urlbranded: Option<String>,

    /// A text field that holds the URL for an unbranded virtual tour of the property.
    ///
    /// [VirtualTourURLUnbranded](https://ddwiki.reso.org/display/DDW17/VirtualTourURLUnbranded+Field)
    #[serde(
        rename = "VirtualTourURLUnbranded",
        skip_serializing_if = "Option::is_none"
    )]
    pub virtual_tour_urlunbranded: Option<String>,

    /// A walkability index based on the time to walk from a property to near by essentials such as grocery stores, schools, churches, etc.  See www.walkscore.com for more information and requirements for using WalkScore.
    ///
    /// [WalkScore](https://ddwiki.reso.org/display/DDW17/WalkScore+Field)
    #[serde(rename = "WalkScore", skip_serializing_if = "Option::is_none")]
    pub walk_score: Option<f64>,

    /// The name, if known, of the body of water on which the property is located. (E.g., lake name, river name, ocean name, sea name, canal name).
    ///
    /// [WaterBodyName](https://ddwiki.reso.org/display/DDW17/WaterBodyName+Field)
    #[serde(rename = "WaterBodyName", skip_serializing_if = "Option::is_none")]
    pub water_body_name: Option<String>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [WaterSewerExpense](https://ddwiki.reso.org/display/DDW17/WaterSewerExpense+Field)
    #[serde(rename = "WaterSewerExpense", skip_serializing_if = "Option::is_none")]
    pub water_sewer_expense: Option<f64>,

    /// A list of the source(s) of water for the property
    ///
    /// [WaterSource](https://ddwiki.reso.org/display/DDW17/WaterSource+Field)
    #[serde(rename = "WaterSource", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_water_source_format")]
    pub water_source: Option<Vec<WaterSource>>,

    /// Features of the waterfront on which the property is located.
    ///
    /// [WaterfrontFeatures](https://ddwiki.reso.org/display/DDW17/WaterfrontFeatures+Field)
    #[serde(rename = "WaterfrontFeatures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_waterfront_features_format")]
    pub waterfront_features: Option<Vec<WaterfrontFeatures>>,

    /// The property is on the waterfront.
    ///
    /// [WaterfrontYN](https://ddwiki.reso.org/display/DDW17/WaterfrontYN+Field)
    #[serde(rename = "WaterfrontYN", skip_serializing_if = "Option::is_none")]
    pub waterfront_yn: Option<bool>,

    /// A list of features or description of the windows included in the sale/lease.
    ///
    /// [WindowFeatures](https://ddwiki.reso.org/display/DDW17/WindowFeatures+Field)
    #[serde(rename = "WindowFeatures", skip_serializing_if = "Option::is_none")]
    #[serde(default, with = "option_vec_window_features_format")]
    pub window_features: Option<Vec<WindowFeatures>>,

    /// Date the listing was withdrawn from the market.  This is not when a listing contact was cancelled or closed, but a withdrawal from the market while the contract between the seller and listing agent is still in effect and an offer has not been accepted. This is the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS.
    ///
    /// [WithdrawnDate](https://ddwiki.reso.org/display/DDW17/WithdrawnDate+Field)
    #[serde(rename = "WithdrawnDate", skip_serializing_if = "Option::is_none")]
    pub withdrawn_date: Option<chrono::NaiveDate>,

    /// Measurement or percentage of the property that is wooded or forest.
    ///
    /// [WoodedArea](https://ddwiki.reso.org/display/DDW17/WoodedArea+Field)
    #[serde(rename = "WoodedArea", skip_serializing_if = "Option::is_none")]
    pub wooded_area: Option<f64>,

    /// The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations.
    ///
    /// [WorkmansCompensationExpense](https://ddwiki.reso.org/display/DDW17/WorkmansCompensationExpense+Field)
    #[serde(
        rename = "WorkmansCompensationExpense",
        skip_serializing_if = "Option::is_none"
    )]
    pub workmans_compensation_expense: Option<f64>,

    /// The year that an occupancy permit is first granted for the house or other local measure of initial habitability of the build. The type definition permits an empty value with an attribute noting that it is an unknown date or that the building is new construction. While constraints have not been applied, convention at the time of adoption has this as a four (4) digit year value.
    ///
    /// [YearBuilt](https://ddwiki.reso.org/display/DDW17/YearBuilt+Field)
    #[serde(rename = "YearBuilt", skip_serializing_if = "Option::is_none")]
    pub year_built: Option<f64>,

    /// A description of the details behind the year the structure was built.
    ///
    /// [YearBuiltDetails](https://ddwiki.reso.org/display/DDW17/YearBuiltDetails+Field)
    #[serde(rename = "YearBuiltDetails", skip_serializing_if = "Option::is_none")]
    pub year_built_details: Option<String>,

    /// The year a major rebuild/renovated of the structure occurred.
    ///
    /// [YearBuiltEffective](https://ddwiki.reso.org/display/DDW17/YearBuiltEffective+Field)
    #[serde(rename = "YearBuiltEffective", skip_serializing_if = "Option::is_none")]
    pub year_built_effective: Option<f64>,

    /// Add a list of sources of the year built.  i.e. Appraiser, Assessor, Builder, Estimated, etc.,
    ///
    /// [YearBuiltSource](https://ddwiki.reso.org/display/DDW17/YearBuiltSource+Field)
    #[serde(rename = "YearBuiltSource", skip_serializing_if = "Option::is_none")]
    pub year_built_source: Option<YearBuiltSource>,

    /// The year the business being sold was established.
    ///
    /// [YearEstablished](https://ddwiki.reso.org/display/DDW17/YearEstablished+Field)
    #[serde(rename = "YearEstablished", skip_serializing_if = "Option::is_none")]
    pub year_established: Option<f64>,

    /// The number of years the current owner has had possession of the business.
    ///
    /// [YearsCurrentOwner](https://ddwiki.reso.org/display/DDW17/YearsCurrentOwner+Field)
    #[serde(rename = "YearsCurrentOwner", skip_serializing_if = "Option::is_none")]
    pub years_current_owner: Option<f64>,

    /// A division of the city or county into areas of different permissible land uses. This Zone field should be used for the short code that is commonly used.  For full textual descriptions please use the ZoningDescription field.
    ///
    /// [Zoning](https://ddwiki.reso.org/display/DDW17/Zoning+Field)
    #[serde(rename = "Zoning", skip_serializing_if = "Option::is_none")]
    pub zoning: Option<String>,

    /// A list of descriptions of the zoning of the property. The zoning codes are often non-descriptive and variant. Zoning Description is a more descriptive form of the zoning for the property, i.e. Agricultural, Residential, Rezone Possible, etc. Specific zone codes must be added to the Zoning field.
    ///
    /// [ZoningDescription](https://ddwiki.reso.org/display/DDW17/ZoningDescription+Field)
    #[serde(rename = "ZoningDescription", skip_serializing_if = "Option::is_none")]
    pub zoning_description: Option<String>,
}

/// [Member Resource](https://ddwiki.reso.org/display/DDW17/Member+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct Member {
    /// The title or position of the member within their organization.
    ///
    /// [JobTitle](https://ddwiki.reso.org/display/DDW17/JobTitle+Field)
    #[serde(rename = "JobTitle", skip_serializing_if = "Option::is_none")]
    pub job_title: Option<String>,

    /// Date/time the member last logged into the source or other system.
    ///
    /// [LastLoginTimestamp](https://ddwiki.reso.org/display/DDW17/LastLoginTimestamp+Field)
    #[serde(rename = "LastLoginTimestamp", skip_serializing_if = "Option::is_none")]
    pub last_login_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The Member's Primary Board or Association of REALTORS.
    ///
    /// [MemberAOR](https://ddwiki.reso.org/display/DDW17/MemberAOR+Field)
    #[serde(rename = "MemberAOR", skip_serializing_if = "Option::is_none")]
    pub member_aor: Option<String>,

    /// The local, well-known identifier for the member's Association of REALTORS. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [MemberAORMlsId](https://ddwiki.reso.org/display/DDW17/MemberAORMlsId+Field)
    #[serde(rename = "MemberAORMlsId", skip_serializing_if = "Option::is_none")]
    pub member_aormls_id: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the MemberAORkey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId.
    ///
    /// [MemberAORkey](https://ddwiki.reso.org/display/DDW17/MemberAORkey+Field)
    #[serde(rename = "MemberAORkey", skip_serializing_if = "Option::is_none")]
    pub member_aorkey: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the MemberAORkey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId. This is the numeric only key and used as an alternative to the MemberAORkey field.
    ///
    /// [MemberAORkeyNumeric](https://ddwiki.reso.org/display/DDW17/MemberAORkeyNumeric+Field)
    #[serde(
        rename = "MemberAORkeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_aorkey_numeric: Option<f64>,

    /// The street number, direction, name and suffix of the member.
    ///
    /// [MemberAddress1](https://ddwiki.reso.org/display/DDW17/MemberAddress1+Field)
    #[serde(rename = "MemberAddress1", skip_serializing_if = "Option::is_none")]
    pub member_address1: Option<String>,

    /// The unit/suite number of the member.
    ///
    /// [MemberAddress2](https://ddwiki.reso.org/display/DDW17/MemberAddress2+Field)
    #[serde(rename = "MemberAddress2", skip_serializing_if = "Option::is_none")]
    pub member_address2: Option<String>,

    /// The association's notes regarding the member.
    ///
    /// [MemberAssociationComments](https://ddwiki.reso.org/display/DDW17/MemberAssociationComments+Field)
    #[serde(
        rename = "MemberAssociationComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_association_comments: Option<String>,

    /// The group of addresses to which the USPS assigns the same code to aid in mail delivery. For the USPS, these codes are 9 digits: 5 numbers for the ZIP Code, one letter for the carrier route type, and 3 numbers for the carrier route number.
    ///
    /// [MemberCarrierRoute](https://ddwiki.reso.org/display/DDW17/MemberCarrierRoute+Field)
    #[serde(rename = "MemberCarrierRoute", skip_serializing_if = "Option::is_none")]
    pub member_carrier_route: Option<String>,

    /// The city of the member.
    ///
    /// [MemberCity](https://ddwiki.reso.org/display/DDW17/MemberCity+Field)
    #[serde(rename = "MemberCity", skip_serializing_if = "Option::is_none")]
    pub member_city: Option<String>,

    /// The country abbreviation in a postal address.
    ///
    /// [MemberCountry](https://ddwiki.reso.org/display/DDW17/MemberCountry+Field)
    #[serde(rename = "MemberCountry", skip_serializing_if = "Option::is_none")]
    pub member_country: Option<String>,

    /// The county or parish in which the member is addressed.
    ///
    /// [MemberCountyOrParish](https://ddwiki.reso.org/display/DDW17/MemberCountyOrParish+Field)
    #[serde(
        rename = "MemberCountyOrParish",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_county_or_parish: Option<String>,

    /// Designations and certifications acknowledging experience and expertise in various real estate sectors are awarded by NAR and each affiliated group upon completion of required courses.
    ///
    /// [MemberDesignation](https://ddwiki.reso.org/display/DDW17/MemberDesignation+Field)
    #[serde(rename = "MemberDesignation", skip_serializing_if = "Option::is_none")]
    pub member_designation: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [MemberDirectPhone](https://ddwiki.reso.org/display/DDW17/MemberDirectPhone+Field)
    #[serde(rename = "MemberDirectPhone", skip_serializing_if = "Option::is_none")]
    pub member_direct_phone: Option<String>,

    /// The email address of the Member.
    ///
    /// [MemberEmail](https://ddwiki.reso.org/display/DDW17/MemberEmail+Field)
    #[serde(rename = "MemberEmail", skip_serializing_if = "Option::is_none")]
    pub member_email: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [MemberFax](https://ddwiki.reso.org/display/DDW17/MemberFax+Field)
    #[serde(rename = "MemberFax", skip_serializing_if = "Option::is_none")]
    pub member_fax: Option<String>,

    /// The first name of the Member.
    ///
    /// [MemberFirstName](https://ddwiki.reso.org/display/DDW17/MemberFirstName+Field)
    #[serde(rename = "MemberFirstName", skip_serializing_if = "Option::is_none")]
    pub member_first_name: Option<String>,

    /// The full name of the Member. (First Middle Last) or a alternate full name.
    ///
    /// [MemberFullName](https://ddwiki.reso.org/display/DDW17/MemberFullName+Field)
    #[serde(rename = "MemberFullName", skip_serializing_if = "Option::is_none")]
    pub member_full_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [MemberHomePhone](https://ddwiki.reso.org/display/DDW17/MemberHomePhone+Field)
    #[serde(rename = "MemberHomePhone", skip_serializing_if = "Option::is_none")]
    pub member_home_phone: Option<String>,

    /// The MemberMlsId of the Agent/Broker that this member is an assistant. The typical use will be to add the agent's ID to this field when editing the member record of the assistant.
    ///
    /// [MemberIsAssistantTo](https://ddwiki.reso.org/display/DDW17/MemberIsAssistantTo+Field)
    #[serde(
        rename = "MemberIsAssistantTo",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_is_assistant_to: Option<String>,

    /// A unique identifier for this record from the immediate source. This is a string that can include URI or other forms. Alternatively use the MemberKeyNumeric for a numeric only key field. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, see SourceSystemMemberKey and OriginatingSystemMemberKey.
    ///
    /// [MemberKey](https://ddwiki.reso.org/display/DDW17/MemberKey+Field)
    #[serde(rename = "MemberKey", skip_serializing_if = "Option::is_none")]
    pub member_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This is the numeric only key and used as an alternative to the MemberKey fields. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, see SourceSystemMemberKey and OriginatingSystemMemberKey.
    ///
    /// [MemberKeyNumeric](https://ddwiki.reso.org/display/DDW17/MemberKeyNumeric+Field)
    #[serde(rename = "MemberKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub member_key_numeric: Option<f64>,

    /// The languages the member speaks.
    ///
    /// [MemberLanguages](https://ddwiki.reso.org/display/DDW17/MemberLanguages+Field)
    #[serde(rename = "MemberLanguages", skip_serializing_if = "Option::is_none")]
    pub member_languages: Option<String>,

    /// The last name of the Member.
    ///
    /// [MemberLastName](https://ddwiki.reso.org/display/DDW17/MemberLastName+Field)
    #[serde(rename = "MemberLastName", skip_serializing_if = "Option::is_none")]
    pub member_last_name: Option<String>,

    /// The ID used to logon to the MLS system.
    ///
    /// [MemberLoginId](https://ddwiki.reso.org/display/DDW17/MemberLoginId+Field)
    #[serde(rename = "MemberLoginId", skip_serializing_if = "Option::is_none")]
    pub member_login_id: Option<String>,

    /// The middle name of the Member.
    ///
    /// [MemberMiddleName](https://ddwiki.reso.org/display/DDW17/MemberMiddleName+Field)
    #[serde(rename = "MemberMiddleName", skip_serializing_if = "Option::is_none")]
    pub member_middle_name: Option<String>,

    /// Does the member have access to the MLS system.
    ///
    /// [MemberMlsAccessYN](https://ddwiki.reso.org/display/DDW17/MemberMlsAccessYN+Field)
    #[serde(rename = "MemberMlsAccessYN", skip_serializing_if = "Option::is_none")]
    pub member_mls_access_yn: Option<bool>,

    /// The local, well-known identifier for the member. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [MemberMlsId](https://ddwiki.reso.org/display/DDW17/MemberMlsId+Field)
    #[serde(rename = "MemberMlsId", skip_serializing_if = "Option::is_none")]
    pub member_mls_id: Option<String>,

    /// The MLS security group or class given to the member.
    ///
    /// [MemberMlsSecurityClass](https://ddwiki.reso.org/display/DDW17/MemberMlsSecurityClass+Field)
    #[serde(
        rename = "MemberMlsSecurityClass",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_mls_security_class: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [MemberMobilePhone](https://ddwiki.reso.org/display/DDW17/MemberMobilePhone+Field)
    #[serde(rename = "MemberMobilePhone", skip_serializing_if = "Option::is_none")]
    pub member_mobile_phone: Option<String>,

    /// Prefix to the name (e.g. Dr. Mr. Ms. etc.)
    ///
    /// [MemberNamePrefix](https://ddwiki.reso.org/display/DDW17/MemberNamePrefix+Field)
    #[serde(rename = "MemberNamePrefix", skip_serializing_if = "Option::is_none")]
    pub member_name_prefix: Option<String>,

    /// Suffix to the surname (e.g. Esq., Jr., III etc.)
    ///
    /// [MemberNameSuffix](https://ddwiki.reso.org/display/DDW17/MemberNameSuffix+Field)
    #[serde(rename = "MemberNameSuffix", skip_serializing_if = "Option::is_none")]
    pub member_name_suffix: Option<String>,

    /// The national association ID of the member. i.e. in the U.S. is the NRDS number.
    ///
    /// [MemberNationalAssociationId](https://ddwiki.reso.org/display/DDW17/MemberNationalAssociationId+Field)
    #[serde(
        rename = "MemberNationalAssociationId",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_national_association_id: Option<String>,

    /// An alternate name used by the Member, usually as a substitute for the first name.
    ///
    /// [MemberNickname](https://ddwiki.reso.org/display/DDW17/MemberNickname+Field)
    #[serde(rename = "MemberNickname", skip_serializing_if = "Option::is_none")]
    pub member_nickname: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [MemberOfficePhone](https://ddwiki.reso.org/display/DDW17/MemberOfficePhone+Field)
    #[serde(rename = "MemberOfficePhone", skip_serializing_if = "Option::is_none")]
    pub member_office_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [MemberOfficePhoneExt](https://ddwiki.reso.org/display/DDW17/MemberOfficePhoneExt+Field)
    #[serde(
        rename = "MemberOfficePhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_office_phone_ext: Option<String>,

    /// A collection of the types of other phone fields available for this member. The collection includes the type of system and other details pertinent about other phone numbers
    ///
    /// [MemberOtherPhone](https://ddwiki.reso.org/display/DDW17/MemberOtherPhone+Field)
    #[serde(rename = "MemberOtherPhone", skip_serializing_if = "Option::is_none")]
    pub member_other_phone: Option<String>,

    /// The type of "other" phone. i.e. Preferred, Office, Mobile, Direct, Home, Fax, Pager, Voicemail, Toll Free, SMS, 1, 2, 3, First, Second, Third, etc.. This is used as the list of options for the Member Other Phone repeating elements.
    ///
    /// [MemberOtherPhoneType](https://ddwiki.reso.org/display/DDW17/MemberOtherPhoneType+Field)
    #[serde(
        rename = "MemberOtherPhoneType",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_other_phone_type: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [MemberPager](https://ddwiki.reso.org/display/DDW17/MemberPager+Field)
    #[serde(rename = "MemberPager", skip_serializing_if = "Option::is_none")]
    pub member_pager: Option<String>,

    /// A password that the member whishes to share with other systems. Normal security considerations apply and are the responsibility of the entity utilizing this field.
    ///
    /// [MemberPassword](https://ddwiki.reso.org/display/DDW17/MemberPassword+Field)
    #[serde(rename = "MemberPassword", skip_serializing_if = "Option::is_none")]
    pub member_password: Option<String>,

    /// (Telecommunications Device for the Deaf/TeleTYpewriter) A user terminal with keyboard input and printer or display output used by the hearing and speech impaired. The device contains a modem and is used over a standard analog phone line. If a recipient does not have a corresponding terminal device, TDD/TTY users dial a relay service composed of operators who receive the typed messages, call the recipients and speak the messages to them. The operators also type the responses back to the TDD/TTY user.
    ///
    /// [MemberPhoneTTYTDD](https://ddwiki.reso.org/display/DDW17/MemberPhoneTTYTDD+Field)
    #[serde(rename = "MemberPhoneTTYTDD", skip_serializing_if = "Option::is_none")]
    pub member_phone_ttytdd: Option<String>,

    /// The postal code of the member.
    ///
    /// [MemberPostalCode](https://ddwiki.reso.org/display/DDW17/MemberPostalCode+Field)
    #[serde(rename = "MemberPostalCode", skip_serializing_if = "Option::is_none")]
    pub member_postal_code: Option<String>,

    /// The extension of the postal/zip code. i.e. +4
    ///
    /// [MemberPostalCodePlus4](https://ddwiki.reso.org/display/DDW17/MemberPostalCodePlus4+Field)
    #[serde(
        rename = "MemberPostalCodePlus4",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_postal_code_plus4: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [MemberPreferredPhone](https://ddwiki.reso.org/display/DDW17/MemberPreferredPhone+Field)
    #[serde(
        rename = "MemberPreferredPhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_preferred_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [MemberPreferredPhoneExt](https://ddwiki.reso.org/display/DDW17/MemberPreferredPhoneExt+Field)
    #[serde(
        rename = "MemberPreferredPhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_preferred_phone_ext: Option<String>,

    /// A collection of the types of social media fields available for this member. The collection includes the type of system and other details pertinent about social media
    ///
    /// [MemberSocialMedia](https://ddwiki.reso.org/display/DDW17/MemberSocialMedia+Field)
    #[serde(rename = "MemberSocialMedia", skip_serializing_if = "Option::is_none")]
    pub member_social_media: Option<String>,

    /// The license of the Member. Separate multiple licenses with a comma and space.
    ///
    /// [MemberStateLicense](https://ddwiki.reso.org/display/DDW17/MemberStateLicense+Field)
    #[serde(rename = "MemberStateLicense", skip_serializing_if = "Option::is_none")]
    pub member_state_license: Option<String>,

    /// The state in which the member is licensed.
    ///
    /// [MemberStateLicenseState](https://ddwiki.reso.org/display/DDW17/MemberStateLicenseState+Field)
    #[serde(
        rename = "MemberStateLicenseState",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_state_license_state: Option<String>,

    /// The state or province in which the member is addressed.
    ///
    /// [MemberStateOrProvince](https://ddwiki.reso.org/display/DDW17/MemberStateOrProvince+Field)
    #[serde(
        rename = "MemberStateOrProvince",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_state_or_province: Option<String>,

    /// Is the account active, inactive or under disciplinary action.
    ///
    /// [MemberStatus](https://ddwiki.reso.org/display/DDW17/MemberStatus+Field)
    #[serde(rename = "MemberStatus", skip_serializing_if = "Option::is_none")]
    pub member_status: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [MemberTollFreePhone](https://ddwiki.reso.org/display/DDW17/MemberTollFreePhone+Field)
    #[serde(
        rename = "MemberTollFreePhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub member_toll_free_phone: Option<String>,

    /// The type of member. i.e. Agent, Broker, Office Manager, Appraiser, Photographer, Assistants, MLO, Realtor, Association Staff, MLS Staff, etc.
    ///
    /// [MemberType](https://ddwiki.reso.org/display/DDW17/MemberType+Field)
    #[serde(rename = "MemberType", skip_serializing_if = "Option::is_none")]
    pub member_type: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [MemberVoiceMail](https://ddwiki.reso.org/display/DDW17/MemberVoiceMail+Field)
    #[serde(rename = "MemberVoiceMail", skip_serializing_if = "Option::is_none")]
    pub member_voice_mail: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [MemberVoiceMailExt](https://ddwiki.reso.org/display/DDW17/MemberVoiceMailExt+Field)
    #[serde(rename = "MemberVoiceMailExt", skip_serializing_if = "Option::is_none")]
    pub member_voice_mail_ext: Option<String>,

    /// Date/time the roster (member or office) record was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28Member%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set. This is a foreign key relating to the Office resource's OfficeKey.
    ///
    /// [OfficeKey](https://ddwiki.reso.org/display/DDW17/OfficeKey+Field)
    #[serde(rename = "OfficeKey", skip_serializing_if = "Option::is_none")]
    pub office_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set. This is a foreign key relating to the Office resource's OfficeKey.  This is the numeric only key and used as an alternative to the MemberAORkey field.
    ///
    /// [OfficeKeyNumeric](https://ddwiki.reso.org/display/DDW17/OfficeKeyNumeric+Field)
    #[serde(rename = "OfficeKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub office_key_numeric: Option<f64>,

    /// The local, well-known identifier. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [OfficeMlsId](https://ddwiki.reso.org/display/DDW17/OfficeMlsId+Field)
    #[serde(rename = "OfficeMlsId", skip_serializing_if = "Option::is_none")]
    pub office_mls_id: Option<String>,

    /// The legal name of the brokerage.
    ///
    /// [OfficeName](https://ddwiki.reso.org/display/DDW17/OfficeName+Field)
    #[serde(rename = "OfficeName", skip_serializing_if = "Option::is_none")]
    pub office_name: Option<String>,

    /// Date/time the roster (member or office) record was originally input into the source system.
    ///
    /// [OriginalEntryTimestamp](https://ddwiki.reso.org/display/DDW17/OriginalEntryTimestamp+%28Member%29+Field)
    #[serde(
        rename = "OriginalEntryTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub original_entry_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider. The Originating system is the system with authoritative control over the record. For example; the name of the MLS where the member was input. In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [OriginatingSystemID](https://ddwiki.reso.org/display/DDW17/OriginatingSystemID+%28Member%29+Field)
    #[serde(
        rename = "OriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Originating system. The Originating system is the system with authoritative control over the record. For example, the Multiple Listing Service where the member was input. There may be cases where the Source System (how you received the record) is not the Originating System. See Source System Key for more information.
    ///
    /// [OriginatingSystemMemberKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemMemberKey+Field)
    #[serde(
        rename = "OriginatingSystemMemberKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_member_key: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the member is originally input by the member.  The legal name of the company.
    ///
    /// [OriginatingSystemName](https://ddwiki.reso.org/display/DDW17/OriginatingSystemName+%28Member%29+Field)
    #[serde(
        rename = "OriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_name: Option<String>,

    /// A list of types of sites, blog, social media, the Member URL or ID is referring to. i.e. Website, Blog, Facebook, Twitter, LinkedIn, Skype, etc., This list is used to populate the Type with repeating Social Media URL or ID types.
    ///
    /// [SocialMediaType](https://ddwiki.reso.org/display/DDW17/SocialMediaType+Field)
    #[serde(rename = "SocialMediaType", skip_serializing_if = "Option::is_none")]
    pub social_media_type: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider.  The source system is the system from which the record was directly received.  In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemID](https://ddwiki.reso.org/display/DDW17/SourceSystemID+%28Member%29+Field)
    #[serde(rename = "SourceSystemID", skip_serializing_if = "Option::is_none")]
    pub source_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Source System. The Source System is the system from which the record was directly received. In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemMemberKey](https://ddwiki.reso.org/display/DDW17/SourceSystemMemberKey+Field)
    #[serde(
        rename = "SourceSystemMemberKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_system_member_key: Option<String>,

    /// The name of the immediate record provider.  The system from which the record was directly received.  The legal name of the company.
    ///
    /// [SourceSystemName](https://ddwiki.reso.org/display/DDW17/SourceSystemName+%28Member%29+Field)
    #[serde(rename = "SourceSystemName", skip_serializing_if = "Option::is_none")]
    pub source_system_name: Option<String>,

    /// When permitted by the broker, the options made by the individual agent on where they would like their listings syndicated.  i.e. Zillow, Trulia, Homes.com, etc.
    ///
    /// [SyndicateTo](https://ddwiki.reso.org/display/DDW17/SyndicateTo+%28Member%29+Field)
    #[serde(rename = "SyndicateTo", skip_serializing_if = "Option::is_none")]
    pub syndicate_to: Option<String>,
}

/// [Office Resource](https://ddwiki.reso.org/display/DDW17/Office+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct Office {
    /// The name of the franchise to which the broker/office is contracted.
    ///
    /// [FranchiseAffiliation](https://ddwiki.reso.org/display/DDW17/FranchiseAffiliation+Field)
    #[serde(
        rename = "FranchiseAffiliation",
        skip_serializing_if = "Option::is_none"
    )]
    pub franchise_affiliation: Option<String>,

    /// Does the Office/Broker participate in IDX.
    ///
    /// [IDXOfficeParticipationYN](https://ddwiki.reso.org/display/DDW17/IDXOfficeParticipationYN+Field)
    #[serde(
        rename = "IDXOfficeParticipationYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub idxoffice_participation_yn: Option<bool>,

    /// OfficeKey of the Main Office in a firm/company of offices.  This is a self referencing foreign key relating to this resource's OfficeKey.  This key may be the same value as the OfficeKey for a given record if the given office is the Main Office.
    ///
    /// [MainOfficeKey](https://ddwiki.reso.org/display/DDW17/MainOfficeKey+Field)
    #[serde(rename = "MainOfficeKey", skip_serializing_if = "Option::is_none")]
    pub main_office_key: Option<String>,

    /// OfficeKey of the Main Office in a firm/company of offices.  This is a self referencing foreign key relating to this resource's OfficeKey.  This key may be the same value as the OfficeKey for a given record if the given office is the Main Office.  This is the numeric only key and used as an alternative to the MainOfficeKey field.
    ///
    /// [MainOfficeKeyNumeric](https://ddwiki.reso.org/display/DDW17/MainOfficeKeyNumeric+Field)
    #[serde(
        rename = "MainOfficeKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub main_office_key_numeric: Option<f64>,

    /// OfficeMlsId of the Main Office in a firm/company of offices.
    ///
    /// [MainOfficeMlsId](https://ddwiki.reso.org/display/DDW17/MainOfficeMlsId+Field)
    #[serde(rename = "MainOfficeMlsId", skip_serializing_if = "Option::is_none")]
    pub main_office_mls_id: Option<String>,

    /// Date/time the roster (member or office) record was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28Office%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The Office's Board or Association of REALTORS.
    ///
    /// [OfficeAOR](https://ddwiki.reso.org/display/DDW17/OfficeAOR+Field)
    #[serde(rename = "OfficeAOR", skip_serializing_if = "Option::is_none")]
    pub office_aor: Option<String>,

    /// The local, well-known identifier for the office's Association of REALTORS. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [OfficeAORMlsId](https://ddwiki.reso.org/display/DDW17/OfficeAORMlsId+Field)
    #[serde(rename = "OfficeAORMlsId", skip_serializing_if = "Option::is_none")]
    pub office_aormls_id: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the OfficeAORkey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId.  This is a foreign key relating to the AOR's member management system in which the record was originated.
    ///
    /// [OfficeAORkey](https://ddwiki.reso.org/display/DDW17/OfficeAORkey+Field)
    #[serde(rename = "OfficeAORkey", skip_serializing_if = "Option::is_none")]
    pub office_aorkey: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the OfficeAORkey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId.  This is a foreign key relating to the AOR's member management system in which the record was originated.  This is the numeric only key and used as an alternative to the OfficeAORkey field.
    ///
    /// [OfficeAORkeyNumeric](https://ddwiki.reso.org/display/DDW17/OfficeAORkeyNumeric+Field)
    #[serde(
        rename = "OfficeAORkeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub office_aorkey_numeric: Option<f64>,

    /// The street number, direction, name and suffix of the office.
    ///
    /// [OfficeAddress1](https://ddwiki.reso.org/display/DDW17/OfficeAddress1+Field)
    #[serde(rename = "OfficeAddress1", skip_serializing_if = "Option::is_none")]
    pub office_address1: Option<String>,

    /// The unit/suite number of the office.
    ///
    /// [OfficeAddress2](https://ddwiki.reso.org/display/DDW17/OfficeAddress2+Field)
    #[serde(rename = "OfficeAddress2", skip_serializing_if = "Option::is_none")]
    pub office_address2: Option<String>,

    /// Notes relating to the office.
    ///
    /// [OfficeAssociationComments](https://ddwiki.reso.org/display/DDW17/OfficeAssociationComments+Field)
    #[serde(
        rename = "OfficeAssociationComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub office_association_comments: Option<String>,

    /// The level of the office in the hierarchy of Main, Branch, Stand Alone, etc.,
    ///
    /// [OfficeBranchType](https://ddwiki.reso.org/display/DDW17/OfficeBranchType+Field)
    #[serde(rename = "OfficeBranchType", skip_serializing_if = "Option::is_none")]
    pub office_branch_type: Option<String>,

    /// The MemberKey of the responsible/owning broker.  This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [OfficeBrokerKey](https://ddwiki.reso.org/display/DDW17/OfficeBrokerKey+Field)
    #[serde(rename = "OfficeBrokerKey", skip_serializing_if = "Option::is_none")]
    pub office_broker_key: Option<String>,

    /// The MemberKey of the responsible/owning broker.  This is a foreign key relating to the Member resource's MemberKey.  This is the numeric only key and used as an alternative to the OfficeBrokerKey field.
    ///
    /// [OfficeBrokerKeyNumeric](https://ddwiki.reso.org/display/DDW17/OfficeBrokerKeyNumeric+Field)
    #[serde(
        rename = "OfficeBrokerKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub office_broker_key_numeric: Option<f64>,

    /// The MemberMlsId of the responsible/owning broker.
    ///
    /// [OfficeBrokerMlsId](https://ddwiki.reso.org/display/DDW17/OfficeBrokerMlsId+Field)
    #[serde(rename = "OfficeBrokerMlsId", skip_serializing_if = "Option::is_none")]
    pub office_broker_mls_id: Option<String>,

    /// The city of the office.
    ///
    /// [OfficeCity](https://ddwiki.reso.org/display/DDW17/OfficeCity+Field)
    #[serde(rename = "OfficeCity", skip_serializing_if = "Option::is_none")]
    pub office_city: Option<String>,

    /// When an office/firm is a corporation, an independent license number is issued.
    ///
    /// [OfficeCorporateLicense](https://ddwiki.reso.org/display/DDW17/OfficeCorporateLicense+Field)
    #[serde(
        rename = "OfficeCorporateLicense",
        skip_serializing_if = "Option::is_none"
    )]
    pub office_corporate_license: Option<String>,

    /// The county or parish in which the offices is located.
    ///
    /// [OfficeCountyOrParish](https://ddwiki.reso.org/display/DDW17/OfficeCountyOrParish+Field)
    #[serde(
        rename = "OfficeCountyOrParish",
        skip_serializing_if = "Option::is_none"
    )]
    pub office_county_or_parish: Option<String>,

    /// The email address of the office
    ///
    /// [OfficeEmail](https://ddwiki.reso.org/display/DDW17/OfficeEmail+Field)
    #[serde(rename = "OfficeEmail", skip_serializing_if = "Option::is_none")]
    pub office_email: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [OfficeFax](https://ddwiki.reso.org/display/DDW17/OfficeFax+Field)
    #[serde(rename = "OfficeFax", skip_serializing_if = "Option::is_none")]
    pub office_fax: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set.
    ///
    /// [OfficeKey](https://ddwiki.reso.org/display/DDW17/OfficeKey+%28Office%29+Field)
    #[serde(rename = "OfficeKey", skip_serializing_if = "Option::is_none")]
    pub office_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This is the numeric only key and used as an alternative to the OfficeKey fields.  This is the local key of the system.  When records are received from other systems, a local key is commonly applied.  If conveying the original keys from the source or originating systems, see SourceSystemOfficeKey and OriginatingSystemOfficeKey.
    ///
    /// [OfficeKeyNumeric](https://ddwiki.reso.org/display/DDW17/OfficeKeyNumeric+%28Office%29+Field)
    #[serde(rename = "OfficeKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub office_key_numeric: Option<f64>,

    /// The lead Office Manager for the given office.  This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [OfficeManagerKey](https://ddwiki.reso.org/display/DDW17/OfficeManagerKey+Field)
    #[serde(rename = "OfficeManagerKey", skip_serializing_if = "Option::is_none")]
    pub office_manager_key: Option<String>,

    /// The lead Office Manager for the given office.  This is a foreign key relating to the Member resource's MemberKey.  This is the numeric only key and used as an alternative to the OfficeManagerKey field.
    ///
    /// [OfficeManagerKeyNumeric](https://ddwiki.reso.org/display/DDW17/OfficeManagerKeyNumeric+Field)
    #[serde(
        rename = "OfficeManagerKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub office_manager_key_numeric: Option<f64>,

    /// The lead Office Manager for the given office.
    ///
    /// [OfficeManagerMlsId](https://ddwiki.reso.org/display/DDW17/OfficeManagerMlsId+Field)
    #[serde(rename = "OfficeManagerMlsId", skip_serializing_if = "Option::is_none")]
    pub office_manager_mls_id: Option<String>,

    /// The local, well-known identifier. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [OfficeMlsId](https://ddwiki.reso.org/display/DDW17/OfficeMlsId+%28Office%29+Field)
    #[serde(rename = "OfficeMlsId", skip_serializing_if = "Option::is_none")]
    pub office_mls_id: Option<String>,

    /// The legal name of the brokerage.
    ///
    /// [OfficeName](https://ddwiki.reso.org/display/DDW17/OfficeName+%28Office%29+Field)
    #[serde(rename = "OfficeName", skip_serializing_if = "Option::is_none")]
    pub office_name: Option<String>,

    /// The national association ID of the office.  i.e. in the U.S. is the NRDS number.
    ///
    /// [OfficeNationalAssociationId](https://ddwiki.reso.org/display/DDW17/OfficeNationalAssociationId+Field)
    #[serde(
        rename = "OfficeNationalAssociationId",
        skip_serializing_if = "Option::is_none"
    )]
    pub office_national_association_id: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [OfficePhone](https://ddwiki.reso.org/display/DDW17/OfficePhone+Field)
    #[serde(rename = "OfficePhone", skip_serializing_if = "Option::is_none")]
    pub office_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [OfficePhoneExt](https://ddwiki.reso.org/display/DDW17/OfficePhoneExt+Field)
    #[serde(rename = "OfficePhoneExt", skip_serializing_if = "Option::is_none")]
    pub office_phone_ext: Option<String>,

    /// The postal code of the office.
    ///
    /// [OfficePostalCode](https://ddwiki.reso.org/display/DDW17/OfficePostalCode+Field)
    #[serde(rename = "OfficePostalCode", skip_serializing_if = "Option::is_none")]
    pub office_postal_code: Option<String>,

    /// The extension of the postal/zip code.  i.e. +4
    ///
    /// [OfficePostalCodePlus4](https://ddwiki.reso.org/display/DDW17/OfficePostalCodePlus4+Field)
    #[serde(
        rename = "OfficePostalCodePlus4",
        skip_serializing_if = "Option::is_none"
    )]
    pub office_postal_code_plus4: Option<String>,

    /// A collection of the types of social media fields  available for this office. The collection includes the type of system and other details pertinent about social media
    ///
    /// [OfficeSocialMedia](https://ddwiki.reso.org/display/DDW17/OfficeSocialMedia+Field)
    #[serde(rename = "OfficeSocialMedia", skip_serializing_if = "Option::is_none")]
    pub office_social_media: Option<String>,

    /// The state or province in which the office is located.
    ///
    /// [OfficeStateOrProvince](https://ddwiki.reso.org/display/DDW17/OfficeStateOrProvince+Field)
    #[serde(
        rename = "OfficeStateOrProvince",
        skip_serializing_if = "Option::is_none"
    )]
    pub office_state_or_province: Option<String>,

    /// Is the office active, inactive or under disciplinary action.
    ///
    /// [OfficeStatus](https://ddwiki.reso.org/display/DDW17/OfficeStatus+Field)
    #[serde(rename = "OfficeStatus", skip_serializing_if = "Option::is_none")]
    pub office_status: Option<String>,

    /// The type of business conducted by the office.  i.e. Real Estate, Appraiser, etc.
    ///
    /// [OfficeType](https://ddwiki.reso.org/display/DDW17/OfficeType+Field)
    #[serde(rename = "OfficeType", skip_serializing_if = "Option::is_none")]
    pub office_type: Option<String>,

    /// Date/time the roster (member or office) record was originally input into the source system.
    ///
    /// [OriginalEntryTimestamp](https://ddwiki.reso.org/display/DDW17/OriginalEntryTimestamp+%28Office%29+Field)
    #[serde(
        rename = "OriginalEntryTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub original_entry_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the office was input.  In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [OriginatingSystemID](https://ddwiki.reso.org/display/DDW17/OriginatingSystemID+%28Office%29+Field)
    #[serde(
        rename = "OriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_id: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the office is originally input by the member.  The legal name of the company.
    ///
    /// [OriginatingSystemName](https://ddwiki.reso.org/display/DDW17/OriginatingSystemName+%28Office%29+Field)
    #[serde(
        rename = "OriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_name: Option<String>,

    /// The system key, a unique record identifier, from the Originating system.  The Originating system is the system with authoritative control over the record.  For example, the Multiple Listing Service where the office was input.  There may be cases where the Source System (how you received the record) is not the Originating System.  See Source System Key for more information.
    ///
    /// [OriginatingSystemOfficeKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemOfficeKey+Field)
    #[serde(
        rename = "OriginatingSystemOfficeKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_office_key: Option<String>,

    /// A list of types of sites, blog, social media, the Office URL or ID is referring to.  i.e. Website, Blog, Facebook, Twitter, LinkedIn, Skype, etc.,  This list is used to populate the Type with repeating Social Media URL or ID types.
    ///
    /// [SocialMediaType](https://ddwiki.reso.org/display/DDW17/SocialMediaType+%28Office%29+Field)
    #[serde(rename = "SocialMediaType", skip_serializing_if = "Option::is_none")]
    pub social_media_type: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider.  The source system is the system from which the record was directly received.  In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemID](https://ddwiki.reso.org/display/DDW17/SourceSystemID+%28Office%29+Field)
    #[serde(rename = "SourceSystemID", skip_serializing_if = "Option::is_none")]
    pub source_system_id: Option<String>,

    /// The name of the immediate record provider.  The system from which the record was directly received.  The legal name of the company.
    ///
    /// [SourceSystemName](https://ddwiki.reso.org/display/DDW17/SourceSystemName+%28Office%29+Field)
    #[serde(rename = "SourceSystemName", skip_serializing_if = "Option::is_none")]
    pub source_system_name: Option<String>,

    /// The system key, a unique record identifier, from the Source System.  The Source System is the system from which the record was directly received.  In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemOfficeKey](https://ddwiki.reso.org/display/DDW17/SourceSystemOfficeKey+Field)
    #[serde(
        rename = "SourceSystemOfficeKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_system_office_key: Option<String>,

    /// A list of options allowing the broker to pass the decision of syndication choice down to the listing agents. i.e. No Agent Choice, Allow Agent Choice, Restrict Agent Choice, etc.
    ///
    /// [SyndicateAgentOption](https://ddwiki.reso.org/display/DDW17/SyndicateAgentOption+Field)
    #[serde(
        rename = "SyndicateAgentOption",
        skip_serializing_if = "Option::is_none"
    )]
    pub syndicate_agent_option: Option<String>,

    /// The principal broker's choice on where they would like their listings syndicated. i.e. Zillow, Trulia, Homes.com, etc.
    ///
    /// [SyndicateTo](https://ddwiki.reso.org/display/DDW17/SyndicateTo+%28Office%29+Field)
    #[serde(rename = "SyndicateTo", skip_serializing_if = "Option::is_none")]
    pub syndicate_to: Option<String>,
}

/// [Contacts Resource](https://ddwiki.reso.org/display/DDW17/Contacts+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct Contacts {
    /// The wedding anniversary of the contact; month, day and year.
    ///
    /// [Anniversary](https://ddwiki.reso.org/display/DDW17/Anniversary+Field)
    #[serde(rename = "Anniversary", skip_serializing_if = "Option::is_none")]
    pub anniversary: Option<chrono::NaiveDate>,

    /// Email address of the contact's assistant.
    ///
    /// [AssistantEmail](https://ddwiki.reso.org/display/DDW17/AssistantEmail+Field)
    #[serde(rename = "AssistantEmail", skip_serializing_if = "Option::is_none")]
    pub assistant_email: Option<String>,

    /// Name of the contact's assistant.
    ///
    /// [AssistantName](https://ddwiki.reso.org/display/DDW17/AssistantName+Field)
    #[serde(rename = "AssistantName", skip_serializing_if = "Option::is_none")]
    pub assistant_name: Option<String>,

    /// Phone number of the contact's assistant.
    ///
    /// [AssistantPhone](https://ddwiki.reso.org/display/DDW17/AssistantPhone+Field)
    #[serde(rename = "AssistantPhone", skip_serializing_if = "Option::is_none")]
    pub assistant_phone: Option<String>,

    /// Phone number extension of the contact's assistant.
    ///
    /// [AssistantPhoneExt](https://ddwiki.reso.org/display/DDW17/AssistantPhoneExt+Field)
    #[serde(rename = "AssistantPhoneExt", skip_serializing_if = "Option::is_none")]
    pub assistant_phone_ext: Option<String>,

    /// The birthday of the contact; month, day and year.
    ///
    /// [Birthdate](https://ddwiki.reso.org/display/DDW17/Birthdate+Field)
    #[serde(rename = "Birthdate", skip_serializing_if = "Option::is_none")]
    pub birthdate: Option<chrono::NaiveDate>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [BusinessFax](https://ddwiki.reso.org/display/DDW17/BusinessFax+Field)
    #[serde(rename = "BusinessFax", skip_serializing_if = "Option::is_none")]
    pub business_fax: Option<String>,

    /// A list of the names of the contact's children in a comma separated list.
    ///
    /// [Children](https://ddwiki.reso.org/display/DDW17/Children+Field)
    #[serde(rename = "Children", skip_serializing_if = "Option::is_none")]
    pub children: Option<String>,

    /// The contact's company or employer.
    ///
    /// [Company](https://ddwiki.reso.org/display/DDW17/Company+Field)
    #[serde(rename = "Company", skip_serializing_if = "Option::is_none")]
    pub company: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the ContactKey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId.
    ///
    /// [ContactKey](https://ddwiki.reso.org/display/DDW17/ContactKey+Field)
    #[serde(rename = "ContactKey", skip_serializing_if = "Option::is_none")]
    pub contact_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the ContactKey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId.  This is the numeric only key and used as an alternative to the ContactKey field.
    ///
    /// [ContactKeyNumeric](https://ddwiki.reso.org/display/DDW17/ContactKeyNumeric+Field)
    #[serde(rename = "ContactKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub contact_key_numeric: Option<f64>,

    /// The local, well-known identifier for the contact. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system and is used by the Contact to logon to a client portal in that system.
    ///
    /// [ContactLoginId](https://ddwiki.reso.org/display/DDW17/ContactLoginId+Field)
    #[serde(rename = "ContactLoginId", skip_serializing_if = "Option::is_none")]
    pub contact_login_id: Option<String>,

    /// A client password that the member wishes to share with other systems. Normal security considerations apply and are the responsibility of the entity utilizing this field.
    ///
    /// [ContactPassword](https://ddwiki.reso.org/display/DDW17/ContactPassword+Field)
    #[serde(rename = "ContactPassword", skip_serializing_if = "Option::is_none")]
    pub contact_password: Option<String>,

    /// The status of the contact. Active, Inactive, On Vacation, Deleted, etc.,
    ///
    /// [ContactStatus](https://ddwiki.reso.org/display/DDW17/ContactStatus+Field)
    #[serde(rename = "ContactStatus", skip_serializing_if = "Option::is_none")]
    pub contact_status: Option<String>,

    /// The type of contact. i.e. Business, Friend, Family, Prospect, Ready to Buy, etc.
    ///
    /// [ContactType](https://ddwiki.reso.org/display/DDW17/ContactType+Field)
    #[serde(rename = "ContactType", skip_serializing_if = "Option::is_none")]
    pub contact_type: Option<String>,

    /// A collection of the types of other phone fields  available for Contacts. The collection includes the type of system and other details pertinent about other phone numbers
    ///
    /// [ContactsOtherPhone](https://ddwiki.reso.org/display/DDW17/ContactsOtherPhone+Field)
    #[serde(rename = "ContactsOtherPhone", skip_serializing_if = "Option::is_none")]
    pub contacts_other_phone: Option<String>,

    /// A collection of the types of social media fields  available for this contact. The collection includes the type of system and other details pertinent about social media
    ///
    /// [ContactsSocialMedia](https://ddwiki.reso.org/display/DDW17/ContactsSocialMedia+Field)
    #[serde(
        rename = "ContactsSocialMedia",
        skip_serializing_if = "Option::is_none"
    )]
    pub contacts_social_media: Option<String>,

    /// The department in which the contact works.
    ///
    /// [Department](https://ddwiki.reso.org/display/DDW17/Department+Field)
    #[serde(rename = "Department", skip_serializing_if = "Option::is_none")]
    pub department: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [DirectPhone](https://ddwiki.reso.org/display/DDW17/DirectPhone+Field)
    #[serde(rename = "DirectPhone", skip_serializing_if = "Option::is_none")]
    pub direct_phone: Option<String>,

    /// The preferred Email address of the contact.
    ///
    /// [Email](https://ddwiki.reso.org/display/DDW17/Email+Field)
    #[serde(rename = "Email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,

    /// The secondary email address of the contact.
    ///
    /// [Email2](https://ddwiki.reso.org/display/DDW17/Email2+Field)
    #[serde(rename = "Email2", skip_serializing_if = "Option::is_none")]
    pub email2: Option<String>,

    /// The tertiary email address of the contact.
    ///
    /// [Email3](https://ddwiki.reso.org/display/DDW17/Email3+Field)
    #[serde(rename = "Email3", skip_serializing_if = "Option::is_none")]
    pub email3: Option<String>,

    /// The first name of the Contact.
    ///
    /// [FirstName](https://ddwiki.reso.org/display/DDW17/FirstName+Field)
    #[serde(rename = "FirstName", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,

    /// The full name of the Contact. (First Middle Last) or a alternate full name.
    ///
    /// [FullName](https://ddwiki.reso.org/display/DDW17/FullName+Field)
    #[serde(rename = "FullName", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,

    /// The street number, direction, name and suffix of the contact's home.
    ///
    /// [HomeAddress1](https://ddwiki.reso.org/display/DDW17/HomeAddress1+Field)
    #[serde(rename = "HomeAddress1", skip_serializing_if = "Option::is_none")]
    pub home_address1: Option<String>,

    /// The unit/suite number of the contact's home.
    ///
    /// [HomeAddress2](https://ddwiki.reso.org/display/DDW17/HomeAddress2+Field)
    #[serde(rename = "HomeAddress2", skip_serializing_if = "Option::is_none")]
    pub home_address2: Option<String>,

    /// The group of addresses to which the USPS assigns the same code to aid in mail delivery. For the USPS, these codes are 9 digits: 5 numbers for the ZIP Code, one letter for the carrier route type, and 3 numbers for the carrier route number.
    ///
    /// [HomeCarrierRoute](https://ddwiki.reso.org/display/DDW17/HomeCarrierRoute+Field)
    #[serde(rename = "HomeCarrierRoute", skip_serializing_if = "Option::is_none")]
    pub home_carrier_route: Option<String>,

    /// The city of the contact's home.
    ///
    /// [HomeCity](https://ddwiki.reso.org/display/DDW17/HomeCity+Field)
    #[serde(rename = "HomeCity", skip_serializing_if = "Option::is_none")]
    pub home_city: Option<String>,

    /// The country abbreviation in a postal address.
    ///
    /// [HomeCountry](https://ddwiki.reso.org/display/DDW17/HomeCountry+Field)
    #[serde(rename = "HomeCountry", skip_serializing_if = "Option::is_none")]
    pub home_country: Option<String>,

    /// The county or parish in which the contact's home is addressed.
    ///
    /// [HomeCountyOrParish](https://ddwiki.reso.org/display/DDW17/HomeCountyOrParish+Field)
    #[serde(rename = "HomeCountyOrParish", skip_serializing_if = "Option::is_none")]
    pub home_county_or_parish: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [HomeFax](https://ddwiki.reso.org/display/DDW17/HomeFax+Field)
    #[serde(rename = "HomeFax", skip_serializing_if = "Option::is_none")]
    pub home_fax: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [HomePhone](https://ddwiki.reso.org/display/DDW17/HomePhone+Field)
    #[serde(rename = "HomePhone", skip_serializing_if = "Option::is_none")]
    pub home_phone: Option<String>,

    /// The postal code of the contact's home.
    ///
    /// [HomePostalCode](https://ddwiki.reso.org/display/DDW17/HomePostalCode+Field)
    #[serde(rename = "HomePostalCode", skip_serializing_if = "Option::is_none")]
    pub home_postal_code: Option<String>,

    /// The extension of the postal/zip code.  i.e. +4
    ///
    /// [HomePostalCodePlus4](https://ddwiki.reso.org/display/DDW17/HomePostalCodePlus4+Field)
    #[serde(
        rename = "HomePostalCodePlus4",
        skip_serializing_if = "Option::is_none"
    )]
    pub home_postal_code_plus4: Option<String>,

    /// The state or province in which the contact's home is addressed.
    ///
    /// [HomeStateOrProvince](https://ddwiki.reso.org/display/DDW17/HomeStateOrProvince+Field)
    #[serde(
        rename = "HomeStateOrProvince",
        skip_serializing_if = "Option::is_none"
    )]
    pub home_state_or_province: Option<String>,

    /// The title or position of the contact within their organization.
    ///
    /// [JobTitle](https://ddwiki.reso.org/display/DDW17/JobTitle+%28Contacts%29+Field)
    #[serde(rename = "JobTitle", skip_serializing_if = "Option::is_none")]
    pub job_title: Option<String>,

    /// The languages spoken by the contact.
    ///
    /// [Language](https://ddwiki.reso.org/display/DDW17/Language+Field)
    #[serde(rename = "Language", skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,

    /// The last name of the Contact.
    ///
    /// [LastName](https://ddwiki.reso.org/display/DDW17/LastName+Field)
    #[serde(rename = "LastName", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,

    /// The source or person that provided the contact.
    ///
    /// [LeadSource](https://ddwiki.reso.org/display/DDW17/LeadSource+Field)
    #[serde(rename = "LeadSource", skip_serializing_if = "Option::is_none")]
    pub lead_source: Option<String>,

    /// The middle name of the Contact.
    ///
    /// [MiddleName](https://ddwiki.reso.org/display/DDW17/MiddleName+Field)
    #[serde(rename = "MiddleName", skip_serializing_if = "Option::is_none")]
    pub middle_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [MobilePhone](https://ddwiki.reso.org/display/DDW17/MobilePhone+Field)
    #[serde(rename = "MobilePhone", skip_serializing_if = "Option::is_none")]
    pub mobile_phone: Option<String>,

    /// Date/time the contact record was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28Contacts%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// Prefix to the name (e.g. Dr. Mr. Ms. etc.)
    ///
    /// [NamePrefix](https://ddwiki.reso.org/display/DDW17/NamePrefix+Field)
    #[serde(rename = "NamePrefix", skip_serializing_if = "Option::is_none")]
    pub name_prefix: Option<String>,

    /// Suffix to the surname (e.g. Esq.,  Jr.,  III etc.)
    ///
    /// [NameSuffix](https://ddwiki.reso.org/display/DDW17/NameSuffix+Field)
    #[serde(rename = "NameSuffix", skip_serializing_if = "Option::is_none")]
    pub name_suffix: Option<String>,

    /// An alternate name used by the Contact, usually as a substitute for the first name.
    ///
    /// [Nickname](https://ddwiki.reso.org/display/DDW17/Nickname+Field)
    #[serde(rename = "Nickname", skip_serializing_if = "Option::is_none")]
    pub nickname: Option<String>,

    /// Notes about the client.
    ///
    /// [Notes](https://ddwiki.reso.org/display/DDW17/Notes+Field)
    #[serde(rename = "Notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [OfficePhone](https://ddwiki.reso.org/display/DDW17/OfficePhone+%28Contacts%29+Field)
    #[serde(rename = "OfficePhone", skip_serializing_if = "Option::is_none")]
    pub office_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [OfficePhoneExt](https://ddwiki.reso.org/display/DDW17/OfficePhoneExt+%28Contacts%29+Field)
    #[serde(rename = "OfficePhoneExt", skip_serializing_if = "Option::is_none")]
    pub office_phone_ext: Option<String>,

    /// Date/time the contact record was originally input into the source system.
    ///
    /// [OriginalEntryTimestamp](https://ddwiki.reso.org/display/DDW17/OriginalEntryTimestamp+%28Contacts%29+Field)
    #[serde(
        rename = "OriginalEntryTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub original_entry_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The system key, a unique record identifier, from the Originating system.  The Originating system is the system with authoritative control over the record.  For example, the Multiple Listing Service where the Contact was input.  There may be cases where the Source System (how you received the record) is not the Originating System.  See Source System Key for more information.
    ///
    /// [OriginatingSystemContactKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemContactKey+Field)
    #[serde(
        rename = "OriginatingSystemContactKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_contact_key: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the Contact was input.  In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [OriginatingSystemID](https://ddwiki.reso.org/display/DDW17/OriginatingSystemID+%28Contacts%29+Field)
    #[serde(
        rename = "OriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_id: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the Contact is originally input by the member.  The legal name of the company.
    ///
    /// [OriginatingSystemName](https://ddwiki.reso.org/display/DDW17/OriginatingSystemName+%28Contacts%29+Field)
    #[serde(
        rename = "OriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_name: Option<String>,

    /// The other street number, direction, name and suffix of the contact.
    ///
    /// [OtherAddress1](https://ddwiki.reso.org/display/DDW17/OtherAddress1+Field)
    #[serde(rename = "OtherAddress1", skip_serializing_if = "Option::is_none")]
    pub other_address1: Option<String>,

    /// The other unit/suite number of the contact.
    ///
    /// [OtherAddress2](https://ddwiki.reso.org/display/DDW17/OtherAddress2+Field)
    #[serde(rename = "OtherAddress2", skip_serializing_if = "Option::is_none")]
    pub other_address2: Option<String>,

    /// The group of addresses to which the USPS assigns the same code to aid in mail delivery. For the USPS, these codes are 9 digits: 5 numbers for the ZIP Code, one letter for the carrier route type, and 3 numbers for the carrier route number.
    ///
    /// [OtherCarrierRoute](https://ddwiki.reso.org/display/DDW17/OtherCarrierRoute+Field)
    #[serde(rename = "OtherCarrierRoute", skip_serializing_if = "Option::is_none")]
    pub other_carrier_route: Option<String>,

    /// The other city of the contact.
    ///
    /// [OtherCity](https://ddwiki.reso.org/display/DDW17/OtherCity+Field)
    #[serde(rename = "OtherCity", skip_serializing_if = "Option::is_none")]
    pub other_city: Option<String>,

    /// The other country abbreviation in a postal address.
    ///
    /// [OtherCountry](https://ddwiki.reso.org/display/DDW17/OtherCountry+Field)
    #[serde(rename = "OtherCountry", skip_serializing_if = "Option::is_none")]
    pub other_country: Option<String>,

    /// The other county or parish in which contact is addressed.
    ///
    /// [OtherCountyOrParish](https://ddwiki.reso.org/display/DDW17/OtherCountyOrParish+Field)
    #[serde(
        rename = "OtherCountyOrParish",
        skip_serializing_if = "Option::is_none"
    )]
    pub other_county_or_parish: Option<String>,

    /// The type of "other" phone that does not already exist in the given phone fields or if a second of any type of phone field is needed. i.e. HomePhone2, BrothersPhone, etc. This is used as the list of options for the Other Phone repeating elements.
    ///
    /// [OtherPhoneType](https://ddwiki.reso.org/display/DDW17/OtherPhoneType+Field)
    #[serde(rename = "OtherPhoneType", skip_serializing_if = "Option::is_none")]
    pub other_phone_type: Option<String>,

    /// The other postal code of the contact.
    ///
    /// [OtherPostalCode](https://ddwiki.reso.org/display/DDW17/OtherPostalCode+Field)
    #[serde(rename = "OtherPostalCode", skip_serializing_if = "Option::is_none")]
    pub other_postal_code: Option<String>,

    /// The other extension of the postal/zip code.  i.e. +4
    ///
    /// [OtherPostalCodePlus4](https://ddwiki.reso.org/display/DDW17/OtherPostalCodePlus4+Field)
    #[serde(
        rename = "OtherPostalCodePlus4",
        skip_serializing_if = "Option::is_none"
    )]
    pub other_postal_code_plus4: Option<String>,

    /// The other state or province in which the contact is addressed.
    ///
    /// [OtherStateOrProvince](https://ddwiki.reso.org/display/DDW17/OtherStateOrProvince+Field)
    #[serde(
        rename = "OtherStateOrProvince",
        skip_serializing_if = "Option::is_none"
    )]
    pub other_state_or_province: Option<String>,

    /// The local, well-known identifier for the member owning the contact.
    ///
    /// [OwnerMemberID](https://ddwiki.reso.org/display/DDW17/OwnerMemberID+Field)
    #[serde(rename = "OwnerMemberID", skip_serializing_if = "Option::is_none")]
    pub owner_member_id: Option<String>,

    /// The unique identifier (key) of the member owning the contact. This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [OwnerMemberKey](https://ddwiki.reso.org/display/DDW17/OwnerMemberKey+Field)
    #[serde(rename = "OwnerMemberKey", skip_serializing_if = "Option::is_none")]
    pub owner_member_key: Option<String>,

    /// The unique identifier (key) of the member owning the contact. This is a foreign key relating to the Member resource's MemberKey. This is the numeric only key and used as an alternative to the OwnerMemberKey field.
    ///
    /// [OwnerMemberKeyNumeric](https://ddwiki.reso.org/display/DDW17/OwnerMemberKeyNumeric+Field)
    #[serde(
        rename = "OwnerMemberKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub owner_member_key_numeric: Option<f64>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [Pager](https://ddwiki.reso.org/display/DDW17/Pager+Field)
    #[serde(rename = "Pager", skip_serializing_if = "Option::is_none")]
    pub pager: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [PhoneTTYTDD](https://ddwiki.reso.org/display/DDW17/PhoneTTYTDD+Field)
    #[serde(rename = "PhoneTTYTDD", skip_serializing_if = "Option::is_none")]
    pub phone_ttytdd: Option<String>,

    /// A list of the address options Home, Work and Other used to determine the address preferred by the client.
    ///
    /// [PreferredAddress](https://ddwiki.reso.org/display/DDW17/PreferredAddress+Field)
    #[serde(rename = "PreferredAddress", skip_serializing_if = "Option::is_none")]
    pub preferred_address: Option<String>,

    /// A list of the phone options Office, Mobile, Direct, Voicemail, Other used to determine the phone preferred by the client.
    ///
    /// [PreferredPhone](https://ddwiki.reso.org/display/DDW17/PreferredPhone+Field)
    #[serde(rename = "PreferredPhone", skip_serializing_if = "Option::is_none")]
    pub preferred_phone: Option<String>,

    /// Name of the person who referred the contact.
    ///
    /// [ReferredBy](https://ddwiki.reso.org/display/DDW17/ReferredBy+Field)
    #[serde(rename = "ReferredBy", skip_serializing_if = "Option::is_none")]
    pub referred_by: Option<String>,

    /// A list of types of sites, blog, social media, the Contact URL or ID is referring to. i.e. Website, Blog, Facebook, Twitter, LinkedIn, Skype, etc., This list is used to populate the Type with repeating Social Media URL or ID types.
    ///
    /// [SocialMediaType](https://ddwiki.reso.org/display/DDW17/SocialMediaType+%28Contacts%29+Field)
    #[serde(rename = "SocialMediaType", skip_serializing_if = "Option::is_none")]
    pub social_media_type: Option<String>,

    /// The system key, a unique record identifier, from the Source System.  The Source System is the system from which the record was directly received.  In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemContactKey](https://ddwiki.reso.org/display/DDW17/SourceSystemContactKey+Field)
    #[serde(
        rename = "SourceSystemContactKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_system_contact_key: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider.  The source system is the system from which the record was directly received.  In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemID](https://ddwiki.reso.org/display/DDW17/SourceSystemID+%28Contacts%29+Field)
    #[serde(rename = "SourceSystemID", skip_serializing_if = "Option::is_none")]
    pub source_system_id: Option<String>,

    /// The name of the immediate record provider.  The system from which the record was directly received.  The legal name of the company.
    ///
    /// [SourceSystemName](https://ddwiki.reso.org/display/DDW17/SourceSystemName+%28Contacts%29+Field)
    #[serde(rename = "SourceSystemName", skip_serializing_if = "Option::is_none")]
    pub source_system_name: Option<String>,

    /// The contact's spouse or partner.
    ///
    /// [SpousePartnerName](https://ddwiki.reso.org/display/DDW17/SpousePartnerName+Field)
    #[serde(rename = "SpousePartnerName", skip_serializing_if = "Option::is_none")]
    pub spouse_partner_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [TollFreePhone](https://ddwiki.reso.org/display/DDW17/TollFreePhone+Field)
    #[serde(rename = "TollFreePhone", skip_serializing_if = "Option::is_none")]
    pub toll_free_phone: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [VoiceMail](https://ddwiki.reso.org/display/DDW17/VoiceMail+Field)
    #[serde(rename = "VoiceMail", skip_serializing_if = "Option::is_none")]
    pub voice_mail: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [VoiceMailExt](https://ddwiki.reso.org/display/DDW17/VoiceMailExt+Field)
    #[serde(rename = "VoiceMailExt", skip_serializing_if = "Option::is_none")]
    pub voice_mail_ext: Option<String>,

    /// The street number, direction, name and suffix of the contact's work.
    ///
    /// [WorkAddress1](https://ddwiki.reso.org/display/DDW17/WorkAddress1+Field)
    #[serde(rename = "WorkAddress1", skip_serializing_if = "Option::is_none")]
    pub work_address1: Option<String>,

    /// The unit/suite number of the contact's work.
    ///
    /// [WorkAddress2](https://ddwiki.reso.org/display/DDW17/WorkAddress2+Field)
    #[serde(rename = "WorkAddress2", skip_serializing_if = "Option::is_none")]
    pub work_address2: Option<String>,

    /// The group of addresses to which the USPS assigns the same code to aid in mail delivery. For the USPS, these codes are 9 digits: 5 numbers for the ZIP Code, one letter for the carrier route type, and 3 numbers for the carrier route number.
    ///
    /// [WorkCarrierRoute](https://ddwiki.reso.org/display/DDW17/WorkCarrierRoute+Field)
    #[serde(rename = "WorkCarrierRoute", skip_serializing_if = "Option::is_none")]
    pub work_carrier_route: Option<String>,

    /// The city of the contact's work.
    ///
    /// [WorkCity](https://ddwiki.reso.org/display/DDW17/WorkCity+Field)
    #[serde(rename = "WorkCity", skip_serializing_if = "Option::is_none")]
    pub work_city: Option<String>,

    /// The country abbreviation in a postal address.
    ///
    /// [WorkCountry](https://ddwiki.reso.org/display/DDW17/WorkCountry+Field)
    #[serde(rename = "WorkCountry", skip_serializing_if = "Option::is_none")]
    pub work_country: Option<String>,

    /// The county or parish in which the contact's work is addressed.
    ///
    /// [WorkCountyOrParish](https://ddwiki.reso.org/display/DDW17/WorkCountyOrParish+Field)
    #[serde(rename = "WorkCountyOrParish", skip_serializing_if = "Option::is_none")]
    pub work_county_or_parish: Option<String>,

    /// The postal code of the contact's work.
    ///
    /// [WorkPostalCode](https://ddwiki.reso.org/display/DDW17/WorkPostalCode+Field)
    #[serde(rename = "WorkPostalCode", skip_serializing_if = "Option::is_none")]
    pub work_postal_code: Option<String>,

    /// The extension of the postal/zip code.  i.e. +4
    ///
    /// [WorkPostalCodePlus4](https://ddwiki.reso.org/display/DDW17/WorkPostalCodePlus4+Field)
    #[serde(
        rename = "WorkPostalCodePlus4",
        skip_serializing_if = "Option::is_none"
    )]
    pub work_postal_code_plus4: Option<String>,

    /// The state or province in which the contact's work is addressed.
    ///
    /// [WorkStateOrProvince](https://ddwiki.reso.org/display/DDW17/WorkStateOrProvince+Field)
    #[serde(
        rename = "WorkStateOrProvince",
        skip_serializing_if = "Option::is_none"
    )]
    pub work_state_or_province: Option<String>,
}

/// [ContactListings Resource](https://ddwiki.reso.org/display/DDW17/ContactListings+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct ContactListings {
    /// When True, one or more of the agent notes are unread.
    ///
    /// [AgentNotesUnreadYN](https://ddwiki.reso.org/display/DDW17/AgentNotesUnreadYN+Field)
    #[serde(rename = "AgentNotesUnreadYN", skip_serializing_if = "Option::is_none")]
    pub agent_notes_unread_yn: Option<bool>,

    /// The name of the class where the listing record is located.
    ///
    /// [ClassName](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246771)
    #[serde(rename = "ClassName", skip_serializing_if = "Option::is_none")]
    pub class_name: Option<String>,

    /// This is the foreign key relating to the Contact resource.  A unique identifier for this record from the immediate source. This is a string that can include URI or other forms.  Alternatively use the ContactKeyNumeric for a numeric only key field.  This is the local key of the system.  When records are received from other systems, a local key is commonly applied.  If conveying the original keys from the source or originating systems, see SourceSystemKey and OriginatingSystemKey variants.
    ///
    /// [ContactKey](https://ddwiki.reso.org/display/DDW17/ContactKey+%28ContactListings%29+Field)
    #[serde(rename = "ContactKey", skip_serializing_if = "Option::is_none")]
    pub contact_key: Option<String>,

    /// This is the foreign key relating to the Contact resource.  A unique identifier for this record from the immediate source. This is the numeric only key and used as an alternative to the ContactKey fields.  This is the local key of the system.  When records are received from other systems, a local key is commonly applied.  If conveying the original keys from the source or originating systems, see SourceSystemKeyNumeric and OriginatingSystemKeyNumeric variants.
    ///
    /// [ContactKeyNumeric](https://ddwiki.reso.org/display/DDW17/ContactKeyNumeric+%28ContactListings%29+Field)
    #[serde(rename = "ContactKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub contact_key_numeric: Option<f64>,

    /// The contacts preference selection on the given listing.  Favorite, Possibility or Discard.
    ///
    /// [ContactListingPreference](https://ddwiki.reso.org/display/DDW17/ContactListingPreference+Field)
    #[serde(
        rename = "ContactListingPreference",
        skip_serializing_if = "Option::is_none"
    )]
    pub contact_listing_preference: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the Key is the system unique identifier from the system that the record was just retrieved. This may be identical to the related xxxId identifier, but the key is guaranteed unique for this record set..
    ///
    /// [ContactListingsKey](https://ddwiki.reso.org/display/DDW17/ContactListingsKey+Field)
    #[serde(rename = "ContactListingsKey", skip_serializing_if = "Option::is_none")]
    pub contact_listings_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This may be a number, or string that can include URI or other forms. This is the system you are connecting to and not necessarily the original source of the record. This is the numeric only key and used as an alternative to the ContactListingsKey field.
    ///
    /// [ContactListingsKeyNumeric](https://ddwiki.reso.org/display/DDW17/ContactListingsKeyNumeric+Field)
    #[serde(
        rename = "ContactListingsKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub contact_listings_key_numeric: Option<f64>,

    /// This is a foreign key refering to the Contact Resource's local, well-known identifier for the contact. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system and is used by the Contact to logon to a client portal in that system.
    ///
    /// [ContactLoginId](https://ddwiki.reso.org/display/DDW17/ContactLoginId+%28ContactListings%29+Field)
    #[serde(rename = "ContactLoginId", skip_serializing_if = "Option::is_none")]
    pub contact_login_id: Option<String>,

    /// When True, one or more of the contacts notes are unread.
    ///
    /// [ContactNotesUnreadYN](https://ddwiki.reso.org/display/DDW17/ContactNotesUnreadYN+Field)
    #[serde(
        rename = "ContactNotesUnreadYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub contact_notes_unread_yn: Option<bool>,

    /// If True, the email was a direct email sent to the client by the member.  If False the email was an auto email.
    ///
    /// [DirectEmailYN](https://ddwiki.reso.org/display/DDW17/DirectEmailYN+Field)
    #[serde(rename = "DirectEmailYN", skip_serializing_if = "Option::is_none")]
    pub direct_email_yn: Option<bool>,

    /// The Date/Time the Member last added or updated a ListingNote.
    ///
    /// [LastAgentNoteTimestamp](https://ddwiki.reso.org/display/DDW17/LastAgentNoteTimestamp+Field)
    #[serde(
        rename = "LastAgentNoteTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_agent_note_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The Date/Time the Contact last added or updated a ListingNote.
    ///
    /// [LastContactNoteTimestamp](https://ddwiki.reso.org/display/DDW17/LastContactNoteTimestamp+Field)
    #[serde(
        rename = "LastContactNoteTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_contact_note_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The well known identifier for the listing. The value may be identical to that of the Listing Key, but the Listing ID is intended to be the value used by a human to retrieve the information about a specific listing. In a multiple originating system or a merged system, this value may not be unique and may require the use of the provider system to create a synthetic unique value.
    ///
    /// [ListingId](https://ddwiki.reso.org/display/DDW17/ListingId+%28ContactListings%29+Field)
    #[serde(rename = "ListingId", skip_serializing_if = "Option::is_none")]
    pub listing_id: Option<String>,

    /// This is the foreign key related to the Property Resource's unique identifier for this record from the immediate source. This is a string that can include URI or other forms. Alternatively use the ListingKeyNumeric for a numeric only key field. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, see SourceSystemKey and OriginatingSystemKey.
    ///
    /// [ListingKey](https://ddwiki.reso.org/display/DDW17/ListingKey+%28ContactListings%29+Field)
    #[serde(rename = "ListingKey", skip_serializing_if = "Option::is_none")]
    pub listing_key: Option<String>,

    /// This is the foreign key related to the Property Resource's unique identifier for this record from the immediate source. This is the numeric only key and used as an alternative to the ListingKey fields. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, see SourceSystemKey and OriginatingSystemKey.
    ///
    /// [ListingKeyNumeric](https://ddwiki.reso.org/display/DDW17/ListingKeyNumeric+%28ContactListings%29+Field)
    #[serde(rename = "ListingKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub listing_key_numeric: Option<f64>,

    /// The last time the listing was updated. This does not refer to the ContactListing record, but changes to the referenced listing.
    ///
    /// [ListingModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ListingModificationTimestamp+Field)
    #[serde(
        rename = "ListingModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub listing_modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The notes input by the Member and/or the Contact in reference to the given listing. This is a complex data type referencing the separate resource called ContactListingNotes.
    ///
    /// [ListingNotes](https://ddwiki.reso.org/display/DDW17/ListingNotes+Field)
    #[serde(rename = "ListingNotes", skip_serializing_if = "Option::is_none")]
    pub listing_notes: Option<String>,

    /// The Date/Time the listing was sent to the contact.
    ///
    /// [ListingSentTimestamp](https://ddwiki.reso.org/display/DDW17/ListingSentTimestamp+Field)
    #[serde(
        rename = "ListingSentTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub listing_sent_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// When True, the Client has viewed the listing.  This is typically when the client clicks to view a detailed report, rather than seen in a one line  or thumbnail display.
    ///
    /// [ListingViewedYN](https://ddwiki.reso.org/display/DDW17/ListingViewedYN+Field)
    #[serde(rename = "ListingViewedYN", skip_serializing_if = "Option::is_none")]
    pub listing_viewed_yn: Option<bool>,

    /// The Date/Time that the ContactListing record was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28ContactListings%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The Date/Time the listing was last viewed by the Contact.
    ///
    /// [PortalLastVisitedTimestamp](https://ddwiki.reso.org/display/DDW17/PortalLastVisitedTimestamp+Field)
    #[serde(
        rename = "PortalLastVisitedTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub portal_last_visited_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The name of the resource where the listing record is located.
    ///
    /// [ResourceName](https://ddwiki.reso.org/display/DDW17/ResourceName+%28ContactListings%29+Field)
    #[serde(rename = "ResourceName", skip_serializing_if = "Option::is_none")]
    pub resource_name: Option<String>,
}

/// [Media Resource](https://ddwiki.reso.org/display/DDW17/Media+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct Media {
    /// ID of the user, agent, member, etc., that uploaded the media this record refers to.
    ///
    /// [ChangedByMemberID](https://ddwiki.reso.org/display/DDW17/ChangedByMemberID+Field)
    #[serde(rename = "ChangedByMemberID", skip_serializing_if = "Option::is_none")]
    pub changed_by_member_id: Option<String>,

    /// The primary key of the member who uploaded the media this record refers to. This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [ChangedByMemberKey](https://ddwiki.reso.org/display/DDW17/ChangedByMemberKey+Field)
    #[serde(rename = "ChangedByMemberKey", skip_serializing_if = "Option::is_none")]
    pub changed_by_member_key: Option<String>,

    /// The primary key of the member who uploaded the media this record refers to. This is a foreign key relating to the Member resource's MemberKey. This is the numeric only key and used as an alternative to the ChangedByMemberKey field.
    ///
    /// [ChangedByMemberKeyNumeric](https://ddwiki.reso.org/display/DDW17/ChangedByMemberKeyNumeric+Field)
    #[serde(
        rename = "ChangedByMemberKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub changed_by_member_key_numeric: Option<f64>,

    /// The class or table of the listing or other record the media. Residential, Lease, Agent, Office, Contact, etc.
    ///
    /// [ClassName](https://ddwiki.reso.org/display/DDW17/ClassName+Field)
    #[serde(rename = "ClassName", skip_serializing_if = "Option::is_none")]
    pub class_name: Option<String>,

    /// The height of the image expressed in pixels.
    ///
    /// [ImageHeight](https://ddwiki.reso.org/display/DDW17/ImageHeight+Field)
    #[serde(rename = "ImageHeight", skip_serializing_if = "Option::is_none")]
    pub image_height: Option<f64>,

    /// When the media is an image, a list of possible matches such as kitchen, bathroom, front of structure, etc. This field may be used to identify a required image under association or MLS rules.
    ///
    /// [ImageOf](https://ddwiki.reso.org/display/DDW17/ImageOf+Field)
    #[serde(rename = "ImageOf", skip_serializing_if = "Option::is_none")]
    pub image_of: Option<String>,

    /// A text description of the size of the image.  i.e. Small, Thumbnail, Medium, Large, X-Large.  The largest image must be described as "Largest".  Thumbnail must also be included.  Pick List will remain open/extendable.
    ///
    /// [ImageSizeDescription](https://ddwiki.reso.org/display/DDW17/ImageSizeDescription+Field)
    #[serde(
        rename = "ImageSizeDescription",
        skip_serializing_if = "Option::is_none"
    )]
    pub image_size_description: Option<String>,

    /// The width of the image expressed in pixels.
    ///
    /// [ImageWidth](https://ddwiki.reso.org/display/DDW17/ImageWidth+Field)
    #[serde(rename = "ImageWidth", skip_serializing_if = "Option::is_none")]
    pub image_width: Option<f64>,

    /// The full robust description of the object.
    ///
    /// [LongDescription](https://ddwiki.reso.org/display/DDW17/LongDescription+Field)
    #[serde(rename = "LongDescription", skip_serializing_if = "Option::is_none")]
    pub long_description: Option<String>,

    /// Category describing the , Photos, Documents, Video, Unbranded Virtual Tour, Branded Virtual Tour, Floor Plan, Logo
    ///
    /// [MediaCategory](https://ddwiki.reso.org/display/DDW17/MediaCategory+Field)
    #[serde(rename = "MediaCategory", skip_serializing_if = "Option::is_none")]
    pub media_category: Option<String>,

    /// The JavaScript or other method to embed a video, image, virtual tour or other media.
    ///
    /// [MediaHTML](https://ddwiki.reso.org/display/DDW17/MediaHTML+Field)
    #[serde(rename = "MediaHTML", skip_serializing_if = "Option::is_none")]
    pub media_html: Option<String>,

    /// A unique identifier for this record from the immediate source. This may be a number, or string that can include URI or other forms.  This is the system you are connecting to and not necessarily the original source of the record.
    ///
    /// [MediaKey](https://ddwiki.reso.org/display/DDW17/MediaKey+Field)
    #[serde(rename = "MediaKey", skip_serializing_if = "Option::is_none")]
    pub media_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This may be a number, or string that can include URI or other forms.  This is the system you are connecting to and not necessarily the original source of the record.  This is the numeric only key and used as an alternative to the MediaKey field.
    ///
    /// [MediaKeyNumeric](https://ddwiki.reso.org/display/DDW17/MediaKeyNumeric+Field)
    #[serde(rename = "MediaKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub media_key_numeric: Option<f64>,

    /// This timestamp is updated when a change to the object has been made, which may differ from a change to the Media Resource.
    ///
    /// [MediaModificationTimestamp](https://ddwiki.reso.org/display/DDW17/MediaModificationTimestamp+Field)
    #[serde(
        rename = "MediaModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub media_modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// ID of the image, supplement or other object specified by the given media record.
    ///
    /// [MediaObjectID](https://ddwiki.reso.org/display/DDW17/MediaObjectID+Field)
    #[serde(rename = "MediaObjectID", skip_serializing_if = "Option::is_none")]
    pub media_object_id: Option<String>,

    /// The status of the media item referenced by this record.  (Updated, Deleted, etc.,_
    ///
    /// [MediaStatus](https://ddwiki.reso.org/display/DDW17/MediaStatus+Field)
    #[serde(rename = "MediaStatus", skip_serializing_if = "Option::is_none")]
    pub media_status: Option<String>,

    /// Media Types as defined by IANA. http://www.iana.org/assignments/media-types/index.html. Note that the former name of MimeType, used by both IANA and RESO may still be in use by some systems/entities.
    ///
    /// [MediaType](https://ddwiki.reso.org/display/DDW17/MediaType+Field)
    #[serde(rename = "MediaType", skip_serializing_if = "Option::is_none")]
    pub media_type: Option<String>,

    /// The URI to the media file referenced by this record.
    ///
    /// [MediaURL](https://ddwiki.reso.org/display/DDW17/MediaURL+Field)
    #[serde(rename = "MediaURL", skip_serializing_if = "Option::is_none")]
    pub media_url: Option<String>,

    /// The transactional timestamp automatically recorded by the MLS system representing the date/time the media record was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28Media%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// Only a positive integer including zero.  Element zero is the primary photo per RETS convention.
    ///
    /// [Order](https://ddwiki.reso.org/display/DDW17/Order+Field)
    #[serde(rename = "Order", skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the Media was input.  In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [OriginatingSystemID](https://ddwiki.reso.org/display/DDW17/OriginatingSystemID+%28Media%29+Field)
    #[serde(
        rename = "OriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Originating system.  The Originating system is the system with authoritative control over the record.  For example, the Multiple Listing Service where the Media was input.  There may be cases where the Source System (how you received the record) is not the Originating System.  See Source System Key for more information.
    ///
    /// [OriginatingSystemMediaKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemMediaKey+Field)
    #[serde(
        rename = "OriginatingSystemMediaKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_media_key: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the Media is originally input by the member.  The legal name of the company.
    ///
    /// [OriginatingSystemName](https://ddwiki.reso.org/display/DDW17/OriginatingSystemName+%28Media%29+Field)
    #[serde(
        rename = "OriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_name: Option<String>,

    /// Public, Private, IDX, VOW, Office Only, Firm Only, Agent Only,
    ///
    /// [Permission](https://ddwiki.reso.org/display/DDW17/Permission+Field)
    #[serde(rename = "Permission", skip_serializing_if = "Option::is_none")]
    pub permission: Option<String>,

    /// When set to true, the media record in question is the preferred photo.  This will typically mean the photo to be shown when only one of the photos is to be displayed.
    ///
    /// [PreferredPhotoYN](https://ddwiki.reso.org/display/DDW17/PreferredPhotoYN+Field)
    #[serde(rename = "PreferredPhotoYN", skip_serializing_if = "Option::is_none")]
    pub preferred_photo_yn: Option<bool>,

    /// The resource or table of the listing or other record the media relates to.  i.e. Property, Member, Office, etc.
    ///
    /// [ResourceName](https://ddwiki.reso.org/display/DDW17/ResourceName+Field)
    #[serde(rename = "ResourceName", skip_serializing_if = "Option::is_none")]
    pub resource_name: Option<String>,

    /// The well known identifier of the related record from the source resource. The value may be identical to that of the Listing Key, but the Listing ID is intended to be the value used by a human to retrieve the information about a specific listing. In a multiple originating system or a merged system, this value may not be unique and may require the use of the provider system to create a synthetic unique value.
    ///
    /// [ResourceRecordID](https://ddwiki.reso.org/display/DDW17/ResourceRecordID+Field)
    #[serde(rename = "ResourceRecordID", skip_serializing_if = "Option::is_none")]
    pub resource_record_id: Option<String>,

    /// The primary key of the related record from the source resource. For example the ListingKey, AgentKey, OfficeKey, TeamKey, etc. This is the system you are connecting to and not necessarily the original source of the record. This is a foreign key from the resource selected in the ResourceName field.
    ///
    /// [ResourceRecordKey](https://ddwiki.reso.org/display/DDW17/ResourceRecordKey+Field)
    #[serde(rename = "ResourceRecordKey", skip_serializing_if = "Option::is_none")]
    pub resource_record_key: Option<String>,

    /// The primary key of the related record from the source resource. For example the ListingKey, AgentKey, OfficeKey, TeamKey, etc. This is the system you are connecting to and not necessarily the original source of the record. This is a foreign key from the resource selected in the ResourceName field. This is the numeric only key and used as an alternative to the ResourceRecordKey field.
    ///
    /// [ResourceRecordKeyNumeric](https://ddwiki.reso.org/display/DDW17/ResourceRecordKeyNumeric+Field)
    #[serde(
        rename = "ResourceRecordKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_record_key_numeric: Option<f64>,

    /// The short text given to summarize the object.  Commonly used as the short description displayed under a photo.
    ///
    /// [ShortDescription](https://ddwiki.reso.org/display/DDW17/ShortDescription+Field)
    #[serde(rename = "ShortDescription", skip_serializing_if = "Option::is_none")]
    pub short_description: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider.  The source system is the system from which the record was directly received.  In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemID](https://ddwiki.reso.org/display/DDW17/SourceSystemID+%28Media%29+Field)
    #[serde(rename = "SourceSystemID", skip_serializing_if = "Option::is_none")]
    pub source_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Source System. The Source System is the system from which the record was directly received. In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemMediaKey](https://ddwiki.reso.org/display/DDW17/SourceSystemMediaKey+Field)
    #[serde(
        rename = "SourceSystemMediaKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_system_media_key: Option<String>,

    /// The name of the immediate record provider.  The system from which the record was directly received.  The legal name of the company.
    ///
    /// [SourceSystemName](https://ddwiki.reso.org/display/DDW17/SourceSystemName+%28Media%29+Field)
    #[serde(rename = "SourceSystemName", skip_serializing_if = "Option::is_none")]
    pub source_system_name: Option<String>,
}

/// [HistoryTransactional Resource](https://ddwiki.reso.org/display/DDW17/HistoryTransactional+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct HistoryTransactional {
    /// Description of the last major change on the listing, i.e. price reduction, back on market, etc. May be used to display on a summary view of listing results to quickly identify listings that have had major changes recently.
    ///
    /// [ChangeType](https://ddwiki.reso.org/display/DDW17/ChangeType+Field)
    #[serde(rename = "ChangeType", skip_serializing_if = "Option::is_none")]
    pub change_type: Option<String>,

    /// The local, well-know identifier of the member (user) who made the change.
    ///
    /// [ChangedByMemberID](https://ddwiki.reso.org/display/DDW17/ChangedByMemberID+%28HistoryTransactional%29+Field)
    #[serde(rename = "ChangedByMemberID", skip_serializing_if = "Option::is_none")]
    pub changed_by_member_id: Option<String>,

    /// The unique identifier of the member (user) who made the change. This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [ChangedByMemberKey](https://ddwiki.reso.org/display/DDW17/ChangedByMemberKey+%28HistoryTransactional%29+Field)
    #[serde(rename = "ChangedByMemberKey", skip_serializing_if = "Option::is_none")]
    pub changed_by_member_key: Option<String>,

    /// The unique identifier of the member (user) who made the change. This is a foreign key relating to the Member resource's MemberKey. This is the numeric only key and used as an alternative to the ChangedByMemberKey field.
    ///
    /// [ChangedByMemberKeyNumeric](https://ddwiki.reso.org/display/DDW17/ChangedByMemberKeyNumeric+%28HistoryTransactional%29+Field)
    #[serde(
        rename = "ChangedByMemberKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub changed_by_member_key_numeric: Option<f64>,

    /// Name of the class which this history record applies.
    ///
    /// [ClassName](https://ddwiki.reso.org/display/DDW17/ClassName+%28HistoryTransactional%29+Field)
    #[serde(rename = "ClassName", skip_serializing_if = "Option::is_none")]
    pub class_name: Option<String>,

    /// The unique identifier of the field whose data is being changed.  This is a foreign key relating to the field found in the resource per the ResourceName.
    ///
    /// [FieldKey](https://ddwiki.reso.org/display/DDW17/FieldKey+Field)
    #[serde(rename = "FieldKey", skip_serializing_if = "Option::is_none")]
    pub field_key: Option<String>,

    /// The unique identifier of the field whose data is being changed.  This is a foreign key relating to the field found in the resource per the ResourceName.  This is the numeric only key and used as an alternative to the FieldKey field.
    ///
    /// [FieldKeyNumeric](https://ddwiki.reso.org/display/DDW17/FieldKeyNumeric+Field)
    #[serde(rename = "FieldKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub field_key_numeric: Option<f64>,

    /// The name of the field whose data is being changed.
    ///
    /// [FieldName](https://ddwiki.reso.org/display/DDW17/FieldName+Field)
    #[serde(rename = "FieldName", skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,

    /// A unique identifier for this record from the immediate source. This may be a number, or string that can include URI or other forms.  This is the system you are connecting to and not necessarily the original source of the record.
    ///
    /// [HistoryTransactionalKey](https://ddwiki.reso.org/display/DDW17/HistoryTransactionalKey+Field)
    #[serde(
        rename = "HistoryTransactionalKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub history_transactional_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This may be a number, or string that can include URI or other forms.  This is the system you are connecting to and not necessarily the original source of the record.  This is the numeric only key and used as an alternative to the HistoryTransactionalKey field.
    ///
    /// [HistoryTransactionalKeyNumeric](https://ddwiki.reso.org/display/DDW17/HistoryTransactionalKeyNumeric+Field)
    #[serde(
        rename = "HistoryTransactionalKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub history_transactional_key_numeric: Option<f64>,

    /// Timestamp of the last major change on the listing (see also MajorChangeType).
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28HistoryTransactional%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The new value applied to the named field.
    ///
    /// [NewValue](https://ddwiki.reso.org/display/DDW17/NewValue+Field)
    #[serde(rename = "NewValue", skip_serializing_if = "Option::is_none")]
    pub new_value: Option<String>,

    /// The system key, a unique record identifier, from the Originating system.  The Originating system is the system with authoritative control over the record.  For example, the Multiple Listing Service where the History was input.  There may be cases where the Source System (how you received the record) is not the Originating System.  See Source System Key for more information.
    ///
    /// [OriginatingSystemHistoryKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemHistoryKey+Field)
    #[serde(
        rename = "OriginatingSystemHistoryKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_history_key: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the History was input.  In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [OriginatingSystemID](https://ddwiki.reso.org/display/DDW17/OriginatingSystemID+%28HistoryTransactional%29+Field)
    #[serde(
        rename = "OriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_id: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the History is originally input.  The legal name of the company.
    ///
    /// [OriginatingSystemName](https://ddwiki.reso.org/display/DDW17/OriginatingSystemName+%28HistoryTransactional%29+Field)
    #[serde(
        rename = "OriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_name: Option<String>,

    /// The value found in the named field prior to the change represented by this record.
    ///
    /// [PreviousValue](https://ddwiki.reso.org/display/DDW17/PreviousValue+Field)
    #[serde(rename = "PreviousValue", skip_serializing_if = "Option::is_none")]
    pub previous_value: Option<String>,

    /// The name of the resource which this history record applies.
    ///
    /// [ResourceName](https://ddwiki.reso.org/display/DDW17/ResourceName+%28HistoryTransactional%29+Field)
    #[serde(rename = "ResourceName", skip_serializing_if = "Option::is_none")]
    pub resource_name: Option<String>,

    /// The well known identifier of the related record from the source resource. The value may be identical to that of the Listing Key, but the Listing ID is intended to be the value used by a human to retrieve the information about a specific listing. In a multiple originating system or a merged system, this value may not be unique and may require the use of the provider system to create a synthetic unique value.
    ///
    /// [ResourceRecordID](https://ddwiki.reso.org/display/DDW17/ResourceRecordID+%28HistoryTransactional%29+Field)
    #[serde(rename = "ResourceRecordID", skip_serializing_if = "Option::is_none")]
    pub resource_record_id: Option<String>,

    /// The primary key of the related record from the source resource. For example the ListingKey, AgentKey, OfficeKey, etc.  This is the system you are connecting to and not necessarily the original source of the record.  This is a foreign key from the resource selected in the ResourceName field.
    ///
    /// [ResourceRecordKey](https://ddwiki.reso.org/display/DDW17/ResourceRecordKey+%28HistoryTransactional%29+Field)
    #[serde(rename = "ResourceRecordKey", skip_serializing_if = "Option::is_none")]
    pub resource_record_key: Option<String>,

    /// The primary key of the related record from the source resource. For example the ListingKey, AgentKey, OfficeKey, etc.  This is the system you are connecting to and not necessarily the original source of the record.  This is a foreign key from the resource selected in the ResourceName field.  This is the numeric only key and used as an alternative to the ResourceRecordKey field.
    ///
    /// [ResourceRecordKeyNumeric](https://ddwiki.reso.org/display/DDW17/ResourceRecordKeyNumeric+%28HistoryTransactional%29+Field)
    #[serde(
        rename = "ResourceRecordKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_record_key_numeric: Option<f64>,

    /// The system key, a unique record identifier, from the Source System.  The Source System is the system from which the record was directly received.  In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemHistoryKey](https://ddwiki.reso.org/display/DDW17/SourceSystemHistoryKey+Field)
    #[serde(
        rename = "SourceSystemHistoryKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_system_history_key: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider.  The source system is the system from which the record was directly received.  In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemID](https://ddwiki.reso.org/display/DDW17/SourceSystemID+%28HistoryTransactional%29+Field)
    #[serde(rename = "SourceSystemID", skip_serializing_if = "Option::is_none")]
    pub source_system_id: Option<String>,

    /// The name of the History record provider.  The system from which the record was directly received.  The legal name of the company.
    ///
    /// [SourceSystemName](https://ddwiki.reso.org/display/DDW17/SourceSystemName+%28HistoryTransactional%29+Field)
    #[serde(rename = "SourceSystemName", skip_serializing_if = "Option::is_none")]
    pub source_system_name: Option<String>,
}

/// [InternetTracking Resource](https://ddwiki.reso.org/display/DDW17/InternetTracking+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct InternetTracking {
    /// The city location of the Actor as recorded by the source.
    ///
    /// [ActorCity](https://ddwiki.reso.org/display/DDW17/ActorCity+Field)
    #[serde(rename = "ActorCity", skip_serializing_if = "Option::is_none")]
    pub actor_city: Option<String>,

    /// The email address of the Actor in this event.
    ///
    /// [ActorEmail](https://ddwiki.reso.org/display/DDW17/ActorEmail+Field)
    #[serde(rename = "ActorEmail", skip_serializing_if = "Option::is_none")]
    pub actor_email: Option<String>,

    /// The local, well-known identifier the actor, provided by the source when applicable.  This value may not be unique specifically in the case of aggregation systems, this value should be the human friendly identifier from the original system.  Use of the ID may be common when the actor is an MLS or other software user.  Otherwise, use the ActorKey or ActorKeyNumeric is recommended.
    ///
    /// [ActorID](https://ddwiki.reso.org/display/DDW17/ActorID+Field)
    #[serde(rename = "ActorID", skip_serializing_if = "Option::is_none")]
    pub actor_id: Option<String>,

    /// The recorded IP address of the Actor in this event.  IPv4 addresses are 15 charaters and IPv6 addresses are a max of 39 characters.  IP addresses should not omit leading zeros.  i.e. 10.1.1.1 should appear as 010.001.001.001.
    ///
    /// [ActorIP](https://ddwiki.reso.org/display/DDW17/ActorIP+Field)
    #[serde(rename = "ActorIP", skip_serializing_if = "Option::is_none")]
    pub actor_ip: Option<String>,

    /// A unique identifier for this record from the immediate source. This is a string that can include URI or other forms. Alternatively use the MemberKeyNumeric for a numeric only key field. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, utilize the SourceSystemActorKey and/or the OriginatingSystemActorKey.
    ///
    /// [ActorKey](https://ddwiki.reso.org/display/DDW17/ActorKey+Field)
    #[serde(rename = "ActorKey", skip_serializing_if = "Option::is_none")]
    pub actor_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This is the numeric only key and used as an alternative to the MemberKey fields. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, utilize the SourceSystemActorKey and/or the OriginatingSystemActorKey.
    ///
    /// [ActorKeyNumeric](https://ddwiki.reso.org/display/DDW17/ActorKeyNumeric+Field)
    #[serde(rename = "ActorKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub actor_key_numeric: Option<f64>,

    /// The geographic latitude of some reference point for the location of the actor, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.
    ///
    /// [ActorLatitude](https://ddwiki.reso.org/display/DDW17/ActorLatitude+Field)
    #[serde(rename = "ActorLatitude", skip_serializing_if = "Option::is_none")]
    pub actor_latitude: Option<f64>,

    /// The geographic longitude of some reference point for the location of the actor, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.
    ///
    /// [ActorLongitude](https://ddwiki.reso.org/display/DDW17/ActorLongitude+Field)
    #[serde(rename = "ActorLongitude", skip_serializing_if = "Option::is_none")]
    pub actor_longitude: Option<f64>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the listing was input.  In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [ActorOriginatingSystemID](https://ddwiki.reso.org/display/DDW17/ActorOriginatingSystemID+Field)
    #[serde(
        rename = "ActorOriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub actor_originating_system_id: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the listing is originally input by the member.  The legal name of the company.
    ///
    /// [ActorOriginatingSystemName](https://ddwiki.reso.org/display/DDW17/ActorOriginatingSystemName+Field)
    #[serde(
        rename = "ActorOriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub actor_originating_system_name: Option<String>,

    /// The phone number of the Actor in this event.
    ///
    /// [ActorPhone](https://ddwiki.reso.org/display/DDW17/ActorPhone+Field)
    #[serde(rename = "ActorPhone", skip_serializing_if = "Option::is_none")]
    pub actor_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [ActorPhoneExt](https://ddwiki.reso.org/display/DDW17/ActorPhoneExt+Field)
    #[serde(rename = "ActorPhoneExt", skip_serializing_if = "Option::is_none")]
    pub actor_phone_ext: Option<String>,

    /// The postal code of the Actor.
    ///
    /// [ActorPostalCode](https://ddwiki.reso.org/display/DDW17/ActorPostalCode+Field)
    #[serde(rename = "ActorPostalCode", skip_serializing_if = "Option::is_none")]
    pub actor_postal_code: Option<String>,

    /// The extension of the postal/zip code. i.e. +4
    ///
    /// [ActorPostalCodePlus4](https://ddwiki.reso.org/display/DDW17/ActorPostalCodePlus4+Field)
    #[serde(
        rename = "ActorPostalCodePlus4",
        skip_serializing_if = "Option::is_none"
    )]
    pub actor_postal_code_plus4: Option<String>,

    /// A geographical region defined by the source.  For this use, the regoin is not specifically at the city, county, state, country or contenant level and this is typical in internet tracking standards.
    ///
    /// [ActorRegion](https://ddwiki.reso.org/display/DDW17/ActorRegion+Field)
    #[serde(rename = "ActorRegion", skip_serializing_if = "Option::is_none")]
    pub actor_region: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider. The source system is the system from which the record was directly received. In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [ActorSourceSystemID](https://ddwiki.reso.org/display/DDW17/ActorSourceSystemID+Field)
    #[serde(
        rename = "ActorSourceSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub actor_source_system_id: Option<String>,

    /// The name of the immediate record provider. The system from which the record was directly received. The legal name of the company.
    ///
    /// [ActorSourceSystemName](https://ddwiki.reso.org/display/DDW17/ActorSourceSystemName+Field)
    #[serde(
        rename = "ActorSourceSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub actor_source_system_name: Option<String>,

    /// The state or province location of the Actor as recorded by the source.
    ///
    /// [ActorStateOrProvince](https://ddwiki.reso.org/display/DDW17/ActorStateOrProvince+Field)
    #[serde(
        rename = "ActorStateOrProvince",
        skip_serializing_if = "Option::is_none"
    )]
    pub actor_state_or_province: Option<String>,

    /// A list of actor types; where the event was originated. (i.e. Agent, Consumer, Bot)  In implementation this is typically a required field
    ///
    /// [ActorType](https://ddwiki.reso.org/display/DDW17/ActorType+Field)
    #[serde(rename = "ActorType", skip_serializing_if = "Option::is_none")]
    pub actor_type: Option<String>,

    /// The color depth of the Actor's device display
    ///
    /// [ColorDepth](https://ddwiki.reso.org/display/DDW17/ColorDepth+Field)
    #[serde(rename = "ColorDepth", skip_serializing_if = "Option::is_none")]
    pub color_depth: Option<f64>,

    /// The device type used by the Actor (mobile, desktop etc...) in this event
    ///
    /// [DeviceType](https://ddwiki.reso.org/display/DDW17/DeviceType+Field)
    #[serde(rename = "DeviceType", skip_serializing_if = "Option::is_none")]
    pub device_type: Option<String>,

    /// A description of the event being tracked. (i.e. "the listing was viewed")
    ///
    /// [EventDescription](https://ddwiki.reso.org/display/DDW17/EventDescription+Field)
    #[serde(rename = "EventDescription", skip_serializing_if = "Option::is_none")]
    pub event_description: Option<String>,

    /// A unique identifier for this record from the immediate source. This is a string that can include URI or other forms. Alternatively use the MemberKeyNumeric for a numeric only key field. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, utilize the SourceSystemEventKey and/or the OriginatingSystemEventKey.
    ///
    /// [EventKey](https://ddwiki.reso.org/display/DDW17/EventKey+Field)
    #[serde(rename = "EventKey", skip_serializing_if = "Option::is_none")]
    pub event_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This is the numeric only key and used as an alternative to the MemberKey fields. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, utilize the SourceSystemEventKey and/or the OriginatingSystemEventKey.
    ///
    /// [EventKeyNumeric](https://ddwiki.reso.org/display/DDW17/EventKeyNumeric+Field)
    #[serde(rename = "EventKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub event_key_numeric: Option<f64>,

    /// A short description of the Event being tracked.
    ///
    /// [EventLabel](https://ddwiki.reso.org/display/DDW17/EventLabel+Field)
    #[serde(rename = "EventLabel", skip_serializing_if = "Option::is_none")]
    pub event_label: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the listing was input.  In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [EventOriginatingSystemID](https://ddwiki.reso.org/display/DDW17/EventOriginatingSystemID+Field)
    #[serde(
        rename = "EventOriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub event_originating_system_id: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the listing is originally input by the member.  The legal name of the company.
    ///
    /// [EventOriginatingSystemName](https://ddwiki.reso.org/display/DDW17/EventOriginatingSystemName+Field)
    #[serde(
        rename = "EventOriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub event_originating_system_name: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider. The source system is the system from which the record was directly received. In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [EventSourceSystemID](https://ddwiki.reso.org/display/DDW17/EventSourceSystemID+Field)
    #[serde(
        rename = "EventSourceSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub event_source_system_id: Option<String>,

    /// The name of the immediate record provider. The system from which the record was directly received. The legal name of the company.
    ///
    /// [EventSourceSystemName](https://ddwiki.reso.org/display/DDW17/EventSourceSystemName+Field)
    #[serde(
        rename = "EventSourceSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub event_source_system_name: Option<String>,

    /// A defined target of the event type.
    ///
    /// [EventTarget](https://ddwiki.reso.org/display/DDW17/EventTarget+Field)
    #[serde(rename = "EventTarget", skip_serializing_if = "Option::is_none")]
    pub event_target: Option<String>,

    /// A UTC timestamp of when the event being tracked occurred.  In implementation this is typically a required field.
    ///
    /// [EventTimestamp](https://ddwiki.reso.org/display/DDW17/EventTimestamp+Field)
    #[serde(rename = "EventTimestamp", skip_serializing_if = "Option::is_none")]
    pub event_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The type of event being tracked. In implementation this is typically a required a field.
    ///
    /// [EventType](https://ddwiki.reso.org/display/DDW17/EventType+Field)
    #[serde(rename = "EventType", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,

    /// An ID pertaining to the ObjectType (i.e. the MLS listing id for ObjectType.Listing).  When the ObjectIdType is a property, this should be a PUID.
    ///
    /// [ObjectID](https://ddwiki.reso.org/display/DDW17/ObjectID+Field)
    #[serde(rename = "ObjectID", skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,

    /// A label that defines the ObjectID field (i.e. ObjectID is an MLS listing ID or ObjectID is a unique ID from the source...)
    ///
    /// [ObjectIdType](https://ddwiki.reso.org/display/DDW17/ObjectIdType+Field)
    #[serde(rename = "ObjectIdType", skip_serializing_if = "Option::is_none")]
    pub object_id_type: Option<String>,

    /// A unique identifier for this record from the immediate source. This is a string that can include URI or other forms. Alternatively use the MemberKeyNumeric for a numeric only key field. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, utilize the SourceSystemObjectKey and/or the OriginatingSystemObjectKey.
    ///
    /// [ObjectKey](https://ddwiki.reso.org/display/DDW17/ObjectKey+Field)
    #[serde(rename = "ObjectKey", skip_serializing_if = "Option::is_none")]
    pub object_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This is the numeric only key and used as an alternative to the MemberKey fields. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, utilize the SourceSystemObjectKey and/or the OriginatingSystemObjectKey.
    ///
    /// [ObjectKeyNumeric](https://ddwiki.reso.org/display/DDW17/ObjectKeyNumeric+Field)
    #[serde(rename = "ObjectKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub object_key_numeric: Option<f64>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the listing was input.  In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [ObjectOriginatingSystemID](https://ddwiki.reso.org/display/DDW17/ObjectOriginatingSystemID+Field)
    #[serde(
        rename = "ObjectOriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub object_originating_system_id: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the listing is originally input by the member.  The legal name of the company.
    ///
    /// [ObjectOriginatingSystemName](https://ddwiki.reso.org/display/DDW17/ObjectOriginatingSystemName+Field)
    #[serde(
        rename = "ObjectOriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub object_originating_system_name: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider. The source system is the system from which the record was directly received. In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [ObjectSourceSystemID](https://ddwiki.reso.org/display/DDW17/ObjectSourceSystemID+Field)
    #[serde(
        rename = "ObjectSourceSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub object_source_system_id: Option<String>,

    /// The name of the immediate record provider. The system from which the record was directly received. The legal name of the company.
    ///
    /// [ObjectSourceSystemName](https://ddwiki.reso.org/display/DDW17/ObjectSourceSystemName+Field)
    #[serde(
        rename = "ObjectSourceSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub object_source_system_name: Option<String>,

    /// The type of Object being tracked in this event.  In implementation this is typically a required field.
    ///
    /// [ObjectType](https://ddwiki.reso.org/display/DDW17/ObjectType+Field)
    #[serde(rename = "ObjectType", skip_serializing_if = "Option::is_none")]
    pub object_type: Option<String>,

    /// The URL of the tracked event.
    ///
    /// [ObjectURL](https://ddwiki.reso.org/display/DDW17/ObjectURL+Field)
    #[serde(rename = "ObjectURL", skip_serializing_if = "Option::is_none")]
    pub object_url: Option<String>,

    /// The system key, a unique record identifier, from the Originating system. The Originating system is the system with authoritative control over the record. For example, the Multiple Listing Service where the member was input. There may be cases where the Source System (how you received the record) is not the Originating System. See Source System Key for more information.
    ///
    /// [OriginatingSystemActorKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemActorKey+Field)
    #[serde(
        rename = "OriginatingSystemActorKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_actor_key: Option<String>,

    /// The system key, a unique record identifier, from the Originating system. The Originating system is the system with authoritative control over the record. For example, the Multiple Listing Service where the member was input. There may be cases where the Source System (how you received the record) is not the Originating System. See Source System Key for more information.
    ///
    /// [OriginatingSystemEventKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemEventKey+Field)
    #[serde(
        rename = "OriginatingSystemEventKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_event_key: Option<String>,

    /// The system key, a unique record identifier, from the Originating system. The Originating system is the system with authoritative control over the record. For example, the Multiple Listing Service where the member was input. There may be cases where the Source System (how you received the record) is not the Originating System. See Source System Key for more information.
    ///
    /// [OriginatingSystemObjectKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemObjectKey+Field)
    #[serde(
        rename = "OriginatingSystemObjectKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_object_key: Option<String>,

    /// The referring URL of the tracked event.
    ///
    /// [ReferringURL](https://ddwiki.reso.org/display/DDW17/ReferringURL+Field)
    #[serde(rename = "ReferringURL", skip_serializing_if = "Option::is_none")]
    pub referring_url: Option<String>,

    /// The screen height, in pixels, of the Actor's device
    ///
    /// [ScreenHeight](https://ddwiki.reso.org/display/DDW17/ScreenHeight+Field)
    #[serde(rename = "ScreenHeight", skip_serializing_if = "Option::is_none")]
    pub screen_height: Option<f64>,

    /// The screen width, in pixels, of the Actor's device
    ///
    /// [ScreenWidth](https://ddwiki.reso.org/display/DDW17/ScreenWidth+Field)
    #[serde(rename = "ScreenWidth", skip_serializing_if = "Option::is_none")]
    pub screen_width: Option<f64>,

    /// A unique session ID number, created by the source, that can be used to query data for a single session
    ///
    /// [SessionID](https://ddwiki.reso.org/display/DDW17/SessionID+Field)
    #[serde(rename = "SessionID", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<String>,

    /// The system key, a unique record identifier, from the Source System. The Source System is the system from which the record was directly received. In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemActorKey](https://ddwiki.reso.org/display/DDW17/SourceSystemActorKey+Field)
    #[serde(
        rename = "SourceSystemActorKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_system_actor_key: Option<String>,

    /// The system key, a unique record identifier, from the Source System. The Source System is the system from which the record was directly received. In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemEventKey](https://ddwiki.reso.org/display/DDW17/SourceSystemEventKey+Field)
    #[serde(
        rename = "SourceSystemEventKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_system_event_key: Option<String>,

    /// The system key, a unique record identifier, from the Source System. The Source System is the system from which the record was directly received. In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemObjectKey](https://ddwiki.reso.org/display/DDW17/SourceSystemObjectKey+Field)
    #[serde(
        rename = "SourceSystemObjectKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_system_object_key: Option<String>,

    /// The timezone offset is the difference, in minutes, between UTC and local time.
    ///
    /// [TimeZoneOffset](https://ddwiki.reso.org/display/DDW17/TimeZoneOffset+Field)
    #[serde(rename = "TimeZoneOffset", skip_serializing_if = "Option::is_none")]
    pub time_zone_offset: Option<f64>,

    /// The software agent acting on behalf of the user (Actor) in this event.  This is commonly conveyed by browser applications. e.g. Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; Touch; rv:11.0).  This can also be a user configurable string as seen in RETS client applications.
    ///
    /// [UserAgent](https://ddwiki.reso.org/display/DDW17/UserAgent+Field)
    #[serde(rename = "UserAgent", skip_serializing_if = "Option::is_none")]
    pub user_agent: Option<String>,
}

/// [SavedSearch Resource](https://ddwiki.reso.org/display/DDW17/SavedSearch+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct SavedSearch {
    /// The class or table to which the SearchQuery criteria refers. i.e. Residential, Residential Lease, Income, Mobile, etc.
    ///
    /// [ClassName](https://ddwiki.reso.org/display/DDW17/ClassName+%28SavedSearch%29+Field)
    #[serde(rename = "ClassName", skip_serializing_if = "Option::is_none")]
    pub class_name: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the MemberKey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId. This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [MemberKey](https://ddwiki.reso.org/display/DDW17/MemberKey+%28SavedSearch%29+Field)
    #[serde(rename = "MemberKey", skip_serializing_if = "Option::is_none")]
    pub member_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the MemberKey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId. This is a foreign key relating to the Member resource's MemberKey. This is the numeric only key and used as an alternative to the MemberKey field.
    ///
    /// [MemberKeyNumeric](https://ddwiki.reso.org/display/DDW17/MemberKeyNumeric+%28SavedSearch%29+Field)
    #[serde(rename = "MemberKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub member_key_numeric: Option<f64>,

    /// The local, well-known identifier for the member. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [MemberMlsId](https://ddwiki.reso.org/display/DDW17/MemberMlsId+%28SavedSearch%29+Field)
    #[serde(rename = "MemberMlsId", skip_serializing_if = "Option::is_none")]
    pub member_mls_id: Option<String>,

    /// The transactional timestamp automatically recorded by the MLS system representing the date/time the saved search was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28SavedSearch%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The transactional timestamp automatically recorded by the MLS system representing the date/time the saved search was entered.
    ///
    /// [OriginalEntryTimestamp](https://ddwiki.reso.org/display/DDW17/OriginalEntryTimestamp+%28SavedSearch%29+Field)
    #[serde(
        rename = "OriginalEntryTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub original_entry_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the Saved Search was input.  In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [OriginatingSystemID](https://ddwiki.reso.org/display/DDW17/OriginatingSystemID+%28SavedSearch%29+Field)
    #[serde(
        rename = "OriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Originating system.  The Originating system is the system with authoritative control over the record.  For example, the Multiple Listing Service where the Saved Search was input.  There may be cases where the Source System (how you received the record) is not the Originating System.  See Source System Key for more information.
    ///
    /// [OriginatingSystemKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemKey+%28SavedSearch%29+Field)
    #[serde(
        rename = "OriginatingSystemKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_key: Option<String>,

    /// Unique identifier from the originating system which is commonly a key to that system. In the case where data is passed through more than one system, this is the originating system key. This is a foreign key relating to the system where this record was originated.
    ///
    /// [OriginatingSystemMemberKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemMemberKey+%28SavedSearch%29+Field)
    #[serde(
        rename = "OriginatingSystemMemberKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_member_key: Option<String>,

    /// The name of the originating record provider. Most commonly the name of the MLS. The place where the listing is originally input by the member. The legal name of the company. To be used for display.
    ///
    /// [OriginatingSystemMemberName](https://ddwiki.reso.org/display/DDW17/OriginatingSystemMemberName+Field)
    #[serde(
        rename = "OriginatingSystemMemberName",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_member_name: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the Saved Search is originally input.  The legal name of the company.
    ///
    /// [OriginatingSystemName](https://ddwiki.reso.org/display/DDW17/OriginatingSystemName+%28SavedSearch%29+Field)
    #[serde(
        rename = "OriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_name: Option<String>,

    /// The resource to which the SearchQuery criteria refers. i.e. Property, Open House, Agent, Office, Contact, etc.
    ///
    /// [ResourceName](https://ddwiki.reso.org/display/DDW17/ResourceName+%28SavedSearch%29+Field)
    #[serde(rename = "ResourceName", skip_serializing_if = "Option::is_none")]
    pub resource_name: Option<String>,

    /// A textual description of the saved search input by the member who created the saved search.
    ///
    /// [SavedSearchDescription](https://ddwiki.reso.org/display/DDW17/SavedSearchDescription+Field)
    #[serde(
        rename = "SavedSearchDescription",
        skip_serializing_if = "Option::is_none"
    )]
    pub saved_search_description: Option<String>,

    /// A unique identifier for this record from the immediate source. This may be a number, or string that can include URI or other forms.  This is the system you are connecting to and not necessarily the original source of the record.
    ///
    /// [SavedSearchKey](https://ddwiki.reso.org/display/DDW17/SavedSearchKey+Field)
    #[serde(rename = "SavedSearchKey", skip_serializing_if = "Option::is_none")]
    pub saved_search_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This may be a number, or string that can include URI or other forms.  This is the system you are connecting to and not necessarily the original source of the record.  This is the numeric only key and used as an alternative to the SavedSearchKey field.
    ///
    /// [SavedSearchKeyNumeric](https://ddwiki.reso.org/display/DDW17/SavedSearchKeyNumeric+Field)
    #[serde(
        rename = "SavedSearchKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub saved_search_key_numeric: Option<f64>,

    /// The name given to the search by the member inputting the saved search.
    ///
    /// [SavedSearchName](https://ddwiki.reso.org/display/DDW17/SavedSearchName+Field)
    #[serde(rename = "SavedSearchName", skip_serializing_if = "Option::is_none")]
    pub saved_search_name: Option<String>,

    /// Is the saved search used to pass criteria to be stored and executed by the client or is the saved search a key to be passed to the host for execution.  i.e. Client Receives Criteria, Host Returns Listings.  This may be described at the record level with this field, or at some other level of implementation to be determined by RESO R&D.
    ///
    /// [SavedSearchType](https://ddwiki.reso.org/display/DDW17/SavedSearchType+Field)
    #[serde(rename = "SavedSearchType", skip_serializing_if = "Option::is_none")]
    pub saved_search_type: Option<String>,

    /// Textual representation of the search performed by the member that was saved.  It is required to present in ODATA's $filter format.  Additional formats are under review.  See additional documentation for specific requirements for this field.
    ///
    /// [SearchQuery](https://ddwiki.reso.org/display/DDW17/SearchQuery+Field)
    #[serde(rename = "SearchQuery", skip_serializing_if = "Option::is_none")]
    pub search_query: Option<String>,

    /// A free text description used to expand on the SearchQueryExceptions selections made by the host.
    ///
    /// [SearchQueryExceptionDetails](https://ddwiki.reso.org/display/DDW17/SearchQueryExceptionDetails+Field)
    #[serde(
        rename = "SearchQueryExceptionDetails",
        skip_serializing_if = "Option::is_none"
    )]
    pub search_query_exception_details: Option<String>,

    /// A list of exceptions or errors with the given search query during it's creation by the host.  Analogous to an error code this is the host's opportunity to describe an inability to fully express a saved search under the constraints of the given protocol.  i.e. $filter.  The client may use this information to bring attention to the user about a given saved search and a need to review or recreate the search.
    ///
    /// [SearchQueryExceptions](https://ddwiki.reso.org/display/DDW17/SearchQueryExceptions+Field)
    #[serde(
        rename = "SearchQueryExceptions",
        skip_serializing_if = "Option::is_none"
    )]
    pub search_query_exceptions: Option<String>,

    /// A human readable version of the search query that is commonly used for display and may not contain all actual criteria.  For actual search criteria, use the SearchQuery field.
    ///
    /// [SearchQueryHumanReadable](https://ddwiki.reso.org/display/DDW17/SearchQueryHumanReadable+Field)
    #[serde(
        rename = "SearchQueryHumanReadable",
        skip_serializing_if = "Option::is_none"
    )]
    pub search_query_human_readable: Option<String>,

    /// A picklist of the type of query language used in the SearchQuery field. i.e. DMQL2, $filter, etc.
    ///
    /// [SearchQueryType](https://ddwiki.reso.org/display/DDW17/SearchQueryType+Field)
    #[serde(rename = "SearchQueryType", skip_serializing_if = "Option::is_none")]
    pub search_query_type: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider.  The source system is the system from which the record was directly received.  In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemID](https://ddwiki.reso.org/display/DDW17/SourceSystemID+%28SavedSearch%29+Field)
    #[serde(rename = "SourceSystemID", skip_serializing_if = "Option::is_none")]
    pub source_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Source System.  The Source System is the system from which the record was directly received.  In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemKey](https://ddwiki.reso.org/display/DDW17/SourceSystemKey+%28SavedSearch%29+Field)
    #[serde(rename = "SourceSystemKey", skip_serializing_if = "Option::is_none")]
    pub source_system_key: Option<String>,

    /// The name of the Saved Search record provider.  The system from which the record was directly received.  The legal name of the company.
    ///
    /// [SourceSystemName](https://ddwiki.reso.org/display/DDW17/SourceSystemName+%28SavedSearch%29+Field)
    #[serde(rename = "SourceSystemName", skip_serializing_if = "Option::is_none")]
    pub source_system_name: Option<String>,
}

/// [OpenHouse Resource](https://ddwiki.reso.org/display/DDW17/OpenHouse+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct OpenHouse {
    /// Indicates whether or not the OpenHouse requires an appointment.
    ///
    /// [AppointmentRequiredYN](https://ddwiki.reso.org/display/DDW17/AppointmentRequiredYN+Field)
    #[serde(
        rename = "AppointmentRequiredYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub appointment_required_yn: Option<bool>,

    /// The well known identifier for the listing related to this Open House. The value may be identical to that of the Listing Key, but the Listing ID is intended to be the value used by a human to retrieve the information about a specific listing. In a multiple originating system or a merged system, this value may not be unique and may require the use of the provider system to create a synthetic unique value.
    ///
    /// [ListingId](https://ddwiki.reso.org/display/DDW17/ListingId+%28OpenHouse%29+Field)
    #[serde(rename = "ListingId", skip_serializing_if = "Option::is_none")]
    pub listing_id: Option<String>,

    /// A unique identifier for the listing record related to this Open House. This may be a number, or string that can include URI or other forms.  This is the system you are connecting to and not necessarily the original source of the record.   This may be a foreign key from the resource selected in the ResourceName field.
    ///
    /// [ListingKey](https://ddwiki.reso.org/display/DDW17/ListingKey+%28OpenHouse%29+Field)
    #[serde(rename = "ListingKey", skip_serializing_if = "Option::is_none")]
    pub listing_key: Option<String>,

    /// A unique identifier for the listing record related to this Open House. This may be a number, or string that can include URI or other forms.  This is the system you are connecting to and not necessarily the original source of the record.   This may be a foreign key from the resource selected in the ResourceName field.  This is the numeric only key and used as an alternative to the ListingKey field.
    ///
    /// [ListingKeyNumeric](https://ddwiki.reso.org/display/DDW17/ListingKeyNumeric+%28OpenHouse%29+Field)
    #[serde(rename = "ListingKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub listing_key_numeric: Option<f64>,

    /// The transactional timestamp automatically recorded by the MLS system representing the date/time the Open House was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28OpenHouse%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// Will the open house be attended by a licensed agent? Options are attended by agent, attended by the seller or unattended.
    ///
    /// [OpenHouseAttendedBy](https://ddwiki.reso.org/display/DDW17/OpenHouseAttendedBy+Field)
    #[serde(
        rename = "OpenHouseAttendedBy",
        skip_serializing_if = "Option::is_none"
    )]
    pub open_house_attended_by: Option<String>,

    /// The date on which the open house will occur.
    ///
    /// [OpenHouseDate](https://ddwiki.reso.org/display/DDW17/OpenHouseDate+Field)
    #[serde(rename = "OpenHouseDate", skip_serializing_if = "Option::is_none")]
    pub open_house_date: Option<chrono::NaiveDate>,

    /// The time the open house ends.
    ///
    /// [OpenHouseEndTime](https://ddwiki.reso.org/display/DDW17/OpenHouseEndTime+Field)
    #[serde(rename = "OpenHouseEndTime", skip_serializing_if = "Option::is_none")]
    pub open_house_end_time: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The well-known identifier for the Open House resource. The value may be identical to that of the OpenHouseKey, but the OpenHouseId intended to be the value used by a human to retrieve the information about a specific open house. In a multiple originating system or a merged system, this value may not be unique and may require the use of the provider system to create a synthetic unique value.
    ///
    /// [OpenHouseId](https://ddwiki.reso.org/display/DDW17/OpenHouseId+Field)
    #[serde(rename = "OpenHouseId", skip_serializing_if = "Option::is_none")]
    pub open_house_id: Option<String>,

    /// A unique identifier for this record from the immediate source. This may be a number, or string that can include URI or other forms.  This is the system you are connecting to and not necessarily the original source of the record.
    ///
    /// [OpenHouseKey](https://ddwiki.reso.org/display/DDW17/OpenHouseKey+Field)
    #[serde(rename = "OpenHouseKey", skip_serializing_if = "Option::is_none")]
    pub open_house_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This may be a number, or string that can include URI or other forms.  This is the system you are connecting to and not necessarily the original source of the record.  This is the numeric only key and used as an alternative to the OpenHouseKey field.
    ///
    /// [OpenHouseKeyNumeric](https://ddwiki.reso.org/display/DDW17/OpenHouseKeyNumeric+Field)
    #[serde(
        rename = "OpenHouseKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub open_house_key_numeric: Option<f64>,

    /// Comments, instructions or information about the open house.
    ///
    /// [OpenHouseRemarks](https://ddwiki.reso.org/display/DDW17/OpenHouseRemarks+Field)
    #[serde(rename = "OpenHouseRemarks", skip_serializing_if = "Option::is_none")]
    pub open_house_remarks: Option<String>,

    /// The time the open house begins.
    ///
    /// [OpenHouseStartTime](https://ddwiki.reso.org/display/DDW17/OpenHouseStartTime+Field)
    #[serde(rename = "OpenHouseStartTime", skip_serializing_if = "Option::is_none")]
    pub open_house_start_time: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// Status of the open house, i.e. Active, Cancelled, Ended.
    ///
    /// [OpenHouseStatus](https://ddwiki.reso.org/display/DDW17/OpenHouseStatus+Field)
    #[serde(rename = "OpenHouseStatus", skip_serializing_if = "Option::is_none")]
    pub open_house_status: Option<String>,

    /// The type of open house.  i.e. Public, Broker, Office, Association, Private (invitation or targeted publication).
    ///
    /// [OpenHouseType](https://ddwiki.reso.org/display/DDW17/OpenHouseType+Field)
    #[serde(rename = "OpenHouseType", skip_serializing_if = "Option::is_none")]
    pub open_house_type: Option<String>,

    /// The transactional timestamp automatically recorded by the MLS system representing the date/time the Open House was entered and made visible to members of the MLS.
    ///
    /// [OriginalEntryTimestamp](https://ddwiki.reso.org/display/DDW17/OriginalEntryTimestamp+%28OpenHouse%29+Field)
    #[serde(
        rename = "OriginalEntryTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub original_entry_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the Open House was input.  In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [OriginatingSystemID](https://ddwiki.reso.org/display/DDW17/OriginatingSystemID+%28OpenHouse%29+Field)
    #[serde(
        rename = "OriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Originating system.  The Originating system is the system with authoritative control over the record.  For example, the Multiple Listing Service where the Open House was input.  There may be cases where the Source System (how you received the record) is not the Originating System.  See Source System Key for more information.
    ///
    /// [OriginatingSystemKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemKey+%28OpenHouse%29+Field)
    #[serde(
        rename = "OriginatingSystemKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_key: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the Open House is originally input.  The legal name of the company.
    ///
    /// [OriginatingSystemName](https://ddwiki.reso.org/display/DDW17/OriginatingSystemName+%28OpenHouse%29+Field)
    #[serde(
        rename = "OriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_name: Option<String>,

    /// A description of the refreshments that will be served at the open house.
    ///
    /// [Refreshments](https://ddwiki.reso.org/display/DDW17/Refreshments+Field)
    #[serde(rename = "Refreshments", skip_serializing_if = "Option::is_none")]
    pub refreshments: Option<String>,

    /// The first name of the showing agent.
    ///
    /// [ShowingAgentFirstName](https://ddwiki.reso.org/display/DDW17/ShowingAgentFirstName+Field)
    #[serde(
        rename = "ShowingAgentFirstName",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_agent_first_name: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the ListAgentKey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId. This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [ShowingAgentKey](https://ddwiki.reso.org/display/DDW17/ShowingAgentKey+Field)
    #[serde(rename = "ShowingAgentKey", skip_serializing_if = "Option::is_none")]
    pub showing_agent_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the ListAgentKey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId. This is a foreign key relating to the Member resource's MemberKey. This is the numeric only key and used as an alternative to the ShowingAgentKey field.
    ///
    /// [ShowingAgentKeyNumeric](https://ddwiki.reso.org/display/DDW17/ShowingAgentKeyNumeric+Field)
    #[serde(
        rename = "ShowingAgentKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_agent_key_numeric: Option<f64>,

    /// The last name of the showing agent.
    ///
    /// [ShowingAgentLastName](https://ddwiki.reso.org/display/DDW17/ShowingAgentLastName+Field)
    #[serde(
        rename = "ShowingAgentLastName",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_agent_last_name: Option<String>,

    /// The local, well-known identifier for the member. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [ShowingAgentMlsID](https://ddwiki.reso.org/display/DDW17/ShowingAgentMlsID+Field)
    #[serde(rename = "ShowingAgentMlsID", skip_serializing_if = "Option::is_none")]
    pub showing_agent_mls_id: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider.  The source system is the system from which the record was directly received.  In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemID](https://ddwiki.reso.org/display/DDW17/SourceSystemID+%28OpenHouse%29+Field)
    #[serde(rename = "SourceSystemID", skip_serializing_if = "Option::is_none")]
    pub source_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Source System. The Source System is the system from which the record was directly received. In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemKey](https://ddwiki.reso.org/display/DDW17/SourceSystemKey+%28OpenHouse%29+Field)
    #[serde(rename = "SourceSystemKey", skip_serializing_if = "Option::is_none")]
    pub source_system_key: Option<String>,

    /// The name of the Open House record provider.  The system from which the record was directly received.  The legal name of the company.
    ///
    /// [SourceSystemName](https://ddwiki.reso.org/display/DDW17/SourceSystemName+%28OpenHouse%29+Field)
    #[serde(rename = "SourceSystemName", skip_serializing_if = "Option::is_none")]
    pub source_system_name: Option<String>,
}

/// [Prospecting Resource](https://ddwiki.reso.org/display/DDW17/Prospecting+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct Prospecting {
    /// If set to True, the given auto email is active.  False records may be disabled or waiting activation.
    ///
    /// [ActiveYN](https://ddwiki.reso.org/display/DDW17/ActiveYN+Field)
    #[serde(rename = "ActiveYN", skip_serializing_if = "Option::is_none")]
    pub active_yn: Option<bool>,

    /// A comma separate list of email addresses that are the "BCC", or Blind Carbon Copy, address the auto emails are being sent to.
    ///
    /// [BccEmailList](https://ddwiki.reso.org/display/DDW17/BccEmailList+Field)
    #[serde(rename = "BccEmailList", skip_serializing_if = "Option::is_none")]
    pub bcc_email_list: Option<String>,

    /// When set to True, the auto mail is also sent as a Blind Carbon Copy to the Member who created the Auto Email.
    ///
    /// [BccMeYN](https://ddwiki.reso.org/display/DDW17/BccMeYN+Field)
    #[serde(rename = "BccMeYN", skip_serializing_if = "Option::is_none")]
    pub bcc_me_yn: Option<bool>,

    /// A comma separate list of email addresses that are the "CC", or Carbon Copy, address the auto emails are being sent to.
    ///
    /// [CcEmailList](https://ddwiki.reso.org/display/DDW17/CcEmailList+Field)
    #[serde(rename = "CcEmailList", skip_serializing_if = "Option::is_none")]
    pub cc_email_list: Option<String>,

    /// If set to True, the client has clicked through to accept automatic of emails.  Recipant acceptance is an important part of CAN-SPAM and other bulk automatic emailing regulations.
    ///
    /// [ClientActivatedYN](https://ddwiki.reso.org/display/DDW17/ClientActivatedYN+Field)
    #[serde(rename = "ClientActivatedYN", skip_serializing_if = "Option::is_none")]
    pub client_activated_yn: Option<bool>,

    /// If set to True, notifications are to be sent to the member when the auto email is in Concierge mode.
    ///
    /// [ConciergeNotificationsYN](https://ddwiki.reso.org/display/DDW17/ConciergeNotificationsYN+Field)
    #[serde(
        rename = "ConciergeNotificationsYN",
        skip_serializing_if = "Option::is_none"
    )]
    pub concierge_notifications_yn: Option<bool>,

    /// When set to True, the auto mail is in Concierge mode and to be approved by the member before sent to the client.
    ///
    /// [ConciergeYN](https://ddwiki.reso.org/display/DDW17/ConciergeYN+Field)
    #[serde(rename = "ConciergeYN", skip_serializing_if = "Option::is_none")]
    pub concierge_yn: Option<bool>,

    /// This is the foreign key relating to the Contact resource. A unique identifier for this record from the immediate source. This is a string that can include URI or other forms. Alternatively use the ContactKeyNumeric for a numeric only key field. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, see SourceSystemKey and OriginatingSystemKey variants.
    ///
    /// [ContactKey](https://ddwiki.reso.org/display/DDW17/ContactKey+%28Prospecting%29+Field)
    #[serde(rename = "ContactKey", skip_serializing_if = "Option::is_none")]
    pub contact_key: Option<String>,

    /// This is the foreign key relating to the Contact resource. A unique identifier for this record from the immediate source. This is the numeric only key and used as an alternative to the ContactKey fields. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, see SourceSystemKeyNumeric and OriginatingSystemKeyNumeric variants.
    ///
    /// [ContactKeyNumeric](https://ddwiki.reso.org/display/DDW17/ContactKeyNumeric+%28Prospecting%29+Field)
    #[serde(rename = "ContactKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub contact_key_numeric: Option<f64>,

    /// When Daily is selected as the ScheduleType, a list of days of the week and AM or PM options.
    ///
    /// [DailySchedule](https://ddwiki.reso.org/display/DDW17/DailySchedule+Field)
    #[serde(rename = "DailySchedule", skip_serializing_if = "Option::is_none")]
    pub daily_schedule: Option<String>,

    /// The system ID of the display that has been related, or set as the default, to this saved search.
    ///
    /// [DisplayTemplateID](https://ddwiki.reso.org/display/DDW17/DisplayTemplateID+Field)
    #[serde(rename = "DisplayTemplateID", skip_serializing_if = "Option::is_none")]
    pub display_template_id: Option<String>,

    /// The language that will be used in the given auto email.
    ///
    /// [Language](https://ddwiki.reso.org/display/DDW17/Language+%28Prospecting%29+Field)
    #[serde(rename = "Language", skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,

    /// Timestamp of when the prospector last found new or modified listings for this auto-email.
    ///
    /// [LastNewChangedTimestamp](https://ddwiki.reso.org/display/DDW17/LastNewChangedTimestamp+Field)
    #[serde(
        rename = "LastNewChangedTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_new_changed_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// A timestamp of when the auto email was last viewed by the client in the portal.
    ///
    /// [LastViewedTimestamp](https://ddwiki.reso.org/display/DDW17/LastViewedTimestamp+Field)
    #[serde(
        rename = "LastViewedTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_viewed_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The body of the auto email message when the first email is sent for the prospecting campaign.
    ///
    /// [MessageNew](https://ddwiki.reso.org/display/DDW17/MessageNew+Field)
    #[serde(rename = "MessageNew", skip_serializing_if = "Option::is_none")]
    pub message_new: Option<String>,

    /// The body of the auto email message to be used when the criteria or settings of this auto email have been modified.
    ///
    /// [MessageRevise](https://ddwiki.reso.org/display/DDW17/MessageRevise+Field)
    #[serde(rename = "MessageRevise", skip_serializing_if = "Option::is_none")]
    pub message_revise: Option<String>,

    /// The body of the auto email message for subsequent email messages after the first email is sent.  If a first email option isn't used, this field is used for all emails including the first.
    ///
    /// [MessageUpdate](https://ddwiki.reso.org/display/DDW17/MessageUpdate+Field)
    #[serde(rename = "MessageUpdate", skip_serializing_if = "Option::is_none")]
    pub message_update: Option<String>,

    /// The date/time this prospecting record was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28Prospecting%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// A timestamp of when the auto email is schedule to next send.
    ///
    /// [NextSendTimestamp](https://ddwiki.reso.org/display/DDW17/NextSendTimestamp+Field)
    #[serde(rename = "NextSendTimestamp", skip_serializing_if = "Option::is_none")]
    pub next_send_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The local, well-known identifier for the member owning the contact.
    ///
    /// [OwnerMemberID](https://ddwiki.reso.org/display/DDW17/OwnerMemberID+%28Prospecting%29+Field)
    #[serde(rename = "OwnerMemberID", skip_serializing_if = "Option::is_none")]
    pub owner_member_id: Option<String>,

    /// The unique identifier (key) of the member owning the contact. This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [OwnerMemberKey](https://ddwiki.reso.org/display/DDW17/OwnerMemberKey+%28Prospecting%29+Field)
    #[serde(rename = "OwnerMemberKey", skip_serializing_if = "Option::is_none")]
    pub owner_member_key: Option<String>,

    /// The unique identifier (key) of the member owning the contact. This is a foreign key relating to the Member resource's MemberKey. This is the numeric only key and used as an alternative to the OwnerMemberKey field.
    ///
    /// [OwnerMemberKeyNumeric](https://ddwiki.reso.org/display/DDW17/OwnerMemberKeyNumeric+%28Prospecting%29+Field)
    #[serde(
        rename = "OwnerMemberKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub owner_member_key_numeric: Option<f64>,

    /// A unique identifier for this record from the immediate source. This is a string that can include URI or other forms.  Alternatively use the ProspectKeyNumeric for a numeric only key field.  This is the local key of the system.  When records are received from other systems, a local key is commonly applied.  If conveying the original keys from the source or originating systems, see SourceSystemKey and OriginatingSystemKey variants.
    ///
    /// [ProspectingKey](https://ddwiki.reso.org/display/DDW17/ProspectingKey+Field)
    #[serde(rename = "ProspectingKey", skip_serializing_if = "Option::is_none")]
    pub prospecting_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This is the numeric only key and used as an alternative to the ProspectKey fields.  This is the local key of the system.  When records are received from other systems, a local key is commonly applied.  If conveying the original keys from the source or originating systems, see SourceSystemKeyNumeric and OriginatingSystemKeyNumeric variants.
    ///
    /// [ProspectingKeyNumeric](https://ddwiki.reso.org/display/DDW17/ProspectingKeyNumeric+Field)
    #[serde(
        rename = "ProspectingKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub prospecting_key_numeric: Option<f64>,

    /// A list of reasons the Auto Email was set to inactive or set back to active.  e.g. AgentDisabled, OverLimit, No Listings Found, Re-Activated, Client Disabled, etc.
    ///
    /// [ReasonActiveOrDisabled](https://ddwiki.reso.org/display/DDW17/ReasonActiveOrDisabled+Field)
    #[serde(
        rename = "ReasonActiveOrDisabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub reason_active_or_disabled: Option<String>,

    /// This is the foreign key relating to the SavedSearch resource. A unique identifier for this record from the immediate source. This is a string that can include URI or other forms. Alternatively use the SavedSearchKeyNumeric for a numeric only key field. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, see SourceSystemKey and OriginatingSystemKey variants.
    ///
    /// [SavedSearchKey](https://ddwiki.reso.org/display/DDW17/SavedSearchKey+%28Prospecting%29+Field)
    #[serde(rename = "SavedSearchKey", skip_serializing_if = "Option::is_none")]
    pub saved_search_key: Option<String>,

    /// This is the foreign key relating to the SavedSearch resource. A unique identifier for this record from the immediate source. This is the numeric only key and used as an alternative to the SavedSearchKey fields. This is the local key of the system. When records are received from other systems, a local key is commonly applied. If conveying the original keys from the source or originating systems, see SourceSystemKeyNumeric and OriginatingSystemKeyNumeric variants.
    ///
    /// [SavedSearchKeyNumeric](https://ddwiki.reso.org/display/DDW17/SavedSearchKeyNumeric+%28Prospecting%29+Field)
    #[serde(
        rename = "SavedSearchKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub saved_search_key_numeric: Option<f64>,

    /// A selection of the type of schedule that the auto email will be sent.  Daily, Monthly or ASAP.
    ///
    /// [ScheduleType](https://ddwiki.reso.org/display/DDW17/ScheduleType+Field)
    #[serde(rename = "ScheduleType", skip_serializing_if = "Option::is_none")]
    pub schedule_type: Option<String>,

    /// The subject line of the auto email being sent.
    ///
    /// [Subject](https://ddwiki.reso.org/display/DDW17/Subject+Field)
    #[serde(rename = "Subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,

    /// A comma separate list of email addresses that are the "To" address the auto emails are being sent to.
    ///
    /// [ToEmailList](https://ddwiki.reso.org/display/DDW17/ToEmailList+Field)
    #[serde(rename = "ToEmailList", skip_serializing_if = "Option::is_none")]
    pub to_email_list: Option<String>,
}

/// [Queue Resource](https://ddwiki.reso.org/display/DDW17/Queue+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct Queue {
    /// Name of the class which this queue record is referencing.
    ///
    /// [ClassName](https://ddwiki.reso.org/display/DDW17/ClassName+%28Queue%29+Field)
    #[serde(rename = "ClassName", skip_serializing_if = "Option::is_none")]
    pub class_name: Option<String>,

    /// Timestamp of the last major change on the listing (see also MajorChangeType).
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28Queue%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider. The Originating system is the system with authoritative control over the record. For example; the name of the MLS where the Queue record was generated. In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [OriginatingSystemID](https://ddwiki.reso.org/display/DDW17/OriginatingSystemID+%28Queue%29+Field)
    #[serde(
        rename = "OriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_id: Option<String>,

    /// The name of the Originating record provider. Most commonly the name of the MLS. The place where the Queue record or originally generated. The legal name of the company.
    ///
    /// [OriginatingSystemName](https://ddwiki.reso.org/display/DDW17/OriginatingSystemName+%28Queue%29+Field)
    #[serde(
        rename = "OriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_name: Option<String>,

    /// The system key, a unique record identifier, from the Originating system. The Originating system is the system with authoritative control over the record. For example, the Multiple Listing Service where the Queue record was generated. There may be cases where the Source System (how you received the record) is not the Originating System. See Source System Key for more information.
    ///
    /// [OriginatingSystemQueueKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemQueueKey+Field)
    #[serde(
        rename = "OriginatingSystemQueueKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_queue_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This may be a number, or string that can include URI or other forms. This is the system you are connecting to and not necessarily the original source of the record.
    ///
    /// [QueueTransactionKey](https://ddwiki.reso.org/display/DDW17/QueueTransactionKey+Field)
    #[serde(
        rename = "QueueTransactionKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub queue_transaction_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This may be a number, or string that can include URI or other forms. This is the system you are connecting to and not necessarily the original source of the record. This is the numeric only key and used as an alternative to the QueueKey field.
    ///
    /// [QueueTransactionKeyNumeric](https://ddwiki.reso.org/display/DDW17/QueueTransactionKeyNumeric+Field)
    #[serde(
        rename = "QueueTransactionKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub queue_transaction_key_numeric: Option<f64>,

    /// The type of change that the queue transaction record is representing. For example, add, change, delete, etc.
    ///
    /// [QueueTransactionType](https://ddwiki.reso.org/display/DDW17/QueueTransactionType+Field)
    #[serde(
        rename = "QueueTransactionType",
        skip_serializing_if = "Option::is_none"
    )]
    pub queue_transaction_type: Option<String>,

    /// The name of the resource which this queue record is referencing.
    ///
    /// [ResourceName](https://ddwiki.reso.org/display/DDW17/ResourceName+%28Queue%29+Field)
    #[serde(rename = "ResourceName", skip_serializing_if = "Option::is_none")]
    pub resource_name: Option<String>,

    /// The well known identifier of the related record from the source resource. The value may be identical to that of the Listing Key, but the Listing ID is intended to be the value used by a human to retrieve the information about a specific listing. In a multiple originating system or a merged system, this value may not be unique and may require the use of the provider system to create a synthetic unique value.
    ///
    /// [ResourceRecordID](https://ddwiki.reso.org/display/DDW17/ResourceRecordID+%28Queue%29+Field)
    #[serde(rename = "ResourceRecordID", skip_serializing_if = "Option::is_none")]
    pub resource_record_id: Option<String>,

    /// The primary key of the related record from the source resource. For example the ListingKey, AgentKey, OfficeKey, etc. This is the system you are connecting to and not necessarily the original source of the record. This is a foreign key from the resource selected in the ResourceName field.
    ///
    /// [ResourceRecordKey](https://ddwiki.reso.org/display/DDW17/ResourceRecordKey+%28Queue%29+Field)
    #[serde(rename = "ResourceRecordKey", skip_serializing_if = "Option::is_none")]
    pub resource_record_key: Option<String>,

    /// The primary key of the related record from the source resource. For example the ListingKey, AgentKey, OfficeKey, etc. This is the system you are connecting to and not necessarily the original source of the record. This is a foreign key from the resource selected in the ResourceName field. This is the numeric only key and used as an alternative to the ResourceRecordKey field.
    ///
    /// [ResourceRecordKeyNumeric](https://ddwiki.reso.org/display/DDW17/ResourceRecordKeyNumeric+%28Queue%29+Field)
    #[serde(
        rename = "ResourceRecordKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_record_key_numeric: Option<f64>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider. The source system is the system from which the record was directly received. In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemID](https://ddwiki.reso.org/display/DDW17/SourceSystemID+%28Queue%29+Field)
    #[serde(rename = "SourceSystemID", skip_serializing_if = "Option::is_none")]
    pub source_system_id: Option<String>,

    /// The name of the Queue record provider. The system from which the record was directly received. The legal name of the company.
    ///
    /// [SourceSystemName](https://ddwiki.reso.org/display/DDW17/SourceSystemName+%28Queue%29+Field)
    #[serde(rename = "SourceSystemName", skip_serializing_if = "Option::is_none")]
    pub source_system_name: Option<String>,

    /// The system key, a unique record identifier, from the Source System. The Source System is the system from which the record was directly received. In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemQueueKey](https://ddwiki.reso.org/display/DDW17/SourceSystemQueueKey+Field)
    #[serde(
        rename = "SourceSystemQueueKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_system_queue_key: Option<String>,
}

/// [Rules Resource](https://ddwiki.reso.org/display/DDW17/Rules+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct Rules {
    /// The class or table to which the Rule refers. i.e. Residential, Residential Lease, Income, Mobile, etc.
    ///
    /// [ClassName](https://ddwiki.reso.org/display/DDW17/ClassName+%28Rules%29+Field)
    #[serde(rename = "ClassName", skip_serializing_if = "Option::is_none")]
    pub class_name: Option<String>,

    /// The unique identifier of the field to which the Rule applies. This is a foreign key relating to the field found in the resource per the ResourceName.
    ///
    /// [FieldKey](https://ddwiki.reso.org/display/DDW17/FieldKey+%28Rules%29+Field)
    #[serde(rename = "FieldKey", skip_serializing_if = "Option::is_none")]
    pub field_key: Option<String>,

    /// The unique identifier of the field to which the Rule applies. This is a foreign key relating to the field found in the resource per the ResourceName. This is the numeric only key and used as an alternative to the FieldKey field.
    ///
    /// [FieldKeyNumeric](https://ddwiki.reso.org/display/DDW17/FieldKeyNumeric+%28Rules%29+Field)
    #[serde(rename = "FieldKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub field_key_numeric: Option<f64>,

    /// The name of the field to which the Rule applies.
    ///
    /// [FieldName](https://ddwiki.reso.org/display/DDW17/FieldName+%28Rules%29+Field)
    #[serde(rename = "FieldName", skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,

    /// The transactional timestamp automatically recorded by the MLS system representing the date/time the rule was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28Rules%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The transactional timestamp automatically recorded by the MLS system representing the date/time the rule was initially entered.
    ///
    /// [OriginalEntryTimestamp](https://ddwiki.reso.org/display/DDW17/OriginalEntryTimestamp+%28Rules%29+Field)
    #[serde(
        rename = "OriginalEntryTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub original_entry_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider. The Originating system is the system with authoritative control over the record. For example; the name of the MLS where the Rule originated. In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [OriginatingSystemID](https://ddwiki.reso.org/display/DDW17/OriginatingSystemID+%28Rules%29+Field)
    #[serde(
        rename = "OriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_id: Option<String>,

    /// The name of the Originating record provider. Most commonly the name of the MLS. The place where the Rules is originally input. The legal name of the company.
    ///
    /// [OriginatingSystemName](https://ddwiki.reso.org/display/DDW17/OriginatingSystemName+%28Rules%29+Field)
    #[serde(
        rename = "OriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_name: Option<String>,

    /// The system key, a unique record identifier, from the Originating system. The Originating system is the system with authoritative control over the record. For example, the Multiple Listing Service where the Rule originated. There may be cases where the Source System (how you received the record) is not the Originating System. See Source System Key for more information.
    ///
    /// [OriginatingSystemRuleKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemRuleKey+Field)
    #[serde(
        rename = "OriginatingSystemRuleKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_rule_key: Option<String>,

    /// The resource to which the Rule refers. E.g. Property, Member, Office, Open House, etc.
    ///
    /// [ResourceName](https://ddwiki.reso.org/display/DDW17/ResourceName+%28Rules%29+Field)
    #[serde(rename = "ResourceName", skip_serializing_if = "Option::is_none")]
    pub resource_name: Option<String>,

    /// The action to be taken when processing the rule.
    ///
    /// [RuleAction](https://ddwiki.reso.org/display/DDW17/RuleAction+Field)
    #[serde(rename = "RuleAction", skip_serializing_if = "Option::is_none")]
    pub rule_action: Option<String>,

    /// A detailed textual description of the rule.
    ///
    /// [RuleDescription](https://ddwiki.reso.org/display/DDW17/RuleDescription+Field)
    #[serde(rename = "RuleDescription", skip_serializing_if = "Option::is_none")]
    pub rule_description: Option<String>,

    /// Is the rule currently enabled?
    ///
    /// [RuleEnabledYN](https://ddwiki.reso.org/display/DDW17/RuleEnabledYN+Field)
    #[serde(rename = "RuleEnabledYN", skip_serializing_if = "Option::is_none")]
    pub rule_enabled_yn: Option<bool>,

    /// Textual information conveyed when the given rule is in error or fails. (e.g. The listing price must be greater than 0.)
    ///
    /// [RuleErrorText](https://ddwiki.reso.org/display/DDW17/RuleErrorText+Field)
    #[serde(rename = "RuleErrorText", skip_serializing_if = "Option::is_none")]
    pub rule_error_text: Option<String>,

    /// The expression or details of the rule.
    ///
    /// [RuleExpression](https://ddwiki.reso.org/display/DDW17/RuleExpression+Field)
    #[serde(rename = "RuleExpression", skip_serializing_if = "Option::is_none")]
    pub rule_expression: Option<String>,

    /// $filter, JavaScript, RETS1.8, REBR, etc.… ?
    ///
    /// [RuleFormat](https://ddwiki.reso.org/display/DDW17/RuleFormat+Field)
    #[serde(rename = "RuleFormat", skip_serializing_if = "Option::is_none")]
    pub rule_format: Option<String>,

    /// The text that might be displayed on a form that helps the user fix the rule (e.g. enter phone number in the 10 digit format ###-###-####.)
    ///
    /// [RuleHelpText](https://ddwiki.reso.org/display/DDW17/RuleHelpText+Field)
    #[serde(rename = "RuleHelpText", skip_serializing_if = "Option::is_none")]
    pub rule_help_text: Option<String>,

    /// <ac:structured-macro ac:name="tooltip" ac:schema-version="1" ac:macro-id="d9385e45-37c2-4bf8-9f64-6a4568d6b0b4"><ac:parameter ac:name="tip">A single designation identifying what category of fields to which the given field belongs.</ac:parameter><ac:parameter ac:name="text">Group</ac:parameter></ac:structured-macro><ac:link ac:anchor="Group"><ri:page ri:content-title="Data Dictionary Terms and Meta Definitions" /><ac:plain-text-link-body><![CDATA[?]]></ac:plain-text-link-body></ac:link>: <ac:link><ri:page ri:content-title="Rules Resource" /><ac:link-body>Rules Resource</ac:link-body></ac:link>
    ///
    /// [RuleKey](https://ddwiki.reso.org/display/DDW17/RuleKey+Field)
    #[serde(rename = "RuleKey", skip_serializing_if = "Option::is_none")]
    pub rule_key: Option<String>,

    /// <ac:structured-macro ac:name="tooltip" ac:schema-version="1" ac:macro-id="dddc1b50-f511-45b5-8c68-773cf136e7b5"><ac:parameter ac:name="tip">A single designation identifying what category of fields to which the given field belongs.</ac:parameter><ac:parameter ac:name="text">Group</ac:parameter></ac:structured-macro><ac:link ac:anchor="Group"><ri:page ri:content-title="Data Dictionary Terms and Meta Definitions" /><ac:plain-text-link-body><![CDATA[?]]></ac:plain-text-link-body></ac:link>: <ac:link><ri:page ri:content-title="Rules Resource" /><ac:link-body>Rules Resource</ac:link-body></ac:link>
    ///
    /// [RuleKeyNumeric](https://ddwiki.reso.org/display/DDW17/RuleKeyNumeric+Field)
    #[serde(rename = "RuleKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub rule_key_numeric: Option<f64>,

    /// A descriptive name for the rule.
    ///
    /// [RuleName](https://ddwiki.reso.org/display/DDW17/RuleName+Field)
    #[serde(rename = "RuleName", skip_serializing_if = "Option::is_none")]
    pub rule_name: Option<String>,

    /// When in use, execution of rules are to follow the order specified by this field. Any rule that references another field will need to be ordered.
    ///
    /// [RuleOrder](https://ddwiki.reso.org/display/DDW17/RuleOrder+Field)
    #[serde(rename = "RuleOrder", skip_serializing_if = "Option::is_none")]
    pub rule_order: Option<f64>,

    /// Validation, Required, Warning, etc.
    ///
    /// [RuleType](https://ddwiki.reso.org/display/DDW17/RuleType+Field)
    #[serde(rename = "RuleType", skip_serializing_if = "Option::is_none")]
    pub rule_type: Option<String>,

    /// A semantically-versioned rule version. https://semver.org/
    ///
    /// [RuleVersion](https://ddwiki.reso.org/display/DDW17/RuleVersion+Field)
    #[serde(rename = "RuleVersion", skip_serializing_if = "Option::is_none")]
    pub rule_version: Option<String>,

    /// Textual information conveyed when a given rule has met a condition that warrants a warning message. e.g. you've entered a sale price that is has a difference from the listing price greater than 25%.
    ///
    /// [RuleWarningText](https://ddwiki.reso.org/display/DDW17/RuleWarningText+Field)
    #[serde(rename = "RuleWarningText", skip_serializing_if = "Option::is_none")]
    pub rule_warning_text: Option<String>,

    /// The system key, a unique record identifier, from the Source System. The Source System is the system from which the record was directly received. In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemHistoryKey](https://ddwiki.reso.org/display/DDW17/SourceSystemHistoryKey+%28Rules%29+Field)
    #[serde(
        rename = "SourceSystemHistoryKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_system_history_key: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider. The source system is the system from which the record was directly received. In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemID](https://ddwiki.reso.org/display/DDW17/SourceSystemID+%28Rules%29+Field)
    #[serde(rename = "SourceSystemID", skip_serializing_if = "Option::is_none")]
    pub source_system_id: Option<String>,

    /// The name of the Rule record provider. The system from which the record was directly received. The legal name of the company.
    ///
    /// [SourceSystemName](https://ddwiki.reso.org/display/DDW17/SourceSystemName+%28Rules%29+Field)
    #[serde(rename = "SourceSystemName", skip_serializing_if = "Option::is_none")]
    pub source_system_name: Option<String>,
}

/// [Showing Resource](https://ddwiki.reso.org/display/DDW17/Showing+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct Showing {
    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the listing was input.  In cases where the Originating system was not where the record was retrieved, see the Source System fields.
    ///
    /// [AgentOriginatingSystemID](https://ddwiki.reso.org/display/DDW17/AgentOriginatingSystemID+Field)
    #[serde(
        rename = "AgentOriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_originating_system_id: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the listing is originally input by the member.  The legal name of the company. In cases where the Originating system was not where the record was retrieved, see hte Source System fields.
    ///
    /// [AgentOriginatingSystemName](https://ddwiki.reso.org/display/DDW17/AgentOriginatingSystemName+Field)
    #[serde(
        rename = "AgentOriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_originating_system_name: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider. The source system is the system from which the record was directly received. In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [AgentSourceSystemID](https://ddwiki.reso.org/display/DDW17/AgentSourceSystemID+Field)
    #[serde(
        rename = "AgentSourceSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_source_system_id: Option<String>,

    /// The name of the immediate record provider. The system from which the record was directly received. The legal name of the company.  In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [AgentSourceSystemName](https://ddwiki.reso.org/display/DDW17/AgentSourceSystemName+Field)
    #[serde(
        rename = "AgentSourceSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_source_system_name: Option<String>,

    /// The well known identifier for the listing being shown. The value may be identical to that of the Listing Key, but the Listing ID is intended to be the value used by a human to retrieve the information about a specific listing. In a multiple originating system or a merged system, this value may not be unique and may require the use of the provider system to create a synthetic unique value.
    ///
    /// [ListingId](https://ddwiki.reso.org/display/DDW17/ListingId+%28Showing%29+Field)
    #[serde(rename = "ListingId", skip_serializing_if = "Option::is_none")]
    pub listing_id: Option<String>,

    /// A unique identifier for this record. This is a string that can include URI or other forms.  Alternatively use the ListingKeyNumeric for a numeric only key field.  This is the local key of the system.  When records are received from other systems, a local key is commonly applied.  If conveying the original keys from the source or originating systems, see SourceSystemKey and OriginatingSystemKey.
    ///
    /// [ListingKey](https://ddwiki.reso.org/display/DDW17/ListingKey+%28Showing%29+Field)
    #[serde(rename = "ListingKey", skip_serializing_if = "Option::is_none")]
    pub listing_key: Option<String>,

    /// A unique identifier for this record. This is the numeric only key and used as an alternative to the ListingKey fields.  This is the local key of the system.  When records are received from other systems, a local key is commonly applied.  If conveying the original keys from the source or originating systems, see SourceSystemKey and OriginatingSystemKey.
    ///
    /// [ListingKeyNumeric](https://ddwiki.reso.org/display/DDW17/ListingKeyNumeric+%28Showing%29+Field)
    #[serde(rename = "ListingKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub listing_key_numeric: Option<f64>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the listing was input.  In cases where the Originating system was not where the record was retrieved, see the Source System fields.
    ///
    /// [ListingOriginatingSystemID](https://ddwiki.reso.org/display/DDW17/ListingOriginatingSystemID+Field)
    #[serde(
        rename = "ListingOriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub listing_originating_system_id: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the listing is originally input by the member.  The legal name of the company. In cases where the Originating system was not where the record was retrieved, see the Source System fields.
    ///
    /// [ListingOriginatingSystemName](https://ddwiki.reso.org/display/DDW17/ListingOriginatingSystemName+Field)
    #[serde(
        rename = "ListingOriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub listing_originating_system_name: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider. The source system is the system from which the record was directly received. In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [ListingSourceSystemID](https://ddwiki.reso.org/display/DDW17/ListingSourceSystemID+Field)
    #[serde(
        rename = "ListingSourceSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub listing_source_system_id: Option<String>,

    /// The name of the immediate record provider. The system from which the record was directly received. The legal name of the company. In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields
    ///
    /// [ListingSourceSystemName](https://ddwiki.reso.org/display/DDW17/ListingSourceSystemName+Field)
    #[serde(
        rename = "ListingSourceSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub listing_source_system_name: Option<String>,

    /// The transactional timestamp automatically recorded by the system representing the date/time the Showing record was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28Showing%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The transactional timestamp automatically recorded by the system representing the date/time the Showing record was entered and made visible to members of the system.
    ///
    /// [OriginalEntryTimestamp](https://ddwiki.reso.org/display/DDW17/OriginalEntryTimestamp+%28Showing%29+Field)
    #[serde(
        rename = "OriginalEntryTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub original_entry_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The system key, a unique record identifier, from the Originating system. The Originating system is the system with authoritative control over the record. For example, the Multiple Listing Service where the member was input. There may be cases where the Source System (how you received the record) is not the Originating System. See Source System Key for more information.
    ///
    /// [OriginatingSystemAgentKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemAgentKey+Field)
    #[serde(
        rename = "OriginatingSystemAgentKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_agent_key: Option<String>,

    /// The system key, a unique record identifier, from the Originating system. The Originating system is the system with authoritative control over the record. For example, the Multiple Listing Service where the member was input. There may be cases where the Source System (how you received the record) is not the Originating System. See Source System Key for more information.
    ///
    /// [OriginatingSystemListingKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemListingKey+Field)
    #[serde(
        rename = "OriginatingSystemListingKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_listing_key: Option<String>,

    /// The system key, a unique record identifier, from the Originating system. The Originating system is the system with authoritative control over the record. For example, the Multiple Listing Service where the member was input. There may be cases where the Source System (how you received the record) is not the Originating System. See Source System Key for more information.
    ///
    /// [OriginatingSystemShowingKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemShowingKey+Field)
    #[serde(
        rename = "OriginatingSystemShowingKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_showing_key: Option<String>,

    /// A system unique identifier of the member who has scheduled to access the property. Specifically, in aggregation systems, the ListAgentKey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId.  This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [ShowingAgentKey](https://ddwiki.reso.org/display/DDW17/ShowingAgentKey+%28Showing%29+Field)
    #[serde(rename = "ShowingAgentKey", skip_serializing_if = "Option::is_none")]
    pub showing_agent_key: Option<String>,

    /// A system unique identifier of the member who has scheduled to access the property. Specifically, in aggregation systems, the ListAgentKey is the system unique identifier from the system that the record was retrieved. This may be identical to the related xxxId.  This is a foreign key relating to the Member resource's MemberKey.  This is the numeric only key and used as an alternative to the ShowingAgentKey field.
    ///
    /// [ShowingAgentKeyNumeric](https://ddwiki.reso.org/display/DDW17/ShowingAgentKeyNumeric+%28Showing%29+Field)
    #[serde(
        rename = "ShowingAgentKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_agent_key_numeric: Option<f64>,

    /// The local, well-known identifier for the member who has scheduled to access the property, most commonly representing a buyer. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [ShowingAgentMlsID](https://ddwiki.reso.org/display/DDW17/ShowingAgentMlsID+%28Showing%29+Field)
    #[serde(rename = "ShowingAgentMlsID", skip_serializing_if = "Option::is_none")]
    pub showing_agent_mls_id: Option<String>,

    /// The date and time the showing ends. Where other timestamps are typically stored in UTC, showing start and end date/times are typically stored in the local time zone of the property being showed.
    ///
    /// [ShowingEndTimestamp](https://ddwiki.reso.org/display/DDW17/ShowingEndTimestamp+Field)
    #[serde(
        rename = "ShowingEndTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_end_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The well-known identifier for the showing record. The value may be identical to that of the ShowingKey, but the ShowingID is intended to be the value used by a human to retrieve the information about a specific showing. In a multiple originating system or a merged system, this value may not be unique and may require the use of the provider system to create a synthetic unique value.
    ///
    /// [ShowingId](https://ddwiki.reso.org/display/DDW17/ShowingId+Field)
    #[serde(rename = "ShowingId", skip_serializing_if = "Option::is_none")]
    pub showing_id: Option<String>,

    /// A unique identifier for this record from the immediate source. This is a string that can include URI or other forms.  Alternatively use the ShowingKeyNumeric for a numeric only key field.  This is the local key of the system.  When records are received from other systems, a local key is commonly applied.  If conveying the original keys from the source or originating systems, see SourceSystemKey and OriginatingSystemKey.
    ///
    /// [ShowingKey](https://ddwiki.reso.org/display/DDW17/ShowingKey+Field)
    #[serde(rename = "ShowingKey", skip_serializing_if = "Option::is_none")]
    pub showing_key: Option<String>,

    /// A unique identifier for this record from the immediate source. This is the numeric only key and used as an alternative to the ShowingKey field.  This is the local key of the system.  When records are received from other systems, a local key is commonly applied.  If conveying the original keys from the source or originating systems, see SourceSystemKey and OriginatingSystemKey.
    ///
    /// [ShowingKeyNumeric](https://ddwiki.reso.org/display/DDW17/ShowingKeyNumeric+Field)
    #[serde(rename = "ShowingKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub showing_key_numeric: Option<f64>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the listing was input.  In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [ShowingOriginatingSystemID](https://ddwiki.reso.org/display/DDW17/ShowingOriginatingSystemID+Field)
    #[serde(
        rename = "ShowingOriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_originating_system_id: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the listing is originally input by the member.  The legal name of the company.
    ///
    /// [ShowingOriginatingSystemName](https://ddwiki.reso.org/display/DDW17/ShowingOriginatingSystemName+Field)
    #[serde(
        rename = "ShowingOriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_originating_system_name: Option<String>,

    /// The date/time when the showing agent submitted their request to access the property.  This is a system timestamp normally generated by a showing system, which is commonly the Originating System for showing records.
    ///
    /// [ShowingRequestedTimestamp](https://ddwiki.reso.org/display/DDW17/ShowingRequestedTimestamp+Field)
    #[serde(
        rename = "ShowingRequestedTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_requested_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider. The source system is the system from which the record was directly received. In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [ShowingSourceSystemID](https://ddwiki.reso.org/display/DDW17/ShowingSourceSystemID+Field)
    #[serde(
        rename = "ShowingSourceSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_source_system_id: Option<String>,

    /// The name of the immediate record provider. The system from which the record was directly received. The legal name of the company.
    ///
    /// [ShowingSourceSystemName](https://ddwiki.reso.org/display/DDW17/ShowingSourceSystemName+Field)
    #[serde(
        rename = "ShowingSourceSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_source_system_name: Option<String>,

    /// The date and time the showing begins.  Where other timestamps are typically stored in UTC, showing start and end date/times are typically stored in the local time zone of the property being showed.
    ///
    /// [ShowingStartTimestamp](https://ddwiki.reso.org/display/DDW17/ShowingStartTimestamp+Field)
    #[serde(
        rename = "ShowingStartTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub showing_start_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The system key, a unique record identifier, from the Source System. The Source System is the system from which the record was directly received. In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemAgentKey](https://ddwiki.reso.org/display/DDW17/SourceSystemAgentKey+Field)
    #[serde(
        rename = "SourceSystemAgentKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_system_agent_key: Option<String>,

    /// The system key, a unique record identifier, from the Source System. The Source System is the system from which the record was directly received. In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemListingKey](https://ddwiki.reso.org/display/DDW17/SourceSystemListingKey+Field)
    #[serde(
        rename = "SourceSystemListingKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_system_listing_key: Option<String>,

    /// The system key, a unique record identifier, from the Source System. The Source System is the system from which the record was directly received. In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemShowingKey](https://ddwiki.reso.org/display/DDW17/SourceSystemShowingKey+Field)
    #[serde(
        rename = "SourceSystemShowingKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_system_showing_key: Option<String>,
}

/// [Teams Resource](https://ddwiki.reso.org/display/DDW17/Teams+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct Teams {
    /// Date/time the roster (Team or office) record was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28Teams%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// Date/time the roster (Team or office) record was originally input into the source system.
    ///
    /// [OriginalEntryTimestamp](https://ddwiki.reso.org/display/DDW17/OriginalEntryTimestamp+%28Teams%29+Field)
    #[serde(
        rename = "OriginalEntryTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub original_entry_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the Team was input.  In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [OriginatingSystemID](https://ddwiki.reso.org/display/DDW17/OriginatingSystemID+%28Teams%29+Field)
    #[serde(
        rename = "OriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Originating system.  The Originating system is the system with authoritative control over the record.  For example, the Multiple Listing Service where the Team was input.  There may be cases where the Source System (how you received the record) is not the Originating System.  See Source System Key for more information.
    ///
    /// [OriginatingSystemKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemKey+%28Teams%29+Field)
    #[serde(
        rename = "OriginatingSystemKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_key: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the Team is originally input.  The legal name of the company.
    ///
    /// [OriginatingSystemName](https://ddwiki.reso.org/display/DDW17/OriginatingSystemName+%28Teams%29+Field)
    #[serde(
        rename = "OriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_name: Option<String>,

    /// A list of types of sites, blog, social media, the Team URL or ID is referring to. i.e. Website, Blog, Facebook, Twitter, LinkedIn, Skype, etc., This list is used to populate the Type with repeating Social Media URL or ID types.
    ///
    /// [SocialMediaType](https://ddwiki.reso.org/display/DDW17/SocialMediaType+%28Teams%29+Field)
    #[serde(rename = "SocialMediaType", skip_serializing_if = "Option::is_none")]
    pub social_media_type: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider.  The source system is the system from which the record was directly received.  In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemID](https://ddwiki.reso.org/display/DDW17/SourceSystemID+%28Teams%29+Field)
    #[serde(rename = "SourceSystemID", skip_serializing_if = "Option::is_none")]
    pub source_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Source System.  The Source System is the system from which the record was directly received.  In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemKey](https://ddwiki.reso.org/display/DDW17/SourceSystemKey+%28Teams%29+Field)
    #[serde(rename = "SourceSystemKey", skip_serializing_if = "Option::is_none")]
    pub source_system_key: Option<String>,

    /// The name of the Team record provider.  The system from which the record was directly received.  The legal name of the company.
    ///
    /// [SourceSystemName](https://ddwiki.reso.org/display/DDW17/SourceSystemName+%28Teams%29+Field)
    #[serde(rename = "SourceSystemName", skip_serializing_if = "Option::is_none")]
    pub source_system_name: Option<String>,

    /// The street number, direction, name and suffix of the Team.
    ///
    /// [TeamAddress1](https://ddwiki.reso.org/display/DDW17/TeamAddress1+Field)
    #[serde(rename = "TeamAddress1", skip_serializing_if = "Option::is_none")]
    pub team_address1: Option<String>,

    /// The unit/suite number of the Team.
    ///
    /// [TeamAddress2](https://ddwiki.reso.org/display/DDW17/TeamAddress2+Field)
    #[serde(rename = "TeamAddress2", skip_serializing_if = "Option::is_none")]
    pub team_address2: Option<String>,

    /// The group of addresses to which the USPS assigns the same code to aid in mail delivery. For the USPS, these codes are 9 digits: 5 numbers for the ZIP Code, one letter for the carrier route type, and 3 numbers for the carrier route number.
    ///
    /// [TeamCarrierRoute](https://ddwiki.reso.org/display/DDW17/TeamCarrierRoute+Field)
    #[serde(rename = "TeamCarrierRoute", skip_serializing_if = "Option::is_none")]
    pub team_carrier_route: Option<String>,

    /// The city of the Team.
    ///
    /// [TeamCity](https://ddwiki.reso.org/display/DDW17/TeamCity+Field)
    #[serde(rename = "TeamCity", skip_serializing_if = "Option::is_none")]
    pub team_city: Option<String>,

    /// The country abbreviation in a postal address.
    ///
    /// [TeamCountry](https://ddwiki.reso.org/display/DDW17/TeamCountry+Field)
    #[serde(rename = "TeamCountry", skip_serializing_if = "Option::is_none")]
    pub team_country: Option<String>,

    /// The county or parish in which the Team is addressed.
    ///
    /// [TeamCountyOrParish](https://ddwiki.reso.org/display/DDW17/TeamCountyOrParish+Field)
    #[serde(rename = "TeamCountyOrParish", skip_serializing_if = "Option::is_none")]
    pub team_county_or_parish: Option<String>,

    /// A description or marketing information about the team.
    ///
    /// [TeamDescription](https://ddwiki.reso.org/display/DDW17/TeamDescription+Field)
    #[serde(rename = "TeamDescription", skip_serializing_if = "Option::is_none")]
    pub team_description: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [TeamDirectPhone](https://ddwiki.reso.org/display/DDW17/TeamDirectPhone+Field)
    #[serde(rename = "TeamDirectPhone", skip_serializing_if = "Option::is_none")]
    pub team_direct_phone: Option<String>,

    /// The email address of the Team.
    ///
    /// [TeamEmail](https://ddwiki.reso.org/display/DDW17/TeamEmail+Field)
    #[serde(rename = "TeamEmail", skip_serializing_if = "Option::is_none")]
    pub team_email: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [TeamFax](https://ddwiki.reso.org/display/DDW17/TeamFax+Field)
    #[serde(rename = "TeamFax", skip_serializing_if = "Option::is_none")]
    pub team_fax: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the TeamKey is the system unique identifier from the system that the record was retrieved.
    ///
    /// [TeamKey](https://ddwiki.reso.org/display/DDW17/TeamKey+Field)
    #[serde(rename = "TeamKey", skip_serializing_if = "Option::is_none")]
    pub team_key: Option<String>,

    /// A system unique identifier. Specifically, in aggregation systems, the TeamKey is the system unique identifier from the system that the record was retrieved.  This is the numeric only key and used as an alternative to the TeamKey field.
    ///
    /// [TeamKeyNumeric](https://ddwiki.reso.org/display/DDW17/TeamKeyNumeric+Field)
    #[serde(rename = "TeamKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub team_key_numeric: Option<f64>,

    /// The unique system identifier of the team's lead member.
    ///
    /// [TeamLeadKey](https://ddwiki.reso.org/display/DDW17/TeamLeadKey+Field)
    #[serde(rename = "TeamLeadKey", skip_serializing_if = "Option::is_none")]
    pub team_lead_key: Option<String>,

    /// The unique system identifier of the team's lead member.  This is the numeric only key and used as an alternative to the TeamLeadKey field.
    ///
    /// [TeamLeadKeyNumeric](https://ddwiki.reso.org/display/DDW17/TeamLeadKeyNumeric+Field)
    #[serde(rename = "TeamLeadKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub team_lead_key_numeric: Option<f64>,

    /// The ID used to logon to the MLS system.
    ///
    /// [TeamLeadLoginId](https://ddwiki.reso.org/display/DDW17/TeamLeadLoginId+Field)
    #[serde(rename = "TeamLeadLoginId", skip_serializing_if = "Option::is_none")]
    pub team_lead_login_id: Option<String>,

    /// The local, well-known identifier for the Team Lead. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [TeamLeadMlsId](https://ddwiki.reso.org/display/DDW17/TeamLeadMlsId+Field)
    #[serde(rename = "TeamLeadMlsId", skip_serializing_if = "Option::is_none")]
    pub team_lead_mls_id: Option<String>,

    /// The national association ID of the team lead.  i.e. in the U.S. is the NRDS number.
    ///
    /// [TeamLeadNationalAssociationId](https://ddwiki.reso.org/display/DDW17/TeamLeadNationalAssociationId+Field)
    #[serde(
        rename = "TeamLeadNationalAssociationId",
        skip_serializing_if = "Option::is_none"
    )]
    pub team_lead_national_association_id: Option<String>,

    /// The license of the Team Lead. Separate multiple licenses with a comma and space.
    ///
    /// [TeamLeadStateLicense](https://ddwiki.reso.org/display/DDW17/TeamLeadStateLicense+Field)
    #[serde(
        rename = "TeamLeadStateLicense",
        skip_serializing_if = "Option::is_none"
    )]
    pub team_lead_state_license: Option<String>,

    /// The state in which the Team Lead is licensed.
    ///
    /// [TeamLeadStateLicenseState](https://ddwiki.reso.org/display/DDW17/TeamLeadStateLicenseState+Field)
    #[serde(
        rename = "TeamLeadStateLicenseState",
        skip_serializing_if = "Option::is_none"
    )]
    pub team_lead_state_license_state: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol.
    ///
    /// [TeamMobilePhone](https://ddwiki.reso.org/display/DDW17/TeamMobilePhone+Field)
    #[serde(rename = "TeamMobilePhone", skip_serializing_if = "Option::is_none")]
    pub team_mobile_phone: Option<String>,

    /// The name under which the team operates.  If a business this may be a DBA.
    ///
    /// [TeamName](https://ddwiki.reso.org/display/DDW17/TeamName+Field)
    #[serde(rename = "TeamName", skip_serializing_if = "Option::is_none")]
    pub team_name: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [TeamOfficePhone](https://ddwiki.reso.org/display/DDW17/TeamOfficePhone+Field)
    #[serde(rename = "TeamOfficePhone", skip_serializing_if = "Option::is_none")]
    pub team_office_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [TeamOfficePhoneExt](https://ddwiki.reso.org/display/DDW17/TeamOfficePhoneExt+Field)
    #[serde(rename = "TeamOfficePhoneExt", skip_serializing_if = "Option::is_none")]
    pub team_office_phone_ext: Option<String>,

    /// The postal code of the Team.
    ///
    /// [TeamPostalCode](https://ddwiki.reso.org/display/DDW17/TeamPostalCode+Field)
    #[serde(rename = "TeamPostalCode", skip_serializing_if = "Option::is_none")]
    pub team_postal_code: Option<String>,

    /// The extension of the postal/zip code.  i.e. +4
    ///
    /// [TeamPostalCodePlus4](https://ddwiki.reso.org/display/DDW17/TeamPostalCodePlus4+Field)
    #[serde(
        rename = "TeamPostalCodePlus4",
        skip_serializing_if = "Option::is_none"
    )]
    pub team_postal_code_plus4: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [TeamPreferredPhone](https://ddwiki.reso.org/display/DDW17/TeamPreferredPhone+Field)
    #[serde(rename = "TeamPreferredPhone", skip_serializing_if = "Option::is_none")]
    pub team_preferred_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [TeamPreferredPhoneExt](https://ddwiki.reso.org/display/DDW17/TeamPreferredPhoneExt+Field)
    #[serde(
        rename = "TeamPreferredPhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub team_preferred_phone_ext: Option<String>,

    /// The state or province in which the Team is addressed.
    ///
    /// [TeamStateOrProvince](https://ddwiki.reso.org/display/DDW17/TeamStateOrProvince+Field)
    #[serde(
        rename = "TeamStateOrProvince",
        skip_serializing_if = "Option::is_none"
    )]
    pub team_state_or_province: Option<String>,

    /// Is the account active, inactive or under disciplinary action.
    ///
    /// [TeamStatus](https://ddwiki.reso.org/display/DDW17/TeamStatus+Field)
    #[serde(rename = "TeamStatus", skip_serializing_if = "Option::is_none")]
    pub team_status: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [TeamTollFreePhone](https://ddwiki.reso.org/display/DDW17/TeamTollFreePhone+Field)
    #[serde(rename = "TeamTollFreePhone", skip_serializing_if = "Option::is_none")]
    pub team_toll_free_phone: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [TeamVoiceMail](https://ddwiki.reso.org/display/DDW17/TeamVoiceMail+Field)
    #[serde(rename = "TeamVoiceMail", skip_serializing_if = "Option::is_none")]
    pub team_voice_mail: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [TeamVoiceMailExt](https://ddwiki.reso.org/display/DDW17/TeamVoiceMailExt+Field)
    #[serde(rename = "TeamVoiceMailExt", skip_serializing_if = "Option::is_none")]
    pub team_voice_mail_ext: Option<String>,

    /// A collection of the types of social media fields  available for this team. The collection includes the type of system and other details pertinent about social media
    ///
    /// [TeamsSocialMedia](https://ddwiki.reso.org/display/DDW17/TeamsSocialMedia+Field)
    #[serde(rename = "TeamsSocialMedia", skip_serializing_if = "Option::is_none")]
    pub teams_social_media: Option<String>,
}

/// [TeamMembers Resource](https://ddwiki.reso.org/display/DDW17/TeamMembers+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct TeamMembers {
    /// A system unique identifier. Specifically, the foreign key relating to the Member resource's MemberKey.
    ///
    /// [MemberKey](https://ddwiki.reso.org/display/DDW17/MemberKey+%28TeamMembers%29+Field)
    #[serde(rename = "MemberKey", skip_serializing_if = "Option::is_none")]
    pub member_key: Option<String>,

    /// A system unique identifier. Specifically, the foreign key relating to the Member resource's MemberKey. This is the numeric only key and used as an alternative to the MemberKey field.
    ///
    /// [MemberKeyNumeric](https://ddwiki.reso.org/display/DDW17/MemberKeyNumeric+%28TeamMembers%29+Field)
    #[serde(rename = "MemberKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub member_key_numeric: Option<f64>,

    /// The ID used to logon to the MLS system.
    ///
    /// [MemberLoginId](https://ddwiki.reso.org/display/DDW17/MemberLoginId+%28TeamMembers%29+Field)
    #[serde(rename = "MemberLoginId", skip_serializing_if = "Option::is_none")]
    pub member_login_id: Option<String>,

    /// The local, well-known identifier for the member. This value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system.
    ///
    /// [MemberMlsId](https://ddwiki.reso.org/display/DDW17/MemberMlsId+%28TeamMembers%29+Field)
    #[serde(rename = "MemberMlsId", skip_serializing_if = "Option::is_none")]
    pub member_mls_id: Option<String>,

    /// Date/time the roster (member or office) record was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28TeamMembers%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// Date/time the roster (member or office) record was originally input into the source system.
    ///
    /// [OriginalEntryTimestamp](https://ddwiki.reso.org/display/DDW17/OriginalEntryTimestamp+%28TeamMembers%29+Field)
    #[serde(
        rename = "OriginalEntryTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub original_entry_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The RESO OUID's OrganizationUniqueId of the Originating record provider.  The Originating system is the system with authoritative control over the record.  For example; the name of the MLS where the Team Member was input.  In cases where the Originating system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [OriginatingSystemID](https://ddwiki.reso.org/display/DDW17/OriginatingSystemID+%28TeamMembers%29+Field)
    #[serde(
        rename = "OriginatingSystemID",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Originating system.  The Originating system is the system with authoritative control over the record.  For example, the Multiple Listing Service where the Team Member was input.  There may be cases where the Source System (how you received the record) is not the Originating System.  See Source System Key for more information.
    ///
    /// [OriginatingSystemKey](https://ddwiki.reso.org/display/DDW17/OriginatingSystemKey+%28TeamMembers%29+Field)
    #[serde(
        rename = "OriginatingSystemKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_key: Option<String>,

    /// The name of the Originating record provider.  Most commonly the name of the MLS. The place where the Team Member is originally input.  The legal name of the company.
    ///
    /// [OriginatingSystemName](https://ddwiki.reso.org/display/DDW17/OriginatingSystemName+%28TeamMembers%29+Field)
    #[serde(
        rename = "OriginatingSystemName",
        skip_serializing_if = "Option::is_none"
    )]
    pub originating_system_name: Option<String>,

    /// The RESO OUID's OrganizationUniqueId of the Source record provider.  The source system is the system from which the record was directly received.  In cases where the source system was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemID](https://ddwiki.reso.org/display/DDW17/SourceSystemID+%28TeamMembers%29+Field)
    #[serde(rename = "SourceSystemID", skip_serializing_if = "Option::is_none")]
    pub source_system_id: Option<String>,

    /// The system key, a unique record identifier, from the Source System.  The Source System is the system from which the record was directly received.  In cases where the Source System was not where the record originated (the authoritative system), see the Originating System fields.
    ///
    /// [SourceSystemKey](https://ddwiki.reso.org/display/DDW17/SourceSystemKey+%28TeamMembers%29+Field)
    #[serde(rename = "SourceSystemKey", skip_serializing_if = "Option::is_none")]
    pub source_system_key: Option<String>,

    /// The name of the Team Member record provider.  The system from which the record was directly received.  The legal name of the company.
    ///
    /// [SourceSystemName](https://ddwiki.reso.org/display/DDW17/SourceSystemName+%28TeamMembers%29+Field)
    #[serde(rename = "SourceSystemName", skip_serializing_if = "Option::is_none")]
    pub source_system_name: Option<String>,

    /// The level of impersonation the member is allowed within the team.  i.e. Impersonate (to work as the team), On Behalf (to show the team name, but also show the member's info, None (don't allow this member to appear as part of team).
    ///
    /// [TeamImpersonationLevel](https://ddwiki.reso.org/display/DDW17/TeamImpersonationLevel+Field)
    #[serde(
        rename = "TeamImpersonationLevel",
        skip_serializing_if = "Option::is_none"
    )]
    pub team_impersonation_level: Option<String>,

    /// A system unique identifier. Specifically, a foreign key referencing the Teams resource's primary key.
    ///
    /// [TeamKey](https://ddwiki.reso.org/display/DDW17/TeamKey+%28TeamMembers%29+Field)
    #[serde(rename = "TeamKey", skip_serializing_if = "Option::is_none")]
    pub team_key: Option<String>,

    /// A system unique identifier. Specifically, a foreign key referencing the Teams resource's primary key.  This is the numeric only key and used as an alternative to the TeamKey field.
    ///
    /// [TeamKeyNumeric](https://ddwiki.reso.org/display/DDW17/TeamKeyNumeric+%28TeamMembers%29+Field)
    #[serde(rename = "TeamKeyNumeric", skip_serializing_if = "Option::is_none")]
    pub team_key_numeric: Option<f64>,

    /// A system unique identifier. Specifically, the local key to the TeamMembers resource.
    ///
    /// [TeamMemberKey](https://ddwiki.reso.org/display/DDW17/TeamMemberKey+Field)
    #[serde(rename = "TeamMemberKey", skip_serializing_if = "Option::is_none")]
    pub team_member_key: Option<String>,

    /// A system unique identifier. Specifically, the local key to the TeamMembers resource. This is the numeric only key and used as an alternative to the TeamKey field.
    ///
    /// [TeamMemberKeyNumeric](https://ddwiki.reso.org/display/DDW17/TeamMemberKeyNumeric+Field)
    #[serde(
        rename = "TeamMemberKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub team_member_key_numeric: Option<f64>,

    /// The national association ID of the member. i.e. in the U.S. is the NRDS number.
    ///
    /// [TeamMemberNationalAssociationId](https://ddwiki.reso.org/display/DDW17/TeamMemberNationalAssociationId+Field)
    #[serde(
        rename = "TeamMemberNationalAssociationId",
        skip_serializing_if = "Option::is_none"
    )]
    pub team_member_national_association_id: Option<String>,

    /// The license of the member. Separate multiple licenses with a comma and space.
    ///
    /// [TeamMemberStateLicense](https://ddwiki.reso.org/display/DDW17/TeamMemberStateLicense+Field)
    #[serde(
        rename = "TeamMemberStateLicense",
        skip_serializing_if = "Option::is_none"
    )]
    pub team_member_state_license: Option<String>,

    /// The role of the member within the team. i.e. team lead, principle, associate, assistant, etc.
    ///
    /// [TeamMemberType](https://ddwiki.reso.org/display/DDW17/TeamMemberType+Field)
    #[serde(rename = "TeamMemberType", skip_serializing_if = "Option::is_none")]
    pub team_member_type: Option<String>,
}

/// [OUID Resource](https://ddwiki.reso.org/display/DDW17/OUID+Resource)
#[derive(Debug, Serialize, Deserialize)]
pub struct OUID {
    /// The local, well-know identifier of the member (user) who made the change.
    ///
    /// [ChangedByMemberID](https://ddwiki.reso.org/display/DDW17/ChangedByMemberID+%28OUID%29+Field)
    #[serde(rename = "ChangedByMemberID", skip_serializing_if = "Option::is_none")]
    pub changed_by_member_id: Option<String>,

    /// The unique identifier of the member (user) who made the change. This is a foreign key relating to the Member resource's MemberKey.
    ///
    /// [ChangedByMemberKey](https://ddwiki.reso.org/display/DDW17/ChangedByMemberKey+%28OUID%29+Field)
    #[serde(rename = "ChangedByMemberKey", skip_serializing_if = "Option::is_none")]
    pub changed_by_member_key: Option<String>,

    /// The unique identifier of the member (user) who made the change. This is a foreign key relating to the Member resource's MemberKey. This is the numeric only key and used as an alternative to the ChangedByMemberKey field.
    ///
    /// [ChangedByMemberKeyNumeric](https://ddwiki.reso.org/display/DDW17/ChangedByMemberKeyNumeric+%28OUID%29+Field)
    #[serde(
        rename = "ChangedByMemberKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub changed_by_member_key_numeric: Option<f64>,

    /// Date/time the Organization record was last modified.
    ///
    /// [ModificationTimestamp](https://ddwiki.reso.org/display/DDW17/ModificationTimestamp+%28OUID%29+Field)
    #[serde(
        rename = "ModificationTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The Organization's Primary Board or Association of REALTORS if applicable.
    ///
    /// [OrganizationAOR](https://ddwiki.reso.org/display/DDW17/OrganizationAOR+Field)
    #[serde(rename = "OrganizationAOR", skip_serializing_if = "Option::is_none")]
    pub organization_aor: Option<String>,

    /// The street number, direction, name and suffix of the organization.
    ///
    /// [OrganizationAddress1](https://ddwiki.reso.org/display/DDW17/OrganizationAddress1+Field)
    #[serde(
        rename = "OrganizationAddress1",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_address1: Option<String>,

    /// The unit/suite number of the organization.
    ///
    /// [OrganizationAddress2](https://ddwiki.reso.org/display/DDW17/OrganizationAddress2+Field)
    #[serde(
        rename = "OrganizationAddress2",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_address2: Option<String>,

    /// The OUID for the Organization's Association of REALTORS if applicable.
    ///
    /// [OrganizationAorOuid](https://ddwiki.reso.org/display/DDW17/OrganizationAorOuid+Field)
    #[serde(
        rename = "OrganizationAorOuid",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_aor_ouid: Option<String>,

    /// The OrganizationUniqueIdKey of the AOR from the system serving the OUID resource.
    ///
    /// [OrganizationAorOuidKey](https://ddwiki.reso.org/display/DDW17/OrganizationAorOuidKey+Field)
    #[serde(
        rename = "OrganizationAorOuidKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_aor_ouid_key: Option<String>,

    /// The OrganizationUniqueIdKey of the AOR from the system serving the OUID resource.  This is the numeric only key and used as an alternative to the OrganizationAorOuidKey field.
    ///
    /// [OrganizationAorOuidKeyNumeric](https://ddwiki.reso.org/display/DDW17/OrganizationAorOuidKeyNumeric+Field)
    #[serde(
        rename = "OrganizationAorOuidKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_aor_ouid_key_numeric: Option<f64>,

    /// The group of addresses to which the USPS assigns the same code to aid in mail delivery. For the USPS, these codes are 9 digits: 5 numbers for the ZIP Code, one letter for the carrier route type, and 3 numbers for the carrier route number.
    ///
    /// [OrganizationCarrierRoute](https://ddwiki.reso.org/display/DDW17/OrganizationCarrierRoute+Field)
    #[serde(
        rename = "OrganizationCarrierRoute",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_carrier_route: Option<String>,

    /// The city of the organization.
    ///
    /// [OrganizationCity](https://ddwiki.reso.org/display/DDW17/OrganizationCity+Field)
    #[serde(rename = "OrganizationCity", skip_serializing_if = "Option::is_none")]
    pub organization_city: Option<String>,

    /// Comments or notes about the Organization.
    ///
    /// [OrganizationComments](https://ddwiki.reso.org/display/DDW17/OrganizationComments+Field)
    #[serde(
        rename = "OrganizationComments",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_comments: Option<String>,

    /// The email address of the Organization Contact.
    ///
    /// [OrganizationContactEmail](https://ddwiki.reso.org/display/DDW17/OrganizationContactEmail+Field)
    #[serde(
        rename = "OrganizationContactEmail",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_contact_email: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [OrganizationContactFax](https://ddwiki.reso.org/display/DDW17/OrganizationContactFax+Field)
    #[serde(
        rename = "OrganizationContactFax",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_contact_fax: Option<String>,

    /// The first name of the Organization Contact.
    ///
    /// [OrganizationContactFirstName](https://ddwiki.reso.org/display/DDW17/OrganizationContactFirstName+Field)
    #[serde(
        rename = "OrganizationContactFirstName",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_contact_first_name: Option<String>,

    /// The full name of the Organization Contact. (First Middle Last) or a alternate full name.
    ///
    /// [OrganizationContactFullName](https://ddwiki.reso.org/display/DDW17/OrganizationContactFullName+Field)
    #[serde(
        rename = "OrganizationContactFullName",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_contact_full_name: Option<String>,

    /// The title or position of the Organization Contact.
    ///
    /// [OrganizationContactJobTitle](https://ddwiki.reso.org/display/DDW17/OrganizationContactJobTitle+Field)
    #[serde(
        rename = "OrganizationContactJobTitle",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_contact_job_title: Option<String>,

    /// The last name of the Organization Contact.
    ///
    /// [OrganizationContactLastName](https://ddwiki.reso.org/display/DDW17/OrganizationContactLastName+Field)
    #[serde(
        rename = "OrganizationContactLastName",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_contact_last_name: Option<String>,

    /// The middle name of the Organization Contact.
    ///
    /// [OrganizationContactMiddleName](https://ddwiki.reso.org/display/DDW17/OrganizationContactMiddleName+Field)
    #[serde(
        rename = "OrganizationContactMiddleName",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_contact_middle_name: Option<String>,

    /// Prefix to the name of the Organization Contact. (e.g. Dr. Mr. Ms. etc.)
    ///
    /// [OrganizationContactNamePrefix](https://ddwiki.reso.org/display/DDW17/OrganizationContactNamePrefix+Field)
    #[serde(
        rename = "OrganizationContactNamePrefix",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_contact_name_prefix: Option<String>,

    /// Suffix to the surname (e.g. Esq.,  Jr.,  III etc.) of the Organization Contact.
    ///
    /// [OrganizationContactNameSuffix](https://ddwiki.reso.org/display/DDW17/OrganizationContactNameSuffix+Field)
    #[serde(
        rename = "OrganizationContactNameSuffix",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_contact_name_suffix: Option<String>,

    /// North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens).  Other conventions should use the common local standard.  International numbers should be preceded by a plus symbol.
    ///
    /// [OrganizationContactPhone](https://ddwiki.reso.org/display/DDW17/OrganizationContactPhone+Field)
    #[serde(
        rename = "OrganizationContactPhone",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_contact_phone: Option<String>,

    /// The extension of the given phone number (if applicable).
    ///
    /// [OrganizationContactPhoneExt](https://ddwiki.reso.org/display/DDW17/OrganizationContactPhoneExt+Field)
    #[serde(
        rename = "OrganizationContactPhoneExt",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_contact_phone_ext: Option<String>,

    /// The country abbreviation in a postal address.
    ///
    /// [OrganizationCountry](https://ddwiki.reso.org/display/DDW17/OrganizationCountry+Field)
    #[serde(
        rename = "OrganizationCountry",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_country: Option<String>,

    /// The county or parish in which the organization is addressed.
    ///
    /// [OrganizationCountyOrParish](https://ddwiki.reso.org/display/DDW17/OrganizationCountyOrParish+Field)
    #[serde(
        rename = "OrganizationCountyOrParish",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_county_or_parish: Option<String>,

    /// The total number of active members in the Organization if applicable.
    ///
    /// [OrganizationMemberCount](https://ddwiki.reso.org/display/DDW17/OrganizationMemberCount+Field)
    #[serde(
        rename = "OrganizationMemberCount",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_member_count: Option<f64>,

    /// If the organization is an MLS it is likely they already have an ID or code based on their name or an abbreviation.  This field supports the continued use/reference to that legacy code.
    ///
    /// [OrganizationMlsCode](https://ddwiki.reso.org/display/DDW17/OrganizationMlsCode+Field)
    #[serde(
        rename = "OrganizationMlsCode",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_mls_code: Option<String>,

    /// If the organization uses an MLS system, this is the textual name of the vendor.
    ///
    /// [OrganizationMlsVendorName](https://ddwiki.reso.org/display/DDW17/OrganizationMlsVendorName+Field)
    #[serde(
        rename = "OrganizationMlsVendorName",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_mls_vendor_name: Option<String>,

    /// If the organization uses an MLS system, this is that vendor's OUID.
    ///
    /// [OrganizationMlsVendorOuid](https://ddwiki.reso.org/display/DDW17/OrganizationMlsVendorOuid+Field)
    #[serde(
        rename = "OrganizationMlsVendorOuid",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_mls_vendor_ouid: Option<String>,

    /// The textual name of the organization represented by a given OUID record.
    ///
    /// [OrganizationName](https://ddwiki.reso.org/display/DDW17/OrganizationName+Field)
    #[serde(rename = "OrganizationName", skip_serializing_if = "Option::is_none")]
    pub organization_name: Option<String>,

    /// The national association ID of the Organization if applicable.  i.e. in the U.S. is the NRDS number.
    ///
    /// [OrganizationNationalAssociationId](https://ddwiki.reso.org/display/DDW17/OrganizationNationalAssociationId+Field)
    #[serde(
        rename = "OrganizationNationalAssociationId",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_national_association_id: Option<String>,

    /// The postal code of the organization.
    ///
    /// [OrganizationPostalCode](https://ddwiki.reso.org/display/DDW17/OrganizationPostalCode+Field)
    #[serde(
        rename = "OrganizationPostalCode",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_postal_code: Option<String>,

    /// The extension of the postal/zip code.  i.e. +4
    ///
    /// [OrganizationPostalCodePlus4](https://ddwiki.reso.org/display/DDW17/OrganizationPostalCodePlus4+Field)
    #[serde(
        rename = "OrganizationPostalCodePlus4",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_postal_code_plus4: Option<String>,

    /// A collection of the types of social media fields available for this organization. The collection includes the type of system and other details pertinent about social media
    ///
    /// [OrganizationSocialMedia](https://ddwiki.reso.org/display/DDW17/OrganizationSocialMedia+Field)
    #[serde(
        rename = "OrganizationSocialMedia",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_social_media: Option<String>,

    /// A list of types of sites, blog, social media, the Organization URL or ID is referring to.  i.e. Website, Blog, Facebook, Twitter, LinkedIn, Skype, etc.,  This list is used to populate the Type with repeating Social Media URL or ID types.
    ///
    /// [OrganizationSocialMediaType](https://ddwiki.reso.org/display/DDW17/OrganizationSocialMediaType+Field)
    #[serde(
        rename = "OrganizationSocialMediaType",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_social_media_type: Option<String>,

    /// The license of the Organization if applicable. Separate multiple licenses with a comma and space.
    ///
    /// [OrganizationStateLicense](https://ddwiki.reso.org/display/DDW17/OrganizationStateLicense+Field)
    #[serde(
        rename = "OrganizationStateLicense",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_state_license: Option<String>,

    /// The state in which the Organization is licensed if applicable.
    ///
    /// [OrganizationStateLicenseState](https://ddwiki.reso.org/display/DDW17/OrganizationStateLicenseState+Field)
    #[serde(
        rename = "OrganizationStateLicenseState",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_state_license_state: Option<String>,

    /// The state or province in which the organization is addressed.
    ///
    /// [OrganizationStateOrProvince](https://ddwiki.reso.org/display/DDW17/OrganizationStateOrProvince+Field)
    #[serde(
        rename = "OrganizationStateOrProvince",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_state_or_province: Option<String>,

    /// Is the Organization active or inactive. 1 or true is active, 0 or false is inactive. This field is not nullable.
    ///
    /// [OrganizationStatus](https://ddwiki.reso.org/display/DDW17/OrganizationStatus+Field)
    #[serde(rename = "OrganizationStatus", skip_serializing_if = "Option::is_none")]
    pub organization_status: Option<bool>,

    /// The date/time of when the Organization Status was last changed.
    ///
    /// [OrganizationStatusChangeTimestamp](https://ddwiki.reso.org/display/DDW17/OrganizationStatusChangeTimestamp+Field)
    #[serde(
        rename = "OrganizationStatusChangeTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_status_change_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,

    /// The type of organization.  i.e. MLS, Vendor, Association, etc.  This is not a substitute or alternative for the Office resource, however it may be that a brokerage has a record in this table for a non-listing purpose.
    ///
    /// [OrganizationType](https://ddwiki.reso.org/display/DDW17/OrganizationType+Field)
    #[serde(rename = "OrganizationType", skip_serializing_if = "Option::is_none")]
    pub organization_type: Option<String>,

    /// The OUID.  This is the unique ID assigned to organizations included in the OUID resource.  Assignment of OUIDs will be centralized and may not be created by systems hosting the OUID resource.  Contact info@RESO.org for information on obtaining an OUID.
    ///
    /// [OrganizationUniqueId](https://ddwiki.reso.org/display/DDW17/OrganizationUniqueId+Field)
    #[serde(
        rename = "OrganizationUniqueId",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_unique_id: Option<String>,

    /// The key field used by the system hosting a table of OUIDs.  This key is likely to be unique to each hosting system and is not meant to be a universal ID for an organization, but rather a key used by clients of the hosting system.  The actual OUID is the Organization Unique ID field.
    ///
    /// [OrganizationUniqueIdKey](https://ddwiki.reso.org/display/DDW17/OrganizationUniqueIdKey+Field)
    #[serde(
        rename = "OrganizationUniqueIdKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_unique_id_key: Option<String>,

    /// The key field used by the system hosting a table of OUIDs.  This key is likely to be unique to each hosting system and is not meant to be a universal ID for an organization, but rather a key used by clients of the hosting system.  The actual OUID is the Organization Unique ID field.  This is the numeric only key and used as an alternative to the OrganizationUniqueIdKey field.
    ///
    /// [OrganizationUniqueIdKeyNumeric](https://ddwiki.reso.org/display/DDW17/OrganizationUniqueIdKeyNumeric+Field)
    #[serde(
        rename = "OrganizationUniqueIdKeyNumeric",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_unique_id_key_numeric: Option<f64>,

    /// Date/time the Organization record was originally input into the source system.
    ///
    /// [OriginalEntryTimestamp](https://ddwiki.reso.org/display/DDW17/OriginalEntryTimestamp+%28OUID%29+Field)
    #[serde(
        rename = "OriginalEntryTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub original_entry_timestamp: Option<chrono::DateTime<chrono::FixedOffset>>,
}

/// [AccessibilityFeatures Lookups](https://ddwiki.reso.org/display/DDW17/AccessibilityFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum AccessibilityFeatures {
    /// "[Accessible Approach with Ramp](https://ddwiki.reso.org/display/DDW17/Accessible+Approach+with+Ramp)": A minimum of one entrance to the structure with clear, evenly-paved walkway from parking area or pedestrian arrival area; Path of travel does not include a running slope in excess of 1:12 (8.33%); a cross slope exceeding 1:50 (2%); nor level changes of more than 1/2 inch; if slope is over 5%, handrails are required.  Level landing; 32 inch clear width opening doors; and adequate lighting on pathway and landing.  This is required to be considered "Visitable".
    AccessibleApproachwithRamp,

    /// "[Accessible Bedroom](https://ddwiki.reso.org/display/DDW17/Accessible+Bedroom)": Bedroom has adequate turnaround of 60 inches or other approved turnaround configuration; Closet doors have 32 inch clearance.  Accessible environmental controls. Multiple lighting fixtures.  This is required to be considered Enhanced Accessible.  Optional: Some lower-height storage in closet.   Remote control of lighting and environmental controls.
    AccessibleBedroom,

    /// "[Accessible Central Living Area](https://ddwiki.reso.org/display/DDW17/Accessible+Central+Living+Area)": Hard surface flooring or low-pile carpet, securely attached along edges. Entrances to all rooms on all floors provide 36 inch clear passage. Multiple lighting fixtures installed to provide adaptable lighting for general purpose and tasks.  This is required to be considered Enhanced Accessible.
    AccessibleCentralLivingArea,

    /// "[Accessible Closets](https://ddwiki.reso.org/display/DDW17/Accessible+Closets)": Closet doors are 32” clearance throughout Central Living Area.
    AccessibleClosets,

    /// "[Accessible Common Area](https://ddwiki.reso.org/display/DDW17/Accessible+Common+Area)": Common Area, used for entertaining guests, is level, with 36-inch passage through and around the space.  Required to be considered Visitable.
    AccessibleCommonArea,

    /// "[Accessible Doors](https://ddwiki.reso.org/display/DDW17/Accessible+Doors)": Minimum 32 inches clear passage; levered handle; threshold, if present, maximum 1/2-inch, but beveled on both sides when over 1/4 inch. Required to be considered Visitable or Enhanced Accessible.
    AccessibleDoors,

    /// "[Accessible Electrical and Environmental Controls](https://ddwiki.reso.org/display/DDW17/Accessible+Electrical+and+Environmental+Controls)": Thermostats and security system controls located on floor with central living area. Control devices  for light switches and thermostats at 42-48 inches height off floor and side- to-side. Electrical plugs minimum of 18 inches above floor. This is required to be considered Enhanced Accessible.  Optional: Rocker-style light switches; Lighted switches; Automatic/remote control for environmental controls.
    AccessibleElectricalandEnvironmentalControls,

    /// "[Accessible Elevator Installed](https://ddwiki.reso.org/display/DDW17/Accessible+Elevator+Installed)": Elevator with minimum 32" door and minimum  36" x 48" turning radius.
    AccessibleElevatorInstalled,

    /// "[Accessible Entrance](https://ddwiki.reso.org/display/DDW17/Accessible+Entrance)": Entrance door is a minimum of 32 inches wide; threshold , when present,  maximum 1/2-inch, but when over 1/4-inch, is beveled on both sides. The entry door has lever handle for egress.   This is required to be considered Visitable.  Optional: Entryway is covered; Bench near outside entry door; Motion-detection outside lights. Accessible peephole or other method for inside viewing of anyone outside the entry door.  House number easily visible from street by emergency responders.
    AccessibleEntrance,

    /// "[Accessible for Hearing-Impairment](https://ddwiki.reso.org/display/DDW17/Accessible+for+Hearing-Impairment)": Home is wired for  flashing lights and/or vibrating smoke alarm, door bell, other alerting  features.
    AccessibleforHearingImpairment,

    /// "[Accessible Full Bath](https://ddwiki.reso.org/display/DDW17/Accessible+Full+Bath)": Bathroom has adequate turnaround: 60 inches or other approved turnaround configuration.  Accessible bathing area:  Roll-in shower or space for shower chair or transfer bench in bathtub. Slip-resistant surface on bathroom floor and bathtub/shower.  Roll-under or side-access to sink, with padded trap. Lighting directly over shower/bathing areas, in addition to general bathroom lighting.  This is required to be considered Enhanced Accessible.  Optional: Removable cabinet doors and base under sink.  Grab bars with shear force of 250 pounds, installed around toilet and shower/tub, with proper backing.  Hand-held and/or height-adjustable shower head; automatic water temperature controlled (anti-scald) tub/shower; offset tub/shower controls toward front edge of tub/shower for easy access.   Raised toilet (17-19 inches minimum).
    AccessibleFullBath,

    /// "[Accessible Hallway(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243658)": Hallway is minimum 36, preferred 42 inches wide  (or adequate alternative based on individual configuration). At least one lighting fixture is present.
    AccessibleHallways,

    /// "[Accessible Kitchen](https://ddwiki.reso.org/display/DDW17/Accessible+Kitchen)": 40" clear turn-around, or 36" clear with clear under-counter space for T-turn space in kitchen, unimpeded by fixtures.  Roll-under/adaptable sink with padded trap or side-access to sink. Roll-out shelves in at least 50% of lower cabinets, Roll-under work area (36" clearance). Lighting fixtures directed over all task areas with adaptable control.  This is required to be considered Enhanced Accessible.  Optional:  Adaptable under-sink cabinet with removable doors and cabinet base.  Accessible features for upper kitchen cabinets.  Space for side-by-side refrigerator (minimum 36 inches);  Contrasting color counter edges for vison accessibility.
    AccessibleKitchen,

    /// "[Accessible Kitchen Appliances](https://ddwiki.reso.org/display/DDW17/Accessible+Kitchen+Appliances)": Stove controls in front or side, at counter top height; Oven with side-access door at counter level; Microwave is at counter level.  This is required to be considered Enhanced Accessible.  Optional:  Raised dishwasher.  Microwave  has clear work area below or to the right side.
    AccessibleKitchenAppliances,

    /// "[Accessible Stairway](https://ddwiki.reso.org/display/DDW17/Accessible+Stairway)": Handrails on both sides of stairs, extended when possible, with shear force of 250 pounds. Interior and exterior stairs have adequate number of light fixtures for full coverage. Non-slip stair treads.  If stairs are carpeted, covering is non-moveable, low-pile carpet.  This is required to be considered Enhanced Accessible.  Optional: Stair treads are in high contrast colors for increased visibility.
    AccessibleStairway,

    /// "[Accessible Washer/Dryer](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243662)": Raised clothes washer and/or dryer, front controls, side opening, both open to center.
    AccessibleWasherDryer,

    /// "[Adaptable Bathroom Walls](https://ddwiki.reso.org/display/DDW17/Adaptable+Bathroom+Walls)": Reinforced main bathroom walls, including bath or shower, to permit installation of grab bars (with shear force of 250 pounds) and/or fixtures in the future.   This is required to be considered Enhanced Accessible.
    AdaptableBathroomWalls,

    /// "[Adaptable For Elevator](https://ddwiki.reso.org/display/DDW17/Adaptable+For+Elevator)": Stacked closets in a multi-story house for possible future conversion to an elevator.
    AdaptableForElevator,

    /// "[Ceiling Track](https://ddwiki.reso.org/display/DDW17/Ceiling+Track)": Track installed in ceiling for lift chair (Hoyer lift).
    CeilingTrack,

    /// "[Central Living Area](https://ddwiki.reso.org/display/DDW17/Central+Living+Area)": Central Living Area includes: Common Area, hallway(s), full or 3/4 bathroom,  kitchen, at least one bedroom, access to environmental controls, and access to floors above main floor, if necessary.
    CentralLivingArea,

    /// "[Common Area](https://ddwiki.reso.org/display/DDW17/Common+Area)": The Common Area is the portion of the home near accessible entrance, used for entertaining guests.
    CommonArea,

    /// "[Customized Wheelchair Accessible](https://ddwiki.reso.org/display/DDW17/Customized+Wheelchair+Accessible)": Customized accessibility for specific size or style of wheelchair or scooter.
    CustomizedWheelchairAccessible,

    /// "[Electronic Environmental Controls](https://ddwiki.reso.org/display/DDW17/Electronic+Environmental+Controls)": Programmable electronic controls for thermostat, lights, security system and automatic doors.
    ElectronicEnvironmentalControls,

    /// "[Enhanced Accessible](https://ddwiki.reso.org/display/DDW17/Enhanced+Accessible)": The Central Living Area is fully accessible for lifelong living by all residents, no matter their ability. A person in a wheel chair or with other disability is able to  perform all personal and housekeeping tasks.  Persons without disabilities are also able to perform basic tasks with greater ease.  To be considered "Enhanced Accessible" the home also includes all "Visitable" features.
    EnhancedAccessible,

    /// "[Exterior Wheelchair Lift](https://ddwiki.reso.org/display/DDW17/Exterior+Wheelchair+Lift)": Mechanical wheelchair lift is installed outside the home to facilitate barrier-free approach.
    ExteriorWheelchairLift,

    /// "[Grip-Accessible Features](https://ddwiki.reso.org/display/DDW17/Grip-Accessible+Features)": All doors, faucets and other mechanisms throughout central living area are lever, hands-free or other style that can be  controlled with a closed, clenched fist or weak hands.  This is required to be considered Enhanced Accessible.  Optional:  Wire pull (D-ring) handles or equivalent or easy touch latches on cabinets and drawers.
    GripAccessibleFeatures,

    /// "[Reinforced Floors](https://ddwiki.reso.org/display/DDW17/Reinforced+Floors)": Reinforced floors for bariatric needs, power wheelchairs, therapeutic tub or heavy medical equipment.
    ReinforcedFloors,

    /// "[Safe Emergency Egress from Home](https://ddwiki.reso.org/display/DDW17/Safe+Emergency+Egress+from+Home)": Minimum two, no-step, accessible egresses from Central Living Area.  Window locks are  19 to 54 inches from the floor and can be opened with a closed fist. Emergency egress windows in sleeping areas require minimal effort to open.  This is required to be considered Enhanced Accessible.
    SafeEmergencyEgressfromHome,

    /// "[Smart Technology](https://ddwiki.reso.org/display/DDW17/Smart+Technology)": Smart Home (computer-controlled) and/or smart products— for example, voice activated controls, voice reminder, remote monitoring of individuals with dementia.
    SmartTechnology,

    /// "[Stair Lift](https://ddwiki.reso.org/display/DDW17/Stair+Lift)": Stair lift with motorized rail to climb interior or exterior stairway installed professionally.
    StairLift,

    /// "[Standby Generator](https://ddwiki.reso.org/display/DDW17/Standby+Generator)": Backup generator for refrigeration of medications, life-sustaining medical  equipment or essential room temperature control.
    StandbyGenerator,

    /// "[Therapeutic Whirlpool](https://ddwiki.reso.org/display/DDW17/Therapeutic+Whirlpool)": Therapeutic whirlpool, properly installed.
    TherapeuticWhirlpool,

    /// "[Visitable](https://ddwiki.reso.org/display/DDW17/Visitable)": The home is “visitable” for all guests: a person in a wheel chair can easily enter the home and  access the main Common Area, a half-bathroom at minimum, and the hall leading to that bathroom.
    Visitable,

    /// "[Visitor Bathroom](https://ddwiki.reso.org/display/DDW17/Visitor+Bathroom)": Bathroom that is closest to Common Area. Minimum half bath. Door has minimum 32-inch clear width opening; lever handles. Minimum 60-inch turnaround or other approved turnaround configuration (30" x 48" clear space if door opens out.). Grab bar installed in toilet area with proper blocking. This is required to be considered Visitable.
    VisitorBathroom,

    /// "[Walker-Accessible Stairs](https://ddwiki.reso.org/display/DDW17/Walker-Accessible+Stairs)": Treads are minimum 25 inches deep, with maximum 4 inches rise, minimum 36 inches wide.  May be a custom feature in addition to approach with ramp.
    WalkerAccessibleStairs,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for AccessibilityFeatures {
    fn from(s: String) -> AccessibilityFeatures {
        match s.as_ref() {
            "Accessible Approach with Ramp" => AccessibilityFeatures::AccessibleApproachwithRamp,

            "Accessible Bedroom" => AccessibilityFeatures::AccessibleBedroom,

            "Accessible Central Living Area" => AccessibilityFeatures::AccessibleCentralLivingArea,

            "Accessible Closets" => AccessibilityFeatures::AccessibleClosets,

            "Accessible Common Area" => AccessibilityFeatures::AccessibleCommonArea,

            "Accessible Doors" => AccessibilityFeatures::AccessibleDoors,

            "Accessible Electrical and Environmental Controls" => {
                AccessibilityFeatures::AccessibleElectricalandEnvironmentalControls
            }

            "Accessible Elevator Installed" => AccessibilityFeatures::AccessibleElevatorInstalled,

            "Accessible Entrance" => AccessibilityFeatures::AccessibleEntrance,

            "Accessible for Hearing-Impairment" => {
                AccessibilityFeatures::AccessibleforHearingImpairment
            }

            "Accessible Full Bath" => AccessibilityFeatures::AccessibleFullBath,

            "Accessible Hallway(s)" => AccessibilityFeatures::AccessibleHallways,

            "Accessible Kitchen" => AccessibilityFeatures::AccessibleKitchen,

            "Accessible Kitchen Appliances" => AccessibilityFeatures::AccessibleKitchenAppliances,

            "Accessible Stairway" => AccessibilityFeatures::AccessibleStairway,

            "Accessible Washer/Dryer" => AccessibilityFeatures::AccessibleWasherDryer,

            "Adaptable Bathroom Walls" => AccessibilityFeatures::AdaptableBathroomWalls,

            "Adaptable For Elevator" => AccessibilityFeatures::AdaptableForElevator,

            "Ceiling Track" => AccessibilityFeatures::CeilingTrack,

            "Central Living Area" => AccessibilityFeatures::CentralLivingArea,

            "Common Area" => AccessibilityFeatures::CommonArea,

            "Customized Wheelchair Accessible" => {
                AccessibilityFeatures::CustomizedWheelchairAccessible
            }

            "Electronic Environmental Controls" => {
                AccessibilityFeatures::ElectronicEnvironmentalControls
            }

            "Enhanced Accessible" => AccessibilityFeatures::EnhancedAccessible,

            "Exterior Wheelchair Lift" => AccessibilityFeatures::ExteriorWheelchairLift,

            "Grip-Accessible Features" => AccessibilityFeatures::GripAccessibleFeatures,

            "Reinforced Floors" => AccessibilityFeatures::ReinforcedFloors,

            "Safe Emergency Egress from Home" => AccessibilityFeatures::SafeEmergencyEgressfromHome,

            "Smart Technology" => AccessibilityFeatures::SmartTechnology,

            "Stair Lift" => AccessibilityFeatures::StairLift,

            "Standby Generator" => AccessibilityFeatures::StandbyGenerator,

            "Therapeutic Whirlpool" => AccessibilityFeatures::TherapeuticWhirlpool,

            "Visitable" => AccessibilityFeatures::Visitable,

            "Visitor Bathroom" => AccessibilityFeatures::VisitorBathroom,

            "Walker-Accessible Stairs" => AccessibilityFeatures::WalkerAccessibleStairs,

            _ => AccessibilityFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for AccessibilityFeatures {
    fn from(s: &str) -> AccessibilityFeatures {
        match s {
            "Accessible Approach with Ramp" => AccessibilityFeatures::AccessibleApproachwithRamp,

            "Accessible Bedroom" => AccessibilityFeatures::AccessibleBedroom,

            "Accessible Central Living Area" => AccessibilityFeatures::AccessibleCentralLivingArea,

            "Accessible Closets" => AccessibilityFeatures::AccessibleClosets,

            "Accessible Common Area" => AccessibilityFeatures::AccessibleCommonArea,

            "Accessible Doors" => AccessibilityFeatures::AccessibleDoors,

            "Accessible Electrical and Environmental Controls" => {
                AccessibilityFeatures::AccessibleElectricalandEnvironmentalControls
            }

            "Accessible Elevator Installed" => AccessibilityFeatures::AccessibleElevatorInstalled,

            "Accessible Entrance" => AccessibilityFeatures::AccessibleEntrance,

            "Accessible for Hearing-Impairment" => {
                AccessibilityFeatures::AccessibleforHearingImpairment
            }

            "Accessible Full Bath" => AccessibilityFeatures::AccessibleFullBath,

            "Accessible Hallway(s)" => AccessibilityFeatures::AccessibleHallways,

            "Accessible Kitchen" => AccessibilityFeatures::AccessibleKitchen,

            "Accessible Kitchen Appliances" => AccessibilityFeatures::AccessibleKitchenAppliances,

            "Accessible Stairway" => AccessibilityFeatures::AccessibleStairway,

            "Accessible Washer/Dryer" => AccessibilityFeatures::AccessibleWasherDryer,

            "Adaptable Bathroom Walls" => AccessibilityFeatures::AdaptableBathroomWalls,

            "Adaptable For Elevator" => AccessibilityFeatures::AdaptableForElevator,

            "Ceiling Track" => AccessibilityFeatures::CeilingTrack,

            "Central Living Area" => AccessibilityFeatures::CentralLivingArea,

            "Common Area" => AccessibilityFeatures::CommonArea,

            "Customized Wheelchair Accessible" => {
                AccessibilityFeatures::CustomizedWheelchairAccessible
            }

            "Electronic Environmental Controls" => {
                AccessibilityFeatures::ElectronicEnvironmentalControls
            }

            "Enhanced Accessible" => AccessibilityFeatures::EnhancedAccessible,

            "Exterior Wheelchair Lift" => AccessibilityFeatures::ExteriorWheelchairLift,

            "Grip-Accessible Features" => AccessibilityFeatures::GripAccessibleFeatures,

            "Reinforced Floors" => AccessibilityFeatures::ReinforcedFloors,

            "Safe Emergency Egress from Home" => AccessibilityFeatures::SafeEmergencyEgressfromHome,

            "Smart Technology" => AccessibilityFeatures::SmartTechnology,

            "Stair Lift" => AccessibilityFeatures::StairLift,

            "Standby Generator" => AccessibilityFeatures::StandbyGenerator,

            "Therapeutic Whirlpool" => AccessibilityFeatures::TherapeuticWhirlpool,

            "Visitable" => AccessibilityFeatures::Visitable,

            "Visitor Bathroom" => AccessibilityFeatures::VisitorBathroom,

            "Walker-Accessible Stairs" => AccessibilityFeatures::WalkerAccessibleStairs,

            _ => AccessibilityFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a AccessibilityFeatures> for &'a str {
    fn from(s: &'a AccessibilityFeatures) -> &'a str {
        match s {
            AccessibilityFeatures::AccessibleApproachwithRamp => "Accessible Approach with Ramp",

            AccessibilityFeatures::AccessibleBedroom => "Accessible Bedroom",

            AccessibilityFeatures::AccessibleCentralLivingArea => "Accessible Central Living Area",

            AccessibilityFeatures::AccessibleClosets => "Accessible Closets",

            AccessibilityFeatures::AccessibleCommonArea => "Accessible Common Area",

            AccessibilityFeatures::AccessibleDoors => "Accessible Doors",

            AccessibilityFeatures::AccessibleElectricalandEnvironmentalControls => {
                "Accessible Electrical and Environmental Controls"
            }

            AccessibilityFeatures::AccessibleElevatorInstalled => "Accessible Elevator Installed",

            AccessibilityFeatures::AccessibleEntrance => "Accessible Entrance",

            AccessibilityFeatures::AccessibleforHearingImpairment => {
                "Accessible for Hearing-Impairment"
            }

            AccessibilityFeatures::AccessibleFullBath => "Accessible Full Bath",

            AccessibilityFeatures::AccessibleHallways => "Accessible Hallway(s)",

            AccessibilityFeatures::AccessibleKitchen => "Accessible Kitchen",

            AccessibilityFeatures::AccessibleKitchenAppliances => "Accessible Kitchen Appliances",

            AccessibilityFeatures::AccessibleStairway => "Accessible Stairway",

            AccessibilityFeatures::AccessibleWasherDryer => "Accessible Washer/Dryer",

            AccessibilityFeatures::AdaptableBathroomWalls => "Adaptable Bathroom Walls",

            AccessibilityFeatures::AdaptableForElevator => "Adaptable For Elevator",

            AccessibilityFeatures::CeilingTrack => "Ceiling Track",

            AccessibilityFeatures::CentralLivingArea => "Central Living Area",

            AccessibilityFeatures::CommonArea => "Common Area",

            AccessibilityFeatures::CustomizedWheelchairAccessible => {
                "Customized Wheelchair Accessible"
            }

            AccessibilityFeatures::ElectronicEnvironmentalControls => {
                "Electronic Environmental Controls"
            }

            AccessibilityFeatures::EnhancedAccessible => "Enhanced Accessible",

            AccessibilityFeatures::ExteriorWheelchairLift => "Exterior Wheelchair Lift",

            AccessibilityFeatures::GripAccessibleFeatures => "Grip-Accessible Features",

            AccessibilityFeatures::ReinforcedFloors => "Reinforced Floors",

            AccessibilityFeatures::SafeEmergencyEgressfromHome => "Safe Emergency Egress from Home",

            AccessibilityFeatures::SmartTechnology => "Smart Technology",

            AccessibilityFeatures::StairLift => "Stair Lift",

            AccessibilityFeatures::StandbyGenerator => "Standby Generator",

            AccessibilityFeatures::TherapeuticWhirlpool => "Therapeutic Whirlpool",

            AccessibilityFeatures::Visitable => "Visitable",

            AccessibilityFeatures::VisitorBathroom => "Visitor Bathroom",

            AccessibilityFeatures::WalkerAccessibleStairs => "Walker-Accessible Stairs",

            AccessibilityFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for AccessibilityFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for AccessibilityFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_accessibility_features_format {
    use super::AccessibilityFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<AccessibilityFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<AccessibilityFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ActorType Lookups](https://ddwiki.reso.org/display/DDW17/ActorType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ActorType {
    /// "[Agent](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243683)": The event was generated by what the source defines as a real estate professional
    Agent,

    /// "[Bot](https://ddwiki.reso.org/display/DDW17/Bot)": The event was generated by a bot or some type of scripting tool
    Bot,

    /// "[Client](https://ddwiki.reso.org/display/DDW17/Client)": The event was generated by what the source defines as a registered client
    Client,

    /// "[Consumer](https://ddwiki.reso.org/display/DDW17/Consumer)": The event was generated by what the source defines as a consumer
    Consumer,

    /// "[Unknown](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243687)": The generating Actor type could not be identified
    Unknown,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ActorType {
    fn from(s: String) -> ActorType {
        match s.as_ref() {
            "Agent" => ActorType::Agent,

            "Bot" => ActorType::Bot,

            "Client" => ActorType::Client,

            "Consumer" => ActorType::Consumer,

            "Unknown" => ActorType::Unknown,

            _ => ActorType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ActorType {
    fn from(s: &str) -> ActorType {
        match s {
            "Agent" => ActorType::Agent,

            "Bot" => ActorType::Bot,

            "Client" => ActorType::Client,

            "Consumer" => ActorType::Consumer,

            "Unknown" => ActorType::Unknown,

            _ => ActorType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ActorType> for &'a str {
    fn from(s: &'a ActorType) -> &'a str {
        match s {
            ActorType::Agent => "Agent",

            ActorType::Bot => "Bot",

            ActorType::Client => "Client",

            ActorType::Consumer => "Consumer",

            ActorType::Unknown => "Unknown",

            ActorType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ActorType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ActorType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_actor_type_format {
    use super::ActorType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ActorType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<ActorType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Appliances Lookups](https://ddwiki.reso.org/display/DDW17/Appliances+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Appliances {
    /// "[Bar Fridge](https://ddwiki.reso.org/display/DDW17/Bar+Fridge)": A refrigerator that is sized and/or built to be part of a bar.
    BarFridge,

    /// "[Built-In Electric Oven](https://ddwiki.reso.org/display/DDW17/Built-In+Electric+Oven)": A built-in electric oven.
    BuiltInElectricOven,

    /// "[Built-In Electric Range](https://ddwiki.reso.org/display/DDW17/Built-In+Electric+Range)": A built-in electric range.
    BuiltInElectricRange,

    /// "[Built-In Freezer](https://ddwiki.reso.org/display/DDW17/Built-In+Freezer)": A built-in freezer.
    BuiltInFreezer,

    /// "[Built-In Gas Oven](https://ddwiki.reso.org/display/DDW17/Built-In+Gas+Oven)": A built-in gas oven
    BuiltInGasOven,

    /// "[Built-In Gas Range](https://ddwiki.reso.org/display/DDW17/Built-In+Gas+Range)": A built-in gas range.
    BuiltInGasRange,

    /// "[Built-In Range](https://ddwiki.reso.org/display/DDW17/Built-In+Range)": A built-in range where the fuel type is not specified.
    BuiltInRange,

    /// "[Built-In Refrigerator](https://ddwiki.reso.org/display/DDW17/Built-In+Refrigerator)": A built-in refrigerator
    BuiltInRefrigerator,

    /// "[Convection Oven](https://ddwiki.reso.org/display/DDW17/Convection+Oven)": A convection oven (also known as a fan-assisted oven or simply a fan oven) is an oven that has fans to circulate air around food.
    ConvectionOven,

    /// "[Cooktop](https://ddwiki.reso.org/display/DDW17/Cooktop)": A kitchen stove, often called simply a stove or a cooker, is a kitchen appliance designed for the purpose of cooking food. Kitchen stoves rely on the application of direct heat for the cooking process.
    Cooktop,

    /// "[Dishwasher](https://ddwiki.reso.org/display/DDW17/Dishwasher)": A dishwasher is a mechanical device for cleaning dishware and cutlery.
    Dishwasher,

    /// "[Disposal](https://ddwiki.reso.org/display/DDW17/Disposal)": A garbage disposal unit (also known as a garbage disposal, waste disposal unit, garbage disposer, or in Canadian English a garburator) is a device, usually electrically powered, installed under a kitchen sink between the sink's drain and the trap. The disposal unit shreds food waste into pieces small enough, generally less than 2 mm (0.079 in), to pass through plumbing.
    Disposal,

    /// "[Double Oven](https://ddwiki.reso.org/display/DDW17/Double+Oven)": A built-in oven fixture that has either two ovens, or one oven and one microwave oven. It is usually built into the kitchen cabinet.
    DoubleOven,

    /// "[Down Draft](https://ddwiki.reso.org/display/DDW17/Down+Draft)": A vent that is part of the surface of a cook top that has a fan which sucks cooking fumes/smoke down.  This is an alternative to a hooded cooktop/range.
    DownDraft,

    /// "[Dryer](https://ddwiki.reso.org/display/DDW17/Dryer)": A cloths dryer.
    Dryer,

    /// "[Electric Cooktop](https://ddwiki.reso.org/display/DDW17/Electric+Cooktop)": A cooktop or stove that produces heat by way of electricity rather than gas.  An induction cooktop is electric, but not all electric cooktops are induction.
    ElectricCooktop,

    /// "[Electric Oven](https://ddwiki.reso.org/display/DDW17/Electric+Oven)": An oven that is heated by electricity, typically by way of heating coils.
    ElectricOven,

    /// "[Electric Range](https://ddwiki.reso.org/display/DDW17/Electric+Range)": An oven and cooktop that generates heat by way of electricity.
    ElectricRange,

    /// "[Electric Water Heater](https://ddwiki.reso.org/display/DDW17/Electric+Water+Heater)": A water heater that heats the water by way of electricity.
    ElectricWaterHeater,

    /// "[ENERGY STAR Qualified Appliances](https://ddwiki.reso.org/display/DDW17/ENERGY+STAR+Qualified+Appliances)": The property includes Energy Star qualified appliances.
    ENERGYSTARQualifiedAppliances,

    /// "[ENERGY STAR Qualified Dishwasher](https://ddwiki.reso.org/display/DDW17/ENERGY+STAR+Qualified+Dishwasher)": The property includes an Energy Star qualified dishwasher.
    ENERGYSTARQualifiedDishwasher,

    /// "[ENERGY STAR Qualified Dryer](https://ddwiki.reso.org/display/DDW17/ENERGY+STAR+Qualified+Dryer)": The property includes an Energy Star qualified cloths dryer.
    ENERGYSTARQualifiedDryer,

    /// "[ENERGY STAR Qualified Freezer](https://ddwiki.reso.org/display/DDW17/ENERGY+STAR+Qualified+Freezer)": The property includes an Energy Star qualified freezer.
    ENERGYSTARQualifiedFreezer,

    /// "[ENERGY STAR Qualified Refrigerator](https://ddwiki.reso.org/display/DDW17/ENERGY+STAR+Qualified+Refrigerator)": The property includes an Energy Star qualified refrigerator.
    ENERGYSTARQualifiedRefrigerator,

    /// "[ENERGY STAR Qualified Washer](https://ddwiki.reso.org/display/DDW17/ENERGY+STAR+Qualified+Washer)": The property includes an Energy Star qualified cloths washer.
    ENERGYSTARQualifiedWasher,

    /// "[ENERGY STAR Qualified Water Heater](https://ddwiki.reso.org/display/DDW17/ENERGY+STAR+Qualified+Water+Heater)": The property includes an Energy Star qualified water heater.
    ENERGYSTARQualifiedWaterHeater,

    /// "[Exhaust Fan](https://ddwiki.reso.org/display/DDW17/Exhaust+Fan)": The cooktop has an exhaust fan.
    ExhaustFan,

    /// "[Free-Standing Electric Oven](https://ddwiki.reso.org/display/DDW17/Free-Standing+Electric+Oven)": The oven is free standing, not built-in, and uses electricity to produce heat.
    FreeStandingElectricOven,

    /// "[Free-Standing Electric Range](https://ddwiki.reso.org/display/DDW17/Free-Standing+Electric+Range)": The range is free standing, not built-in, and uses electricity to produce heat for its oven and cooktop.
    FreeStandingElectricRange,

    /// "[Free-Standing Freezer](https://ddwiki.reso.org/display/DDW17/Free-Standing+Freezer)": The freezer is free standing and not built-in.
    FreeStandingFreezer,

    /// "[Free-Standing Gas Oven](https://ddwiki.reso.org/display/DDW17/Free-Standing+Gas+Oven)": The oven is free standing, not built-in, and uses gas to produce heat.
    FreeStandingGasOven,

    /// "[Free-Standing Gas Range](https://ddwiki.reso.org/display/DDW17/Free-Standing+Gas+Range)": The range is free standing, not built-in, and uses gas to produce heat for its oven and cooktop.
    FreeStandingGasRange,

    /// "[Free-Standing Range](https://ddwiki.reso.org/display/DDW17/Free-Standing+Range)": The range is free standing, not built-in.
    FreeStandingRange,

    /// "[Free-Standing Refrigerator](https://ddwiki.reso.org/display/DDW17/Free-Standing+Refrigerator)": The refrigerator is free-standing, not built-in.
    FreeStandingRefrigerator,

    /// "[Freezer](https://ddwiki.reso.org/display/DDW17/Freezer)": The property includes a freezer.
    Freezer,

    /// "[Gas Cooktop](https://ddwiki.reso.org/display/DDW17/Gas+Cooktop)": A cooktop or stove that produces heat by way of gas rather than electricity.  An induction cooktop is electric, but not all electric cooktops are induction.
    GasCooktop,

    /// "[Gas Oven](https://ddwiki.reso.org/display/DDW17/Gas+Oven)": An oven that is heated by gas.
    GasOven,

    /// "[Gas Range](https://ddwiki.reso.org/display/DDW17/Gas+Range)": An oven and cooktop that generates heat by way of gas.
    GasRange,

    /// "[Gas Water Heater](https://ddwiki.reso.org/display/DDW17/Gas+Water+Heater)": A water heater that heats the water with gas.
    GasWaterHeater,

    /// "[Humidifier](https://ddwiki.reso.org/display/DDW17/Humidifier)": The property includes a humidity control device or system.
    Humidifier,

    /// "[Ice Maker](https://ddwiki.reso.org/display/DDW17/Ice+Maker)": The property includes an ice maker.
    IceMaker,

    /// "[Indoor Grill](https://ddwiki.reso.org/display/DDW17/Indoor+Grill)": The property has an indoor grill.
    IndoorGrill,

    /// "[Induction Cooktop](https://ddwiki.reso.org/display/DDW17/Induction+Cooktop)": The electric cooktop is based on magnetic induction rather than heating coils.
    InductionCooktop,

    /// "[Instant Hot Water](https://ddwiki.reso.org/display/DDW17/Instant+Hot+Water)": The property has a circulatory or instant hot water system.
    InstantHotWater,

    /// "[Microwave](https://ddwiki.reso.org/display/DDW17/Microwave)": The property includes a microwave.
    Microwave,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243734)": The property includes no appliances.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243735)": The property includes appliances other than those available in this list.
    Other,

    /// "[Oven](https://ddwiki.reso.org/display/DDW17/Oven)": The property includes an oven.
    Oven,

    /// "[Plumbed For Ice Maker](https://ddwiki.reso.org/display/DDW17/Plumbed+For+Ice+Maker)": The property has plumbing for an ice maker.
    PlumbedForIceMaker,

    /// "[Portable Dishwasher](https://ddwiki.reso.org/display/DDW17/Portable+Dishwasher)": The property includes a portable dishwasher.
    PortableDishwasher,

    /// "[Propane Cooktop](https://ddwiki.reso.org/display/DDW17/Propane+Cooktop)": The gas cooktop uses propane as its fuel and either has a local tank or runs on a house wide propane system.
    PropaneCooktop,

    /// "[Range](https://ddwiki.reso.org/display/DDW17/Range)": The property includes a range, which is a single unit that has both an oven and a cooktop.
    Range,

    /// "[Range Hood](https://ddwiki.reso.org/display/DDW17/Range+Hood)": The range has a hooded exhaust.
    RangeHood,

    /// "[Refrigerator](https://ddwiki.reso.org/display/DDW17/Refrigerator)": The property includes a refrigerator.
    Refrigerator,

    /// "[Self Cleaning Oven](https://ddwiki.reso.org/display/DDW17/Self+Cleaning+Oven)": The oven included with the property has a self-cleaning feature.
    SelfCleaningOven,

    /// "[Solar Hot Water](https://ddwiki.reso.org/display/DDW17/Solar+Hot+Water)": The hot water heater has either a passive or active solar component.
    SolarHotWater,

    /// "[Stainless Steel Appliance(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243745)": Some or all of the appliances included in the property are stainless steal.
    StainlessSteelAppliances,

    /// "[Tankless Water Heater](https://ddwiki.reso.org/display/DDW17/Tankless+Water+Heater)": A tankless water heater is included with the property.
    TanklessWaterHeater,

    /// "[Trash Compactor](https://ddwiki.reso.org/display/DDW17/Trash+Compactor)": The property has a trash compactor.
    TrashCompactor,

    /// "[Vented Exhaust Fan](https://ddwiki.reso.org/display/DDW17/Vented+Exhaust+Fan)": The cooktop has an exhaust fan that is vented.
    VentedExhaustFan,

    /// "[Warming Drawer](https://ddwiki.reso.org/display/DDW17/Warming+Drawer)": The property has a warming drawer.
    WarmingDrawer,

    /// "[Washer](https://ddwiki.reso.org/display/DDW17/Washer)": The property includes a cloths washer.
    Washer,

    /// "[Washer/Dryer](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243751)": The property includes a cloths washer and dryer.
    WasherDryer,

    /// "[Washer/Dryer Stacked](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243752)": The property has a stacked cloths washer and dryer.
    WasherDryerStacked,

    /// "[Water Heater](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243753)": The property has a water heater.
    WaterHeater,

    /// "[Water Purifier](https://ddwiki.reso.org/display/DDW17/Water+Purifier)": The property has a water purifier.
    WaterPurifier,

    /// "[Water Purifier Owned](https://ddwiki.reso.org/display/DDW17/Water+Purifier+Owned)": The property has a water purifier that is owned and not rented/leased.
    WaterPurifierOwned,

    /// "[Water Purifier Rented](https://ddwiki.reso.org/display/DDW17/Water+Purifier+Rented)": The property has a water purifier that is on a rental or lease agreement.
    WaterPurifierRented,

    /// "[Water Softener](https://ddwiki.reso.org/display/DDW17/Water+Softener)": The property has a water softening system.
    WaterSoftener,

    /// "[Water Softener Owned](https://ddwiki.reso.org/display/DDW17/Water+Softener+Owned)": The property has a water softening system that is owned and not rented/leased.
    WaterSoftenerOwned,

    /// "[Water Softener Rented](https://ddwiki.reso.org/display/DDW17/Water+Softener+Rented)": The property has a water softening system that is on a rental or lease agreement.
    WaterSoftenerRented,

    /// "[Wine Cooler](https://ddwiki.reso.org/display/DDW17/Wine+Cooler)": The property includes a wine cooler.
    WineCooler,

    /// "[Wine Refrigerator](https://ddwiki.reso.org/display/DDW17/Wine+Refrigerator)": The property includes a wine refrigerator.
    WineRefrigerator,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Appliances {
    fn from(s: String) -> Appliances {
        match s.as_ref() {
            "Bar Fridge" => Appliances::BarFridge,

            "Built-In Electric Oven" => Appliances::BuiltInElectricOven,

            "Built-In Electric Range" => Appliances::BuiltInElectricRange,

            "Built-In Freezer" => Appliances::BuiltInFreezer,

            "Built-In Gas Oven" => Appliances::BuiltInGasOven,

            "Built-In Gas Range" => Appliances::BuiltInGasRange,

            "Built-In Range" => Appliances::BuiltInRange,

            "Built-In Refrigerator" => Appliances::BuiltInRefrigerator,

            "Convection Oven" => Appliances::ConvectionOven,

            "Cooktop" => Appliances::Cooktop,

            "Dishwasher" => Appliances::Dishwasher,

            "Disposal" => Appliances::Disposal,

            "Double Oven" => Appliances::DoubleOven,

            "Down Draft" => Appliances::DownDraft,

            "Dryer" => Appliances::Dryer,

            "Electric Cooktop" => Appliances::ElectricCooktop,

            "Electric Oven" => Appliances::ElectricOven,

            "Electric Range" => Appliances::ElectricRange,

            "Electric Water Heater" => Appliances::ElectricWaterHeater,

            "ENERGY STAR Qualified Appliances" => Appliances::ENERGYSTARQualifiedAppliances,

            "ENERGY STAR Qualified Dishwasher" => Appliances::ENERGYSTARQualifiedDishwasher,

            "ENERGY STAR Qualified Dryer" => Appliances::ENERGYSTARQualifiedDryer,

            "ENERGY STAR Qualified Freezer" => Appliances::ENERGYSTARQualifiedFreezer,

            "ENERGY STAR Qualified Refrigerator" => Appliances::ENERGYSTARQualifiedRefrigerator,

            "ENERGY STAR Qualified Washer" => Appliances::ENERGYSTARQualifiedWasher,

            "ENERGY STAR Qualified Water Heater" => Appliances::ENERGYSTARQualifiedWaterHeater,

            "Exhaust Fan" => Appliances::ExhaustFan,

            "Free-Standing Electric Oven" => Appliances::FreeStandingElectricOven,

            "Free-Standing Electric Range" => Appliances::FreeStandingElectricRange,

            "Free-Standing Freezer" => Appliances::FreeStandingFreezer,

            "Free-Standing Gas Oven" => Appliances::FreeStandingGasOven,

            "Free-Standing Gas Range" => Appliances::FreeStandingGasRange,

            "Free-Standing Range" => Appliances::FreeStandingRange,

            "Free-Standing Refrigerator" => Appliances::FreeStandingRefrigerator,

            "Freezer" => Appliances::Freezer,

            "Gas Cooktop" => Appliances::GasCooktop,

            "Gas Oven" => Appliances::GasOven,

            "Gas Range" => Appliances::GasRange,

            "Gas Water Heater" => Appliances::GasWaterHeater,

            "Humidifier" => Appliances::Humidifier,

            "Ice Maker" => Appliances::IceMaker,

            "Indoor Grill" => Appliances::IndoorGrill,

            "Induction Cooktop" => Appliances::InductionCooktop,

            "Instant Hot Water" => Appliances::InstantHotWater,

            "Microwave" => Appliances::Microwave,

            "None" => Appliances::None,

            "Other" => Appliances::Other,

            "Oven" => Appliances::Oven,

            "Plumbed For Ice Maker" => Appliances::PlumbedForIceMaker,

            "Portable Dishwasher" => Appliances::PortableDishwasher,

            "Propane Cooktop" => Appliances::PropaneCooktop,

            "Range" => Appliances::Range,

            "Range Hood" => Appliances::RangeHood,

            "Refrigerator" => Appliances::Refrigerator,

            "Self Cleaning Oven" => Appliances::SelfCleaningOven,

            "Solar Hot Water" => Appliances::SolarHotWater,

            "Stainless Steel Appliance(s)" => Appliances::StainlessSteelAppliances,

            "Tankless Water Heater" => Appliances::TanklessWaterHeater,

            "Trash Compactor" => Appliances::TrashCompactor,

            "Vented Exhaust Fan" => Appliances::VentedExhaustFan,

            "Warming Drawer" => Appliances::WarmingDrawer,

            "Washer" => Appliances::Washer,

            "Washer/Dryer" => Appliances::WasherDryer,

            "Washer/Dryer Stacked" => Appliances::WasherDryerStacked,

            "Water Heater" => Appliances::WaterHeater,

            "Water Purifier" => Appliances::WaterPurifier,

            "Water Purifier Owned" => Appliances::WaterPurifierOwned,

            "Water Purifier Rented" => Appliances::WaterPurifierRented,

            "Water Softener" => Appliances::WaterSoftener,

            "Water Softener Owned" => Appliances::WaterSoftenerOwned,

            "Water Softener Rented" => Appliances::WaterSoftenerRented,

            "Wine Cooler" => Appliances::WineCooler,

            "Wine Refrigerator" => Appliances::WineRefrigerator,

            _ => Appliances::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Appliances {
    fn from(s: &str) -> Appliances {
        match s {
            "Bar Fridge" => Appliances::BarFridge,

            "Built-In Electric Oven" => Appliances::BuiltInElectricOven,

            "Built-In Electric Range" => Appliances::BuiltInElectricRange,

            "Built-In Freezer" => Appliances::BuiltInFreezer,

            "Built-In Gas Oven" => Appliances::BuiltInGasOven,

            "Built-In Gas Range" => Appliances::BuiltInGasRange,

            "Built-In Range" => Appliances::BuiltInRange,

            "Built-In Refrigerator" => Appliances::BuiltInRefrigerator,

            "Convection Oven" => Appliances::ConvectionOven,

            "Cooktop" => Appliances::Cooktop,

            "Dishwasher" => Appliances::Dishwasher,

            "Disposal" => Appliances::Disposal,

            "Double Oven" => Appliances::DoubleOven,

            "Down Draft" => Appliances::DownDraft,

            "Dryer" => Appliances::Dryer,

            "Electric Cooktop" => Appliances::ElectricCooktop,

            "Electric Oven" => Appliances::ElectricOven,

            "Electric Range" => Appliances::ElectricRange,

            "Electric Water Heater" => Appliances::ElectricWaterHeater,

            "ENERGY STAR Qualified Appliances" => Appliances::ENERGYSTARQualifiedAppliances,

            "ENERGY STAR Qualified Dishwasher" => Appliances::ENERGYSTARQualifiedDishwasher,

            "ENERGY STAR Qualified Dryer" => Appliances::ENERGYSTARQualifiedDryer,

            "ENERGY STAR Qualified Freezer" => Appliances::ENERGYSTARQualifiedFreezer,

            "ENERGY STAR Qualified Refrigerator" => Appliances::ENERGYSTARQualifiedRefrigerator,

            "ENERGY STAR Qualified Washer" => Appliances::ENERGYSTARQualifiedWasher,

            "ENERGY STAR Qualified Water Heater" => Appliances::ENERGYSTARQualifiedWaterHeater,

            "Exhaust Fan" => Appliances::ExhaustFan,

            "Free-Standing Electric Oven" => Appliances::FreeStandingElectricOven,

            "Free-Standing Electric Range" => Appliances::FreeStandingElectricRange,

            "Free-Standing Freezer" => Appliances::FreeStandingFreezer,

            "Free-Standing Gas Oven" => Appliances::FreeStandingGasOven,

            "Free-Standing Gas Range" => Appliances::FreeStandingGasRange,

            "Free-Standing Range" => Appliances::FreeStandingRange,

            "Free-Standing Refrigerator" => Appliances::FreeStandingRefrigerator,

            "Freezer" => Appliances::Freezer,

            "Gas Cooktop" => Appliances::GasCooktop,

            "Gas Oven" => Appliances::GasOven,

            "Gas Range" => Appliances::GasRange,

            "Gas Water Heater" => Appliances::GasWaterHeater,

            "Humidifier" => Appliances::Humidifier,

            "Ice Maker" => Appliances::IceMaker,

            "Indoor Grill" => Appliances::IndoorGrill,

            "Induction Cooktop" => Appliances::InductionCooktop,

            "Instant Hot Water" => Appliances::InstantHotWater,

            "Microwave" => Appliances::Microwave,

            "None" => Appliances::None,

            "Other" => Appliances::Other,

            "Oven" => Appliances::Oven,

            "Plumbed For Ice Maker" => Appliances::PlumbedForIceMaker,

            "Portable Dishwasher" => Appliances::PortableDishwasher,

            "Propane Cooktop" => Appliances::PropaneCooktop,

            "Range" => Appliances::Range,

            "Range Hood" => Appliances::RangeHood,

            "Refrigerator" => Appliances::Refrigerator,

            "Self Cleaning Oven" => Appliances::SelfCleaningOven,

            "Solar Hot Water" => Appliances::SolarHotWater,

            "Stainless Steel Appliance(s)" => Appliances::StainlessSteelAppliances,

            "Tankless Water Heater" => Appliances::TanklessWaterHeater,

            "Trash Compactor" => Appliances::TrashCompactor,

            "Vented Exhaust Fan" => Appliances::VentedExhaustFan,

            "Warming Drawer" => Appliances::WarmingDrawer,

            "Washer" => Appliances::Washer,

            "Washer/Dryer" => Appliances::WasherDryer,

            "Washer/Dryer Stacked" => Appliances::WasherDryerStacked,

            "Water Heater" => Appliances::WaterHeater,

            "Water Purifier" => Appliances::WaterPurifier,

            "Water Purifier Owned" => Appliances::WaterPurifierOwned,

            "Water Purifier Rented" => Appliances::WaterPurifierRented,

            "Water Softener" => Appliances::WaterSoftener,

            "Water Softener Owned" => Appliances::WaterSoftenerOwned,

            "Water Softener Rented" => Appliances::WaterSoftenerRented,

            "Wine Cooler" => Appliances::WineCooler,

            "Wine Refrigerator" => Appliances::WineRefrigerator,

            _ => Appliances::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Appliances> for &'a str {
    fn from(s: &'a Appliances) -> &'a str {
        match s {
            Appliances::BarFridge => "Bar Fridge",

            Appliances::BuiltInElectricOven => "Built-In Electric Oven",

            Appliances::BuiltInElectricRange => "Built-In Electric Range",

            Appliances::BuiltInFreezer => "Built-In Freezer",

            Appliances::BuiltInGasOven => "Built-In Gas Oven",

            Appliances::BuiltInGasRange => "Built-In Gas Range",

            Appliances::BuiltInRange => "Built-In Range",

            Appliances::BuiltInRefrigerator => "Built-In Refrigerator",

            Appliances::ConvectionOven => "Convection Oven",

            Appliances::Cooktop => "Cooktop",

            Appliances::Dishwasher => "Dishwasher",

            Appliances::Disposal => "Disposal",

            Appliances::DoubleOven => "Double Oven",

            Appliances::DownDraft => "Down Draft",

            Appliances::Dryer => "Dryer",

            Appliances::ElectricCooktop => "Electric Cooktop",

            Appliances::ElectricOven => "Electric Oven",

            Appliances::ElectricRange => "Electric Range",

            Appliances::ElectricWaterHeater => "Electric Water Heater",

            Appliances::ENERGYSTARQualifiedAppliances => "ENERGY STAR Qualified Appliances",

            Appliances::ENERGYSTARQualifiedDishwasher => "ENERGY STAR Qualified Dishwasher",

            Appliances::ENERGYSTARQualifiedDryer => "ENERGY STAR Qualified Dryer",

            Appliances::ENERGYSTARQualifiedFreezer => "ENERGY STAR Qualified Freezer",

            Appliances::ENERGYSTARQualifiedRefrigerator => "ENERGY STAR Qualified Refrigerator",

            Appliances::ENERGYSTARQualifiedWasher => "ENERGY STAR Qualified Washer",

            Appliances::ENERGYSTARQualifiedWaterHeater => "ENERGY STAR Qualified Water Heater",

            Appliances::ExhaustFan => "Exhaust Fan",

            Appliances::FreeStandingElectricOven => "Free-Standing Electric Oven",

            Appliances::FreeStandingElectricRange => "Free-Standing Electric Range",

            Appliances::FreeStandingFreezer => "Free-Standing Freezer",

            Appliances::FreeStandingGasOven => "Free-Standing Gas Oven",

            Appliances::FreeStandingGasRange => "Free-Standing Gas Range",

            Appliances::FreeStandingRange => "Free-Standing Range",

            Appliances::FreeStandingRefrigerator => "Free-Standing Refrigerator",

            Appliances::Freezer => "Freezer",

            Appliances::GasCooktop => "Gas Cooktop",

            Appliances::GasOven => "Gas Oven",

            Appliances::GasRange => "Gas Range",

            Appliances::GasWaterHeater => "Gas Water Heater",

            Appliances::Humidifier => "Humidifier",

            Appliances::IceMaker => "Ice Maker",

            Appliances::IndoorGrill => "Indoor Grill",

            Appliances::InductionCooktop => "Induction Cooktop",

            Appliances::InstantHotWater => "Instant Hot Water",

            Appliances::Microwave => "Microwave",

            Appliances::None => "None",

            Appliances::Other => "Other",

            Appliances::Oven => "Oven",

            Appliances::PlumbedForIceMaker => "Plumbed For Ice Maker",

            Appliances::PortableDishwasher => "Portable Dishwasher",

            Appliances::PropaneCooktop => "Propane Cooktop",

            Appliances::Range => "Range",

            Appliances::RangeHood => "Range Hood",

            Appliances::Refrigerator => "Refrigerator",

            Appliances::SelfCleaningOven => "Self Cleaning Oven",

            Appliances::SolarHotWater => "Solar Hot Water",

            Appliances::StainlessSteelAppliances => "Stainless Steel Appliance(s)",

            Appliances::TanklessWaterHeater => "Tankless Water Heater",

            Appliances::TrashCompactor => "Trash Compactor",

            Appliances::VentedExhaustFan => "Vented Exhaust Fan",

            Appliances::WarmingDrawer => "Warming Drawer",

            Appliances::Washer => "Washer",

            Appliances::WasherDryer => "Washer/Dryer",

            Appliances::WasherDryerStacked => "Washer/Dryer Stacked",

            Appliances::WaterHeater => "Water Heater",

            Appliances::WaterPurifier => "Water Purifier",

            Appliances::WaterPurifierOwned => "Water Purifier Owned",

            Appliances::WaterPurifierRented => "Water Purifier Rented",

            Appliances::WaterSoftener => "Water Softener",

            Appliances::WaterSoftenerOwned => "Water Softener Owned",

            Appliances::WaterSoftenerRented => "Water Softener Rented",

            Appliances::WineCooler => "Wine Cooler",

            Appliances::WineRefrigerator => "Wine Refrigerator",

            Appliances::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Appliances {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Appliances {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_appliances_format {
    use super::Appliances;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Appliances>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Appliances>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [AreaSource Lookups](https://ddwiki.reso.org/display/DDW17/AreaSource+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum AreaSource {
    /// "[Appraiser](https://ddwiki.reso.org/display/DDW17/Appraiser)": An appraiser provided the measurement of the area.
    Appraiser,

    /// "[Assessor](https://ddwiki.reso.org/display/DDW17/Assessor)": The assessor provided the measurement of the area.
    Assessor,

    /// "[Builder](https://ddwiki.reso.org/display/DDW17/Builder)": The builder provided the measurement of the area.
    Builder,

    /// "[Estimated](https://ddwiki.reso.org/display/DDW17/Estimated)": The measurement of the area is an estimate.
    Estimated,

    /// "[Other](https://ddwiki.reso.org/display/DDW17/Other)": The measurement of the area was provided by another party not listed.
    Other,

    /// "[Owner](https://ddwiki.reso.org/display/DDW17/Owner)": The owner provided the measurement of the area.
    Owner,

    /// "[Plans](https://ddwiki.reso.org/display/DDW17/Plans)": The measurement of the area was taken from building plans.
    Plans,

    /// "[Public Records](https://ddwiki.reso.org/display/DDW17/Public+Records)": The measurement of the area was received from public records.
    PublicRecords,

    /// "[See Remarks](https://ddwiki.reso.org/display/DDW17/See+Remarks)": See remarks for information about the source of the area measurement.
    SeeRemarks,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for AreaSource {
    fn from(s: String) -> AreaSource {
        match s.as_ref() {
            "Appraiser" => AreaSource::Appraiser,

            "Assessor" => AreaSource::Assessor,

            "Builder" => AreaSource::Builder,

            "Estimated" => AreaSource::Estimated,

            "Other" => AreaSource::Other,

            "Owner" => AreaSource::Owner,

            "Plans" => AreaSource::Plans,

            "Public Records" => AreaSource::PublicRecords,

            "See Remarks" => AreaSource::SeeRemarks,

            _ => AreaSource::OpenEnumeration(s),
        }
    }
}

impl From<&str> for AreaSource {
    fn from(s: &str) -> AreaSource {
        match s {
            "Appraiser" => AreaSource::Appraiser,

            "Assessor" => AreaSource::Assessor,

            "Builder" => AreaSource::Builder,

            "Estimated" => AreaSource::Estimated,

            "Other" => AreaSource::Other,

            "Owner" => AreaSource::Owner,

            "Plans" => AreaSource::Plans,

            "Public Records" => AreaSource::PublicRecords,

            "See Remarks" => AreaSource::SeeRemarks,

            _ => AreaSource::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a AreaSource> for &'a str {
    fn from(s: &'a AreaSource) -> &'a str {
        match s {
            AreaSource::Appraiser => "Appraiser",

            AreaSource::Assessor => "Assessor",

            AreaSource::Builder => "Builder",

            AreaSource::Estimated => "Estimated",

            AreaSource::Other => "Other",

            AreaSource::Owner => "Owner",

            AreaSource::Plans => "Plans",

            AreaSource::PublicRecords => "Public Records",

            AreaSource::SeeRemarks => "See Remarks",

            AreaSource::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for AreaSource {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for AreaSource {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_area_source_format {
    use super::AreaSource;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<AreaSource>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<AreaSource>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [AreaUnits Lookups](https://ddwiki.reso.org/display/DDW17/AreaUnits+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum AreaUnits {
    /// "[Square Feet](https://ddwiki.reso.org/display/DDW17/Square+Feet)": The value reported in the related Area field is in square feet.
    SquareFeet,

    /// "[Square Meters](https://ddwiki.reso.org/display/DDW17/Square+Meters)": The value reported in the related Area field is in square feet.
    SquareMeters,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for AreaUnits {
    fn from(s: String) -> AreaUnits {
        match s.as_ref() {
            "Square Feet" => AreaUnits::SquareFeet,

            "Square Meters" => AreaUnits::SquareMeters,

            _ => AreaUnits::OpenEnumeration(s),
        }
    }
}

impl From<&str> for AreaUnits {
    fn from(s: &str) -> AreaUnits {
        match s {
            "Square Feet" => AreaUnits::SquareFeet,

            "Square Meters" => AreaUnits::SquareMeters,

            _ => AreaUnits::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a AreaUnits> for &'a str {
    fn from(s: &'a AreaUnits) -> &'a str {
        match s {
            AreaUnits::SquareFeet => "Square Feet",

            AreaUnits::SquareMeters => "Square Meters",

            AreaUnits::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for AreaUnits {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for AreaUnits {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_area_units_format {
    use super::AreaUnits;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<AreaUnits>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<AreaUnits>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [AssociationAmenities Lookups](https://ddwiki.reso.org/display/DDW17/AssociationAmenities+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum AssociationAmenities {
    /// "[Airport/Runway](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243763)": The home owner's association includes access or some service related to an airport or runway.
    AirportRunway,

    /// "[Barbecue](https://ddwiki.reso.org/display/DDW17/Barbecue)": The home owner's association includes use of, or access to, a barbecue.
    Barbecue,

    /// "[Basketball Court](https://ddwiki.reso.org/display/DDW17/Basketball+Court)": The home owner's association includes use of, or access to, a basketball court.
    BasketballCourt,

    /// "[Beach Access](https://ddwiki.reso.org/display/DDW17/Beach+Access)": The home owner's association includes access to a beach.
    BeachAccess,

    /// "[Beach Rights](https://ddwiki.reso.org/display/DDW17/Beach+Rights)": The home owner's association includes use of a beach that has beach rights restrictions.
    BeachRights,

    /// "[Billiard Room](https://ddwiki.reso.org/display/DDW17/Billiard+Room)": The home owner's association includes use of, or access to, a billiard room.
    BilliardRoom,

    /// "[Boat Dock](https://ddwiki.reso.org/display/DDW17/Boat+Dock)": The home owner's association includes use of, or access to, a boat dock.
    BoatDock,

    /// "[Boat Slip](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243771)": The home owner's association includes use of, or access to, a boat slip.
    BoatSlip,

    /// "[Boating](https://ddwiki.reso.org/display/DDW17/Boating)": The home owner's association includes use of, or access to, boating.
    Boating,

    /// "[Cabana](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243773)": The home owner's association includes use of, or access to, a cabana.
    Cabana,

    /// "[Cable TV](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243774)": The home owner's association includes cable based services.
    CableTV,

    /// "[Car Wash Area](https://ddwiki.reso.org/display/DDW17/Car+Wash+Area)": The home owner's association includes use of, or access to, an are to wash your car.
    CarWashArea,

    /// "[Clubhouse](https://ddwiki.reso.org/display/DDW17/Clubhouse)": The home owner's association includes use of, or access to, a clubhouse.
    Clubhouse,

    /// "[Coin Laundry](https://ddwiki.reso.org/display/DDW17/Coin+Laundry)": The home owner's association includes use of, or access to, a coin laundry.
    CoinLaundry,

    /// "[Concierge](https://ddwiki.reso.org/display/DDW17/Concierge)": The home owner's association includes use of, or access to, a concierge service.
    Concierge,

    /// "[Day Care](https://ddwiki.reso.org/display/DDW17/Day+Care)": The home owner's association includes use of, or access to, a day care service.
    DayCare,

    /// "[Dog Park](https://ddwiki.reso.org/display/DDW17/Dog+Park)": The home owner's association includes use of, or access to, a dog park.
    DogPark,

    /// "[Dry Dock](https://ddwiki.reso.org/display/DDW17/Dry+Dock)": The home owner's association includes use of, or access to, a dry dock.
    DryDock,

    /// "[Electricity](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243782)": The home owner's association includes electricity.
    Electricity,

    /// "[Elevator(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243783)": The home owner's association includes use of, or access to, an elevator(s).
    Elevators,

    /// "[Exercise Course](https://ddwiki.reso.org/display/DDW17/Exercise+Course)": The home owner's association includes use of, or access to, an exercise course.
    ExerciseCourse,

    /// "[Fitness Center](https://ddwiki.reso.org/display/DDW17/Fitness+Center)": The home owner's association includes use of, or access to, a fitness center.
    FitnessCenter,

    /// "[Game Court Exterior](https://ddwiki.reso.org/display/DDW17/Game+Court+Exterior)": The home owner's association includes use of, or access to, an outdoors game court.
    GameCourtExterior,

    /// "[Game Court Interior](https://ddwiki.reso.org/display/DDW17/Game+Court+Interior)": The home owner's association includes use of, or access to, an indoors game court.
    GameCourtInterior,

    /// "[Game Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243788)": The home owner's association includes use of, or access to, a game room           .
    GameRoom,

    /// "[Gas](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243789)": The home owner's association includes natural gas.
    Gas,

    /// "[Gated](https://ddwiki.reso.org/display/DDW17/Gated)": The home owner's association property/area is gated.
    Gated,

    /// "[Golf Course](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243791)": The home owner's association includes use of, or access to, a golf course.
    GolfCourse,

    /// "[Hot Water](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243792)": The home owner's association includes hot water.
    HotWater,

    /// "[Indoor Pool](https://ddwiki.reso.org/display/DDW17/Indoor+Pool)": The home owner's association includes use of, or access to, an indoor pool.
    IndoorPool,

    /// "[Insurance](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243794)": The home owner's association includes insurance.
    Insurance,

    /// "[Jogging Path](https://ddwiki.reso.org/display/DDW17/Jogging+Path)": The home owner's association includes use of, or access to, a jogging path.
    JoggingPath,

    /// "[Landscaping](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243796)": The home owner's association includes landscaping.
    Landscaping,

    /// "[Laundry](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243797)": The home owner's association includes laundry.
    Laundry,

    /// "[Maid service](https://ddwiki.reso.org/display/DDW17/Maid+service)": The home owner's association includes use of, or access to, a maid service.
    Maidservice,

    /// "[Maintenance](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243799)": The home owner's association includes maintenance.
    Maintenance,

    /// "[Maintenance Grounds](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243838)": The home owner's association includes grounds maintenance.
    MaintenanceGrounds,

    /// "[Maintenance Structure](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243772)": The home owner's association includes building maintenance.
    MaintenanceStructure,

    /// "[Management](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243800)": The home owner's association includes management services.
    Management,

    /// "[Marina](https://ddwiki.reso.org/display/DDW17/Marina)": The home owner's association includes use of, or access to, a marina.
    Marina,

    /// "[Meeting Room](https://ddwiki.reso.org/display/DDW17/Meeting+Room)": The home owner's association includes use of, or access to, a meeting room.
    MeetingRoom,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243803)": The home owner's association has no amenities.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243804)": The home owner's association includes amenities not included in this list.
    Other,

    /// "[Park](https://ddwiki.reso.org/display/DDW17/Park)": The home owner's association includes use of, or access to, a park.
    Park,

    /// "[Parking](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243806)": The home owner's association includes use of, or access to, parking.
    Parking,

    /// "[Party Room](https://ddwiki.reso.org/display/DDW17/Party+Room)": The home owner's association includes use of, or access to, a party room.
    PartyRoom,

    /// "[Picnic Area](https://ddwiki.reso.org/display/DDW17/Picnic+Area)": The home owner's association includes use of, or access to, a picnic area.
    PicnicArea,

    /// "[Playground](https://ddwiki.reso.org/display/DDW17/Playground)": The home owner's association includes use of, or access to, a playground.
    Playground,

    /// "[Pond Seasonal](https://ddwiki.reso.org/display/DDW17/Pond+Seasonal)": The home owner's association includes use of, or access to, a seasonal pond.
    PondSeasonal,

    /// "[Pond Year Round](https://ddwiki.reso.org/display/DDW17/Pond+Year+Round)": The home owner's association includes use of, or access to, a year round pond.
    PondYearRound,

    /// "[Pool](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243812)": The home owner's association includes use of, or access to, a pool.
    Pool,

    /// "[Powered Boats Allowed](https://ddwiki.reso.org/display/DDW17/Powered+Boats+Allowed)": The home owner's association allows the use of powered boats.
    PoweredBoatsAllowed,

    /// "[Racquetball](https://ddwiki.reso.org/display/DDW17/Racquetball)": The home owner's association includes use of, or access to, a racquetball court(s).
    Racquetball,

    /// "[Recreation Facilities](https://ddwiki.reso.org/display/DDW17/Recreation+Facilities)": The home owner's association includes use of, or access to, recreation facilities.
    RecreationFacilities,

    /// "[Recreation Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243816)": The home owner's association includes use of, or access to, a recreation room.
    RecreationRoom,

    /// "[Roof Deck](https://ddwiki.reso.org/display/DDW17/Roof+Deck)": The home owner's association includes use of, or access to, a roof deck.
    RoofDeck,

    /// "[RV Parking](https://ddwiki.reso.org/display/DDW17/RV+Parking)": The home owner's association includes use of, or access to, recreational vehicle (RV) parking.
    RVParking,

    /// "[RV/Boat Storage](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243818)": The home owner's association includes use of, or access to, RV and/or boat storage.
    RVBoatStorage,

    /// "[Sauna](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243820)": The home owner's association includes use of, or access to, a sauna.
    Sauna,

    /// "[Security](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243821)": The home owner's association includes security services.
    Security,

    /// "[Service Elevator(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243822)": The home owner's association includes use of, or access to, a service elevator(s).
    ServiceElevators,

    /// "[Shuffleboard Court](https://ddwiki.reso.org/display/DDW17/Shuffleboard+Court)": The home owner's association includes use of, or access to, a shuffleboard court.
    ShuffleboardCourt,

    /// "[Ski Accessible](https://ddwiki.reso.org/display/DDW17/Ski+Accessible)": The home owner's association includes access to skiing.
    SkiAccessible,

    /// "[Snow Removal](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243825)": The home owner's association includes snow removal.
    SnowRemoval,

    /// "[Spa/Hot Tub](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243826)": The home owner's association includes use of, or access to, a spa and/or hot tub.
    SpaHotTub,

    /// "[Sport Court](https://ddwiki.reso.org/display/DDW17/Sport+Court)": The home owner's association includes use of, or access to, a sport court.
    SportCourt,

    /// "[Stable(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243828)": The home owner's association includes use of, or access to, horse stable(s).
    Stables,

    /// "[Storage](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243829)": The home owner's association includes storage space.
    Storage,

    /// "[Stream Seasonal](https://ddwiki.reso.org/display/DDW17/Stream+Seasonal)": The home owner's association includes use of, or access to, a seasonal stream.
    StreamSeasonal,

    /// "[Stream Year Round](https://ddwiki.reso.org/display/DDW17/Stream+Year+Round)": The home owner's association includes use of, or access to, a year round accessible stream.
    StreamYearRound,

    /// "[Taxes](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243832)": The home owner's association includes taxes.
    Taxes,

    /// "[Tennis Court(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243833)": The home owner's association includes use of, or access to, a tennis court(s).
    TennisCourts,

    /// "[Trail(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243834)": The home owner's association includes use of, or access to, a trail(s).
    Trails,

    /// "[Trash](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243835)": The home owner's association includes trash service.
    Trash,

    /// "[Water](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243836)": The home owner's association includes water.
    Water,

    /// "[Workshop Area](https://ddwiki.reso.org/display/DDW17/Workshop+Area)": The home owner's association includes use of, or access to, a workshop area.
    WorkshopArea,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for AssociationAmenities {
    fn from(s: String) -> AssociationAmenities {
        match s.as_ref() {
            "Airport/Runway" => AssociationAmenities::AirportRunway,

            "Barbecue" => AssociationAmenities::Barbecue,

            "Basketball Court" => AssociationAmenities::BasketballCourt,

            "Beach Access" => AssociationAmenities::BeachAccess,

            "Beach Rights" => AssociationAmenities::BeachRights,

            "Billiard Room" => AssociationAmenities::BilliardRoom,

            "Boat Dock" => AssociationAmenities::BoatDock,

            "Boat Slip" => AssociationAmenities::BoatSlip,

            "Boating" => AssociationAmenities::Boating,

            "Cabana" => AssociationAmenities::Cabana,

            "Cable TV" => AssociationAmenities::CableTV,

            "Car Wash Area" => AssociationAmenities::CarWashArea,

            "Clubhouse" => AssociationAmenities::Clubhouse,

            "Coin Laundry" => AssociationAmenities::CoinLaundry,

            "Concierge" => AssociationAmenities::Concierge,

            "Day Care" => AssociationAmenities::DayCare,

            "Dog Park" => AssociationAmenities::DogPark,

            "Dry Dock" => AssociationAmenities::DryDock,

            "Electricity" => AssociationAmenities::Electricity,

            "Elevator(s)" => AssociationAmenities::Elevators,

            "Exercise Course" => AssociationAmenities::ExerciseCourse,

            "Fitness Center" => AssociationAmenities::FitnessCenter,

            "Game Court Exterior" => AssociationAmenities::GameCourtExterior,

            "Game Court Interior" => AssociationAmenities::GameCourtInterior,

            "Game Room" => AssociationAmenities::GameRoom,

            "Gas" => AssociationAmenities::Gas,

            "Gated" => AssociationAmenities::Gated,

            "Golf Course" => AssociationAmenities::GolfCourse,

            "Hot Water" => AssociationAmenities::HotWater,

            "Indoor Pool" => AssociationAmenities::IndoorPool,

            "Insurance" => AssociationAmenities::Insurance,

            "Jogging Path" => AssociationAmenities::JoggingPath,

            "Landscaping" => AssociationAmenities::Landscaping,

            "Laundry" => AssociationAmenities::Laundry,

            "Maid service" => AssociationAmenities::Maidservice,

            "Maintenance" => AssociationAmenities::Maintenance,

            "Maintenance Grounds" => AssociationAmenities::MaintenanceGrounds,

            "Maintenance Structure" => AssociationAmenities::MaintenanceStructure,

            "Management" => AssociationAmenities::Management,

            "Marina" => AssociationAmenities::Marina,

            "Meeting Room" => AssociationAmenities::MeetingRoom,

            "None" => AssociationAmenities::None,

            "Other" => AssociationAmenities::Other,

            "Park" => AssociationAmenities::Park,

            "Parking" => AssociationAmenities::Parking,

            "Party Room" => AssociationAmenities::PartyRoom,

            "Picnic Area" => AssociationAmenities::PicnicArea,

            "Playground" => AssociationAmenities::Playground,

            "Pond Seasonal" => AssociationAmenities::PondSeasonal,

            "Pond Year Round" => AssociationAmenities::PondYearRound,

            "Pool" => AssociationAmenities::Pool,

            "Powered Boats Allowed" => AssociationAmenities::PoweredBoatsAllowed,

            "Racquetball" => AssociationAmenities::Racquetball,

            "Recreation Facilities" => AssociationAmenities::RecreationFacilities,

            "Recreation Room" => AssociationAmenities::RecreationRoom,

            "Roof Deck" => AssociationAmenities::RoofDeck,

            "RV Parking" => AssociationAmenities::RVParking,

            "RV/Boat Storage" => AssociationAmenities::RVBoatStorage,

            "Sauna" => AssociationAmenities::Sauna,

            "Security" => AssociationAmenities::Security,

            "Service Elevator(s)" => AssociationAmenities::ServiceElevators,

            "Shuffleboard Court" => AssociationAmenities::ShuffleboardCourt,

            "Ski Accessible" => AssociationAmenities::SkiAccessible,

            "Snow Removal" => AssociationAmenities::SnowRemoval,

            "Spa/Hot Tub" => AssociationAmenities::SpaHotTub,

            "Sport Court" => AssociationAmenities::SportCourt,

            "Stable(s)" => AssociationAmenities::Stables,

            "Storage" => AssociationAmenities::Storage,

            "Stream Seasonal" => AssociationAmenities::StreamSeasonal,

            "Stream Year Round" => AssociationAmenities::StreamYearRound,

            "Taxes" => AssociationAmenities::Taxes,

            "Tennis Court(s)" => AssociationAmenities::TennisCourts,

            "Trail(s)" => AssociationAmenities::Trails,

            "Trash" => AssociationAmenities::Trash,

            "Water" => AssociationAmenities::Water,

            "Workshop Area" => AssociationAmenities::WorkshopArea,

            _ => AssociationAmenities::OpenEnumeration(s),
        }
    }
}

impl From<&str> for AssociationAmenities {
    fn from(s: &str) -> AssociationAmenities {
        match s {
            "Airport/Runway" => AssociationAmenities::AirportRunway,

            "Barbecue" => AssociationAmenities::Barbecue,

            "Basketball Court" => AssociationAmenities::BasketballCourt,

            "Beach Access" => AssociationAmenities::BeachAccess,

            "Beach Rights" => AssociationAmenities::BeachRights,

            "Billiard Room" => AssociationAmenities::BilliardRoom,

            "Boat Dock" => AssociationAmenities::BoatDock,

            "Boat Slip" => AssociationAmenities::BoatSlip,

            "Boating" => AssociationAmenities::Boating,

            "Cabana" => AssociationAmenities::Cabana,

            "Cable TV" => AssociationAmenities::CableTV,

            "Car Wash Area" => AssociationAmenities::CarWashArea,

            "Clubhouse" => AssociationAmenities::Clubhouse,

            "Coin Laundry" => AssociationAmenities::CoinLaundry,

            "Concierge" => AssociationAmenities::Concierge,

            "Day Care" => AssociationAmenities::DayCare,

            "Dog Park" => AssociationAmenities::DogPark,

            "Dry Dock" => AssociationAmenities::DryDock,

            "Electricity" => AssociationAmenities::Electricity,

            "Elevator(s)" => AssociationAmenities::Elevators,

            "Exercise Course" => AssociationAmenities::ExerciseCourse,

            "Fitness Center" => AssociationAmenities::FitnessCenter,

            "Game Court Exterior" => AssociationAmenities::GameCourtExterior,

            "Game Court Interior" => AssociationAmenities::GameCourtInterior,

            "Game Room" => AssociationAmenities::GameRoom,

            "Gas" => AssociationAmenities::Gas,

            "Gated" => AssociationAmenities::Gated,

            "Golf Course" => AssociationAmenities::GolfCourse,

            "Hot Water" => AssociationAmenities::HotWater,

            "Indoor Pool" => AssociationAmenities::IndoorPool,

            "Insurance" => AssociationAmenities::Insurance,

            "Jogging Path" => AssociationAmenities::JoggingPath,

            "Landscaping" => AssociationAmenities::Landscaping,

            "Laundry" => AssociationAmenities::Laundry,

            "Maid service" => AssociationAmenities::Maidservice,

            "Maintenance" => AssociationAmenities::Maintenance,

            "Maintenance Grounds" => AssociationAmenities::MaintenanceGrounds,

            "Maintenance Structure" => AssociationAmenities::MaintenanceStructure,

            "Management" => AssociationAmenities::Management,

            "Marina" => AssociationAmenities::Marina,

            "Meeting Room" => AssociationAmenities::MeetingRoom,

            "None" => AssociationAmenities::None,

            "Other" => AssociationAmenities::Other,

            "Park" => AssociationAmenities::Park,

            "Parking" => AssociationAmenities::Parking,

            "Party Room" => AssociationAmenities::PartyRoom,

            "Picnic Area" => AssociationAmenities::PicnicArea,

            "Playground" => AssociationAmenities::Playground,

            "Pond Seasonal" => AssociationAmenities::PondSeasonal,

            "Pond Year Round" => AssociationAmenities::PondYearRound,

            "Pool" => AssociationAmenities::Pool,

            "Powered Boats Allowed" => AssociationAmenities::PoweredBoatsAllowed,

            "Racquetball" => AssociationAmenities::Racquetball,

            "Recreation Facilities" => AssociationAmenities::RecreationFacilities,

            "Recreation Room" => AssociationAmenities::RecreationRoom,

            "Roof Deck" => AssociationAmenities::RoofDeck,

            "RV Parking" => AssociationAmenities::RVParking,

            "RV/Boat Storage" => AssociationAmenities::RVBoatStorage,

            "Sauna" => AssociationAmenities::Sauna,

            "Security" => AssociationAmenities::Security,

            "Service Elevator(s)" => AssociationAmenities::ServiceElevators,

            "Shuffleboard Court" => AssociationAmenities::ShuffleboardCourt,

            "Ski Accessible" => AssociationAmenities::SkiAccessible,

            "Snow Removal" => AssociationAmenities::SnowRemoval,

            "Spa/Hot Tub" => AssociationAmenities::SpaHotTub,

            "Sport Court" => AssociationAmenities::SportCourt,

            "Stable(s)" => AssociationAmenities::Stables,

            "Storage" => AssociationAmenities::Storage,

            "Stream Seasonal" => AssociationAmenities::StreamSeasonal,

            "Stream Year Round" => AssociationAmenities::StreamYearRound,

            "Taxes" => AssociationAmenities::Taxes,

            "Tennis Court(s)" => AssociationAmenities::TennisCourts,

            "Trail(s)" => AssociationAmenities::Trails,

            "Trash" => AssociationAmenities::Trash,

            "Water" => AssociationAmenities::Water,

            "Workshop Area" => AssociationAmenities::WorkshopArea,

            _ => AssociationAmenities::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a AssociationAmenities> for &'a str {
    fn from(s: &'a AssociationAmenities) -> &'a str {
        match s {
            AssociationAmenities::AirportRunway => "Airport/Runway",

            AssociationAmenities::Barbecue => "Barbecue",

            AssociationAmenities::BasketballCourt => "Basketball Court",

            AssociationAmenities::BeachAccess => "Beach Access",

            AssociationAmenities::BeachRights => "Beach Rights",

            AssociationAmenities::BilliardRoom => "Billiard Room",

            AssociationAmenities::BoatDock => "Boat Dock",

            AssociationAmenities::BoatSlip => "Boat Slip",

            AssociationAmenities::Boating => "Boating",

            AssociationAmenities::Cabana => "Cabana",

            AssociationAmenities::CableTV => "Cable TV",

            AssociationAmenities::CarWashArea => "Car Wash Area",

            AssociationAmenities::Clubhouse => "Clubhouse",

            AssociationAmenities::CoinLaundry => "Coin Laundry",

            AssociationAmenities::Concierge => "Concierge",

            AssociationAmenities::DayCare => "Day Care",

            AssociationAmenities::DogPark => "Dog Park",

            AssociationAmenities::DryDock => "Dry Dock",

            AssociationAmenities::Electricity => "Electricity",

            AssociationAmenities::Elevators => "Elevator(s)",

            AssociationAmenities::ExerciseCourse => "Exercise Course",

            AssociationAmenities::FitnessCenter => "Fitness Center",

            AssociationAmenities::GameCourtExterior => "Game Court Exterior",

            AssociationAmenities::GameCourtInterior => "Game Court Interior",

            AssociationAmenities::GameRoom => "Game Room",

            AssociationAmenities::Gas => "Gas",

            AssociationAmenities::Gated => "Gated",

            AssociationAmenities::GolfCourse => "Golf Course",

            AssociationAmenities::HotWater => "Hot Water",

            AssociationAmenities::IndoorPool => "Indoor Pool",

            AssociationAmenities::Insurance => "Insurance",

            AssociationAmenities::JoggingPath => "Jogging Path",

            AssociationAmenities::Landscaping => "Landscaping",

            AssociationAmenities::Laundry => "Laundry",

            AssociationAmenities::Maidservice => "Maid service",

            AssociationAmenities::Maintenance => "Maintenance",

            AssociationAmenities::MaintenanceGrounds => "Maintenance Grounds",

            AssociationAmenities::MaintenanceStructure => "Maintenance Structure",

            AssociationAmenities::Management => "Management",

            AssociationAmenities::Marina => "Marina",

            AssociationAmenities::MeetingRoom => "Meeting Room",

            AssociationAmenities::None => "None",

            AssociationAmenities::Other => "Other",

            AssociationAmenities::Park => "Park",

            AssociationAmenities::Parking => "Parking",

            AssociationAmenities::PartyRoom => "Party Room",

            AssociationAmenities::PicnicArea => "Picnic Area",

            AssociationAmenities::Playground => "Playground",

            AssociationAmenities::PondSeasonal => "Pond Seasonal",

            AssociationAmenities::PondYearRound => "Pond Year Round",

            AssociationAmenities::Pool => "Pool",

            AssociationAmenities::PoweredBoatsAllowed => "Powered Boats Allowed",

            AssociationAmenities::Racquetball => "Racquetball",

            AssociationAmenities::RecreationFacilities => "Recreation Facilities",

            AssociationAmenities::RecreationRoom => "Recreation Room",

            AssociationAmenities::RoofDeck => "Roof Deck",

            AssociationAmenities::RVParking => "RV Parking",

            AssociationAmenities::RVBoatStorage => "RV/Boat Storage",

            AssociationAmenities::Sauna => "Sauna",

            AssociationAmenities::Security => "Security",

            AssociationAmenities::ServiceElevators => "Service Elevator(s)",

            AssociationAmenities::ShuffleboardCourt => "Shuffleboard Court",

            AssociationAmenities::SkiAccessible => "Ski Accessible",

            AssociationAmenities::SnowRemoval => "Snow Removal",

            AssociationAmenities::SpaHotTub => "Spa/Hot Tub",

            AssociationAmenities::SportCourt => "Sport Court",

            AssociationAmenities::Stables => "Stable(s)",

            AssociationAmenities::Storage => "Storage",

            AssociationAmenities::StreamSeasonal => "Stream Seasonal",

            AssociationAmenities::StreamYearRound => "Stream Year Round",

            AssociationAmenities::Taxes => "Taxes",

            AssociationAmenities::TennisCourts => "Tennis Court(s)",

            AssociationAmenities::Trails => "Trail(s)",

            AssociationAmenities::Trash => "Trash",

            AssociationAmenities::Water => "Water",

            AssociationAmenities::WorkshopArea => "Workshop Area",

            AssociationAmenities::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for AssociationAmenities {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for AssociationAmenities {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_association_amenities_format {
    use super::AssociationAmenities;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<AssociationAmenities>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<AssociationAmenities>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [AssociationFeeIncludes Lookups](https://ddwiki.reso.org/display/DDW17/AssociationFeeIncludes+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum AssociationFeeIncludes {
    /// "[Cable TV](https://ddwiki.reso.org/display/DDW17/Cable+TV)": Cable TV is included in the fee paid to the Association.
    CableTV,

    /// "[Earthquake Insurance](https://ddwiki.reso.org/display/DDW17/Earthquake+Insurance)": Earthquake Insurance is included in the fee paid to the Association.
    EarthquakeInsurance,

    /// "[Electricity](https://ddwiki.reso.org/display/DDW17/Electricity)": Electricity is included in the fee paid to the Association.
    Electricity,

    /// "[Gas](https://ddwiki.reso.org/display/DDW17/Gas)": Gas is included in the fee paid to the Association.
    Gas,

    /// "[Insurance](https://ddwiki.reso.org/display/DDW17/Insurance)": Insurance is included in the fee paid to the Association.
    Insurance,

    /// "[Internet](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243641)": Internet access is included with the Home Owner’s Association dues paid by the owner.  Questions about the means of access (e.g. wifi, ethernet), the speed of the access and other information about the Internet Service Provider (ISP) may be directed to the Home Owner’s Association.
    Internet,

    /// "[Maintenance Grounds](https://ddwiki.reso.org/display/DDW17/Maintenance+Grounds)": Maintenance of the grounds including lawns and common areas but not including exterior structures.
    MaintenanceGrounds,

    /// "[Maintenance Structure](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243632)": Maintenance of the exterior of the structure including roofing, walls, exterior structures and does not include the grounds.
    MaintenanceStructure,

    /// "[Pest Control](https://ddwiki.reso.org/display/DDW17/Pest+Control)": Pest Control is included in the fee paid to the Association.
    PestControl,

    /// "[Security](https://ddwiki.reso.org/display/DDW17/Security)": Security is included in the fee paid to the Association.
    Security,

    /// "[Sewer](https://ddwiki.reso.org/display/DDW17/Sewer)": Sewer is included in the fee paid to the Association.
    Sewer,

    /// "[Snow Removal](https://ddwiki.reso.org/display/DDW17/Snow+Removal)": Snow Removal is included in the fee paid to the Association.
    SnowRemoval,

    /// "[Trash](https://ddwiki.reso.org/display/DDW17/Trash)": Trash is included in the fee paid to the Association.
    Trash,

    /// "[Utilities](https://ddwiki.reso.org/display/DDW17/Utilities)": Utilities is included in the fee paid to the Association.
    Utilities,

    /// "[Water](https://ddwiki.reso.org/display/DDW17/Water)": Water is included in the fee paid to the Association.
    Water,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for AssociationFeeIncludes {
    fn from(s: String) -> AssociationFeeIncludes {
        match s.as_ref() {
            "Cable TV" => AssociationFeeIncludes::CableTV,

            "Earthquake Insurance" => AssociationFeeIncludes::EarthquakeInsurance,

            "Electricity" => AssociationFeeIncludes::Electricity,

            "Gas" => AssociationFeeIncludes::Gas,

            "Insurance" => AssociationFeeIncludes::Insurance,

            "Internet" => AssociationFeeIncludes::Internet,

            "Maintenance Grounds" => AssociationFeeIncludes::MaintenanceGrounds,

            "Maintenance Structure" => AssociationFeeIncludes::MaintenanceStructure,

            "Pest Control" => AssociationFeeIncludes::PestControl,

            "Security" => AssociationFeeIncludes::Security,

            "Sewer" => AssociationFeeIncludes::Sewer,

            "Snow Removal" => AssociationFeeIncludes::SnowRemoval,

            "Trash" => AssociationFeeIncludes::Trash,

            "Utilities" => AssociationFeeIncludes::Utilities,

            "Water" => AssociationFeeIncludes::Water,

            _ => AssociationFeeIncludes::OpenEnumeration(s),
        }
    }
}

impl From<&str> for AssociationFeeIncludes {
    fn from(s: &str) -> AssociationFeeIncludes {
        match s {
            "Cable TV" => AssociationFeeIncludes::CableTV,

            "Earthquake Insurance" => AssociationFeeIncludes::EarthquakeInsurance,

            "Electricity" => AssociationFeeIncludes::Electricity,

            "Gas" => AssociationFeeIncludes::Gas,

            "Insurance" => AssociationFeeIncludes::Insurance,

            "Internet" => AssociationFeeIncludes::Internet,

            "Maintenance Grounds" => AssociationFeeIncludes::MaintenanceGrounds,

            "Maintenance Structure" => AssociationFeeIncludes::MaintenanceStructure,

            "Pest Control" => AssociationFeeIncludes::PestControl,

            "Security" => AssociationFeeIncludes::Security,

            "Sewer" => AssociationFeeIncludes::Sewer,

            "Snow Removal" => AssociationFeeIncludes::SnowRemoval,

            "Trash" => AssociationFeeIncludes::Trash,

            "Utilities" => AssociationFeeIncludes::Utilities,

            "Water" => AssociationFeeIncludes::Water,

            _ => AssociationFeeIncludes::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a AssociationFeeIncludes> for &'a str {
    fn from(s: &'a AssociationFeeIncludes) -> &'a str {
        match s {
            AssociationFeeIncludes::CableTV => "Cable TV",

            AssociationFeeIncludes::EarthquakeInsurance => "Earthquake Insurance",

            AssociationFeeIncludes::Electricity => "Electricity",

            AssociationFeeIncludes::Gas => "Gas",

            AssociationFeeIncludes::Insurance => "Insurance",

            AssociationFeeIncludes::Internet => "Internet",

            AssociationFeeIncludes::MaintenanceGrounds => "Maintenance Grounds",

            AssociationFeeIncludes::MaintenanceStructure => "Maintenance Structure",

            AssociationFeeIncludes::PestControl => "Pest Control",

            AssociationFeeIncludes::Security => "Security",

            AssociationFeeIncludes::Sewer => "Sewer",

            AssociationFeeIncludes::SnowRemoval => "Snow Removal",

            AssociationFeeIncludes::Trash => "Trash",

            AssociationFeeIncludes::Utilities => "Utilities",

            AssociationFeeIncludes::Water => "Water",

            AssociationFeeIncludes::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for AssociationFeeIncludes {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for AssociationFeeIncludes {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_association_fee_includes_format {
    use super::AssociationFeeIncludes;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<AssociationFeeIncludes>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<AssociationFeeIncludes>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Attended Lookups](https://ddwiki.reso.org/display/DDW17/Attended+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Attended {
    /// "[Agent](https://ddwiki.reso.org/display/DDW17/Agent)": A licensed real estate agent will be present at the open house event.
    Agent,

    /// "[Seller](https://ddwiki.reso.org/display/DDW17/Seller)": A licensed real estate agent will not be present and the property owner will be present at the open house event.
    Seller,

    /// "[Unattended](https://ddwiki.reso.org/display/DDW17/Unattended)": The open house event will not be attended.  Access will normally be via lockbox or other pre-arranged means.
    Unattended,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Attended {
    fn from(s: String) -> Attended {
        match s.as_ref() {
            "Agent" => Attended::Agent,

            "Seller" => Attended::Seller,

            "Unattended" => Attended::Unattended,

            _ => Attended::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Attended {
    fn from(s: &str) -> Attended {
        match s {
            "Agent" => Attended::Agent,

            "Seller" => Attended::Seller,

            "Unattended" => Attended::Unattended,

            _ => Attended::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Attended> for &'a str {
    fn from(s: &'a Attended) -> &'a str {
        match s {
            Attended::Agent => "Agent",

            Attended::Seller => "Seller",

            Attended::Unattended => "Unattended",

            Attended::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Attended {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Attended {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_attended_format {
    use super::Attended;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Attended>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Attended>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Basement Lookups](https://ddwiki.reso.org/display/DDW17/Basement+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Basement {
    /// "[Apartment](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244002)": The basement is setup as an apartment living space.
    Apartment,

    /// "[Bath/Stubbed](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244003)": The basement is stubbed for a bathroom.
    BathStubbed,

    /// "[Block](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244004)": The basement has block construction.
    Block,

    /// "[Concrete](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244005)": The basement has a concrete floor and/or walls.
    Concrete,

    /// "[Crawl Space](https://ddwiki.reso.org/display/DDW17/Crawl+Space)": The basement is/has a crawl space.
    CrawlSpace,

    /// "[Daylight](https://ddwiki.reso.org/display/DDW17/Daylight)": The basement has natural lighting.
    Daylight,

    /// "[Dirt Floor](https://ddwiki.reso.org/display/DDW17/Dirt+Floor)": The basement has a dirt floor.
    DirtFloor,

    /// "[Exterior Entry](https://ddwiki.reso.org/display/DDW17/Exterior+Entry)": The basement has an exterior entry.
    ExteriorEntry,

    /// "[Finished](https://ddwiki.reso.org/display/DDW17/Finished)": The basement is finished to a given standard of competition.  Examples may include underlayment and flooring; walls are framed, insulated, drywalled and painted; etc.
    Finished,

    /// "[French Drain](https://ddwiki.reso.org/display/DDW17/French+Drain)": The basement has a French drain.
    FrenchDrain,

    /// "[Full](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244012)": The basement fills the entire space under the house.
    Full,

    /// "[Interior Entry](https://ddwiki.reso.org/display/DDW17/Interior+Entry)": The basement has an interior entry.
    InteriorEntry,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244014)": The property has no basement.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244015)": The basement has features or attributes other than those listed in this field.
    Other,

    /// "[Partial](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244016)": The basement partially fills the space under the house.
    Partial,

    /// "[Partially Finished](https://ddwiki.reso.org/display/DDW17/Partially+Finished)": The basement is partially finished.  Some finishing work is done but not all.  Examples may include underlayment and flooring; walls are framed, insulated, drywalled and painted; etc.
    PartiallyFinished,

    /// "[Storage Space](https://ddwiki.reso.org/display/DDW17/Storage+Space)": The basement has storage space.
    StorageSpace,

    /// "[Sump Pump](https://ddwiki.reso.org/display/DDW17/Sump+Pump)": The basement has a sump pump.
    SumpPump,

    /// "[Unfinished](https://ddwiki.reso.org/display/DDW17/Unfinished)": The basement is unfinished.
    Unfinished,

    /// "[Walk-Out Access](https://ddwiki.reso.org/display/DDW17/Walk-Out+Access)": A walk-out basement is a structure where the basement space directly accessible from the outside with the entryway level with the ground.
    WalkOutAccess,

    /// "[Walk-Up Access](https://ddwiki.reso.org/display/DDW17/Walk-Up+Access)": A walk-up basement is a structure where the basement space directly accessible from the outside with the entryway below ground and usually exterior stairs leading up to ground level.
    WalkUpAccess,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Basement {
    fn from(s: String) -> Basement {
        match s.as_ref() {
            "Apartment" => Basement::Apartment,

            "Bath/Stubbed" => Basement::BathStubbed,

            "Block" => Basement::Block,

            "Concrete" => Basement::Concrete,

            "Crawl Space" => Basement::CrawlSpace,

            "Daylight" => Basement::Daylight,

            "Dirt Floor" => Basement::DirtFloor,

            "Exterior Entry" => Basement::ExteriorEntry,

            "Finished" => Basement::Finished,

            "French Drain" => Basement::FrenchDrain,

            "Full" => Basement::Full,

            "Interior Entry" => Basement::InteriorEntry,

            "None" => Basement::None,

            "Other" => Basement::Other,

            "Partial" => Basement::Partial,

            "Partially Finished" => Basement::PartiallyFinished,

            "Storage Space" => Basement::StorageSpace,

            "Sump Pump" => Basement::SumpPump,

            "Unfinished" => Basement::Unfinished,

            "Walk-Out Access" => Basement::WalkOutAccess,

            "Walk-Up Access" => Basement::WalkUpAccess,

            _ => Basement::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Basement {
    fn from(s: &str) -> Basement {
        match s {
            "Apartment" => Basement::Apartment,

            "Bath/Stubbed" => Basement::BathStubbed,

            "Block" => Basement::Block,

            "Concrete" => Basement::Concrete,

            "Crawl Space" => Basement::CrawlSpace,

            "Daylight" => Basement::Daylight,

            "Dirt Floor" => Basement::DirtFloor,

            "Exterior Entry" => Basement::ExteriorEntry,

            "Finished" => Basement::Finished,

            "French Drain" => Basement::FrenchDrain,

            "Full" => Basement::Full,

            "Interior Entry" => Basement::InteriorEntry,

            "None" => Basement::None,

            "Other" => Basement::Other,

            "Partial" => Basement::Partial,

            "Partially Finished" => Basement::PartiallyFinished,

            "Storage Space" => Basement::StorageSpace,

            "Sump Pump" => Basement::SumpPump,

            "Unfinished" => Basement::Unfinished,

            "Walk-Out Access" => Basement::WalkOutAccess,

            "Walk-Up Access" => Basement::WalkUpAccess,

            _ => Basement::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Basement> for &'a str {
    fn from(s: &'a Basement) -> &'a str {
        match s {
            Basement::Apartment => "Apartment",

            Basement::BathStubbed => "Bath/Stubbed",

            Basement::Block => "Block",

            Basement::Concrete => "Concrete",

            Basement::CrawlSpace => "Crawl Space",

            Basement::Daylight => "Daylight",

            Basement::DirtFloor => "Dirt Floor",

            Basement::ExteriorEntry => "Exterior Entry",

            Basement::Finished => "Finished",

            Basement::FrenchDrain => "French Drain",

            Basement::Full => "Full",

            Basement::InteriorEntry => "Interior Entry",

            Basement::None => "None",

            Basement::Other => "Other",

            Basement::Partial => "Partial",

            Basement::PartiallyFinished => "Partially Finished",

            Basement::StorageSpace => "Storage Space",

            Basement::SumpPump => "Sump Pump",

            Basement::Unfinished => "Unfinished",

            Basement::WalkOutAccess => "Walk-Out Access",

            Basement::WalkUpAccess => "Walk-Up Access",

            Basement::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Basement {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Basement {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_basement_format {
    use super::Basement;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Basement>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Basement>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [BodyType Lookups](https://ddwiki.reso.org/display/DDW17/BodyType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum BodyType {
    /// "[Double Wide](https://ddwiki.reso.org/display/DDW17/Double+Wide)": The body/structure type of the mobile/manufacture home is double wide.
    DoubleWide,

    /// "[Expando](https://ddwiki.reso.org/display/DDW17/Expando)": The body/structure type of the mobile/manufacture home is Expando.
    Expando,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243847)": A body type not included in this list.
    Other,

    /// "[Quad Wide](https://ddwiki.reso.org/display/DDW17/Quad+Wide)": The body/structure type of the mobile/manufacture home is quad wide.
    QuadWide,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243844)": The body/structure type of the mobile/manufacture home is see remarks.
    SeeRemarks,

    /// "[Single Wide](https://ddwiki.reso.org/display/DDW17/Single+Wide)": The body/structure type of the mobile/manufacture home is single wide.
    SingleWide,

    /// "[Triple Wide](https://ddwiki.reso.org/display/DDW17/Triple+Wide)": The body/structure type of the mobile/manufacture home is triple wide.
    TripleWide,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for BodyType {
    fn from(s: String) -> BodyType {
        match s.as_ref() {
            "Double Wide" => BodyType::DoubleWide,

            "Expando" => BodyType::Expando,

            "Other" => BodyType::Other,

            "Quad Wide" => BodyType::QuadWide,

            "See Remarks" => BodyType::SeeRemarks,

            "Single Wide" => BodyType::SingleWide,

            "Triple Wide" => BodyType::TripleWide,

            _ => BodyType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for BodyType {
    fn from(s: &str) -> BodyType {
        match s {
            "Double Wide" => BodyType::DoubleWide,

            "Expando" => BodyType::Expando,

            "Other" => BodyType::Other,

            "Quad Wide" => BodyType::QuadWide,

            "See Remarks" => BodyType::SeeRemarks,

            "Single Wide" => BodyType::SingleWide,

            "Triple Wide" => BodyType::TripleWide,

            _ => BodyType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a BodyType> for &'a str {
    fn from(s: &'a BodyType) -> &'a str {
        match s {
            BodyType::DoubleWide => "Double Wide",

            BodyType::Expando => "Expando",

            BodyType::Other => "Other",

            BodyType::QuadWide => "Quad Wide",

            BodyType::SeeRemarks => "See Remarks",

            BodyType::SingleWide => "Single Wide",

            BodyType::TripleWide => "Triple Wide",

            BodyType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for BodyType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for BodyType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_body_type_format {
    use super::BodyType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<BodyType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<BodyType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [BusinessType Lookups](https://ddwiki.reso.org/display/DDW17/BusinessType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum BusinessType {
    /// "[Accounting](https://ddwiki.reso.org/display/DDW17/Accounting)": The listing is for an accounting business.
    Accounting,

    /// "[Administrative and Support](https://ddwiki.reso.org/display/DDW17/Administrative+and+Support)": The listing is for an administrative and support business.
    AdministrativeandSupport,

    /// "[Advertising](https://ddwiki.reso.org/display/DDW17/Advertising)": The listing is for an advertising business.
    Advertising,

    /// "[Agriculture](https://ddwiki.reso.org/display/DDW17/Agriculture)": The listing is for an agriculture business.
    Agriculture,

    /// "[Animal Grooming](https://ddwiki.reso.org/display/DDW17/Animal+Grooming)": The listing is for an animal grooming business.
    AnimalGrooming,

    /// "[Appliances](https://ddwiki.reso.org/display/DDW17/Appliances)": The listing is for an appliances business.
    Appliances,

    /// "[Aquarium Supplies](https://ddwiki.reso.org/display/DDW17/Aquarium+Supplies)": The listing is for an aquarium supplies business.
    AquariumSupplies,

    /// "[Arts and Entertainment](https://ddwiki.reso.org/display/DDW17/Arts+and+Entertainment)": The listing is for an arts and entertainment business.
    ArtsandEntertainment,

    /// "[Athletic](https://ddwiki.reso.org/display/DDW17/Athletic)": The listing is for an athletic business.
    Athletic,

    /// "[Auto Body](https://ddwiki.reso.org/display/DDW17/Auto+Body)": The listing is for an Auto Body business.
    AutoBody,

    /// "[Auto Dealer](https://ddwiki.reso.org/display/DDW17/Auto+Dealer)": The listing is for an auto dealer business.
    AutoDealer,

    /// "[Auto Glass](https://ddwiki.reso.org/display/DDW17/Auto+Glass)": The listing is for an Auto Glass business.
    AutoGlass,

    /// "[Auto Parts](https://ddwiki.reso.org/display/DDW17/Auto+Parts)": The listing is for an Auto Parts business.
    AutoParts,

    /// "[Auto Rent/Lease](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243862)": The listing is for an Auto Rent/Lease business.
    AutoRentLease,

    /// "[Auto Repair-Specialty](https://ddwiki.reso.org/display/DDW17/Auto+Repair-Specialty)": The listing is for an Auto Repair-Specialty business.
    AutoRepairSpecialty,

    /// "[Auto Service](https://ddwiki.reso.org/display/DDW17/Auto+Service)": The listing is for an auto service business.
    AutoService,

    /// "[Auto Stereo/Alarm](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243865)": The listing is for an Auto Stereo/Alarm business.
    AutoStereoAlarm,

    /// "[Auto Tires](https://ddwiki.reso.org/display/DDW17/Auto+Tires)": The listing is for an Auto Tires business.
    AutoTires,

    /// "[Auto Wrecking](https://ddwiki.reso.org/display/DDW17/Auto+Wrecking)": The listing is for an Auto Wrecking business.
    AutoWrecking,

    /// "[Bakery](https://ddwiki.reso.org/display/DDW17/Bakery)": The listing is for a bakery business.
    Bakery,

    /// "[Bar/Tavern/Lounge](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243869)": The listing is for a bar/tavern/lounge business.
    BarTavernLounge,

    /// "[Barber/Beauty](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243870)": The listing is for a barber/beauty business.
    BarberBeauty,

    /// "[Bed & Breakfast](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243871)": The listing is for a bed & breakfast business.
    BedBreakfast,

    /// "[Books/Cards/Stationary](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243872)": The listing is for a Books/Cards/Stationary business.
    BooksCardsStationary,

    /// "[Butcher](https://ddwiki.reso.org/display/DDW17/Butcher)": The listing is for a butcher business.
    Butcher,

    /// "[Cabinets](https://ddwiki.reso.org/display/DDW17/Cabinets)": The listing is for a Cabinets business.
    Cabinets,

    /// "[Candy/Cookie](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243875)": The listing is for a Candy/Cookie business.
    CandyCookie,

    /// "[Car Wash](https://ddwiki.reso.org/display/DDW17/Car+Wash)": The listing is for a car wash business.
    CarWash,

    /// "[Carpet/Tile](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243877)": The listing is for a Carpet/Tile business.
    CarpetTile,

    /// "[Child Care](https://ddwiki.reso.org/display/DDW17/Child+Care)": The listing is for a child care business.
    ChildCare,

    /// "[Church](https://ddwiki.reso.org/display/DDW17/Church)": The listing is for a church business.
    Church,

    /// "[Clothing](https://ddwiki.reso.org/display/DDW17/Clothing)": The listing is for a clothing business.
    Clothing,

    /// "[Commercial](https://ddwiki.reso.org/display/DDW17/Commercial)": The listing is for a commercial business.
    Commercial,

    /// "[Computer](https://ddwiki.reso.org/display/DDW17/Computer)": The listing is for a computer business.
    Computer,

    /// "[Construction/Contractor](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243883)": The listing is for a construction/contractor business.
    ConstructionContractor,

    /// "[Convalescent](https://ddwiki.reso.org/display/DDW17/Convalescent)": The listing is for a Convalescent business.
    Convalescent,

    /// "[Convenience Store](https://ddwiki.reso.org/display/DDW17/Convenience+Store)": The listing is for a convenience store business.
    ConvenienceStore,

    /// "[Dance Studio](https://ddwiki.reso.org/display/DDW17/Dance+Studio)": The listing is for a Dance Studio business.
    DanceStudio,

    /// "[Decorator](https://ddwiki.reso.org/display/DDW17/Decorator)": The listing is for a Decorator business.
    Decorator,

    /// "[Deli/Catering](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243888)": The listing is for a Deli/Catering business.
    DeliCatering,

    /// "[Dental](https://ddwiki.reso.org/display/DDW17/Dental)": The listing is for a dental business.
    Dental,

    /// "[Distribution](https://ddwiki.reso.org/display/DDW17/Distribution)": The listing is for a distribution business.
    Distribution,

    /// "[Doughnut](https://ddwiki.reso.org/display/DDW17/Doughnut)": The listing is for a doughnut business.
    Doughnut,

    /// "[Drugstore](https://ddwiki.reso.org/display/DDW17/Drugstore)": The listing is for a Drugstore business.
    Drugstore,

    /// "[Dry Cleaner](https://ddwiki.reso.org/display/DDW17/Dry+Cleaner)": The listing is for a dry cleaner business.
    DryCleaner,

    /// "[Education/School](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243894)": The listing is for an education/school business.
    EducationSchool,

    /// "[Electronics](https://ddwiki.reso.org/display/DDW17/Electronics)": The listing is for an Electronics business.
    Electronics,

    /// "[Employment](https://ddwiki.reso.org/display/DDW17/Employment)": The listing is for an Employment business.
    Employment,

    /// "[Farm](https://ddwiki.reso.org/display/DDW17/Farm)": The listing is for a farm business.
    Farm,

    /// "[Fast Food](https://ddwiki.reso.org/display/DDW17/Fast+Food)": The listing is for a fast food business.
    FastFood,

    /// "[Financial](https://ddwiki.reso.org/display/DDW17/Financial)": The listing is for a financial business.
    Financial,

    /// "[Fitness](https://ddwiki.reso.org/display/DDW17/Fitness)": The listing is for a fitness business.
    Fitness,

    /// "[Florist/Nursery](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243901)": The listing is for a florist/nursery business.
    FloristNursery,

    /// "[Food & Beverage](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243902)": The listing is for a food & beverage business.
    FoodBeverage,

    /// "[Forest Reserve](https://ddwiki.reso.org/display/DDW17/Forest+Reserve)": The listing is for a forest reserve business.
    ForestReserve,

    /// "[Franchise](https://ddwiki.reso.org/display/DDW17/Franchise)": The listing is for a franchise business.
    Franchise,

    /// "[Furniture](https://ddwiki.reso.org/display/DDW17/Furniture)": The listing is for a Furniture business.
    Furniture,

    /// "[Gas Station](https://ddwiki.reso.org/display/DDW17/Gas+Station)": The listing is for a gas station business.
    GasStation,

    /// "[Gift Shop](https://ddwiki.reso.org/display/DDW17/Gift+Shop)": The listing is for a gift shop business.
    GiftShop,

    /// "[Grocery](https://ddwiki.reso.org/display/DDW17/Grocery)": The listing is for a grocery business.
    Grocery,

    /// "[Hardware](https://ddwiki.reso.org/display/DDW17/Hardware)": The listing is for a hardware business.
    Hardware,

    /// "[Health Food](https://ddwiki.reso.org/display/DDW17/Health+Food)": The listing is for a Health Food business.
    HealthFood,

    /// "[Health Services](https://ddwiki.reso.org/display/DDW17/Health+Services)": The listing is for a health services business.
    HealthServices,

    /// "[Hobby](https://ddwiki.reso.org/display/DDW17/Hobby)": The listing is for a Hobby business.
    Hobby,

    /// "[Home Cleaner](https://ddwiki.reso.org/display/DDW17/Home+Cleaner)": The listing is for a Home Cleaner business.
    HomeCleaner,

    /// "[Hospitality](https://ddwiki.reso.org/display/DDW17/Hospitality)": The listing is for a hospitality business.
    Hospitality,

    /// "[Hotel/Motel](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243915)": The listing is for a hotel/motel business.
    HotelMotel,

    /// "[Ice Cream/Frozen Yogurt](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243916)": The listing is for an ice cream/frozen yogurt business.
    IceCreamFrozenYogurt,

    /// "[Industrial](https://ddwiki.reso.org/display/DDW17/Industrial)": The listing is for an industrial business.
    Industrial,

    /// "[Jewelry](https://ddwiki.reso.org/display/DDW17/Jewelry)": The listing is for a Jewelry business.
    Jewelry,

    /// "[Landscaping](https://ddwiki.reso.org/display/DDW17/Landscaping)": The listing is for a Landscaping business.
    Landscaping,

    /// "[Laundromat](https://ddwiki.reso.org/display/DDW17/Laundromat)": The listing is for a laundromat business.
    Laundromat,

    /// "[Liquor Store](https://ddwiki.reso.org/display/DDW17/Liquor+Store)": The listing is for a liquor store business.
    LiquorStore,

    /// "[Locksmith](https://ddwiki.reso.org/display/DDW17/Locksmith)": The listing is for a Locksmith business.
    Locksmith,

    /// "[Manufacturing](https://ddwiki.reso.org/display/DDW17/Manufacturing)": The listing is for a manufacturing business.
    Manufacturing,

    /// "[Medical](https://ddwiki.reso.org/display/DDW17/Medical)": The listing is for a medical business.
    Medical,

    /// "[Mixed](https://ddwiki.reso.org/display/DDW17/Mixed)": The listing is for a mixed business.
    Mixed,

    /// "[Mobile/Trailer Park](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243927)": The listing is for a mobile/trailer park business.
    MobileTrailerPark,

    /// "[Music](https://ddwiki.reso.org/display/DDW17/Music)": The listing is for a Music business.
    Music,

    /// "[Nursing Home](https://ddwiki.reso.org/display/DDW17/Nursing+Home)": The listing is for a nursing home business.
    NursingHome,

    /// "[Office Supply](https://ddwiki.reso.org/display/DDW17/Office+Supply)": The listing is for an Office Supply business.
    OfficeSupply,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243931)": The listing is for an other business.
    Other,

    /// "[Paints](https://ddwiki.reso.org/display/DDW17/Paints)": The listing is for a Paints business.
    Paints,

    /// "[Parking](https://ddwiki.reso.org/display/DDW17/Parking)": The listing is for a parking business.
    Parking,

    /// "[Pet Store](https://ddwiki.reso.org/display/DDW17/Pet+Store)": The listing is for a pet store business.
    PetStore,

    /// "[Photographer](https://ddwiki.reso.org/display/DDW17/Photographer)": The listing is for a Photographer business.
    Photographer,

    /// "[Pizza](https://ddwiki.reso.org/display/DDW17/Pizza)": The listing is for a Pizza business.
    Pizza,

    /// "[Printing](https://ddwiki.reso.org/display/DDW17/Printing)": The listing is for a printing business.
    Printing,

    /// "[Professional Service](https://ddwiki.reso.org/display/DDW17/Professional+Service)": The listing is for a professional service business.
    ProfessionalService,

    /// "[Professional/Office](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243939)": The listing is for a professional/office business.
    ProfessionalOffice,

    /// "[Real Estate](https://ddwiki.reso.org/display/DDW17/Real+Estate)": The listing is for a Real Estate business.
    RealEstate,

    /// "[Recreation](https://ddwiki.reso.org/display/DDW17/Recreation)": The listing is for a recreation business.
    Recreation,

    /// "[Rental](https://ddwiki.reso.org/display/DDW17/Rental)": The listing is for a Rental business.
    Rental,

    /// "[Residential](https://ddwiki.reso.org/display/DDW17/Residential)": The listing is for a residential business.
    Residential,

    /// "[Restaurant](https://ddwiki.reso.org/display/DDW17/Restaurant)": The listing is for a restaurant business.
    Restaurant,

    /// "[Retail](https://ddwiki.reso.org/display/DDW17/Retail)": The listing is for a retail business.
    Retail,

    /// "[Saddlery/Harness](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243946)": The listing is for a Saddlery/Harness business.
    SaddleryHarness,

    /// "[Sporting Goods](https://ddwiki.reso.org/display/DDW17/Sporting+Goods)": The listing is for a sporting goods business.
    SportingGoods,

    /// "[Storage](https://ddwiki.reso.org/display/DDW17/Storage)": The listing is for a storage business.
    Storage,

    /// "[Toys](https://ddwiki.reso.org/display/DDW17/Toys)": The listing is for a Toys business.
    Toys,

    /// "[Transportation](https://ddwiki.reso.org/display/DDW17/Transportation)": The listing is for a transportation business.
    Transportation,

    /// "[Travel](https://ddwiki.reso.org/display/DDW17/Travel)": The listing is for a Travel business.
    Travel,

    /// "[Upholstery](https://ddwiki.reso.org/display/DDW17/Upholstery)": The listing is for an Upholstery business.
    Upholstery,

    /// "[Utility](https://ddwiki.reso.org/display/DDW17/Utility)": The listing is for a Utility business.
    Utility,

    /// "[Variety](https://ddwiki.reso.org/display/DDW17/Variety)": The listing is for a Variety business.
    Variety,

    /// "[Video](https://ddwiki.reso.org/display/DDW17/Video)": The listing is for a Video business.
    Video,

    /// "[Wallpaper](https://ddwiki.reso.org/display/DDW17/Wallpaper)": The listing is for a Wallpaper business.
    Wallpaper,

    /// "[Warehouse](https://ddwiki.reso.org/display/DDW17/Warehouse)": The listing is for a warehouse business.
    Warehouse,

    /// "[Wholesale](https://ddwiki.reso.org/display/DDW17/Wholesale)": The listing is for a wholesale business.
    Wholesale,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for BusinessType {
    fn from(s: String) -> BusinessType {
        match s.as_ref() {
            "Accounting" => BusinessType::Accounting,

            "Administrative and Support" => BusinessType::AdministrativeandSupport,

            "Advertising" => BusinessType::Advertising,

            "Agriculture" => BusinessType::Agriculture,

            "Animal Grooming" => BusinessType::AnimalGrooming,

            "Appliances" => BusinessType::Appliances,

            "Aquarium Supplies" => BusinessType::AquariumSupplies,

            "Arts and Entertainment" => BusinessType::ArtsandEntertainment,

            "Athletic" => BusinessType::Athletic,

            "Auto Body" => BusinessType::AutoBody,

            "Auto Dealer" => BusinessType::AutoDealer,

            "Auto Glass" => BusinessType::AutoGlass,

            "Auto Parts" => BusinessType::AutoParts,

            "Auto Rent/Lease" => BusinessType::AutoRentLease,

            "Auto Repair-Specialty" => BusinessType::AutoRepairSpecialty,

            "Auto Service" => BusinessType::AutoService,

            "Auto Stereo/Alarm" => BusinessType::AutoStereoAlarm,

            "Auto Tires" => BusinessType::AutoTires,

            "Auto Wrecking" => BusinessType::AutoWrecking,

            "Bakery" => BusinessType::Bakery,

            "Bar/Tavern/Lounge" => BusinessType::BarTavernLounge,

            "Barber/Beauty" => BusinessType::BarberBeauty,

            "Bed & Breakfast" => BusinessType::BedBreakfast,

            "Books/Cards/Stationary" => BusinessType::BooksCardsStationary,

            "Butcher" => BusinessType::Butcher,

            "Cabinets" => BusinessType::Cabinets,

            "Candy/Cookie" => BusinessType::CandyCookie,

            "Car Wash" => BusinessType::CarWash,

            "Carpet/Tile" => BusinessType::CarpetTile,

            "Child Care" => BusinessType::ChildCare,

            "Church" => BusinessType::Church,

            "Clothing" => BusinessType::Clothing,

            "Commercial" => BusinessType::Commercial,

            "Computer" => BusinessType::Computer,

            "Construction/Contractor" => BusinessType::ConstructionContractor,

            "Convalescent" => BusinessType::Convalescent,

            "Convenience Store" => BusinessType::ConvenienceStore,

            "Dance Studio" => BusinessType::DanceStudio,

            "Decorator" => BusinessType::Decorator,

            "Deli/Catering" => BusinessType::DeliCatering,

            "Dental" => BusinessType::Dental,

            "Distribution" => BusinessType::Distribution,

            "Doughnut" => BusinessType::Doughnut,

            "Drugstore" => BusinessType::Drugstore,

            "Dry Cleaner" => BusinessType::DryCleaner,

            "Education/School" => BusinessType::EducationSchool,

            "Electronics" => BusinessType::Electronics,

            "Employment" => BusinessType::Employment,

            "Farm" => BusinessType::Farm,

            "Fast Food" => BusinessType::FastFood,

            "Financial" => BusinessType::Financial,

            "Fitness" => BusinessType::Fitness,

            "Florist/Nursery" => BusinessType::FloristNursery,

            "Food & Beverage" => BusinessType::FoodBeverage,

            "Forest Reserve" => BusinessType::ForestReserve,

            "Franchise" => BusinessType::Franchise,

            "Furniture" => BusinessType::Furniture,

            "Gas Station" => BusinessType::GasStation,

            "Gift Shop" => BusinessType::GiftShop,

            "Grocery" => BusinessType::Grocery,

            "Hardware" => BusinessType::Hardware,

            "Health Food" => BusinessType::HealthFood,

            "Health Services" => BusinessType::HealthServices,

            "Hobby" => BusinessType::Hobby,

            "Home Cleaner" => BusinessType::HomeCleaner,

            "Hospitality" => BusinessType::Hospitality,

            "Hotel/Motel" => BusinessType::HotelMotel,

            "Ice Cream/Frozen Yogurt" => BusinessType::IceCreamFrozenYogurt,

            "Industrial" => BusinessType::Industrial,

            "Jewelry" => BusinessType::Jewelry,

            "Landscaping" => BusinessType::Landscaping,

            "Laundromat" => BusinessType::Laundromat,

            "Liquor Store" => BusinessType::LiquorStore,

            "Locksmith" => BusinessType::Locksmith,

            "Manufacturing" => BusinessType::Manufacturing,

            "Medical" => BusinessType::Medical,

            "Mixed" => BusinessType::Mixed,

            "Mobile/Trailer Park" => BusinessType::MobileTrailerPark,

            "Music" => BusinessType::Music,

            "Nursing Home" => BusinessType::NursingHome,

            "Office Supply" => BusinessType::OfficeSupply,

            "Other" => BusinessType::Other,

            "Paints" => BusinessType::Paints,

            "Parking" => BusinessType::Parking,

            "Pet Store" => BusinessType::PetStore,

            "Photographer" => BusinessType::Photographer,

            "Pizza" => BusinessType::Pizza,

            "Printing" => BusinessType::Printing,

            "Professional Service" => BusinessType::ProfessionalService,

            "Professional/Office" => BusinessType::ProfessionalOffice,

            "Real Estate" => BusinessType::RealEstate,

            "Recreation" => BusinessType::Recreation,

            "Rental" => BusinessType::Rental,

            "Residential" => BusinessType::Residential,

            "Restaurant" => BusinessType::Restaurant,

            "Retail" => BusinessType::Retail,

            "Saddlery/Harness" => BusinessType::SaddleryHarness,

            "Sporting Goods" => BusinessType::SportingGoods,

            "Storage" => BusinessType::Storage,

            "Toys" => BusinessType::Toys,

            "Transportation" => BusinessType::Transportation,

            "Travel" => BusinessType::Travel,

            "Upholstery" => BusinessType::Upholstery,

            "Utility" => BusinessType::Utility,

            "Variety" => BusinessType::Variety,

            "Video" => BusinessType::Video,

            "Wallpaper" => BusinessType::Wallpaper,

            "Warehouse" => BusinessType::Warehouse,

            "Wholesale" => BusinessType::Wholesale,

            _ => BusinessType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for BusinessType {
    fn from(s: &str) -> BusinessType {
        match s {
            "Accounting" => BusinessType::Accounting,

            "Administrative and Support" => BusinessType::AdministrativeandSupport,

            "Advertising" => BusinessType::Advertising,

            "Agriculture" => BusinessType::Agriculture,

            "Animal Grooming" => BusinessType::AnimalGrooming,

            "Appliances" => BusinessType::Appliances,

            "Aquarium Supplies" => BusinessType::AquariumSupplies,

            "Arts and Entertainment" => BusinessType::ArtsandEntertainment,

            "Athletic" => BusinessType::Athletic,

            "Auto Body" => BusinessType::AutoBody,

            "Auto Dealer" => BusinessType::AutoDealer,

            "Auto Glass" => BusinessType::AutoGlass,

            "Auto Parts" => BusinessType::AutoParts,

            "Auto Rent/Lease" => BusinessType::AutoRentLease,

            "Auto Repair-Specialty" => BusinessType::AutoRepairSpecialty,

            "Auto Service" => BusinessType::AutoService,

            "Auto Stereo/Alarm" => BusinessType::AutoStereoAlarm,

            "Auto Tires" => BusinessType::AutoTires,

            "Auto Wrecking" => BusinessType::AutoWrecking,

            "Bakery" => BusinessType::Bakery,

            "Bar/Tavern/Lounge" => BusinessType::BarTavernLounge,

            "Barber/Beauty" => BusinessType::BarberBeauty,

            "Bed & Breakfast" => BusinessType::BedBreakfast,

            "Books/Cards/Stationary" => BusinessType::BooksCardsStationary,

            "Butcher" => BusinessType::Butcher,

            "Cabinets" => BusinessType::Cabinets,

            "Candy/Cookie" => BusinessType::CandyCookie,

            "Car Wash" => BusinessType::CarWash,

            "Carpet/Tile" => BusinessType::CarpetTile,

            "Child Care" => BusinessType::ChildCare,

            "Church" => BusinessType::Church,

            "Clothing" => BusinessType::Clothing,

            "Commercial" => BusinessType::Commercial,

            "Computer" => BusinessType::Computer,

            "Construction/Contractor" => BusinessType::ConstructionContractor,

            "Convalescent" => BusinessType::Convalescent,

            "Convenience Store" => BusinessType::ConvenienceStore,

            "Dance Studio" => BusinessType::DanceStudio,

            "Decorator" => BusinessType::Decorator,

            "Deli/Catering" => BusinessType::DeliCatering,

            "Dental" => BusinessType::Dental,

            "Distribution" => BusinessType::Distribution,

            "Doughnut" => BusinessType::Doughnut,

            "Drugstore" => BusinessType::Drugstore,

            "Dry Cleaner" => BusinessType::DryCleaner,

            "Education/School" => BusinessType::EducationSchool,

            "Electronics" => BusinessType::Electronics,

            "Employment" => BusinessType::Employment,

            "Farm" => BusinessType::Farm,

            "Fast Food" => BusinessType::FastFood,

            "Financial" => BusinessType::Financial,

            "Fitness" => BusinessType::Fitness,

            "Florist/Nursery" => BusinessType::FloristNursery,

            "Food & Beverage" => BusinessType::FoodBeverage,

            "Forest Reserve" => BusinessType::ForestReserve,

            "Franchise" => BusinessType::Franchise,

            "Furniture" => BusinessType::Furniture,

            "Gas Station" => BusinessType::GasStation,

            "Gift Shop" => BusinessType::GiftShop,

            "Grocery" => BusinessType::Grocery,

            "Hardware" => BusinessType::Hardware,

            "Health Food" => BusinessType::HealthFood,

            "Health Services" => BusinessType::HealthServices,

            "Hobby" => BusinessType::Hobby,

            "Home Cleaner" => BusinessType::HomeCleaner,

            "Hospitality" => BusinessType::Hospitality,

            "Hotel/Motel" => BusinessType::HotelMotel,

            "Ice Cream/Frozen Yogurt" => BusinessType::IceCreamFrozenYogurt,

            "Industrial" => BusinessType::Industrial,

            "Jewelry" => BusinessType::Jewelry,

            "Landscaping" => BusinessType::Landscaping,

            "Laundromat" => BusinessType::Laundromat,

            "Liquor Store" => BusinessType::LiquorStore,

            "Locksmith" => BusinessType::Locksmith,

            "Manufacturing" => BusinessType::Manufacturing,

            "Medical" => BusinessType::Medical,

            "Mixed" => BusinessType::Mixed,

            "Mobile/Trailer Park" => BusinessType::MobileTrailerPark,

            "Music" => BusinessType::Music,

            "Nursing Home" => BusinessType::NursingHome,

            "Office Supply" => BusinessType::OfficeSupply,

            "Other" => BusinessType::Other,

            "Paints" => BusinessType::Paints,

            "Parking" => BusinessType::Parking,

            "Pet Store" => BusinessType::PetStore,

            "Photographer" => BusinessType::Photographer,

            "Pizza" => BusinessType::Pizza,

            "Printing" => BusinessType::Printing,

            "Professional Service" => BusinessType::ProfessionalService,

            "Professional/Office" => BusinessType::ProfessionalOffice,

            "Real Estate" => BusinessType::RealEstate,

            "Recreation" => BusinessType::Recreation,

            "Rental" => BusinessType::Rental,

            "Residential" => BusinessType::Residential,

            "Restaurant" => BusinessType::Restaurant,

            "Retail" => BusinessType::Retail,

            "Saddlery/Harness" => BusinessType::SaddleryHarness,

            "Sporting Goods" => BusinessType::SportingGoods,

            "Storage" => BusinessType::Storage,

            "Toys" => BusinessType::Toys,

            "Transportation" => BusinessType::Transportation,

            "Travel" => BusinessType::Travel,

            "Upholstery" => BusinessType::Upholstery,

            "Utility" => BusinessType::Utility,

            "Variety" => BusinessType::Variety,

            "Video" => BusinessType::Video,

            "Wallpaper" => BusinessType::Wallpaper,

            "Warehouse" => BusinessType::Warehouse,

            "Wholesale" => BusinessType::Wholesale,

            _ => BusinessType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a BusinessType> for &'a str {
    fn from(s: &'a BusinessType) -> &'a str {
        match s {
            BusinessType::Accounting => "Accounting",

            BusinessType::AdministrativeandSupport => "Administrative and Support",

            BusinessType::Advertising => "Advertising",

            BusinessType::Agriculture => "Agriculture",

            BusinessType::AnimalGrooming => "Animal Grooming",

            BusinessType::Appliances => "Appliances",

            BusinessType::AquariumSupplies => "Aquarium Supplies",

            BusinessType::ArtsandEntertainment => "Arts and Entertainment",

            BusinessType::Athletic => "Athletic",

            BusinessType::AutoBody => "Auto Body",

            BusinessType::AutoDealer => "Auto Dealer",

            BusinessType::AutoGlass => "Auto Glass",

            BusinessType::AutoParts => "Auto Parts",

            BusinessType::AutoRentLease => "Auto Rent/Lease",

            BusinessType::AutoRepairSpecialty => "Auto Repair-Specialty",

            BusinessType::AutoService => "Auto Service",

            BusinessType::AutoStereoAlarm => "Auto Stereo/Alarm",

            BusinessType::AutoTires => "Auto Tires",

            BusinessType::AutoWrecking => "Auto Wrecking",

            BusinessType::Bakery => "Bakery",

            BusinessType::BarTavernLounge => "Bar/Tavern/Lounge",

            BusinessType::BarberBeauty => "Barber/Beauty",

            BusinessType::BedBreakfast => "Bed & Breakfast",

            BusinessType::BooksCardsStationary => "Books/Cards/Stationary",

            BusinessType::Butcher => "Butcher",

            BusinessType::Cabinets => "Cabinets",

            BusinessType::CandyCookie => "Candy/Cookie",

            BusinessType::CarWash => "Car Wash",

            BusinessType::CarpetTile => "Carpet/Tile",

            BusinessType::ChildCare => "Child Care",

            BusinessType::Church => "Church",

            BusinessType::Clothing => "Clothing",

            BusinessType::Commercial => "Commercial",

            BusinessType::Computer => "Computer",

            BusinessType::ConstructionContractor => "Construction/Contractor",

            BusinessType::Convalescent => "Convalescent",

            BusinessType::ConvenienceStore => "Convenience Store",

            BusinessType::DanceStudio => "Dance Studio",

            BusinessType::Decorator => "Decorator",

            BusinessType::DeliCatering => "Deli/Catering",

            BusinessType::Dental => "Dental",

            BusinessType::Distribution => "Distribution",

            BusinessType::Doughnut => "Doughnut",

            BusinessType::Drugstore => "Drugstore",

            BusinessType::DryCleaner => "Dry Cleaner",

            BusinessType::EducationSchool => "Education/School",

            BusinessType::Electronics => "Electronics",

            BusinessType::Employment => "Employment",

            BusinessType::Farm => "Farm",

            BusinessType::FastFood => "Fast Food",

            BusinessType::Financial => "Financial",

            BusinessType::Fitness => "Fitness",

            BusinessType::FloristNursery => "Florist/Nursery",

            BusinessType::FoodBeverage => "Food & Beverage",

            BusinessType::ForestReserve => "Forest Reserve",

            BusinessType::Franchise => "Franchise",

            BusinessType::Furniture => "Furniture",

            BusinessType::GasStation => "Gas Station",

            BusinessType::GiftShop => "Gift Shop",

            BusinessType::Grocery => "Grocery",

            BusinessType::Hardware => "Hardware",

            BusinessType::HealthFood => "Health Food",

            BusinessType::HealthServices => "Health Services",

            BusinessType::Hobby => "Hobby",

            BusinessType::HomeCleaner => "Home Cleaner",

            BusinessType::Hospitality => "Hospitality",

            BusinessType::HotelMotel => "Hotel/Motel",

            BusinessType::IceCreamFrozenYogurt => "Ice Cream/Frozen Yogurt",

            BusinessType::Industrial => "Industrial",

            BusinessType::Jewelry => "Jewelry",

            BusinessType::Landscaping => "Landscaping",

            BusinessType::Laundromat => "Laundromat",

            BusinessType::LiquorStore => "Liquor Store",

            BusinessType::Locksmith => "Locksmith",

            BusinessType::Manufacturing => "Manufacturing",

            BusinessType::Medical => "Medical",

            BusinessType::Mixed => "Mixed",

            BusinessType::MobileTrailerPark => "Mobile/Trailer Park",

            BusinessType::Music => "Music",

            BusinessType::NursingHome => "Nursing Home",

            BusinessType::OfficeSupply => "Office Supply",

            BusinessType::Other => "Other",

            BusinessType::Paints => "Paints",

            BusinessType::Parking => "Parking",

            BusinessType::PetStore => "Pet Store",

            BusinessType::Photographer => "Photographer",

            BusinessType::Pizza => "Pizza",

            BusinessType::Printing => "Printing",

            BusinessType::ProfessionalService => "Professional Service",

            BusinessType::ProfessionalOffice => "Professional/Office",

            BusinessType::RealEstate => "Real Estate",

            BusinessType::Recreation => "Recreation",

            BusinessType::Rental => "Rental",

            BusinessType::Residential => "Residential",

            BusinessType::Restaurant => "Restaurant",

            BusinessType::Retail => "Retail",

            BusinessType::SaddleryHarness => "Saddlery/Harness",

            BusinessType::SportingGoods => "Sporting Goods",

            BusinessType::Storage => "Storage",

            BusinessType::Toys => "Toys",

            BusinessType::Transportation => "Transportation",

            BusinessType::Travel => "Travel",

            BusinessType::Upholstery => "Upholstery",

            BusinessType::Utility => "Utility",

            BusinessType::Variety => "Variety",

            BusinessType::Video => "Video",

            BusinessType::Wallpaper => "Wallpaper",

            BusinessType::Warehouse => "Warehouse",

            BusinessType::Wholesale => "Wholesale",

            BusinessType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for BusinessType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for BusinessType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_business_type_format {
    use super::BusinessType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<BusinessType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<BusinessType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [BuyerAgentDesignation Lookups](https://ddwiki.reso.org/display/DDW17/BuyerAgentDesignation+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum BuyerAgentDesignation {
    /// "[Accredited Buyer's Representative / ABR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243974)": The Accredited Buyer’s Representative (ABR®) designation is designed for real estate buyer agents who focus on working directly with buyer-clients.  http://www.rebac.net/abr
    AccreditedBuyersRepresentativeABR,

    /// "[Accredited Land Consultant / ALC](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243975)": Accredited Land Consultants (ALCs) are the most trusted, knowledgeable, experienced, and highest-producing experts in all segments of land. Conferred by the REALTORS® Land Institute, the designation requires successful completion of a rigorous LANDU education program, a specific, high-volume and experience level, and adherence to an honorable Code of Conduct. https://www.nar.realtor/designations-and-certifications/alc
    AccreditedLandConsultantALC,

    /// "[At Home With Diversity / AHWD](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243976)": Learn to work effectively with – and within – today’s diverse real estate market. The At Home With Diversity certification teaches you how to conduct your business with sensitivity to all client profiles and build a business plan to successfully serve them.  https://www.nar.realtor/designations-and-certifications/ahwd
    AtHomeWithDiversityAHWD,

    /// "[Certified Commercial Investment Member / CCIM](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243977)": The Certified Commercial Investment Member (CCIM) designation is commercial real estate’s global standard for professional achievement, earned through an extensive curriculum of 200 classroom hours and professional experiential requirements. https://www.nar.realtor/designations-and-certifications/ccim
    CertifiedCommercialInvestmentMemberCCIM,

    /// "[Certified Distressed Property Expert / CDPE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243978)": A Certified Distressed Property Expert® (CDPE) has a thorough understanding of complex issues in today’s turbulent real estate industry and knowledge of foreclosure avoidance options available to homeowners. CDPEs can provide solutions, specifically short sales, for homeowners facing market hardships.  http://www.cdpe.com/
    CertifiedDistressedPropertyExpertCDPE,

    /// "[Certified International Property Specialist / CIPS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243979)": The CIPS designation is for REALTORS® from the United States and abroad, as well as association staff and volunteer leaders who wish to develop or grow their international real estate business. It will provide you with the knowledge, research, network, and tools to globalize your business.                        https://www.nar.realtor/designations-and-certifications/cips-designation
    CertifiedInternationalPropertySpecialistCIPS,

    /// "[Certified Property Manager / CPM](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243980)": Certified Property Managers® (CPM®) are recognized as experts in real estate management, and they are at the top of the profession. 70% of those who hold the CPM® designation hold the highest management positions in their offices (owner/partner/officer/director). https://www.nar.realtor/designations-and-certifications/cpm
    CertifiedPropertyManagerCPM,

    /// "[Certified Real Estate Brokerage Manager / CRB](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243981)": The Certified Real Estate Brokerage Manager (CRB) Designation raises professional standards, strengthens individual and office performance, and indicates expertise in brokerage management. This designation represents the highest level of professional achievement in real estate brokerage management. You do not need a broker's license to earn the CRB Designation.  https://www.nar.realtor/designations-and-certifications/crb
    CertifiedRealEstateBrokerageManagerCRB,

    /// "[Certified Real Estate Team Specialist / C-RETS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243982)": The Certified Real Estate Team Specialist certification is designed to improve team development, individual leadership skills, and financial performance. The courses provide the tools, strategies, and knowledge that are required of today’s real estate professionals who are either considering or currently operating in a team environment. It is for team leaders, team members, those looking to start a team, and those who simply want to sharpen their management skills.  https://www.nar.realtor/designations-and-certifications/c-rets
    CertifiedRealEstateTeamSpecialistCRETS,

    /// "[Certified Residential Specialist / CRS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243983)": Certified Residential Specialist (CRS) is the highest credential awarded to residential sales agents, managers and brokers.  https://www.nar.realtor/designations-and-certifications/crs
    CertifiedResidentialSpecialistCRS,

    /// "[Counselor of Real Estate / CRE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243984)": The Counselors of Real Estate®  is an international group of recognized professionals who provide seasoned, expert, objective advice on real property and land-related matters. Only 1,100 practitioners throughout the world carry the CRE® designation. Membership is by invitation only.  https://www.nar.realtor/designations-and-certifications/cre
    CounselorofRealEstateCRE,

    /// "[e-PRO](https://ddwiki.reso.org/display/DDW17/e-PRO)": NAR's e-PRO® certification  teaches you to use cutting-edge technologies and digital initiatives to link up with today's savvy real estate consumer.  https://www.nar.realtor/designations-and-certifications/e-pro
    EPRO,

    /// "[General Accredited Appraiser / GAA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243986)": For general appraisers, this designation is awarded to those whose education and experience exceed state appraisal certification requirements and is supported by the National Association of REALTORS®. https://www.nar.realtor/designations-and-certifications/gaa
    GeneralAccreditedAppraiserGAA,

    /// "[Graduate, REALTOR Institute / GRI](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243987)": REALTORS® with the GRI designation have in-depth training in legal and regulatory issues, technology, professional standards, and the sales process. Earning the designation is a way to stand out to prospective buyers and sellers as a professional with expertise in these areas.  https://www.nar.realtor/designations-and-certifications/gri
    GraduateREALTORInstituteGRI,

    /// "[Military Relocation Professional / MRP](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243988)": NAR's Military Relocation Professional certification focuses on educating real estate professionals about working with current and former military service members to find housing solutions that best suit their needs and take full advantage of military benefits and support.  https://www.nar.realtor/designations-and-certifications/mrp
    MilitaryRelocationProfessionalMRP,

    /// "[NAR's Green Designation / GREEN](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243989)": Through NAR's Green Designation, the Green Resource Council provides ongoing education, resources and tools to help real estate practitioners find, understand, and market properties with green features.  https://www.nar.realtor/designations-and-certifications/green
    NARsGreenDesignationGREEN,

    /// "[Performance Management Network / PMN](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243990)": This designation is unique to the REALTOR® family designations, emphasizing that in order to enhance your business, you must enhance yourself. It focuses on negotiating strategies and tactics, networking and referrals, business planning and systems, personal performance management and  leadership development.  https://www.nar.realtor/designations-and-certifications/pmn
    PerformanceManagementNetworkPMN,

    /// "[Pricing Strategy Advisor / PSA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243991)": Enhance your skills in pricing properties, creating CMAs, working with appraisers, and guiding clients through the anxieties and misperceptions they often have about home values with NAR’s PSA (Pricing Strategy Advisor) certification. https://www.nar.realtor/designations-and-certifications/psa
    PricingStrategyAdvisorPSA,

    /// "[Real Estate Negotiation Expert / RENE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243992)": This certification is for real estate professionals who want to sharpen their negotiation skills. The RENE certification program gives REALTORS® the tips and tools they need to be skillful advocates for their clients.  https://www.nar.realtor/designations-and-certifications/rene
    RealEstateNegotiationExpertRENE,

    /// "[REALTOR Association Certified Executive / RCE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243993)": RCE is the only professional designation designed specifically for REALTOR® association executives. RCE designees exemplify goal-oriented AEs with drive, experience and commitment to professional growth.  https://www.nar.realtor/designations-and-certifications/rce
    REALTORAssociationCertifiedExecutiveRCE,

    /// "[Residential Accredited Appraiser / RAA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243994)": For residential appraisers, this designation is awarded to those whose education and experience exceed state appraisal certification requirements and is supported by the National Association of REALTORS®.  https://www.nar.realtor/designations-and-certifications/raa
    ResidentialAccreditedAppraiserRAA,

    /// "[Resort & Second-Home Property Specialist / RSPS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243995)": This certification is designed for REALTORS® who facilitate the buying, selling, or management of properties for investment, development, retirement, or second homes in a resort, recreational and/or vacation destination are involved in this market niche.  https://www.nar.realtor/designations-and-certifications/rsps
    ResortSecondHomePropertySpecialistRSPS,

    /// "[Seller Representative Specialist / SRS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243996)": The Seller Representative Specialist (SRS) designation is the premier credential in seller representation. It is designed to elevate professional standards and enhance personal performance. The designation is awarded to real estate practitioners by the Real Estate Business Institute (REBI) who meet specific educational and practical experience criteria.  https://www.nar.realtor/designations-and-certifications/seller-representative-specialist-srs
    SellerRepresentativeSpecialistSRS,

    /// "[Seniors Real Estate Specialist / SRES](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243997)": The SRES® Designation program educates REALTORS® on how to profitably and ethically serve the real estate needs of the fastest growing market in real estate, clients age 50+. By earning the SRES® designation, you gain access to valuable member benefits, useful resources, and networking opportunities across the U.S. and Canada to help you in your business.  https://www.nar.realtor/designations-and-certifications/sres
    SeniorsRealEstateSpecialistSRES,

    /// "[Short Sales & Foreclosure Resource / SFR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243998)": The SFR® certification  teaches real estate professionals to work with distressed sellers and the finance, tax, and legal professionals who can help them, qualify sellers for short sales, develop a short sale package, negotiate with lenders, safeguard your commission, limit risk, and protect buyers.  https://www.nar.realtor/designations-and-certifications/sfr
    ShortSalesForeclosureResourceSFR,

    /// "[Society of Industrial and Office REALTORS / SIOR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243999)": The SIOR designation is held by only the most knowledgeable, experienced, and successful commercial real estate brokerage specialists. To earn it, designees must meet standards of experience, production, education, ethics, and provide recommendations.  https://www.nar.realtor/designations-and-certifications/sior
    SocietyofIndustrialandOfficeREALTORSSIOR,

    /// "[Transnational Referral Certification / TRC](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244000)": Real estate professionals who have taken the Transnational Referral Certified (TRC) training, have completed special training on  making and receiving client referrals from professionals in other countries. https://worldproperties.com/about-us/international-referrals-and-trc/
    TransnationalReferralCertificationTRC,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for BuyerAgentDesignation {
    fn from(s: String) -> BuyerAgentDesignation {
        match s.as_ref() {
            "Accredited Buyer's Representative / ABR" => {
                BuyerAgentDesignation::AccreditedBuyersRepresentativeABR
            }

            "Accredited Land Consultant / ALC" => {
                BuyerAgentDesignation::AccreditedLandConsultantALC
            }

            "At Home With Diversity / AHWD" => BuyerAgentDesignation::AtHomeWithDiversityAHWD,

            "Certified Commercial Investment Member / CCIM" => {
                BuyerAgentDesignation::CertifiedCommercialInvestmentMemberCCIM
            }

            "Certified Distressed Property Expert / CDPE" => {
                BuyerAgentDesignation::CertifiedDistressedPropertyExpertCDPE
            }

            "Certified International Property Specialist / CIPS" => {
                BuyerAgentDesignation::CertifiedInternationalPropertySpecialistCIPS
            }

            "Certified Property Manager / CPM" => {
                BuyerAgentDesignation::CertifiedPropertyManagerCPM
            }

            "Certified Real Estate Brokerage Manager / CRB" => {
                BuyerAgentDesignation::CertifiedRealEstateBrokerageManagerCRB
            }

            "Certified Real Estate Team Specialist / C-RETS" => {
                BuyerAgentDesignation::CertifiedRealEstateTeamSpecialistCRETS
            }

            "Certified Residential Specialist / CRS" => {
                BuyerAgentDesignation::CertifiedResidentialSpecialistCRS
            }

            "Counselor of Real Estate / CRE" => BuyerAgentDesignation::CounselorofRealEstateCRE,

            "e-PRO" => BuyerAgentDesignation::EPRO,

            "General Accredited Appraiser / GAA" => {
                BuyerAgentDesignation::GeneralAccreditedAppraiserGAA
            }

            "Graduate, REALTOR Institute / GRI" => {
                BuyerAgentDesignation::GraduateREALTORInstituteGRI
            }

            "Military Relocation Professional / MRP" => {
                BuyerAgentDesignation::MilitaryRelocationProfessionalMRP
            }

            "NAR's Green Designation / GREEN" => BuyerAgentDesignation::NARsGreenDesignationGREEN,

            "Performance Management Network / PMN" => {
                BuyerAgentDesignation::PerformanceManagementNetworkPMN
            }

            "Pricing Strategy Advisor / PSA" => BuyerAgentDesignation::PricingStrategyAdvisorPSA,

            "Real Estate Negotiation Expert / RENE" => {
                BuyerAgentDesignation::RealEstateNegotiationExpertRENE
            }

            "REALTOR Association Certified Executive / RCE" => {
                BuyerAgentDesignation::REALTORAssociationCertifiedExecutiveRCE
            }

            "Residential Accredited Appraiser / RAA" => {
                BuyerAgentDesignation::ResidentialAccreditedAppraiserRAA
            }

            "Resort & Second-Home Property Specialist / RSPS" => {
                BuyerAgentDesignation::ResortSecondHomePropertySpecialistRSPS
            }

            "Seller Representative Specialist / SRS" => {
                BuyerAgentDesignation::SellerRepresentativeSpecialistSRS
            }

            "Seniors Real Estate Specialist / SRES" => {
                BuyerAgentDesignation::SeniorsRealEstateSpecialistSRES
            }

            "Short Sales & Foreclosure Resource / SFR" => {
                BuyerAgentDesignation::ShortSalesForeclosureResourceSFR
            }

            "Society of Industrial and Office REALTORS / SIOR" => {
                BuyerAgentDesignation::SocietyofIndustrialandOfficeREALTORSSIOR
            }

            "Transnational Referral Certification / TRC" => {
                BuyerAgentDesignation::TransnationalReferralCertificationTRC
            }

            _ => BuyerAgentDesignation::OpenEnumeration(s),
        }
    }
}

impl From<&str> for BuyerAgentDesignation {
    fn from(s: &str) -> BuyerAgentDesignation {
        match s {
            "Accredited Buyer's Representative / ABR" => {
                BuyerAgentDesignation::AccreditedBuyersRepresentativeABR
            }

            "Accredited Land Consultant / ALC" => {
                BuyerAgentDesignation::AccreditedLandConsultantALC
            }

            "At Home With Diversity / AHWD" => BuyerAgentDesignation::AtHomeWithDiversityAHWD,

            "Certified Commercial Investment Member / CCIM" => {
                BuyerAgentDesignation::CertifiedCommercialInvestmentMemberCCIM
            }

            "Certified Distressed Property Expert / CDPE" => {
                BuyerAgentDesignation::CertifiedDistressedPropertyExpertCDPE
            }

            "Certified International Property Specialist / CIPS" => {
                BuyerAgentDesignation::CertifiedInternationalPropertySpecialistCIPS
            }

            "Certified Property Manager / CPM" => {
                BuyerAgentDesignation::CertifiedPropertyManagerCPM
            }

            "Certified Real Estate Brokerage Manager / CRB" => {
                BuyerAgentDesignation::CertifiedRealEstateBrokerageManagerCRB
            }

            "Certified Real Estate Team Specialist / C-RETS" => {
                BuyerAgentDesignation::CertifiedRealEstateTeamSpecialistCRETS
            }

            "Certified Residential Specialist / CRS" => {
                BuyerAgentDesignation::CertifiedResidentialSpecialistCRS
            }

            "Counselor of Real Estate / CRE" => BuyerAgentDesignation::CounselorofRealEstateCRE,

            "e-PRO" => BuyerAgentDesignation::EPRO,

            "General Accredited Appraiser / GAA" => {
                BuyerAgentDesignation::GeneralAccreditedAppraiserGAA
            }

            "Graduate, REALTOR Institute / GRI" => {
                BuyerAgentDesignation::GraduateREALTORInstituteGRI
            }

            "Military Relocation Professional / MRP" => {
                BuyerAgentDesignation::MilitaryRelocationProfessionalMRP
            }

            "NAR's Green Designation / GREEN" => BuyerAgentDesignation::NARsGreenDesignationGREEN,

            "Performance Management Network / PMN" => {
                BuyerAgentDesignation::PerformanceManagementNetworkPMN
            }

            "Pricing Strategy Advisor / PSA" => BuyerAgentDesignation::PricingStrategyAdvisorPSA,

            "Real Estate Negotiation Expert / RENE" => {
                BuyerAgentDesignation::RealEstateNegotiationExpertRENE
            }

            "REALTOR Association Certified Executive / RCE" => {
                BuyerAgentDesignation::REALTORAssociationCertifiedExecutiveRCE
            }

            "Residential Accredited Appraiser / RAA" => {
                BuyerAgentDesignation::ResidentialAccreditedAppraiserRAA
            }

            "Resort & Second-Home Property Specialist / RSPS" => {
                BuyerAgentDesignation::ResortSecondHomePropertySpecialistRSPS
            }

            "Seller Representative Specialist / SRS" => {
                BuyerAgentDesignation::SellerRepresentativeSpecialistSRS
            }

            "Seniors Real Estate Specialist / SRES" => {
                BuyerAgentDesignation::SeniorsRealEstateSpecialistSRES
            }

            "Short Sales & Foreclosure Resource / SFR" => {
                BuyerAgentDesignation::ShortSalesForeclosureResourceSFR
            }

            "Society of Industrial and Office REALTORS / SIOR" => {
                BuyerAgentDesignation::SocietyofIndustrialandOfficeREALTORSSIOR
            }

            "Transnational Referral Certification / TRC" => {
                BuyerAgentDesignation::TransnationalReferralCertificationTRC
            }

            _ => BuyerAgentDesignation::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a BuyerAgentDesignation> for &'a str {
    fn from(s: &'a BuyerAgentDesignation) -> &'a str {
        match s {
            BuyerAgentDesignation::AccreditedBuyersRepresentativeABR => {
                "Accredited Buyer's Representative / ABR"
            }

            BuyerAgentDesignation::AccreditedLandConsultantALC => {
                "Accredited Land Consultant / ALC"
            }

            BuyerAgentDesignation::AtHomeWithDiversityAHWD => "At Home With Diversity / AHWD",

            BuyerAgentDesignation::CertifiedCommercialInvestmentMemberCCIM => {
                "Certified Commercial Investment Member / CCIM"
            }

            BuyerAgentDesignation::CertifiedDistressedPropertyExpertCDPE => {
                "Certified Distressed Property Expert / CDPE"
            }

            BuyerAgentDesignation::CertifiedInternationalPropertySpecialistCIPS => {
                "Certified International Property Specialist / CIPS"
            }

            BuyerAgentDesignation::CertifiedPropertyManagerCPM => {
                "Certified Property Manager / CPM"
            }

            BuyerAgentDesignation::CertifiedRealEstateBrokerageManagerCRB => {
                "Certified Real Estate Brokerage Manager / CRB"
            }

            BuyerAgentDesignation::CertifiedRealEstateTeamSpecialistCRETS => {
                "Certified Real Estate Team Specialist / C-RETS"
            }

            BuyerAgentDesignation::CertifiedResidentialSpecialistCRS => {
                "Certified Residential Specialist / CRS"
            }

            BuyerAgentDesignation::CounselorofRealEstateCRE => "Counselor of Real Estate / CRE",

            BuyerAgentDesignation::EPRO => "e-PRO",

            BuyerAgentDesignation::GeneralAccreditedAppraiserGAA => {
                "General Accredited Appraiser / GAA"
            }

            BuyerAgentDesignation::GraduateREALTORInstituteGRI => {
                "Graduate, REALTOR Institute / GRI"
            }

            BuyerAgentDesignation::MilitaryRelocationProfessionalMRP => {
                "Military Relocation Professional / MRP"
            }

            BuyerAgentDesignation::NARsGreenDesignationGREEN => "NAR's Green Designation / GREEN",

            BuyerAgentDesignation::PerformanceManagementNetworkPMN => {
                "Performance Management Network / PMN"
            }

            BuyerAgentDesignation::PricingStrategyAdvisorPSA => "Pricing Strategy Advisor / PSA",

            BuyerAgentDesignation::RealEstateNegotiationExpertRENE => {
                "Real Estate Negotiation Expert / RENE"
            }

            BuyerAgentDesignation::REALTORAssociationCertifiedExecutiveRCE => {
                "REALTOR Association Certified Executive / RCE"
            }

            BuyerAgentDesignation::ResidentialAccreditedAppraiserRAA => {
                "Residential Accredited Appraiser / RAA"
            }

            BuyerAgentDesignation::ResortSecondHomePropertySpecialistRSPS => {
                "Resort & Second-Home Property Specialist / RSPS"
            }

            BuyerAgentDesignation::SellerRepresentativeSpecialistSRS => {
                "Seller Representative Specialist / SRS"
            }

            BuyerAgentDesignation::SeniorsRealEstateSpecialistSRES => {
                "Seniors Real Estate Specialist / SRES"
            }

            BuyerAgentDesignation::ShortSalesForeclosureResourceSFR => {
                "Short Sales & Foreclosure Resource / SFR"
            }

            BuyerAgentDesignation::SocietyofIndustrialandOfficeREALTORSSIOR => {
                "Society of Industrial and Office REALTORS / SIOR"
            }

            BuyerAgentDesignation::TransnationalReferralCertificationTRC => {
                "Transnational Referral Certification / TRC"
            }

            BuyerAgentDesignation::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for BuyerAgentDesignation {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for BuyerAgentDesignation {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_buyer_agent_designation_format {
    use super::BuyerAgentDesignation;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<BuyerAgentDesignation>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<BuyerAgentDesignation>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [BuyerFinancing Lookups](https://ddwiki.reso.org/display/DDW17/BuyerFinancing+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum BuyerFinancing {
    /// "[Assumed](https://ddwiki.reso.org/display/DDW17/Assumed)": The buyer assumed a current form of financing.
    Assumed,

    /// "[Cash](https://ddwiki.reso.org/display/DDW17/Cash)": The buyer paid cash for the property.
    Cash,

    /// "[Contract](https://ddwiki.reso.org/display/DDW17/Contract)": The purchase of a property involves an agreement to perform services, provide product, share of income, or some other agreement as the method of payment for the property.
    Contract,

    /// "[Conventional](https://ddwiki.reso.org/display/DDW17/Conventional)": The buyer is using conventional financing to purchase the home.
    Conventional,

    /// "[FHA](https://ddwiki.reso.org/display/DDW17/FHA)": A loan from an approved provider that follows the guidelines of, and is insured by, the Federal Housing Administration.
    FHA,

    /// "[FHA 203(b)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243965)": The basic home mortgage loan from an approved provider that follows the guidelines of, and is insured by, the Federal Housing Administration.
    FHA203b,

    /// "[FHA 203(k)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243966)": A loan, for the rehabilitation and repair of single family residence, from an approved provider that follows the guidelines of, and is insured by, the Federal Housing Administration.
    FHA203k,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29243967)": The buyer is using another form of financing that is not included in the options provided in this list.
    Other,

    /// "[Private](https://ddwiki.reso.org/display/DDW17/Private)": Financing is provided by a private party.
    Private,

    /// "[Seller Financing](https://ddwiki.reso.org/display/DDW17/Seller+Financing)": The seller is providing financing to the buyer.
    SellerFinancing,

    /// "[Trust Deed](https://ddwiki.reso.org/display/DDW17/Trust+Deed)": Financing where title of the property is placed with a trustee who secures payment of the loan for a beneficiary.
    TrustDeed,

    /// "[USDA](https://ddwiki.reso.org/display/DDW17/USDA)": A loan from an approved provider that follows the guidelines of, and is insured by, the US Department of Agriculture.
    USDA,

    /// "[VA](https://ddwiki.reso.org/display/DDW17/VA)": A loan from an approved provider that follows the guidelines of, and is insured by, the US Department of Veteran's Affairs.
    VA,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for BuyerFinancing {
    fn from(s: String) -> BuyerFinancing {
        match s.as_ref() {
            "Assumed" => BuyerFinancing::Assumed,

            "Cash" => BuyerFinancing::Cash,

            "Contract" => BuyerFinancing::Contract,

            "Conventional" => BuyerFinancing::Conventional,

            "FHA" => BuyerFinancing::FHA,

            "FHA 203(b)" => BuyerFinancing::FHA203b,

            "FHA 203(k)" => BuyerFinancing::FHA203k,

            "Other" => BuyerFinancing::Other,

            "Private" => BuyerFinancing::Private,

            "Seller Financing" => BuyerFinancing::SellerFinancing,

            "Trust Deed" => BuyerFinancing::TrustDeed,

            "USDA" => BuyerFinancing::USDA,

            "VA" => BuyerFinancing::VA,

            _ => BuyerFinancing::OpenEnumeration(s),
        }
    }
}

impl From<&str> for BuyerFinancing {
    fn from(s: &str) -> BuyerFinancing {
        match s {
            "Assumed" => BuyerFinancing::Assumed,

            "Cash" => BuyerFinancing::Cash,

            "Contract" => BuyerFinancing::Contract,

            "Conventional" => BuyerFinancing::Conventional,

            "FHA" => BuyerFinancing::FHA,

            "FHA 203(b)" => BuyerFinancing::FHA203b,

            "FHA 203(k)" => BuyerFinancing::FHA203k,

            "Other" => BuyerFinancing::Other,

            "Private" => BuyerFinancing::Private,

            "Seller Financing" => BuyerFinancing::SellerFinancing,

            "Trust Deed" => BuyerFinancing::TrustDeed,

            "USDA" => BuyerFinancing::USDA,

            "VA" => BuyerFinancing::VA,

            _ => BuyerFinancing::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a BuyerFinancing> for &'a str {
    fn from(s: &'a BuyerFinancing) -> &'a str {
        match s {
            BuyerFinancing::Assumed => "Assumed",

            BuyerFinancing::Cash => "Cash",

            BuyerFinancing::Contract => "Contract",

            BuyerFinancing::Conventional => "Conventional",

            BuyerFinancing::FHA => "FHA",

            BuyerFinancing::FHA203b => "FHA 203(b)",

            BuyerFinancing::FHA203k => "FHA 203(k)",

            BuyerFinancing::Other => "Other",

            BuyerFinancing::Private => "Private",

            BuyerFinancing::SellerFinancing => "Seller Financing",

            BuyerFinancing::TrustDeed => "Trust Deed",

            BuyerFinancing::USDA => "USDA",

            BuyerFinancing::VA => "VA",

            BuyerFinancing::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for BuyerFinancing {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for BuyerFinancing {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_buyer_financing_format {
    use super::BuyerFinancing;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<BuyerFinancing>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<BuyerFinancing>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ChangeType Lookups](https://ddwiki.reso.org/display/DDW17/ChangeType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ChangeType {
    /// "[Active](https://ddwiki.reso.org/display/DDW17/Active)": The change to the listing was a change of status to Active provided the measurement of the area.
    Active,

    /// "[Active Under Contract](https://ddwiki.reso.org/display/DDW17/Active+Under+Contract)": The change to the listing was a change of status to Active Under Contract provided the measurement of the area.
    ActiveUnderContract,

    /// "[Back On Market](https://ddwiki.reso.org/display/DDW17/Back+On+Market)": The change to the listing was a change of status to Back On Market provided the measurement of the area.
    BackOnMarket,

    /// "[Canceled](https://ddwiki.reso.org/display/DDW17/Canceled)": The change to the listing was a change of status to Canceled provided the measurement of the area.
    Canceled,

    /// "[Closed](https://ddwiki.reso.org/display/DDW17/Closed)": The change to the listing was a change of status to Closed provided the measurement of the area.
    Closed,

    /// "[Deleted](https://ddwiki.reso.org/display/DDW17/Deleted)": The change to the listing was a change of status to Deleted provided the measurement of the area.
    Deleted,

    /// "[Expired](https://ddwiki.reso.org/display/DDW17/Expired)": The change to the listing was a change of status to Expired provided the measurement of the area.
    Expired,

    /// "[Hold](https://ddwiki.reso.org/display/DDW17/Hold)": The change to the listing was a change of status to Hold provided the measurement of the area.
    Hold,

    /// "[New Listing](https://ddwiki.reso.org/display/DDW17/New+Listing)": The listing is new and hasn't had any status or price changes since its original input.
    NewListing,

    /// "[Pending](https://ddwiki.reso.org/display/DDW17/Pending)": The change to the listing was a change of status to Pending provided the measurement of the area.
    Pending,

    /// "[Price Change](https://ddwiki.reso.org/display/DDW17/Price+Change)": The change to the listing was a change to the ListPrice.
    PriceChange,

    /// "[Withdrawn](https://ddwiki.reso.org/display/DDW17/Withdrawn)": The change to the listing was a change of status to Withdrawn provided the measurement of the area.
    Withdrawn,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ChangeType {
    fn from(s: String) -> ChangeType {
        match s.as_ref() {
            "Active" => ChangeType::Active,

            "Active Under Contract" => ChangeType::ActiveUnderContract,

            "Back On Market" => ChangeType::BackOnMarket,

            "Canceled" => ChangeType::Canceled,

            "Closed" => ChangeType::Closed,

            "Deleted" => ChangeType::Deleted,

            "Expired" => ChangeType::Expired,

            "Hold" => ChangeType::Hold,

            "New Listing" => ChangeType::NewListing,

            "Pending" => ChangeType::Pending,

            "Price Change" => ChangeType::PriceChange,

            "Withdrawn" => ChangeType::Withdrawn,

            _ => ChangeType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ChangeType {
    fn from(s: &str) -> ChangeType {
        match s {
            "Active" => ChangeType::Active,

            "Active Under Contract" => ChangeType::ActiveUnderContract,

            "Back On Market" => ChangeType::BackOnMarket,

            "Canceled" => ChangeType::Canceled,

            "Closed" => ChangeType::Closed,

            "Deleted" => ChangeType::Deleted,

            "Expired" => ChangeType::Expired,

            "Hold" => ChangeType::Hold,

            "New Listing" => ChangeType::NewListing,

            "Pending" => ChangeType::Pending,

            "Price Change" => ChangeType::PriceChange,

            "Withdrawn" => ChangeType::Withdrawn,

            _ => ChangeType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ChangeType> for &'a str {
    fn from(s: &'a ChangeType) -> &'a str {
        match s {
            ChangeType::Active => "Active",

            ChangeType::ActiveUnderContract => "Active Under Contract",

            ChangeType::BackOnMarket => "Back On Market",

            ChangeType::Canceled => "Canceled",

            ChangeType::Closed => "Closed",

            ChangeType::Deleted => "Deleted",

            ChangeType::Expired => "Expired",

            ChangeType::Hold => "Hold",

            ChangeType::NewListing => "New Listing",

            ChangeType::Pending => "Pending",

            ChangeType::PriceChange => "Price Change",

            ChangeType::Withdrawn => "Withdrawn",

            ChangeType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ChangeType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ChangeType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_change_type_format {
    use super::ChangeType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ChangeType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<ChangeType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ClassName Lookups](https://ddwiki.reso.org/display/DDW17/ClassName+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ClassName {
    /// "[Business Opportunity](https://ddwiki.reso.org/display/DDW17/Business+Opportunity)": The class, sometimes known as property type, is a business for sale.
    BusinessOpportunity,

    /// "[Commercial Lease](https://ddwiki.reso.org/display/DDW17/Commercial+Lease)": The class, sometimes known as property type, is a commercial property for lease.
    CommercialLease,

    /// "[Commercial Sale](https://ddwiki.reso.org/display/DDW17/Commercial+Sale)": The class, sometimes known as property type, is a commercial property for sale.
    CommercialSale,

    /// "[Contacts](https://ddwiki.reso.org/display/DDW17/Contacts)": The class is the collection of the member's contacts/clients.
    Contacts,

    /// "[Cross Property](https://ddwiki.reso.org/display/DDW17/Cross+Property)": The class, sometimes known as property type, is a collection of all listing property types.
    CrossProperty,

    /// "[Farm](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244043)": The class, sometimes known as property type, is a farm.
    Farm,

    /// "[History Transactional](https://ddwiki.reso.org/display/DDW17/History+Transactional)": The class is the transactional history of another class.
    HistoryTransactional,

    /// "[Land](https://ddwiki.reso.org/display/DDW17/Land)": The class, sometimes known as property type, is land for sale or lease.
    Land,

    /// "[Manufactured In Park](https://ddwiki.reso.org/display/DDW17/Manufactured+In+Park)": The class, sometimes known as property type, is a manufactured or mobile home in a mobile park.
    ManufacturedInPark,

    /// "[Media](https://ddwiki.reso.org/display/DDW17/Media)": The class is one that contains records referencing media files.
    Media,

    /// "[Member](https://ddwiki.reso.org/display/DDW17/Member)": The class containing member records.
    Member,

    /// "[Office](https://ddwiki.reso.org/display/DDW17/Office)": The class containing office records.
    Office,

    /// "[Open House](https://ddwiki.reso.org/display/DDW17/Open+House)": The class containing Open House records.
    OpenHouse,

    /// "[Residential](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244051)": The class, sometimes known as property type, is residential property for sale.
    Residential,

    /// "[Residential Income](https://ddwiki.reso.org/display/DDW17/Residential+Income)": The class, sometimes known as property type, is income or multi-family property for sale.
    ResidentialIncome,

    /// "[Residential Lease](https://ddwiki.reso.org/display/DDW17/Residential+Lease)": The class, sometimes known as property type, is residential property for lease.
    ResidentialLease,

    /// "[Saved Search](https://ddwiki.reso.org/display/DDW17/Saved+Search)": The class containing saved search data.
    SavedSearch,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ClassName {
    fn from(s: String) -> ClassName {
        match s.as_ref() {
            "Business Opportunity" => ClassName::BusinessOpportunity,

            "Commercial Lease" => ClassName::CommercialLease,

            "Commercial Sale" => ClassName::CommercialSale,

            "Contacts" => ClassName::Contacts,

            "Cross Property" => ClassName::CrossProperty,

            "Farm" => ClassName::Farm,

            "History Transactional" => ClassName::HistoryTransactional,

            "Land" => ClassName::Land,

            "Manufactured In Park" => ClassName::ManufacturedInPark,

            "Media" => ClassName::Media,

            "Member" => ClassName::Member,

            "Office" => ClassName::Office,

            "Open House" => ClassName::OpenHouse,

            "Residential" => ClassName::Residential,

            "Residential Income" => ClassName::ResidentialIncome,

            "Residential Lease" => ClassName::ResidentialLease,

            "Saved Search" => ClassName::SavedSearch,

            _ => ClassName::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ClassName {
    fn from(s: &str) -> ClassName {
        match s {
            "Business Opportunity" => ClassName::BusinessOpportunity,

            "Commercial Lease" => ClassName::CommercialLease,

            "Commercial Sale" => ClassName::CommercialSale,

            "Contacts" => ClassName::Contacts,

            "Cross Property" => ClassName::CrossProperty,

            "Farm" => ClassName::Farm,

            "History Transactional" => ClassName::HistoryTransactional,

            "Land" => ClassName::Land,

            "Manufactured In Park" => ClassName::ManufacturedInPark,

            "Media" => ClassName::Media,

            "Member" => ClassName::Member,

            "Office" => ClassName::Office,

            "Open House" => ClassName::OpenHouse,

            "Residential" => ClassName::Residential,

            "Residential Income" => ClassName::ResidentialIncome,

            "Residential Lease" => ClassName::ResidentialLease,

            "Saved Search" => ClassName::SavedSearch,

            _ => ClassName::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ClassName> for &'a str {
    fn from(s: &'a ClassName) -> &'a str {
        match s {
            ClassName::BusinessOpportunity => "Business Opportunity",

            ClassName::CommercialLease => "Commercial Lease",

            ClassName::CommercialSale => "Commercial Sale",

            ClassName::Contacts => "Contacts",

            ClassName::CrossProperty => "Cross Property",

            ClassName::Farm => "Farm",

            ClassName::HistoryTransactional => "History Transactional",

            ClassName::Land => "Land",

            ClassName::ManufacturedInPark => "Manufactured In Park",

            ClassName::Media => "Media",

            ClassName::Member => "Member",

            ClassName::Office => "Office",

            ClassName::OpenHouse => "Open House",

            ClassName::Residential => "Residential",

            ClassName::ResidentialIncome => "Residential Income",

            ClassName::ResidentialLease => "Residential Lease",

            ClassName::SavedSearch => "Saved Search",

            ClassName::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ClassName {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ClassName {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_class_name_format {
    use super::ClassName;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ClassName>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<ClassName>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [CoBuyerAgentDesignation Lookups](https://ddwiki.reso.org/display/DDW17/CoBuyerAgentDesignation+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum CoBuyerAgentDesignation {
    /// "[Accredited Buyer's Representative / ABR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244408)": The Accredited Buyer’s Representative (ABR®) designation is designed for real estate buyer agents who focus on working directly with buyer-clients.  http://www.rebac.net/abr
    AccreditedBuyersRepresentativeABR,

    /// "[Accredited Land Consultant / ALC](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244409)": Accredited Land Consultants (ALCs) are the most trusted, knowledgeable, experienced, and highest-producing experts in all segments of land. Conferred by the REALTORS® Land Institute, the designation requires successful completion of a rigorous LANDU education program, a specific, high-volume and experience level, and adherence to an honorable Code of Conduct. https://www.nar.realtor/designations-and-certifications/alc
    AccreditedLandConsultantALC,

    /// "[At Home With Diversity / AHWD](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244410)": Learn to work effectively with – and within – today’s diverse real estate market. The At Home With Diversity certification teaches you how to conduct your business with sensitivity to all client profiles and build a business plan to successfully serve them.  https://www.nar.realtor/designations-and-certifications/ahwd
    AtHomeWithDiversityAHWD,

    /// "[Certified Commercial Investment Member / CCIM](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244411)": The Certified Commercial Investment Member (CCIM) designation is commercial real estate’s global standard for professional achievement, earned through an extensive curriculum of 200 classroom hours and professional experiential requirements. https://www.nar.realtor/designations-and-certifications/ccim
    CertifiedCommercialInvestmentMemberCCIM,

    /// "[Certified Distressed Property Expert / CDPE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244412)": A Certified Distressed Property Expert® (CDPE) has a thorough understanding of complex issues in today’s turbulent real estate industry and knowledge of foreclosure avoidance options available to homeowners. CDPEs can provide solutions, specifically short sales, for homeowners facing market hardships.  http://www.cdpe.com/
    CertifiedDistressedPropertyExpertCDPE,

    /// "[Certified International Property Specialist / CIPS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244413)": The CIPS designation is for REALTORS® from the United States and abroad, as well as association staff and volunteer leaders who wish to develop or grow their international real estate business. It will provide you with the knowledge, research, network, and tools to globalize your business.                        https://www.nar.realtor/designations-and-certifications/cips-designation
    CertifiedInternationalPropertySpecialistCIPS,

    /// "[Certified Property Manager / CPM](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244414)": Certified Property Managers® (CPM®) are recognized as experts in real estate management, and they are at the top of the profession. 70% of those who hold the CPM® designation hold the highest management positions in their offices (owner/partner/officer/director). https://www.nar.realtor/designations-and-certifications/cpm
    CertifiedPropertyManagerCPM,

    /// "[Certified Real Estate Brokerage Manager / CRB](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244415)": The Certified Real Estate Brokerage Manager (CRB) Designation raises professional standards, strengthens individual and office performance, and indicates expertise in brokerage management. This designation represents the highest level of professional achievement in real estate brokerage management. You do not need a broker's license to earn the CRB Designation.  https://www.nar.realtor/designations-and-certifications/crb
    CertifiedRealEstateBrokerageManagerCRB,

    /// "[Certified Real Estate Team Specialist / C-RETS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244416)": The Certified Real Estate Team Specialist certification is designed to improve team development, individual leadership skills, and financial performance. The courses provide the tools, strategies, and knowledge that are required of today’s real estate professionals who are either considering or currently operating in a team environment. It is for team leaders, team members, those looking to start a team, and those who simply want to sharpen their management skills.  https://www.nar.realtor/designations-and-certifications/c-rets
    CertifiedRealEstateTeamSpecialistCRETS,

    /// "[Certified Residential Specialist / CRS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244417)": Certified Residential Specialist (CRS) is the highest credential awarded to residential sales agents, managers and brokers.  https://www.nar.realtor/designations-and-certifications/crs
    CertifiedResidentialSpecialistCRS,

    /// "[Counselor of Real Estate / CRE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244418)": The Counselors of Real Estate®  is an international group of recognized professionals who provide seasoned, expert, objective advice on real property and land-related matters. Only 1,100 practitioners throughout the world carry the CRE® designation. Membership is by invitation only.  https://www.nar.realtor/designations-and-certifications/cre
    CounselorofRealEstateCRE,

    /// "[e-PRO](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244419)": NAR's e-PRO® certification  teaches you to use cutting-edge technologies and digital initiatives to link up with today's savvy real estate consumer.  https://www.nar.realtor/designations-and-certifications/e-pro
    EPRO,

    /// "[General Accredited Appraiser / GAA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244420)": For general appraisers, this designation is awarded to those whose education and experience exceed state appraisal certification requirements and is supported by the National Association of REALTORS®. https://www.nar.realtor/designations-and-certifications/gaa
    GeneralAccreditedAppraiserGAA,

    /// "[Graduate, REALTOR Institute / GRI](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244421)": REALTORS® with the GRI designation have in-depth training in legal and regulatory issues, technology, professional standards, and the sales process. Earning the designation is a way to stand out to prospective buyers and sellers as a professional with expertise in these areas.  https://www.nar.realtor/designations-and-certifications/gri
    GraduateREALTORInstituteGRI,

    /// "[Military Relocation Professional / MRP](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244422)": NAR's Military Relocation Professional certification focuses on educating real estate professionals about working with current and former military service members to find housing solutions that best suit their needs and take full advantage of military benefits and support.  https://www.nar.realtor/designations-and-certifications/mrp
    MilitaryRelocationProfessionalMRP,

    /// "[NAR's Green Designation / GREEN](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244423)": Through NAR's Green Designation, the Green Resource Council provides ongoing education, resources and tools to help real estate practitioners find, understand, and market properties with green features.  https://www.nar.realtor/designations-and-certifications/green
    NARsGreenDesignationGREEN,

    /// "[Performance Management Network / PMN](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244424)": This designation is unique to the REALTOR® family designations, emphasizing that in order to enhance your business, you must enhance yourself. It focuses on negotiating strategies and tactics, networking and referrals, business planning and systems, personal performance management and  leadership development.  https://www.nar.realtor/designations-and-certifications/pmn
    PerformanceManagementNetworkPMN,

    /// "[Pricing Strategy Advisor / PSA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244425)": Enhance your skills in pricing properties, creating CMAs, working with appraisers, and guiding clients through the anxieties and misperceptions they often have about home values with NAR’s PSA (Pricing Strategy Advisor) certification. https://www.nar.realtor/designations-and-certifications/psa
    PricingStrategyAdvisorPSA,

    /// "[Real Estate Negotiation Expert / RENE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244426)": This certification is for real estate professionals who want to sharpen their negotiation skills. The RENE certification program gives REALTORS® the tips and tools they need to be skillful advocates for their clients.  https://www.nar.realtor/designations-and-certifications/rene
    RealEstateNegotiationExpertRENE,

    /// "[REALTOR Association Certified Executive / RCE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244427)": RCE is the only professional designation designed specifically for REALTOR® association executives. RCE designees exemplify goal-oriented AEs with drive, experience and commitment to professional growth.  https://www.nar.realtor/designations-and-certifications/rce
    REALTORAssociationCertifiedExecutiveRCE,

    /// "[Residential Accredited Appraiser / RAA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244428)": For residential appraisers, this designation is awarded to those whose education and experience exceed state appraisal certification requirements and is supported by the National Association of REALTORS®.  https://www.nar.realtor/designations-and-certifications/raa
    ResidentialAccreditedAppraiserRAA,

    /// "[Resort & Second-Home Property Specialist / RSPS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244429)": This certification is designed for REALTORS® who facilitate the buying, selling, or management of properties for investment, development, retirement, or second homes in a resort, recreational and/or vacation destination are involved in this market niche.  https://www.nar.realtor/designations-and-certifications/rsps
    ResortSecondHomePropertySpecialistRSPS,

    /// "[Seller Representative Specialist / SRS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244430)": The Seller Representative Specialist (SRS) designation is the premier credential in seller representation. It is designed to elevate professional standards and enhance personal performance. The designation is awarded to real estate practitioners by the Real Estate Business Institute (REBI) who meet specific educational and practical experience criteria.  https://www.nar.realtor/designations-and-certifications/seller-representative-specialist-srs
    SellerRepresentativeSpecialistSRS,

    /// "[Seniors Real Estate Specialist / SRES](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244431)": The SRES® Designation program educates REALTORS® on how to profitably and ethically serve the real estate needs of the fastest growing market in real estate, clients age 50+. By earning the SRES® designation, you gain access to valuable member benefits, useful resources, and networking opportunities across the U.S. and Canada to help you in your business.  https://www.nar.realtor/designations-and-certifications/sres
    SeniorsRealEstateSpecialistSRES,

    /// "[Short Sales & Foreclosure Resource / SFR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244432)": The SFR® certification  teaches real estate professionals to work with distressed sellers and the finance, tax, and legal professionals who can help them, qualify sellers for short sales, develop a short sale package, negotiate with lenders, safeguard your commission, limit risk, and protect buyers.  https://www.nar.realtor/designations-and-certifications/sfr
    ShortSalesForeclosureResourceSFR,

    /// "[Society of Industrial and Office REALTORS / SIOR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244433)": The SIOR designation is held by only the most knowledgeable, experienced, and successful commercial real estate brokerage specialists. To earn it, designees must meet standards of experience, production, education, ethics, and provide recommendations.  https://www.nar.realtor/designations-and-certifications/sior
    SocietyofIndustrialandOfficeREALTORSSIOR,

    /// "[Transnational Referral Certification / TRC](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244434)": Real estate professionals who have taken the Transnational Referral Certified (TRC) training, have completed special training on  making and receiving client referrals from professionals in other countries. https://worldproperties.com/about-us/international-referrals-and-trc/
    TransnationalReferralCertificationTRC,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for CoBuyerAgentDesignation {
    fn from(s: String) -> CoBuyerAgentDesignation {
        match s.as_ref() {
            "Accredited Buyer's Representative / ABR" => {
                CoBuyerAgentDesignation::AccreditedBuyersRepresentativeABR
            }

            "Accredited Land Consultant / ALC" => {
                CoBuyerAgentDesignation::AccreditedLandConsultantALC
            }

            "At Home With Diversity / AHWD" => CoBuyerAgentDesignation::AtHomeWithDiversityAHWD,

            "Certified Commercial Investment Member / CCIM" => {
                CoBuyerAgentDesignation::CertifiedCommercialInvestmentMemberCCIM
            }

            "Certified Distressed Property Expert / CDPE" => {
                CoBuyerAgentDesignation::CertifiedDistressedPropertyExpertCDPE
            }

            "Certified International Property Specialist / CIPS" => {
                CoBuyerAgentDesignation::CertifiedInternationalPropertySpecialistCIPS
            }

            "Certified Property Manager / CPM" => {
                CoBuyerAgentDesignation::CertifiedPropertyManagerCPM
            }

            "Certified Real Estate Brokerage Manager / CRB" => {
                CoBuyerAgentDesignation::CertifiedRealEstateBrokerageManagerCRB
            }

            "Certified Real Estate Team Specialist / C-RETS" => {
                CoBuyerAgentDesignation::CertifiedRealEstateTeamSpecialistCRETS
            }

            "Certified Residential Specialist / CRS" => {
                CoBuyerAgentDesignation::CertifiedResidentialSpecialistCRS
            }

            "Counselor of Real Estate / CRE" => CoBuyerAgentDesignation::CounselorofRealEstateCRE,

            "e-PRO" => CoBuyerAgentDesignation::EPRO,

            "General Accredited Appraiser / GAA" => {
                CoBuyerAgentDesignation::GeneralAccreditedAppraiserGAA
            }

            "Graduate, REALTOR Institute / GRI" => {
                CoBuyerAgentDesignation::GraduateREALTORInstituteGRI
            }

            "Military Relocation Professional / MRP" => {
                CoBuyerAgentDesignation::MilitaryRelocationProfessionalMRP
            }

            "NAR's Green Designation / GREEN" => CoBuyerAgentDesignation::NARsGreenDesignationGREEN,

            "Performance Management Network / PMN" => {
                CoBuyerAgentDesignation::PerformanceManagementNetworkPMN
            }

            "Pricing Strategy Advisor / PSA" => CoBuyerAgentDesignation::PricingStrategyAdvisorPSA,

            "Real Estate Negotiation Expert / RENE" => {
                CoBuyerAgentDesignation::RealEstateNegotiationExpertRENE
            }

            "REALTOR Association Certified Executive / RCE" => {
                CoBuyerAgentDesignation::REALTORAssociationCertifiedExecutiveRCE
            }

            "Residential Accredited Appraiser / RAA" => {
                CoBuyerAgentDesignation::ResidentialAccreditedAppraiserRAA
            }

            "Resort & Second-Home Property Specialist / RSPS" => {
                CoBuyerAgentDesignation::ResortSecondHomePropertySpecialistRSPS
            }

            "Seller Representative Specialist / SRS" => {
                CoBuyerAgentDesignation::SellerRepresentativeSpecialistSRS
            }

            "Seniors Real Estate Specialist / SRES" => {
                CoBuyerAgentDesignation::SeniorsRealEstateSpecialistSRES
            }

            "Short Sales & Foreclosure Resource / SFR" => {
                CoBuyerAgentDesignation::ShortSalesForeclosureResourceSFR
            }

            "Society of Industrial and Office REALTORS / SIOR" => {
                CoBuyerAgentDesignation::SocietyofIndustrialandOfficeREALTORSSIOR
            }

            "Transnational Referral Certification / TRC" => {
                CoBuyerAgentDesignation::TransnationalReferralCertificationTRC
            }

            _ => CoBuyerAgentDesignation::OpenEnumeration(s),
        }
    }
}

impl From<&str> for CoBuyerAgentDesignation {
    fn from(s: &str) -> CoBuyerAgentDesignation {
        match s {
            "Accredited Buyer's Representative / ABR" => {
                CoBuyerAgentDesignation::AccreditedBuyersRepresentativeABR
            }

            "Accredited Land Consultant / ALC" => {
                CoBuyerAgentDesignation::AccreditedLandConsultantALC
            }

            "At Home With Diversity / AHWD" => CoBuyerAgentDesignation::AtHomeWithDiversityAHWD,

            "Certified Commercial Investment Member / CCIM" => {
                CoBuyerAgentDesignation::CertifiedCommercialInvestmentMemberCCIM
            }

            "Certified Distressed Property Expert / CDPE" => {
                CoBuyerAgentDesignation::CertifiedDistressedPropertyExpertCDPE
            }

            "Certified International Property Specialist / CIPS" => {
                CoBuyerAgentDesignation::CertifiedInternationalPropertySpecialistCIPS
            }

            "Certified Property Manager / CPM" => {
                CoBuyerAgentDesignation::CertifiedPropertyManagerCPM
            }

            "Certified Real Estate Brokerage Manager / CRB" => {
                CoBuyerAgentDesignation::CertifiedRealEstateBrokerageManagerCRB
            }

            "Certified Real Estate Team Specialist / C-RETS" => {
                CoBuyerAgentDesignation::CertifiedRealEstateTeamSpecialistCRETS
            }

            "Certified Residential Specialist / CRS" => {
                CoBuyerAgentDesignation::CertifiedResidentialSpecialistCRS
            }

            "Counselor of Real Estate / CRE" => CoBuyerAgentDesignation::CounselorofRealEstateCRE,

            "e-PRO" => CoBuyerAgentDesignation::EPRO,

            "General Accredited Appraiser / GAA" => {
                CoBuyerAgentDesignation::GeneralAccreditedAppraiserGAA
            }

            "Graduate, REALTOR Institute / GRI" => {
                CoBuyerAgentDesignation::GraduateREALTORInstituteGRI
            }

            "Military Relocation Professional / MRP" => {
                CoBuyerAgentDesignation::MilitaryRelocationProfessionalMRP
            }

            "NAR's Green Designation / GREEN" => CoBuyerAgentDesignation::NARsGreenDesignationGREEN,

            "Performance Management Network / PMN" => {
                CoBuyerAgentDesignation::PerformanceManagementNetworkPMN
            }

            "Pricing Strategy Advisor / PSA" => CoBuyerAgentDesignation::PricingStrategyAdvisorPSA,

            "Real Estate Negotiation Expert / RENE" => {
                CoBuyerAgentDesignation::RealEstateNegotiationExpertRENE
            }

            "REALTOR Association Certified Executive / RCE" => {
                CoBuyerAgentDesignation::REALTORAssociationCertifiedExecutiveRCE
            }

            "Residential Accredited Appraiser / RAA" => {
                CoBuyerAgentDesignation::ResidentialAccreditedAppraiserRAA
            }

            "Resort & Second-Home Property Specialist / RSPS" => {
                CoBuyerAgentDesignation::ResortSecondHomePropertySpecialistRSPS
            }

            "Seller Representative Specialist / SRS" => {
                CoBuyerAgentDesignation::SellerRepresentativeSpecialistSRS
            }

            "Seniors Real Estate Specialist / SRES" => {
                CoBuyerAgentDesignation::SeniorsRealEstateSpecialistSRES
            }

            "Short Sales & Foreclosure Resource / SFR" => {
                CoBuyerAgentDesignation::ShortSalesForeclosureResourceSFR
            }

            "Society of Industrial and Office REALTORS / SIOR" => {
                CoBuyerAgentDesignation::SocietyofIndustrialandOfficeREALTORSSIOR
            }

            "Transnational Referral Certification / TRC" => {
                CoBuyerAgentDesignation::TransnationalReferralCertificationTRC
            }

            _ => CoBuyerAgentDesignation::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a CoBuyerAgentDesignation> for &'a str {
    fn from(s: &'a CoBuyerAgentDesignation) -> &'a str {
        match s {
            CoBuyerAgentDesignation::AccreditedBuyersRepresentativeABR => {
                "Accredited Buyer's Representative / ABR"
            }

            CoBuyerAgentDesignation::AccreditedLandConsultantALC => {
                "Accredited Land Consultant / ALC"
            }

            CoBuyerAgentDesignation::AtHomeWithDiversityAHWD => "At Home With Diversity / AHWD",

            CoBuyerAgentDesignation::CertifiedCommercialInvestmentMemberCCIM => {
                "Certified Commercial Investment Member / CCIM"
            }

            CoBuyerAgentDesignation::CertifiedDistressedPropertyExpertCDPE => {
                "Certified Distressed Property Expert / CDPE"
            }

            CoBuyerAgentDesignation::CertifiedInternationalPropertySpecialistCIPS => {
                "Certified International Property Specialist / CIPS"
            }

            CoBuyerAgentDesignation::CertifiedPropertyManagerCPM => {
                "Certified Property Manager / CPM"
            }

            CoBuyerAgentDesignation::CertifiedRealEstateBrokerageManagerCRB => {
                "Certified Real Estate Brokerage Manager / CRB"
            }

            CoBuyerAgentDesignation::CertifiedRealEstateTeamSpecialistCRETS => {
                "Certified Real Estate Team Specialist / C-RETS"
            }

            CoBuyerAgentDesignation::CertifiedResidentialSpecialistCRS => {
                "Certified Residential Specialist / CRS"
            }

            CoBuyerAgentDesignation::CounselorofRealEstateCRE => "Counselor of Real Estate / CRE",

            CoBuyerAgentDesignation::EPRO => "e-PRO",

            CoBuyerAgentDesignation::GeneralAccreditedAppraiserGAA => {
                "General Accredited Appraiser / GAA"
            }

            CoBuyerAgentDesignation::GraduateREALTORInstituteGRI => {
                "Graduate, REALTOR Institute / GRI"
            }

            CoBuyerAgentDesignation::MilitaryRelocationProfessionalMRP => {
                "Military Relocation Professional / MRP"
            }

            CoBuyerAgentDesignation::NARsGreenDesignationGREEN => "NAR's Green Designation / GREEN",

            CoBuyerAgentDesignation::PerformanceManagementNetworkPMN => {
                "Performance Management Network / PMN"
            }

            CoBuyerAgentDesignation::PricingStrategyAdvisorPSA => "Pricing Strategy Advisor / PSA",

            CoBuyerAgentDesignation::RealEstateNegotiationExpertRENE => {
                "Real Estate Negotiation Expert / RENE"
            }

            CoBuyerAgentDesignation::REALTORAssociationCertifiedExecutiveRCE => {
                "REALTOR Association Certified Executive / RCE"
            }

            CoBuyerAgentDesignation::ResidentialAccreditedAppraiserRAA => {
                "Residential Accredited Appraiser / RAA"
            }

            CoBuyerAgentDesignation::ResortSecondHomePropertySpecialistRSPS => {
                "Resort & Second-Home Property Specialist / RSPS"
            }

            CoBuyerAgentDesignation::SellerRepresentativeSpecialistSRS => {
                "Seller Representative Specialist / SRS"
            }

            CoBuyerAgentDesignation::SeniorsRealEstateSpecialistSRES => {
                "Seniors Real Estate Specialist / SRES"
            }

            CoBuyerAgentDesignation::ShortSalesForeclosureResourceSFR => {
                "Short Sales & Foreclosure Resource / SFR"
            }

            CoBuyerAgentDesignation::SocietyofIndustrialandOfficeREALTORSSIOR => {
                "Society of Industrial and Office REALTORS / SIOR"
            }

            CoBuyerAgentDesignation::TransnationalReferralCertificationTRC => {
                "Transnational Referral Certification / TRC"
            }

            CoBuyerAgentDesignation::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for CoBuyerAgentDesignation {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for CoBuyerAgentDesignation {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_co_buyer_agent_designation_format {
    use super::CoBuyerAgentDesignation;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<CoBuyerAgentDesignation>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<CoBuyerAgentDesignation>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [CoListAgentDesignation Lookups](https://ddwiki.reso.org/display/DDW17/CoListAgentDesignation+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum CoListAgentDesignation {
    /// "[Accredited Buyer's Representative / ABR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244436)": The Accredited Buyer’s Representative (ABR®) designation is designed for real estate buyer agents who focus on working directly with buyer-clients.  http://www.rebac.net/abr
    AccreditedBuyersRepresentativeABR,

    /// "[Accredited Land Consultant / ALC](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244437)": Accredited Land Consultants (ALCs) are the most trusted, knowledgeable, experienced, and highest-producing experts in all segments of land. Conferred by the REALTORS® Land Institute, the designation requires successful completion of a rigorous LANDU education program, a specific, high-volume and experience level, and adherence to an honorable Code of Conduct. https://www.nar.realtor/designations-and-certifications/alc
    AccreditedLandConsultantALC,

    /// "[At Home With Diversity / AHWD](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244438)": Learn to work effectively with – and within – today’s diverse real estate market. The At Home With Diversity certification teaches you how to conduct your business with sensitivity to all client profiles and build a business plan to successfully serve them.  https://www.nar.realtor/designations-and-certifications/ahwd
    AtHomeWithDiversityAHWD,

    /// "[Certified Commercial Investment Member / CCIM](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244439)": The Certified Commercial Investment Member (CCIM) designation is commercial real estate’s global standard for professional achievement, earned through an extensive curriculum of 200 classroom hours and professional experiential requirements. https://www.nar.realtor/designations-and-certifications/ccim
    CertifiedCommercialInvestmentMemberCCIM,

    /// "[Certified Distressed Property Expert / CDPE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244440)": A Certified Distressed Property Expert® (CDPE) has a thorough understanding of complex issues in today’s turbulent real estate industry and knowledge of foreclosure avoidance options available to homeowners. CDPEs can provide solutions, specifically short sales, for homeowners facing market hardships.  http://www.cdpe.com/
    CertifiedDistressedPropertyExpertCDPE,

    /// "[Certified International Property Specialist / CIPS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244441)": The CIPS designation is for REALTORS® from the United States and abroad, as well as association staff and volunteer leaders who wish to develop or grow their international real estate business. It will provide you with the knowledge, research, network, and tools to globalize your business.                        https://www.nar.realtor/designations-and-certifications/cips-designation
    CertifiedInternationalPropertySpecialistCIPS,

    /// "[Certified Property Manager / CPM](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244442)": Certified Property Managers® (CPM®) are recognized as experts in real estate management, and they are at the top of the profession. 70% of those who hold the CPM® designation hold the highest management positions in their offices (owner/partner/officer/director). https://www.nar.realtor/designations-and-certifications/cpm
    CertifiedPropertyManagerCPM,

    /// "[Certified Real Estate Brokerage Manager / CRB](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244443)": The Certified Real Estate Brokerage Manager (CRB) Designation raises professional standards, strengthens individual and office performance, and indicates expertise in brokerage management. This designation represents the highest level of professional achievement in real estate brokerage management. You do not need a broker's license to earn the CRB Designation.  https://www.nar.realtor/designations-and-certifications/crb
    CertifiedRealEstateBrokerageManagerCRB,

    /// "[Certified Real Estate Team Specialist / C-RETS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244444)": The Certified Real Estate Team Specialist certification is designed to improve team development, individual leadership skills, and financial performance. The courses provide the tools, strategies, and knowledge that are required of today’s real estate professionals who are either considering or currently operating in a team environment. It is for team leaders, team members, those looking to start a team, and those who simply want to sharpen their management skills.  https://www.nar.realtor/designations-and-certifications/c-rets
    CertifiedRealEstateTeamSpecialistCRETS,

    /// "[Certified Residential Specialist / CRS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244445)": Certified Residential Specialist (CRS) is the highest credential awarded to residential sales agents, managers and brokers.  https://www.nar.realtor/designations-and-certifications/crs
    CertifiedResidentialSpecialistCRS,

    /// "[Counselor of Real Estate / CRE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244446)": The Counselors of Real Estate®  is an international group of recognized professionals who provide seasoned, expert, objective advice on real property and land-related matters. Only 1,100 practitioners throughout the world carry the CRE® designation. Membership is by invitation only.  https://www.nar.realtor/designations-and-certifications/cre
    CounselorofRealEstateCRE,

    /// "[e-PRO](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244447)": NAR's e-PRO® certification  teaches you to use cutting-edge technologies and digital initiatives to link up with today's savvy real estate consumer.  https://www.nar.realtor/designations-and-certifications/e-pro
    EPRO,

    /// "[General Accredited Appraiser / GAA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244448)": For general appraisers, this designation is awarded to those whose education and experience exceed state appraisal certification requirements and is supported by the National Association of REALTORS®. https://www.nar.realtor/designations-and-certifications/gaa
    GeneralAccreditedAppraiserGAA,

    /// "[Graduate, REALTOR Institute / GRI](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244449)": REALTORS® with the GRI designation have in-depth training in legal and regulatory issues, technology, professional standards, and the sales process. Earning the designation is a way to stand out to prospective buyers and sellers as a professional with expertise in these areas.  https://www.nar.realtor/designations-and-certifications/gri
    GraduateREALTORInstituteGRI,

    /// "[Military Relocation Professional / MRP](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244450)": NAR's Military Relocation Professional certification focuses on educating real estate professionals about working with current and former military service members to find housing solutions that best suit their needs and take full advantage of military benefits and support.  https://www.nar.realtor/designations-and-certifications/mrp
    MilitaryRelocationProfessionalMRP,

    /// "[NAR's Green Designation / GREEN](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244451)": Through NAR's Green Designation, the Green Resource Council provides ongoing education, resources and tools to help real estate practitioners find, understand, and market properties with green features.  https://www.nar.realtor/designations-and-certifications/green
    NARsGreenDesignationGREEN,

    /// "[Performance Management Network / PMN](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244452)": This designation is unique to the REALTOR® family designations, emphasizing that in order to enhance your business, you must enhance yourself. It focuses on negotiating strategies and tactics, networking and referrals, business planning and systems, personal performance management and  leadership development.  https://www.nar.realtor/designations-and-certifications/pmn
    PerformanceManagementNetworkPMN,

    /// "[Pricing Strategy Advisor / PSA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244453)": Enhance your skills in pricing properties, creating CMAs, working with appraisers, and guiding clients through the anxieties and misperceptions they often have about home values with NAR’s PSA (Pricing Strategy Advisor) certification. https://www.nar.realtor/designations-and-certifications/psa
    PricingStrategyAdvisorPSA,

    /// "[Real Estate Negotiation Expert / RENE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244454)": This certification is for real estate professionals who want to sharpen their negotiation skills. The RENE certification program gives REALTORS® the tips and tools they need to be skillful advocates for their clients.  https://www.nar.realtor/designations-and-certifications/rene
    RealEstateNegotiationExpertRENE,

    /// "[REALTOR Association Certified Executive / RCE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244455)": RCE is the only professional designation designed specifically for REALTOR® association executives. RCE designees exemplify goal-oriented AEs with drive, experience and commitment to professional growth.  https://www.nar.realtor/designations-and-certifications/rce
    REALTORAssociationCertifiedExecutiveRCE,

    /// "[Residential Accredited Appraiser / RAA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244456)": For residential appraisers, this designation is awarded to those whose education and experience exceed state appraisal certification requirements and is supported by the National Association of REALTORS®.  https://www.nar.realtor/designations-and-certifications/raa
    ResidentialAccreditedAppraiserRAA,

    /// "[Resort & Second-Home Property Specialist / RSPS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244457)": This certification is designed for REALTORS® who facilitate the buying, selling, or management of properties for investment, development, retirement, or second homes in a resort, recreational and/or vacation destination are involved in this market niche.  https://www.nar.realtor/designations-and-certifications/rsps
    ResortSecondHomePropertySpecialistRSPS,

    /// "[Seller Representative Specialist / SRS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244458)": The Seller Representative Specialist (SRS) designation is the premier credential in seller representation. It is designed to elevate professional standards and enhance personal performance. The designation is awarded to real estate practitioners by the Real Estate Business Institute (REBI) who meet specific educational and practical experience criteria.  https://www.nar.realtor/designations-and-certifications/seller-representative-specialist-srs
    SellerRepresentativeSpecialistSRS,

    /// "[Seniors Real Estate Specialist / SRES](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244459)": The SRES® Designation program educates REALTORS® on how to profitably and ethically serve the real estate needs of the fastest growing market in real estate, clients age 50+. By earning the SRES® designation, you gain access to valuable member benefits, useful resources, and networking opportunities across the U.S. and Canada to help you in your business.  https://www.nar.realtor/designations-and-certifications/sres
    SeniorsRealEstateSpecialistSRES,

    /// "[Short Sales & Foreclosure Resource / SFR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244460)": The SFR® certification  teaches real estate professionals to work with distressed sellers and the finance, tax, and legal professionals who can help them, qualify sellers for short sales, develop a short sale package, negotiate with lenders, safeguard your commission, limit risk, and protect buyers.  https://www.nar.realtor/designations-and-certifications/sfr
    ShortSalesForeclosureResourceSFR,

    /// "[Society of Industrial and Office REALTORS / SIOR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244461)": The SIOR designation is held by only the most knowledgeable, experienced, and successful commercial real estate brokerage specialists. To earn it, designees must meet standards of experience, production, education, ethics, and provide recommendations.  https://www.nar.realtor/designations-and-certifications/sior
    SocietyofIndustrialandOfficeREALTORSSIOR,

    /// "[Transnational Referral Certification / TRC](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244462)": Real estate professionals who have taken the Transnational Referral Certified (TRC) training, have completed special training on  making and receiving client referrals from professionals in other countries. https://worldproperties.com/about-us/international-referrals-and-trc/
    TransnationalReferralCertificationTRC,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for CoListAgentDesignation {
    fn from(s: String) -> CoListAgentDesignation {
        match s.as_ref() {
            "Accredited Buyer's Representative / ABR" => {
                CoListAgentDesignation::AccreditedBuyersRepresentativeABR
            }

            "Accredited Land Consultant / ALC" => {
                CoListAgentDesignation::AccreditedLandConsultantALC
            }

            "At Home With Diversity / AHWD" => CoListAgentDesignation::AtHomeWithDiversityAHWD,

            "Certified Commercial Investment Member / CCIM" => {
                CoListAgentDesignation::CertifiedCommercialInvestmentMemberCCIM
            }

            "Certified Distressed Property Expert / CDPE" => {
                CoListAgentDesignation::CertifiedDistressedPropertyExpertCDPE
            }

            "Certified International Property Specialist / CIPS" => {
                CoListAgentDesignation::CertifiedInternationalPropertySpecialistCIPS
            }

            "Certified Property Manager / CPM" => {
                CoListAgentDesignation::CertifiedPropertyManagerCPM
            }

            "Certified Real Estate Brokerage Manager / CRB" => {
                CoListAgentDesignation::CertifiedRealEstateBrokerageManagerCRB
            }

            "Certified Real Estate Team Specialist / C-RETS" => {
                CoListAgentDesignation::CertifiedRealEstateTeamSpecialistCRETS
            }

            "Certified Residential Specialist / CRS" => {
                CoListAgentDesignation::CertifiedResidentialSpecialistCRS
            }

            "Counselor of Real Estate / CRE" => CoListAgentDesignation::CounselorofRealEstateCRE,

            "e-PRO" => CoListAgentDesignation::EPRO,

            "General Accredited Appraiser / GAA" => {
                CoListAgentDesignation::GeneralAccreditedAppraiserGAA
            }

            "Graduate, REALTOR Institute / GRI" => {
                CoListAgentDesignation::GraduateREALTORInstituteGRI
            }

            "Military Relocation Professional / MRP" => {
                CoListAgentDesignation::MilitaryRelocationProfessionalMRP
            }

            "NAR's Green Designation / GREEN" => CoListAgentDesignation::NARsGreenDesignationGREEN,

            "Performance Management Network / PMN" => {
                CoListAgentDesignation::PerformanceManagementNetworkPMN
            }

            "Pricing Strategy Advisor / PSA" => CoListAgentDesignation::PricingStrategyAdvisorPSA,

            "Real Estate Negotiation Expert / RENE" => {
                CoListAgentDesignation::RealEstateNegotiationExpertRENE
            }

            "REALTOR Association Certified Executive / RCE" => {
                CoListAgentDesignation::REALTORAssociationCertifiedExecutiveRCE
            }

            "Residential Accredited Appraiser / RAA" => {
                CoListAgentDesignation::ResidentialAccreditedAppraiserRAA
            }

            "Resort & Second-Home Property Specialist / RSPS" => {
                CoListAgentDesignation::ResortSecondHomePropertySpecialistRSPS
            }

            "Seller Representative Specialist / SRS" => {
                CoListAgentDesignation::SellerRepresentativeSpecialistSRS
            }

            "Seniors Real Estate Specialist / SRES" => {
                CoListAgentDesignation::SeniorsRealEstateSpecialistSRES
            }

            "Short Sales & Foreclosure Resource / SFR" => {
                CoListAgentDesignation::ShortSalesForeclosureResourceSFR
            }

            "Society of Industrial and Office REALTORS / SIOR" => {
                CoListAgentDesignation::SocietyofIndustrialandOfficeREALTORSSIOR
            }

            "Transnational Referral Certification / TRC" => {
                CoListAgentDesignation::TransnationalReferralCertificationTRC
            }

            _ => CoListAgentDesignation::OpenEnumeration(s),
        }
    }
}

impl From<&str> for CoListAgentDesignation {
    fn from(s: &str) -> CoListAgentDesignation {
        match s {
            "Accredited Buyer's Representative / ABR" => {
                CoListAgentDesignation::AccreditedBuyersRepresentativeABR
            }

            "Accredited Land Consultant / ALC" => {
                CoListAgentDesignation::AccreditedLandConsultantALC
            }

            "At Home With Diversity / AHWD" => CoListAgentDesignation::AtHomeWithDiversityAHWD,

            "Certified Commercial Investment Member / CCIM" => {
                CoListAgentDesignation::CertifiedCommercialInvestmentMemberCCIM
            }

            "Certified Distressed Property Expert / CDPE" => {
                CoListAgentDesignation::CertifiedDistressedPropertyExpertCDPE
            }

            "Certified International Property Specialist / CIPS" => {
                CoListAgentDesignation::CertifiedInternationalPropertySpecialistCIPS
            }

            "Certified Property Manager / CPM" => {
                CoListAgentDesignation::CertifiedPropertyManagerCPM
            }

            "Certified Real Estate Brokerage Manager / CRB" => {
                CoListAgentDesignation::CertifiedRealEstateBrokerageManagerCRB
            }

            "Certified Real Estate Team Specialist / C-RETS" => {
                CoListAgentDesignation::CertifiedRealEstateTeamSpecialistCRETS
            }

            "Certified Residential Specialist / CRS" => {
                CoListAgentDesignation::CertifiedResidentialSpecialistCRS
            }

            "Counselor of Real Estate / CRE" => CoListAgentDesignation::CounselorofRealEstateCRE,

            "e-PRO" => CoListAgentDesignation::EPRO,

            "General Accredited Appraiser / GAA" => {
                CoListAgentDesignation::GeneralAccreditedAppraiserGAA
            }

            "Graduate, REALTOR Institute / GRI" => {
                CoListAgentDesignation::GraduateREALTORInstituteGRI
            }

            "Military Relocation Professional / MRP" => {
                CoListAgentDesignation::MilitaryRelocationProfessionalMRP
            }

            "NAR's Green Designation / GREEN" => CoListAgentDesignation::NARsGreenDesignationGREEN,

            "Performance Management Network / PMN" => {
                CoListAgentDesignation::PerformanceManagementNetworkPMN
            }

            "Pricing Strategy Advisor / PSA" => CoListAgentDesignation::PricingStrategyAdvisorPSA,

            "Real Estate Negotiation Expert / RENE" => {
                CoListAgentDesignation::RealEstateNegotiationExpertRENE
            }

            "REALTOR Association Certified Executive / RCE" => {
                CoListAgentDesignation::REALTORAssociationCertifiedExecutiveRCE
            }

            "Residential Accredited Appraiser / RAA" => {
                CoListAgentDesignation::ResidentialAccreditedAppraiserRAA
            }

            "Resort & Second-Home Property Specialist / RSPS" => {
                CoListAgentDesignation::ResortSecondHomePropertySpecialistRSPS
            }

            "Seller Representative Specialist / SRS" => {
                CoListAgentDesignation::SellerRepresentativeSpecialistSRS
            }

            "Seniors Real Estate Specialist / SRES" => {
                CoListAgentDesignation::SeniorsRealEstateSpecialistSRES
            }

            "Short Sales & Foreclosure Resource / SFR" => {
                CoListAgentDesignation::ShortSalesForeclosureResourceSFR
            }

            "Society of Industrial and Office REALTORS / SIOR" => {
                CoListAgentDesignation::SocietyofIndustrialandOfficeREALTORSSIOR
            }

            "Transnational Referral Certification / TRC" => {
                CoListAgentDesignation::TransnationalReferralCertificationTRC
            }

            _ => CoListAgentDesignation::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a CoListAgentDesignation> for &'a str {
    fn from(s: &'a CoListAgentDesignation) -> &'a str {
        match s {
            CoListAgentDesignation::AccreditedBuyersRepresentativeABR => {
                "Accredited Buyer's Representative / ABR"
            }

            CoListAgentDesignation::AccreditedLandConsultantALC => {
                "Accredited Land Consultant / ALC"
            }

            CoListAgentDesignation::AtHomeWithDiversityAHWD => "At Home With Diversity / AHWD",

            CoListAgentDesignation::CertifiedCommercialInvestmentMemberCCIM => {
                "Certified Commercial Investment Member / CCIM"
            }

            CoListAgentDesignation::CertifiedDistressedPropertyExpertCDPE => {
                "Certified Distressed Property Expert / CDPE"
            }

            CoListAgentDesignation::CertifiedInternationalPropertySpecialistCIPS => {
                "Certified International Property Specialist / CIPS"
            }

            CoListAgentDesignation::CertifiedPropertyManagerCPM => {
                "Certified Property Manager / CPM"
            }

            CoListAgentDesignation::CertifiedRealEstateBrokerageManagerCRB => {
                "Certified Real Estate Brokerage Manager / CRB"
            }

            CoListAgentDesignation::CertifiedRealEstateTeamSpecialistCRETS => {
                "Certified Real Estate Team Specialist / C-RETS"
            }

            CoListAgentDesignation::CertifiedResidentialSpecialistCRS => {
                "Certified Residential Specialist / CRS"
            }

            CoListAgentDesignation::CounselorofRealEstateCRE => "Counselor of Real Estate / CRE",

            CoListAgentDesignation::EPRO => "e-PRO",

            CoListAgentDesignation::GeneralAccreditedAppraiserGAA => {
                "General Accredited Appraiser / GAA"
            }

            CoListAgentDesignation::GraduateREALTORInstituteGRI => {
                "Graduate, REALTOR Institute / GRI"
            }

            CoListAgentDesignation::MilitaryRelocationProfessionalMRP => {
                "Military Relocation Professional / MRP"
            }

            CoListAgentDesignation::NARsGreenDesignationGREEN => "NAR's Green Designation / GREEN",

            CoListAgentDesignation::PerformanceManagementNetworkPMN => {
                "Performance Management Network / PMN"
            }

            CoListAgentDesignation::PricingStrategyAdvisorPSA => "Pricing Strategy Advisor / PSA",

            CoListAgentDesignation::RealEstateNegotiationExpertRENE => {
                "Real Estate Negotiation Expert / RENE"
            }

            CoListAgentDesignation::REALTORAssociationCertifiedExecutiveRCE => {
                "REALTOR Association Certified Executive / RCE"
            }

            CoListAgentDesignation::ResidentialAccreditedAppraiserRAA => {
                "Residential Accredited Appraiser / RAA"
            }

            CoListAgentDesignation::ResortSecondHomePropertySpecialistRSPS => {
                "Resort & Second-Home Property Specialist / RSPS"
            }

            CoListAgentDesignation::SellerRepresentativeSpecialistSRS => {
                "Seller Representative Specialist / SRS"
            }

            CoListAgentDesignation::SeniorsRealEstateSpecialistSRES => {
                "Seniors Real Estate Specialist / SRES"
            }

            CoListAgentDesignation::ShortSalesForeclosureResourceSFR => {
                "Short Sales & Foreclosure Resource / SFR"
            }

            CoListAgentDesignation::SocietyofIndustrialandOfficeREALTORSSIOR => {
                "Society of Industrial and Office REALTORS / SIOR"
            }

            CoListAgentDesignation::TransnationalReferralCertificationTRC => {
                "Transnational Referral Certification / TRC"
            }

            CoListAgentDesignation::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for CoListAgentDesignation {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for CoListAgentDesignation {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_co_list_agent_designation_format {
    use super::CoListAgentDesignation;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<CoListAgentDesignation>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<CoListAgentDesignation>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [CommonInterest Lookups](https://ddwiki.reso.org/display/DDW17/CommonInterest+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum CommonInterest {
    /// "[Community Apartment](https://ddwiki.reso.org/display/DDW17/Community+Apartment)": Ownership interest where purchaser receives a partial/fractional interest in the land coupled with the right of exclusive occupancy of an apartment located thereon. The owners elect a governing board which operates and maintains the project.
    CommunityApartment,

    /// "[Condominium](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244396)": Ownership of  an individual unit where each homeowner only owns their individual unit space, and an undivided share in the ownership of common areas or in a common homeowner’s association (HOA). Generally, the ownership of the individual unit is described in a Condominium Plan and usually consists of ownership of the surface of the walls and the space within.  The CC&Rs will detail what building components and other complex amenities are considered part of the common area and will describe the common area or HOA ownership percentages, and maintenance responsibilities.
    Condominium,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244401)": Ownership of an entire parcel or lot that is not in a CID, or not held subject to  any other Common Interest rights.
    None,

    /// "[Planned Development](https://ddwiki.reso.org/display/DDW17/Planned+Development)": Ownership consisting of an individual lot or parcel, generally including the ownership of the land and any structures on the individual lot or parcel.  Owners also receive use right in common areas that are generally owned by a HOA. Some common areas may be reserved for the use of some or all of the individual lot owners. Generally, the CC&Rs will detail the method of management, maintenance, use and control of the common areas and may provide for some control and maintenance of the individual lots.
    PlannedDevelopment,

    /// "[Stock Cooperative](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244399)": Ownership of an interest in a corporation which is formed primarily for the purpose of holding title to improved real property, either in fee simple or for a term of years. All or substantially all of the shareholders receive a right of exclusive occupancy of a portion of the real property, which right is transferable only concurrently with the transfer of the share(s) of stock in the corporation.
    StockCooperative,

    /// "[Timeshare](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244400)": Ownership in a time period or a point system granting possession rights to a unit or occupancy rights at a  property.  The property may be owned either by  a number of individuals on a fractional basis, or may be an interest in a corporation each with the right of possession for a specified time interval. Time-sharing is commonly applied to resort and vacation properties.
    Timeshare,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for CommonInterest {
    fn from(s: String) -> CommonInterest {
        match s.as_ref() {
            "Community Apartment" => CommonInterest::CommunityApartment,

            "Condominium" => CommonInterest::Condominium,

            "None" => CommonInterest::None,

            "Planned Development" => CommonInterest::PlannedDevelopment,

            "Stock Cooperative" => CommonInterest::StockCooperative,

            "Timeshare" => CommonInterest::Timeshare,

            _ => CommonInterest::OpenEnumeration(s),
        }
    }
}

impl From<&str> for CommonInterest {
    fn from(s: &str) -> CommonInterest {
        match s {
            "Community Apartment" => CommonInterest::CommunityApartment,

            "Condominium" => CommonInterest::Condominium,

            "None" => CommonInterest::None,

            "Planned Development" => CommonInterest::PlannedDevelopment,

            "Stock Cooperative" => CommonInterest::StockCooperative,

            "Timeshare" => CommonInterest::Timeshare,

            _ => CommonInterest::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a CommonInterest> for &'a str {
    fn from(s: &'a CommonInterest) -> &'a str {
        match s {
            CommonInterest::CommunityApartment => "Community Apartment",

            CommonInterest::Condominium => "Condominium",

            CommonInterest::None => "None",

            CommonInterest::PlannedDevelopment => "Planned Development",

            CommonInterest::StockCooperative => "Stock Cooperative",

            CommonInterest::Timeshare => "Timeshare",

            CommonInterest::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for CommonInterest {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for CommonInterest {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_common_interest_format {
    use super::CommonInterest;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<CommonInterest>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<CommonInterest>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [CommonWalls Lookups](https://ddwiki.reso.org/display/DDW17/CommonWalls+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum CommonWalls {
    /// "[1 Common Wall](https://ddwiki.reso.org/display/DDW17/1+Common+Wall)": The dwelling being sold has one common wall with another property that is not part of the sale.  Also known as an attached structure.
    _1CommonWall,

    /// "[2+ Common Walls](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244057)": The dwelling being sold has two or more common walls with another property that is not part of the sale.  Also known as an attached structure.
    _2PlusCommonWalls,

    /// "[End Unit](https://ddwiki.reso.org/display/DDW17/End+Unit)": The dwelling being sold has one or more common walls with another property that is not part of the sale and is at the end of a row of units.  Also known as an attached structure.
    EndUnit,

    /// "[No Common Walls](https://ddwiki.reso.org/display/DDW17/No+Common+Walls)": The dwelling being sold has no attached structures that are not part of the sale.  Also know as a detached structure.
    NoCommonWalls,

    /// "[No One Above](https://ddwiki.reso.org/display/DDW17/No+One+Above)": The property is attached to another dwelling that is not part of the sale, but there is no unit above the one being sold.
    NoOneAbove,

    /// "[No One Below](https://ddwiki.reso.org/display/DDW17/No+One+Below)": The property is attached to another dwelling that is not part of the sale, but there is no unit below the one being sold.
    NoOneBelow,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for CommonWalls {
    fn from(s: String) -> CommonWalls {
        match s.as_ref() {
            "1 Common Wall" => CommonWalls::_1CommonWall,

            "2+ Common Walls" => CommonWalls::_2PlusCommonWalls,

            "End Unit" => CommonWalls::EndUnit,

            "No Common Walls" => CommonWalls::NoCommonWalls,

            "No One Above" => CommonWalls::NoOneAbove,

            "No One Below" => CommonWalls::NoOneBelow,

            _ => CommonWalls::OpenEnumeration(s),
        }
    }
}

impl From<&str> for CommonWalls {
    fn from(s: &str) -> CommonWalls {
        match s {
            "1 Common Wall" => CommonWalls::_1CommonWall,

            "2+ Common Walls" => CommonWalls::_2PlusCommonWalls,

            "End Unit" => CommonWalls::EndUnit,

            "No Common Walls" => CommonWalls::NoCommonWalls,

            "No One Above" => CommonWalls::NoOneAbove,

            "No One Below" => CommonWalls::NoOneBelow,

            _ => CommonWalls::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a CommonWalls> for &'a str {
    fn from(s: &'a CommonWalls) -> &'a str {
        match s {
            CommonWalls::_1CommonWall => "1 Common Wall",

            CommonWalls::_2PlusCommonWalls => "2+ Common Walls",

            CommonWalls::EndUnit => "End Unit",

            CommonWalls::NoCommonWalls => "No Common Walls",

            CommonWalls::NoOneAbove => "No One Above",

            CommonWalls::NoOneBelow => "No One Below",

            CommonWalls::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for CommonWalls {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for CommonWalls {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_common_walls_format {
    use super::CommonWalls;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<CommonWalls>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<CommonWalls>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [CommunityFeatures Lookups](https://ddwiki.reso.org/display/DDW17/CommunityFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum CommunityFeatures {
    /// "[Airport/Runway](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244536)": The community has an airport or runway.
    AirportRunway,

    /// "[Clubhouse](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244537)": The community has a clubhouse.
    Clubhouse,

    /// "[Curbs](https://ddwiki.reso.org/display/DDW17/Curbs)": The community streets have curbs.
    Curbs,

    /// "[Fishing](https://ddwiki.reso.org/display/DDW17/Fishing)": The community has places to go fishing.
    Fishing,

    /// "[Fitness Center](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244540)": The community has a fitness center.
    FitnessCenter,

    /// "[Gated](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244541)": The community is gated.
    Gated,

    /// "[Golf](https://ddwiki.reso.org/display/DDW17/Golf)": The community has golfing.
    Golf,

    /// "[Lake](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244543)": The community has a lake.
    Lake,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244544)": The community includes no additional features.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244545)": The community has features beyond those listed in this field.
    Other,

    /// "[Park](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244546)": The community has a park.
    Park,

    /// "[Playground](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244547)": The community has a playground.
    Playground,

    /// "[Pool](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244548)": The community has a pool.
    Pool,

    /// "[Racquetball](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244549)": The community has racquetball facilities.
    Racquetball,

    /// "[Restaurant](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244550)": The community has a restaurant.
    Restaurant,

    /// "[Sidewalks](https://ddwiki.reso.org/display/DDW17/Sidewalks)": The community streets have sidewalks.
    Sidewalks,

    /// "[Stable(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244552)": The community has horse stables.
    Stables,

    /// "[Street Lights](https://ddwiki.reso.org/display/DDW17/Street+Lights)": The community streets have lighting.
    StreetLights,

    /// "[Suburban](https://ddwiki.reso.org/display/DDW17/Suburban)": The community is a suburban setting.
    Suburban,

    /// "[Tennis Court(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244555)": The community has tennis court(s).
    TennisCourts,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for CommunityFeatures {
    fn from(s: String) -> CommunityFeatures {
        match s.as_ref() {
            "Airport/Runway" => CommunityFeatures::AirportRunway,

            "Clubhouse" => CommunityFeatures::Clubhouse,

            "Curbs" => CommunityFeatures::Curbs,

            "Fishing" => CommunityFeatures::Fishing,

            "Fitness Center" => CommunityFeatures::FitnessCenter,

            "Gated" => CommunityFeatures::Gated,

            "Golf" => CommunityFeatures::Golf,

            "Lake" => CommunityFeatures::Lake,

            "None" => CommunityFeatures::None,

            "Other" => CommunityFeatures::Other,

            "Park" => CommunityFeatures::Park,

            "Playground" => CommunityFeatures::Playground,

            "Pool" => CommunityFeatures::Pool,

            "Racquetball" => CommunityFeatures::Racquetball,

            "Restaurant" => CommunityFeatures::Restaurant,

            "Sidewalks" => CommunityFeatures::Sidewalks,

            "Stable(s)" => CommunityFeatures::Stables,

            "Street Lights" => CommunityFeatures::StreetLights,

            "Suburban" => CommunityFeatures::Suburban,

            "Tennis Court(s)" => CommunityFeatures::TennisCourts,

            _ => CommunityFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for CommunityFeatures {
    fn from(s: &str) -> CommunityFeatures {
        match s {
            "Airport/Runway" => CommunityFeatures::AirportRunway,

            "Clubhouse" => CommunityFeatures::Clubhouse,

            "Curbs" => CommunityFeatures::Curbs,

            "Fishing" => CommunityFeatures::Fishing,

            "Fitness Center" => CommunityFeatures::FitnessCenter,

            "Gated" => CommunityFeatures::Gated,

            "Golf" => CommunityFeatures::Golf,

            "Lake" => CommunityFeatures::Lake,

            "None" => CommunityFeatures::None,

            "Other" => CommunityFeatures::Other,

            "Park" => CommunityFeatures::Park,

            "Playground" => CommunityFeatures::Playground,

            "Pool" => CommunityFeatures::Pool,

            "Racquetball" => CommunityFeatures::Racquetball,

            "Restaurant" => CommunityFeatures::Restaurant,

            "Sidewalks" => CommunityFeatures::Sidewalks,

            "Stable(s)" => CommunityFeatures::Stables,

            "Street Lights" => CommunityFeatures::StreetLights,

            "Suburban" => CommunityFeatures::Suburban,

            "Tennis Court(s)" => CommunityFeatures::TennisCourts,

            _ => CommunityFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a CommunityFeatures> for &'a str {
    fn from(s: &'a CommunityFeatures) -> &'a str {
        match s {
            CommunityFeatures::AirportRunway => "Airport/Runway",

            CommunityFeatures::Clubhouse => "Clubhouse",

            CommunityFeatures::Curbs => "Curbs",

            CommunityFeatures::Fishing => "Fishing",

            CommunityFeatures::FitnessCenter => "Fitness Center",

            CommunityFeatures::Gated => "Gated",

            CommunityFeatures::Golf => "Golf",

            CommunityFeatures::Lake => "Lake",

            CommunityFeatures::None => "None",

            CommunityFeatures::Other => "Other",

            CommunityFeatures::Park => "Park",

            CommunityFeatures::Playground => "Playground",

            CommunityFeatures::Pool => "Pool",

            CommunityFeatures::Racquetball => "Racquetball",

            CommunityFeatures::Restaurant => "Restaurant",

            CommunityFeatures::Sidewalks => "Sidewalks",

            CommunityFeatures::Stables => "Stable(s)",

            CommunityFeatures::StreetLights => "Street Lights",

            CommunityFeatures::Suburban => "Suburban",

            CommunityFeatures::TennisCourts => "Tennis Court(s)",

            CommunityFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for CommunityFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for CommunityFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_community_features_format {
    use super::CommunityFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<CommunityFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<CommunityFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [CompensationType Lookups](https://ddwiki.reso.org/display/DDW17/CompensationType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum CompensationType {
    /// "[$](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244063)": The value entered in the BuyerAgencyCompensation field is in dollars.
    Dollar,

    /// "[%](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244064)": The value entered in the BuyerAgencyCompensation field is a percent of the gross compensation.
    Percent,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244066)": A compensation type not included in this list
    Other,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244065)": The Buyer Agency Compensation Type is something other than % or $ or is some special combination of $, %, and other compensation types.  See the applicable remarks field for more details about the compensation.
    SeeRemarks,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for CompensationType {
    fn from(s: String) -> CompensationType {
        match s.as_ref() {
            "$" => CompensationType::Dollar,

            "%" => CompensationType::Percent,

            "Other" => CompensationType::Other,

            "See Remarks" => CompensationType::SeeRemarks,

            _ => CompensationType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for CompensationType {
    fn from(s: &str) -> CompensationType {
        match s {
            "$" => CompensationType::Dollar,

            "%" => CompensationType::Percent,

            "Other" => CompensationType::Other,

            "See Remarks" => CompensationType::SeeRemarks,

            _ => CompensationType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a CompensationType> for &'a str {
    fn from(s: &'a CompensationType) -> &'a str {
        match s {
            CompensationType::Dollar => "$",

            CompensationType::Percent => "%",

            CompensationType::Other => "Other",

            CompensationType::SeeRemarks => "See Remarks",

            CompensationType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for CompensationType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for CompensationType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_compensation_type_format {
    use super::CompensationType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<CompensationType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<CompensationType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Concessions Lookups](https://ddwiki.reso.org/display/DDW17/Concessions+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Concessions {
    /// "[Call Listing Agent](https://ddwiki.reso.org/display/DDW17/Call+Listing+Agent)": Call the listing agent for information about concessions made/offered by the seller.
    CallListingAgent,

    /// "[No](https://ddwiki.reso.org/display/DDW17/No)": There are no concessions included with this listing.
    No,

    /// "[Yes](https://ddwiki.reso.org/display/DDW17/Yes)": There are concessions that are part of the listing/sale.
    Yes,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Concessions {
    fn from(s: String) -> Concessions {
        match s.as_ref() {
            "Call Listing Agent" => Concessions::CallListingAgent,

            "No" => Concessions::No,

            "Yes" => Concessions::Yes,

            _ => Concessions::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Concessions {
    fn from(s: &str) -> Concessions {
        match s {
            "Call Listing Agent" => Concessions::CallListingAgent,

            "No" => Concessions::No,

            "Yes" => Concessions::Yes,

            _ => Concessions::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Concessions> for &'a str {
    fn from(s: &'a Concessions) -> &'a str {
        match s {
            Concessions::CallListingAgent => "Call Listing Agent",

            Concessions::No => "No",

            Concessions::Yes => "Yes",

            Concessions::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Concessions {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Concessions {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_concessions_format {
    use super::Concessions;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Concessions>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Concessions>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ConstructionMaterials Lookups](https://ddwiki.reso.org/display/DDW17/ConstructionMaterials+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ConstructionMaterials {
    /// "[Adobe](https://ddwiki.reso.org/display/DDW17/Adobe)": The structure was made wholly or partly with adobe.
    Adobe,

    /// "[Aluminum Siding](https://ddwiki.reso.org/display/DDW17/Aluminum+Siding)": The structure was made wholly or partly with aluminum siding.
    AluminumSiding,

    /// "[Asbestos](https://ddwiki.reso.org/display/DDW17/Asbestos)": The structure was made wholly or partly with asbestos.
    Asbestos,

    /// "[Asphalt](https://ddwiki.reso.org/display/DDW17/Asphalt)": The structure was made wholly or partly with asphalt.
    Asphalt,

    /// "[Attic/Crawl Hatchway(s) Insulated](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244076)": When not insulated, a home’s attic hatch or crawlspace hatch creates one of the biggest gaps in the building envelope, increasing heat loss in winter and heat gain in summer, and making indoor living areas uncomfortable. Insulation standards are clearly defined: <a href="http://www.ornl.gov/sci/roofs+walls/insulation/fact">http://www.ornl.gov/sci/roofs+walls/insulation/fact</a>
    AtticCrawlHatchwaysInsulated,

    /// "[Batts Insulation](https://ddwiki.reso.org/display/DDW17/Batts+Insulation)": Rolls and batts, or blankets, are flexible products made from mineral fibers such as fiberglass and rock wool. Can also be made of cotton and wool. They are available in widths suited to standard spacing of wall studs and attic or floor joists.
    BattsInsulation,

    /// "[Block](https://ddwiki.reso.org/display/DDW17/Block)": The structure was made wholly or partly with block.
    Block,

    /// "[Blown-In Insulation](https://ddwiki.reso.org/display/DDW17/Blown-In+Insulation)": Blown-in or loose-fill insulation is usually made of fiberglass, rock wool, or cellulose in the form of loose fibers or fiber pellets installed using special pneumatic equipment. The blown-in material conforms readily to odd-sized building cavities and attics with wires, ducts, and pipes, making it well suited for places where it is difficult to effectively install other types of insulation.
    BlownInInsulation,

    /// "[Board & Batten Siding](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244080)": The structure was made wholly or partly with board & batten siding.
    BoardBattenSiding,

    /// "[Brick](https://ddwiki.reso.org/display/DDW17/Brick)": The structure was made wholly or partly with brick.
    Brick,

    /// "[Brick Veneer](https://ddwiki.reso.org/display/DDW17/Brick+Veneer)": The structure was made wholly or partly with brick veneer.
    BrickVeneer,

    /// "[Cedar](https://ddwiki.reso.org/display/DDW17/Cedar)": The structure was made wholly or partly with cedar.
    Cedar,

    /// "[Cement Siding](https://ddwiki.reso.org/display/DDW17/Cement+Siding)": The structure was made wholly or partly with cement siding.
    CementSiding,

    /// "[Clapboard](https://ddwiki.reso.org/display/DDW17/Clapboard)": The structure was made wholly or partly with clapboard.
    Clapboard,

    /// "[Concrete](https://ddwiki.reso.org/display/DDW17/Concrete)": The structure was made wholly or partly with concrete.
    Concrete,

    /// "[Ducts Professionally Air-Sealed](https://ddwiki.reso.org/display/DDW17/Ducts+Professionally+Air-Sealed)": The structure was made wholly or partly with ducts professionally air-sealed.
    DuctsProfessionallyAirSealed,

    /// "[Exterior Duct-Work is Insulated](https://ddwiki.reso.org/display/DDW17/Exterior+Duct-Work+is+Insulated)": DOE estimates that heating and cooling ducts located in unconditioned spaces such as attics and garages can underperform by 60–75 percent. Exterior ducts that are properly insulated can save energy and reduce overall equipment sizing. Insulation standards are clearly defined: <a name="m_-4439061441316115113__MailEndCompose"></a><a href="https://www.energy.gov/energysaver/insulation">https://www.energy.gov/energysaver/insulation</a>
    ExteriorDuctWorkisInsulated,

    /// "[Fiber Cement](https://ddwiki.reso.org/display/DDW17/Fiber+Cement)": The structure was made wholly or partly with fiber cement.
    FiberCement,

    /// "[Fiberglass Siding](https://ddwiki.reso.org/display/DDW17/Fiberglass+Siding)": The structure was made wholly or partly with fiberglass siding.
    FiberglassSiding,

    /// "[Foam Insulation](https://ddwiki.reso.org/display/DDW17/Foam+Insulation)": Spray foam or foam-in-place insulation can be sprayed into walls, on attic surfaces, or under floors to insulate and reduce air leakage. There are two types of foam-in-place insulation: closed-cell and open-cell. Both are typically made with polyurethane. Closed-cell foam has a greater insulation value and provides stronger resistance against moisture and air leakage. Open-cell foam is lighter and less expensive but should not be used below ground level where it could absorb water.
    FoamInsulation,

    /// "[Frame](https://ddwiki.reso.org/display/DDW17/Frame)": The structure was made wholly or partly with frame.
    Frame,

    /// "[Glass](https://ddwiki.reso.org/display/DDW17/Glass)": The structure was made wholly or partly with glass.
    Glass,

    /// "[HardiPlank Type](https://ddwiki.reso.org/display/DDW17/HardiPlank+Type)": The structure was made wholly or partly with HardiPlank type.
    HardiPlankType,

    /// "[ICAT Recessed Lighting](https://ddwiki.reso.org/display/DDW17/ICAT+Recessed+Lighting)": ICAT recessed light fixtures are rated both to safely come in contact with insulation and are better airsealed. ICAT is an acronym for Insulation Contact/AirTight. They can be installed safely with insulation and air sealing. These lights are different from IC (Insulation Contact) fixtures, which are not very airtight. They can also be identified by the wording “Washington State Approved.” Documentation on the installation is recommended because ICAT rating often requires multiple components be used as specified by the manufacturer. Substitutions of components can negate the rating. See: <a href="http://energy.gov/energysaver/articles/tips-lighting">http://energy.gov/energysaver/articles/tips-lighting</a> and <a href="http://energy.gov/energysaver/articles/tips-insulation">http://energy.gov/energysaver/articles/tips-insulation</a>
    ICATRecessedLighting,

    /// "[ICFs (Insulated Concrete Forms)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244096)": The structure was made wholly or partly with insulated concrete forms.
    ICFsInsulatedConcreteForms,

    /// "[Lap Siding](https://ddwiki.reso.org/display/DDW17/Lap+Siding)": The structure was made wholly or partly with lap siding.
    LapSiding,

    /// "[Log](https://ddwiki.reso.org/display/DDW17/Log)": The structure was made wholly or partly with log.
    Log,

    /// "[Log Siding](https://ddwiki.reso.org/display/DDW17/Log+Siding)": The structure was made wholly or partly with log siding.
    LogSiding,

    /// "[Low VOC Insulation](https://ddwiki.reso.org/display/DDW17/Low+VOC+Insulation)": Volatile organic compounds (VOCs) are emitted as gases from certain solids or liquids. Different types of insulation can be certified for having low VOC content by third-party verifiers such as GreenGuard.
    LowVOCInsulation,

    /// "[Masonite](https://ddwiki.reso.org/display/DDW17/Masonite)": The structure was made wholly or partly with Masonite.
    Masonite,

    /// "[Metal Siding](https://ddwiki.reso.org/display/DDW17/Metal+Siding)": The structure was made wholly or partly with metal siding.
    MetalSiding,

    /// "[Natural Building](https://ddwiki.reso.org/display/DDW17/Natural+Building)": The structure was made wholly or partly with natural building.
    NaturalBuilding,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244104)": The structure was made wholly or partly with other.
    Other,

    /// "[Plaster](https://ddwiki.reso.org/display/DDW17/Plaster)": The structure was made wholly or partly with plaster.
    Plaster,

    /// "[Radiant Barrier](https://ddwiki.reso.org/display/DDW17/Radiant+Barrier)": The structure was made wholly or partly with radiant barrier.
    RadiantBarrier,

    /// "[Rammed Earth](https://ddwiki.reso.org/display/DDW17/Rammed+Earth)": The structure was made wholly or partly with rammed earth.
    RammedEarth,

    /// "[Recycled/Bio-Based Insulation](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244108)": Insulation can be made from natural or recycled materials ranging from paper to soy to denim, using sustainable materials to improve energy efficiency.
    RecycledBioBasedInsulation,

    /// "[Redwood Siding](https://ddwiki.reso.org/display/DDW17/Redwood+Siding)": The structure was made wholly or partly with redwood siding.
    RedwoodSiding,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244110)": The structure was made wholly or partly with see remarks.
    SeeRemarks,

    /// "[Shake Siding](https://ddwiki.reso.org/display/DDW17/Shake+Siding)": The structure was made wholly or partly with shake siding.
    ShakeSiding,

    /// "[Shingle Siding](https://ddwiki.reso.org/display/DDW17/Shingle+Siding)": The structure was made wholly or partly with shingle siding.
    ShingleSiding,

    /// "[Slump Block](https://ddwiki.reso.org/display/DDW17/Slump+Block)": The structure was made wholly or partly with slump block.
    SlumpBlock,

    /// "[Spray Foam Insulation](https://ddwiki.reso.org/display/DDW17/Spray+Foam+Insulation)": The structure was made wholly or partly with spray foam insulation.
    SprayFoamInsulation,

    /// "[Steel Siding](https://ddwiki.reso.org/display/DDW17/Steel+Siding)": The structure was made wholly or partly with steel siding.
    SteelSiding,

    /// "[Stone](https://ddwiki.reso.org/display/DDW17/Stone)": The structure was made wholly or partly with stone.
    Stone,

    /// "[Stone Veneer](https://ddwiki.reso.org/display/DDW17/Stone+Veneer)": The structure was made wholly or partly with stone veneer.
    StoneVeneer,

    /// "[Straw](https://ddwiki.reso.org/display/DDW17/Straw)": The structure was made wholly or partly with straw.
    Straw,

    /// "[Stucco](https://ddwiki.reso.org/display/DDW17/Stucco)": The structure was made wholly or partly with stucco.
    Stucco,

    /// "[Synthetic Stucco](https://ddwiki.reso.org/display/DDW17/Synthetic+Stucco)": The structure was made wholly or partly with synthetic stucco.
    SyntheticStucco,

    /// "[Unknown](https://ddwiki.reso.org/display/DDW17/Unknown)": The structure was made wholly or partly with unknown.
    Unknown,

    /// "[Vertical Siding](https://ddwiki.reso.org/display/DDW17/Vertical+Siding)": The structure was made wholly or partly with vertical siding.
    VerticalSiding,

    /// "[Vinyl Siding](https://ddwiki.reso.org/display/DDW17/Vinyl+Siding)": The structure was made wholly or partly with vinyl siding.
    VinylSiding,

    /// "[Wood Siding](https://ddwiki.reso.org/display/DDW17/Wood+Siding)": The structure was made wholly or partly with wood siding.
    WoodSiding,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ConstructionMaterials {
    fn from(s: String) -> ConstructionMaterials {
        match s.as_ref() {
            "Adobe" => ConstructionMaterials::Adobe,

            "Aluminum Siding" => ConstructionMaterials::AluminumSiding,

            "Asbestos" => ConstructionMaterials::Asbestos,

            "Asphalt" => ConstructionMaterials::Asphalt,

            "Attic/Crawl Hatchway(s) Insulated" => {
                ConstructionMaterials::AtticCrawlHatchwaysInsulated
            }

            "Batts Insulation" => ConstructionMaterials::BattsInsulation,

            "Block" => ConstructionMaterials::Block,

            "Blown-In Insulation" => ConstructionMaterials::BlownInInsulation,

            "Board & Batten Siding" => ConstructionMaterials::BoardBattenSiding,

            "Brick" => ConstructionMaterials::Brick,

            "Brick Veneer" => ConstructionMaterials::BrickVeneer,

            "Cedar" => ConstructionMaterials::Cedar,

            "Cement Siding" => ConstructionMaterials::CementSiding,

            "Clapboard" => ConstructionMaterials::Clapboard,

            "Concrete" => ConstructionMaterials::Concrete,

            "Ducts Professionally Air-Sealed" => {
                ConstructionMaterials::DuctsProfessionallyAirSealed
            }

            "Exterior Duct-Work is Insulated" => ConstructionMaterials::ExteriorDuctWorkisInsulated,

            "Fiber Cement" => ConstructionMaterials::FiberCement,

            "Fiberglass Siding" => ConstructionMaterials::FiberglassSiding,

            "Foam Insulation" => ConstructionMaterials::FoamInsulation,

            "Frame" => ConstructionMaterials::Frame,

            "Glass" => ConstructionMaterials::Glass,

            "HardiPlank Type" => ConstructionMaterials::HardiPlankType,

            "ICAT Recessed Lighting" => ConstructionMaterials::ICATRecessedLighting,

            "ICFs (Insulated Concrete Forms)" => ConstructionMaterials::ICFsInsulatedConcreteForms,

            "Lap Siding" => ConstructionMaterials::LapSiding,

            "Log" => ConstructionMaterials::Log,

            "Log Siding" => ConstructionMaterials::LogSiding,

            "Low VOC Insulation" => ConstructionMaterials::LowVOCInsulation,

            "Masonite" => ConstructionMaterials::Masonite,

            "Metal Siding" => ConstructionMaterials::MetalSiding,

            "Natural Building" => ConstructionMaterials::NaturalBuilding,

            "Other" => ConstructionMaterials::Other,

            "Plaster" => ConstructionMaterials::Plaster,

            "Radiant Barrier" => ConstructionMaterials::RadiantBarrier,

            "Rammed Earth" => ConstructionMaterials::RammedEarth,

            "Recycled/Bio-Based Insulation" => ConstructionMaterials::RecycledBioBasedInsulation,

            "Redwood Siding" => ConstructionMaterials::RedwoodSiding,

            "See Remarks" => ConstructionMaterials::SeeRemarks,

            "Shake Siding" => ConstructionMaterials::ShakeSiding,

            "Shingle Siding" => ConstructionMaterials::ShingleSiding,

            "Slump Block" => ConstructionMaterials::SlumpBlock,

            "Spray Foam Insulation" => ConstructionMaterials::SprayFoamInsulation,

            "Steel Siding" => ConstructionMaterials::SteelSiding,

            "Stone" => ConstructionMaterials::Stone,

            "Stone Veneer" => ConstructionMaterials::StoneVeneer,

            "Straw" => ConstructionMaterials::Straw,

            "Stucco" => ConstructionMaterials::Stucco,

            "Synthetic Stucco" => ConstructionMaterials::SyntheticStucco,

            "Unknown" => ConstructionMaterials::Unknown,

            "Vertical Siding" => ConstructionMaterials::VerticalSiding,

            "Vinyl Siding" => ConstructionMaterials::VinylSiding,

            "Wood Siding" => ConstructionMaterials::WoodSiding,

            _ => ConstructionMaterials::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ConstructionMaterials {
    fn from(s: &str) -> ConstructionMaterials {
        match s {
            "Adobe" => ConstructionMaterials::Adobe,

            "Aluminum Siding" => ConstructionMaterials::AluminumSiding,

            "Asbestos" => ConstructionMaterials::Asbestos,

            "Asphalt" => ConstructionMaterials::Asphalt,

            "Attic/Crawl Hatchway(s) Insulated" => {
                ConstructionMaterials::AtticCrawlHatchwaysInsulated
            }

            "Batts Insulation" => ConstructionMaterials::BattsInsulation,

            "Block" => ConstructionMaterials::Block,

            "Blown-In Insulation" => ConstructionMaterials::BlownInInsulation,

            "Board & Batten Siding" => ConstructionMaterials::BoardBattenSiding,

            "Brick" => ConstructionMaterials::Brick,

            "Brick Veneer" => ConstructionMaterials::BrickVeneer,

            "Cedar" => ConstructionMaterials::Cedar,

            "Cement Siding" => ConstructionMaterials::CementSiding,

            "Clapboard" => ConstructionMaterials::Clapboard,

            "Concrete" => ConstructionMaterials::Concrete,

            "Ducts Professionally Air-Sealed" => {
                ConstructionMaterials::DuctsProfessionallyAirSealed
            }

            "Exterior Duct-Work is Insulated" => ConstructionMaterials::ExteriorDuctWorkisInsulated,

            "Fiber Cement" => ConstructionMaterials::FiberCement,

            "Fiberglass Siding" => ConstructionMaterials::FiberglassSiding,

            "Foam Insulation" => ConstructionMaterials::FoamInsulation,

            "Frame" => ConstructionMaterials::Frame,

            "Glass" => ConstructionMaterials::Glass,

            "HardiPlank Type" => ConstructionMaterials::HardiPlankType,

            "ICAT Recessed Lighting" => ConstructionMaterials::ICATRecessedLighting,

            "ICFs (Insulated Concrete Forms)" => ConstructionMaterials::ICFsInsulatedConcreteForms,

            "Lap Siding" => ConstructionMaterials::LapSiding,

            "Log" => ConstructionMaterials::Log,

            "Log Siding" => ConstructionMaterials::LogSiding,

            "Low VOC Insulation" => ConstructionMaterials::LowVOCInsulation,

            "Masonite" => ConstructionMaterials::Masonite,

            "Metal Siding" => ConstructionMaterials::MetalSiding,

            "Natural Building" => ConstructionMaterials::NaturalBuilding,

            "Other" => ConstructionMaterials::Other,

            "Plaster" => ConstructionMaterials::Plaster,

            "Radiant Barrier" => ConstructionMaterials::RadiantBarrier,

            "Rammed Earth" => ConstructionMaterials::RammedEarth,

            "Recycled/Bio-Based Insulation" => ConstructionMaterials::RecycledBioBasedInsulation,

            "Redwood Siding" => ConstructionMaterials::RedwoodSiding,

            "See Remarks" => ConstructionMaterials::SeeRemarks,

            "Shake Siding" => ConstructionMaterials::ShakeSiding,

            "Shingle Siding" => ConstructionMaterials::ShingleSiding,

            "Slump Block" => ConstructionMaterials::SlumpBlock,

            "Spray Foam Insulation" => ConstructionMaterials::SprayFoamInsulation,

            "Steel Siding" => ConstructionMaterials::SteelSiding,

            "Stone" => ConstructionMaterials::Stone,

            "Stone Veneer" => ConstructionMaterials::StoneVeneer,

            "Straw" => ConstructionMaterials::Straw,

            "Stucco" => ConstructionMaterials::Stucco,

            "Synthetic Stucco" => ConstructionMaterials::SyntheticStucco,

            "Unknown" => ConstructionMaterials::Unknown,

            "Vertical Siding" => ConstructionMaterials::VerticalSiding,

            "Vinyl Siding" => ConstructionMaterials::VinylSiding,

            "Wood Siding" => ConstructionMaterials::WoodSiding,

            _ => ConstructionMaterials::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ConstructionMaterials> for &'a str {
    fn from(s: &'a ConstructionMaterials) -> &'a str {
        match s {
            ConstructionMaterials::Adobe => "Adobe",

            ConstructionMaterials::AluminumSiding => "Aluminum Siding",

            ConstructionMaterials::Asbestos => "Asbestos",

            ConstructionMaterials::Asphalt => "Asphalt",

            ConstructionMaterials::AtticCrawlHatchwaysInsulated => {
                "Attic/Crawl Hatchway(s) Insulated"
            }

            ConstructionMaterials::BattsInsulation => "Batts Insulation",

            ConstructionMaterials::Block => "Block",

            ConstructionMaterials::BlownInInsulation => "Blown-In Insulation",

            ConstructionMaterials::BoardBattenSiding => "Board & Batten Siding",

            ConstructionMaterials::Brick => "Brick",

            ConstructionMaterials::BrickVeneer => "Brick Veneer",

            ConstructionMaterials::Cedar => "Cedar",

            ConstructionMaterials::CementSiding => "Cement Siding",

            ConstructionMaterials::Clapboard => "Clapboard",

            ConstructionMaterials::Concrete => "Concrete",

            ConstructionMaterials::DuctsProfessionallyAirSealed => {
                "Ducts Professionally Air-Sealed"
            }

            ConstructionMaterials::ExteriorDuctWorkisInsulated => "Exterior Duct-Work is Insulated",

            ConstructionMaterials::FiberCement => "Fiber Cement",

            ConstructionMaterials::FiberglassSiding => "Fiberglass Siding",

            ConstructionMaterials::FoamInsulation => "Foam Insulation",

            ConstructionMaterials::Frame => "Frame",

            ConstructionMaterials::Glass => "Glass",

            ConstructionMaterials::HardiPlankType => "HardiPlank Type",

            ConstructionMaterials::ICATRecessedLighting => "ICAT Recessed Lighting",

            ConstructionMaterials::ICFsInsulatedConcreteForms => "ICFs (Insulated Concrete Forms)",

            ConstructionMaterials::LapSiding => "Lap Siding",

            ConstructionMaterials::Log => "Log",

            ConstructionMaterials::LogSiding => "Log Siding",

            ConstructionMaterials::LowVOCInsulation => "Low VOC Insulation",

            ConstructionMaterials::Masonite => "Masonite",

            ConstructionMaterials::MetalSiding => "Metal Siding",

            ConstructionMaterials::NaturalBuilding => "Natural Building",

            ConstructionMaterials::Other => "Other",

            ConstructionMaterials::Plaster => "Plaster",

            ConstructionMaterials::RadiantBarrier => "Radiant Barrier",

            ConstructionMaterials::RammedEarth => "Rammed Earth",

            ConstructionMaterials::RecycledBioBasedInsulation => "Recycled/Bio-Based Insulation",

            ConstructionMaterials::RedwoodSiding => "Redwood Siding",

            ConstructionMaterials::SeeRemarks => "See Remarks",

            ConstructionMaterials::ShakeSiding => "Shake Siding",

            ConstructionMaterials::ShingleSiding => "Shingle Siding",

            ConstructionMaterials::SlumpBlock => "Slump Block",

            ConstructionMaterials::SprayFoamInsulation => "Spray Foam Insulation",

            ConstructionMaterials::SteelSiding => "Steel Siding",

            ConstructionMaterials::Stone => "Stone",

            ConstructionMaterials::StoneVeneer => "Stone Veneer",

            ConstructionMaterials::Straw => "Straw",

            ConstructionMaterials::Stucco => "Stucco",

            ConstructionMaterials::SyntheticStucco => "Synthetic Stucco",

            ConstructionMaterials::Unknown => "Unknown",

            ConstructionMaterials::VerticalSiding => "Vertical Siding",

            ConstructionMaterials::VinylSiding => "Vinyl Siding",

            ConstructionMaterials::WoodSiding => "Wood Siding",

            ConstructionMaterials::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ConstructionMaterials {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ConstructionMaterials {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_construction_materials_format {
    use super::ConstructionMaterials;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ConstructionMaterials>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ConstructionMaterials>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ContactListingPreference Lookups](https://ddwiki.reso.org/display/DDW17/ContactListingPreference+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ContactListingPreference {
    /// "[Discard](https://ddwiki.reso.org/display/DDW17/Discard)": The contact has flagged to discard the given listing. The contact is not interested in the given listing.
    Discard,

    /// "[Favorite](https://ddwiki.reso.org/display/DDW17/Favorite)": The contact has flagged the given listing as a favorite. The contact is interested in the given listing.
    Favorite,

    /// "[Possibility](https://ddwiki.reso.org/display/DDW17/Possibility)": The contact has flagged the given listing as a possibility. The contact might be interested in the given listing.
    Possibility,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ContactListingPreference {
    fn from(s: String) -> ContactListingPreference {
        match s.as_ref() {
            "Discard" => ContactListingPreference::Discard,

            "Favorite" => ContactListingPreference::Favorite,

            "Possibility" => ContactListingPreference::Possibility,

            _ => ContactListingPreference::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ContactListingPreference {
    fn from(s: &str) -> ContactListingPreference {
        match s {
            "Discard" => ContactListingPreference::Discard,

            "Favorite" => ContactListingPreference::Favorite,

            "Possibility" => ContactListingPreference::Possibility,

            _ => ContactListingPreference::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ContactListingPreference> for &'a str {
    fn from(s: &'a ContactListingPreference) -> &'a str {
        match s {
            ContactListingPreference::Discard => "Discard",

            ContactListingPreference::Favorite => "Favorite",

            ContactListingPreference::Possibility => "Possibility",

            ContactListingPreference::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ContactListingPreference {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ContactListingPreference {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_contact_listing_preference_format {
    use super::ContactListingPreference;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ContactListingPreference>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ContactListingPreference>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ContactStatus Lookups](https://ddwiki.reso.org/display/DDW17/ContactStatus+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ContactStatus {
    /// "[Active](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244403)": The contact is active.
    Active,

    /// "[Deleted](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244404)": The contact has been deleted.
    Deleted,

    /// "[Inactive](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244405)": The contact is no longer active.
    Inactive,

    /// "[On Vacation](https://ddwiki.reso.org/display/DDW17/On+Vacation)": The contact is on vacation.
    OnVacation,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ContactStatus {
    fn from(s: String) -> ContactStatus {
        match s.as_ref() {
            "Active" => ContactStatus::Active,

            "Deleted" => ContactStatus::Deleted,

            "Inactive" => ContactStatus::Inactive,

            "On Vacation" => ContactStatus::OnVacation,

            _ => ContactStatus::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ContactStatus {
    fn from(s: &str) -> ContactStatus {
        match s {
            "Active" => ContactStatus::Active,

            "Deleted" => ContactStatus::Deleted,

            "Inactive" => ContactStatus::Inactive,

            "On Vacation" => ContactStatus::OnVacation,

            _ => ContactStatus::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ContactStatus> for &'a str {
    fn from(s: &'a ContactStatus) -> &'a str {
        match s {
            ContactStatus::Active => "Active",

            ContactStatus::Deleted => "Deleted",

            ContactStatus::Inactive => "Inactive",

            ContactStatus::OnVacation => "On Vacation",

            ContactStatus::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ContactStatus {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ContactStatus {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_contact_status_format {
    use super::ContactStatus;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ContactStatus>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ContactStatus>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ContactType Lookups](https://ddwiki.reso.org/display/DDW17/ContactType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ContactType {
    /// "[Business](https://ddwiki.reso.org/display/DDW17/Business)": The contact is a business relation.
    Business,

    /// "[Family](https://ddwiki.reso.org/display/DDW17/Family)": The contact is a family member.
    Family,

    /// "[Friend](https://ddwiki.reso.org/display/DDW17/Friend)": The contact is a personal friend.
    Friend,

    /// "[Lead](https://ddwiki.reso.org/display/DDW17/Lead)": The lead is a contact that may be a potential buyer or seller to the member.
    Lead,

    /// "[Prospect](https://ddwiki.reso.org/display/DDW17/Prospect)": The contact is a prospective client.
    Prospect,

    /// "[Ready to Buy](https://ddwiki.reso.org/display/DDW17/Ready+to+Buy)": The contact is a client who is ready to start a transaction.
    ReadytoBuy,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ContactType {
    fn from(s: String) -> ContactType {
        match s.as_ref() {
            "Business" => ContactType::Business,

            "Family" => ContactType::Family,

            "Friend" => ContactType::Friend,

            "Lead" => ContactType::Lead,

            "Prospect" => ContactType::Prospect,

            "Ready to Buy" => ContactType::ReadytoBuy,

            _ => ContactType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ContactType {
    fn from(s: &str) -> ContactType {
        match s {
            "Business" => ContactType::Business,

            "Family" => ContactType::Family,

            "Friend" => ContactType::Friend,

            "Lead" => ContactType::Lead,

            "Prospect" => ContactType::Prospect,

            "Ready to Buy" => ContactType::ReadytoBuy,

            _ => ContactType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ContactType> for &'a str {
    fn from(s: &'a ContactType) -> &'a str {
        match s {
            ContactType::Business => "Business",

            ContactType::Family => "Family",

            ContactType::Friend => "Friend",

            ContactType::Lead => "Lead",

            ContactType::Prospect => "Prospect",

            ContactType::ReadytoBuy => "Ready to Buy",

            ContactType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ContactType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ContactType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_contact_type_format {
    use super::ContactType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ContactType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<ContactType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Cooling Lookups](https://ddwiki.reso.org/display/DDW17/Cooling+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Cooling {
    /// "[Attic Fan](https://ddwiki.reso.org/display/DDW17/Attic+Fan)": The property has an attic fan.
    AtticFan,

    /// "[Ceiling Fan(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244511)": The property has one or more ceiling fans.
    CeilingFans,

    /// "[Central Air](https://ddwiki.reso.org/display/DDW17/Central+Air)": The property has central air conditioning.
    CentralAir,

    /// "[Dual](https://ddwiki.reso.org/display/DDW17/Dual)": The cooling system has two units.
    Dual,

    /// "[Ductless](https://ddwiki.reso.org/display/DDW17/Ductless)": The cooling system does not ducted nor a wall/window type unit.  A mini-split is a common type of ductless system where an outdoor condenser is connected to an indoor fan unit that feeds the room in which it's located, rather than being ducted throughout the structure.
    Ductless,

    /// "[Electric](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244515)": The cooling system is powered by electricity.
    Electric,

    /// "[ENERGY STAR Qualified Equipment](https://ddwiki.reso.org/display/DDW17/ENERGY+STAR+Qualified+Equipment)": The cooling system is ENERGY STAR Qualified.
    ENERGYSTARQualifiedEquipment,

    /// "[Evaporative Cooling](https://ddwiki.reso.org/display/DDW17/Evaporative+Cooling)": The cooling system works by way of water evaporation rather than a compressor and coolant.  Evaporative cooling systems are often referred to as swamp coolers.
    EvaporativeCooling,

    /// "[Exhaust Fan](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244518)": The structure has an exhaust fan.
    ExhaustFan,

    /// "[Gas](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244519)": The cooling system is powered by gas.
    Gas,

    /// "[Geothermal](https://ddwiki.reso.org/display/DDW17/Geothermal)": The cooling system runs on a geothermal source.
    Geothermal,

    /// "[Heat Pump](https://ddwiki.reso.org/display/DDW17/Heat+Pump)": A system that exchanges heat between a warm and cool space.  The heat exchange is done between the dwelling and another air space, like outdoors; or a water source; or below ground (geothermal).
    HeatPump,

    /// "[Humidity Control](https://ddwiki.reso.org/display/DDW17/Humidity+Control)": The cooling system includes humidity control.
    HumidityControl,

    /// "[Multi Units](https://ddwiki.reso.org/display/DDW17/Multi+Units)": The cooing system includes more than one unit.
    MultiUnits,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244524)": The property includes no cooling system.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244525)": The cooling system is different, or has features, that are not included in this list.
    Other,

    /// "[Roof Turbine(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244526)": The cooling utilizes a roof turbine.
    RoofTurbines,

    /// "[Separate Meters](https://ddwiki.reso.org/display/DDW17/Separate+Meters)": The cooling system has separate meters for its multiple units/zones.
    SeparateMeters,

    /// "[Varies by Unit](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244528)": The cooling equipment varies by unit.
    VariesbyUnit,

    /// "[Wall Unit(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244530)": The cooling system is stand alone and mounted in an opening in an outer wall.
    WallUnits,

    /// "[Wall/Window Unit(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244529)": The cooling system is mounted in an opening in the wall or in a window.
    WallWindowUnits,

    /// "[Whole House Fan](https://ddwiki.reso.org/display/DDW17/Whole+House+Fan)": The property has a whole house fan.
    WholeHouseFan,

    /// "[Window Unit(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244532)": The cooling system is window mounted.
    WindowUnits,

    /// "[Zoned](https://ddwiki.reso.org/display/DDW17/Zoned)": The cooling system has more than one zone.
    Zoned,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Cooling {
    fn from(s: String) -> Cooling {
        match s.as_ref() {
            "Attic Fan" => Cooling::AtticFan,

            "Ceiling Fan(s)" => Cooling::CeilingFans,

            "Central Air" => Cooling::CentralAir,

            "Dual" => Cooling::Dual,

            "Ductless" => Cooling::Ductless,

            "Electric" => Cooling::Electric,

            "ENERGY STAR Qualified Equipment" => Cooling::ENERGYSTARQualifiedEquipment,

            "Evaporative Cooling" => Cooling::EvaporativeCooling,

            "Exhaust Fan" => Cooling::ExhaustFan,

            "Gas" => Cooling::Gas,

            "Geothermal" => Cooling::Geothermal,

            "Heat Pump" => Cooling::HeatPump,

            "Humidity Control" => Cooling::HumidityControl,

            "Multi Units" => Cooling::MultiUnits,

            "None" => Cooling::None,

            "Other" => Cooling::Other,

            "Roof Turbine(s)" => Cooling::RoofTurbines,

            "Separate Meters" => Cooling::SeparateMeters,

            "Varies by Unit" => Cooling::VariesbyUnit,

            "Wall Unit(s)" => Cooling::WallUnits,

            "Wall/Window Unit(s)" => Cooling::WallWindowUnits,

            "Whole House Fan" => Cooling::WholeHouseFan,

            "Window Unit(s)" => Cooling::WindowUnits,

            "Zoned" => Cooling::Zoned,

            _ => Cooling::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Cooling {
    fn from(s: &str) -> Cooling {
        match s {
            "Attic Fan" => Cooling::AtticFan,

            "Ceiling Fan(s)" => Cooling::CeilingFans,

            "Central Air" => Cooling::CentralAir,

            "Dual" => Cooling::Dual,

            "Ductless" => Cooling::Ductless,

            "Electric" => Cooling::Electric,

            "ENERGY STAR Qualified Equipment" => Cooling::ENERGYSTARQualifiedEquipment,

            "Evaporative Cooling" => Cooling::EvaporativeCooling,

            "Exhaust Fan" => Cooling::ExhaustFan,

            "Gas" => Cooling::Gas,

            "Geothermal" => Cooling::Geothermal,

            "Heat Pump" => Cooling::HeatPump,

            "Humidity Control" => Cooling::HumidityControl,

            "Multi Units" => Cooling::MultiUnits,

            "None" => Cooling::None,

            "Other" => Cooling::Other,

            "Roof Turbine(s)" => Cooling::RoofTurbines,

            "Separate Meters" => Cooling::SeparateMeters,

            "Varies by Unit" => Cooling::VariesbyUnit,

            "Wall Unit(s)" => Cooling::WallUnits,

            "Wall/Window Unit(s)" => Cooling::WallWindowUnits,

            "Whole House Fan" => Cooling::WholeHouseFan,

            "Window Unit(s)" => Cooling::WindowUnits,

            "Zoned" => Cooling::Zoned,

            _ => Cooling::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Cooling> for &'a str {
    fn from(s: &'a Cooling) -> &'a str {
        match s {
            Cooling::AtticFan => "Attic Fan",

            Cooling::CeilingFans => "Ceiling Fan(s)",

            Cooling::CentralAir => "Central Air",

            Cooling::Dual => "Dual",

            Cooling::Ductless => "Ductless",

            Cooling::Electric => "Electric",

            Cooling::ENERGYSTARQualifiedEquipment => "ENERGY STAR Qualified Equipment",

            Cooling::EvaporativeCooling => "Evaporative Cooling",

            Cooling::ExhaustFan => "Exhaust Fan",

            Cooling::Gas => "Gas",

            Cooling::Geothermal => "Geothermal",

            Cooling::HeatPump => "Heat Pump",

            Cooling::HumidityControl => "Humidity Control",

            Cooling::MultiUnits => "Multi Units",

            Cooling::None => "None",

            Cooling::Other => "Other",

            Cooling::RoofTurbines => "Roof Turbine(s)",

            Cooling::SeparateMeters => "Separate Meters",

            Cooling::VariesbyUnit => "Varies by Unit",

            Cooling::WallUnits => "Wall Unit(s)",

            Cooling::WallWindowUnits => "Wall/Window Unit(s)",

            Cooling::WholeHouseFan => "Whole House Fan",

            Cooling::WindowUnits => "Window Unit(s)",

            Cooling::Zoned => "Zoned",

            Cooling::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Cooling {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Cooling {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_cooling_format {
    use super::Cooling;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Cooling>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Cooling>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Country Lookups](https://ddwiki.reso.org/display/DDW17/Country+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Country {
    /// "[AD](https://ddwiki.reso.org/display/DDW17/AD)": Andorra is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AD,

    /// "[AE](https://ddwiki.reso.org/display/DDW17/AE)": United Arab Emirates is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AE,

    /// "[AF](https://ddwiki.reso.org/display/DDW17/AF)": Afghanistan is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AF,

    /// "[AG](https://ddwiki.reso.org/display/DDW17/AG)": Antigua Barbuda is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AG,

    /// "[AI](https://ddwiki.reso.org/display/DDW17/AI)": Anguilla is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AI,

    /// "[AL](https://ddwiki.reso.org/display/DDW17/AL)": Albania is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AL,

    /// "[AM](https://ddwiki.reso.org/display/DDW17/AM)": Armenia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AM,

    /// "[AN](https://ddwiki.reso.org/display/DDW17/AN)": Netherlands Antilles is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AN,

    /// "[AO](https://ddwiki.reso.org/display/DDW17/AO)": Angola is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AO,

    /// "[AQ](https://ddwiki.reso.org/display/DDW17/AQ)": Antarctica is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AQ,

    /// "[AR](https://ddwiki.reso.org/display/DDW17/AR)": Argentina is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AR,

    /// "[AS](https://ddwiki.reso.org/display/DDW17/AS)": American Samoa is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AS,

    /// "[AT](https://ddwiki.reso.org/display/DDW17/AT)": Austria is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AT,

    /// "[AU](https://ddwiki.reso.org/display/DDW17/AU)": Australia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AU,

    /// "[AW](https://ddwiki.reso.org/display/DDW17/AW)": Aruba is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AW,

    /// "[AX](https://ddwiki.reso.org/display/DDW17/AX)": Land Islands is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AX,

    /// "[AZ](https://ddwiki.reso.org/display/DDW17/AZ)": Azerbaijan is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    AZ,

    /// "[BA](https://ddwiki.reso.org/display/DDW17/BA)": Bosnia Herzegovina is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BA,

    /// "[BB](https://ddwiki.reso.org/display/DDW17/BB)": Barbados is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BB,

    /// "[BD](https://ddwiki.reso.org/display/DDW17/BD)": Bangladesh is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BD,

    /// "[BE](https://ddwiki.reso.org/display/DDW17/BE)": Belgium is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BE,

    /// "[BF](https://ddwiki.reso.org/display/DDW17/BF)": Burkina Faso is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BF,

    /// "[BG](https://ddwiki.reso.org/display/DDW17/BG)": Bulgaria is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BG,

    /// "[BH](https://ddwiki.reso.org/display/DDW17/BH)": Bahrain is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BH,

    /// "[BI](https://ddwiki.reso.org/display/DDW17/BI)": Burundi is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BI,

    /// "[BJ](https://ddwiki.reso.org/display/DDW17/BJ)": Benin is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BJ,

    /// "[BL](https://ddwiki.reso.org/display/DDW17/BL)": Saint Barthelemy is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BL,

    /// "[BM](https://ddwiki.reso.org/display/DDW17/BM)": Bermuda is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BM,

    /// "[BN](https://ddwiki.reso.org/display/DDW17/BN)": Brunei Darussalam is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BN,

    /// "[BO](https://ddwiki.reso.org/display/DDW17/BO)": Bolivia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BO,

    /// "[BR](https://ddwiki.reso.org/display/DDW17/BR)": Brazil is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BR,

    /// "[BS](https://ddwiki.reso.org/display/DDW17/BS)": Bahamas is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BS,

    /// "[BT](https://ddwiki.reso.org/display/DDW17/BT)": Bhutan is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BT,

    /// "[BV](https://ddwiki.reso.org/display/DDW17/BV)": Bouvet Island is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BV,

    /// "[BW](https://ddwiki.reso.org/display/DDW17/BW)": Botswana is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BW,

    /// "[BY](https://ddwiki.reso.org/display/DDW17/BY)": Belarus is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BY,

    /// "[BZ](https://ddwiki.reso.org/display/DDW17/BZ)": Belize is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    BZ,

    /// "[CA](https://ddwiki.reso.org/display/DDW17/CA)": Canada is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CA,

    /// "[CC](https://ddwiki.reso.org/display/DDW17/CC)": Cocos (Keeling) Islands is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CC,

    /// "[CD](https://ddwiki.reso.org/display/DDW17/CD)": Congo Democratic Republic is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CD,

    /// "[CF](https://ddwiki.reso.org/display/DDW17/CF)": Central African Republic is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CF,

    /// "[CG](https://ddwiki.reso.org/display/DDW17/CG)": Congo is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CG,

    /// "[CH](https://ddwiki.reso.org/display/DDW17/CH)": Switzerland is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CH,

    /// "[CI](https://ddwiki.reso.org/display/DDW17/CI)": Cote d'Ivoire is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CI,

    /// "[CK](https://ddwiki.reso.org/display/DDW17/CK)": Cook Islands is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CK,

    /// "[CL](https://ddwiki.reso.org/display/DDW17/CL)": Chile is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CL,

    /// "[CM](https://ddwiki.reso.org/display/DDW17/CM)": Cameroon is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CM,

    /// "[CN](https://ddwiki.reso.org/display/DDW17/CN)": China is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CN,

    /// "[CO](https://ddwiki.reso.org/display/DDW17/CO)": Colombia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CO,

    /// "[CR](https://ddwiki.reso.org/display/DDW17/CR)": Costa Rica is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CR,

    /// "[CU](https://ddwiki.reso.org/display/DDW17/CU)": Cuba is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CU,

    /// "[CV](https://ddwiki.reso.org/display/DDW17/CV)": Cabo Verde is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CV,

    /// "[CX](https://ddwiki.reso.org/display/DDW17/CX)": Christmas Island is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CX,

    /// "[CY](https://ddwiki.reso.org/display/DDW17/CY)": Cyprus is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CY,

    /// "[CZ](https://ddwiki.reso.org/display/DDW17/CZ)": Czech Republic is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    CZ,

    /// "[DE](https://ddwiki.reso.org/display/DDW17/DE)": Germany is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    DE,

    /// "[DJ](https://ddwiki.reso.org/display/DDW17/DJ)": Djibouti is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    DJ,

    /// "[DK](https://ddwiki.reso.org/display/DDW17/DK)": Denmark is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    DK,

    /// "[DM](https://ddwiki.reso.org/display/DDW17/DM)": Dominica is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    DM,

    /// "[DO](https://ddwiki.reso.org/display/DDW17/DO)": Dominican Republic is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    DO,

    /// "[DZ](https://ddwiki.reso.org/display/DDW17/DZ)": Algeria is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    DZ,

    /// "[EC](https://ddwiki.reso.org/display/DDW17/EC)": Ecuador is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    EC,

    /// "[EE](https://ddwiki.reso.org/display/DDW17/EE)": Estonia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    EE,

    /// "[EG](https://ddwiki.reso.org/display/DDW17/EG)": Egypt is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    EG,

    /// "[EH](https://ddwiki.reso.org/display/DDW17/EH)": Western Sahara is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    EH,

    /// "[ER](https://ddwiki.reso.org/display/DDW17/ER)": Eritrea is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    ER,

    /// "[ES](https://ddwiki.reso.org/display/DDW17/ES)": Spain is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    ES,

    /// "[ET](https://ddwiki.reso.org/display/DDW17/ET)": Ethiopia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    ET,

    /// "[FI](https://ddwiki.reso.org/display/DDW17/FI)": Finland is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    FI,

    /// "[FJ](https://ddwiki.reso.org/display/DDW17/FJ)": Fiji is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    FJ,

    /// "[FK](https://ddwiki.reso.org/display/DDW17/FK)": Falkland Islands is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    FK,

    /// "[FM](https://ddwiki.reso.org/display/DDW17/FM)": Micronesia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    FM,

    /// "[FO](https://ddwiki.reso.org/display/DDW17/FO)": Faroe Islands is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    FO,

    /// "[FR](https://ddwiki.reso.org/display/DDW17/FR)": France is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    FR,

    /// "[GA](https://ddwiki.reso.org/display/DDW17/GA)": Gabon is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GA,

    /// "[GB](https://ddwiki.reso.org/display/DDW17/GB)": United Kingdom is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GB,

    /// "[GD](https://ddwiki.reso.org/display/DDW17/GD)": Grenada is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GD,

    /// "[GE](https://ddwiki.reso.org/display/DDW17/GE)": Georgia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GE,

    /// "[GF](https://ddwiki.reso.org/display/DDW17/GF)": French Guiana is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GF,

    /// "[GG](https://ddwiki.reso.org/display/DDW17/GG)": Guernsey is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GG,

    /// "[GH](https://ddwiki.reso.org/display/DDW17/GH)": Ghana is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GH,

    /// "[GI](https://ddwiki.reso.org/display/DDW17/GI)": Gibraltar is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GI,

    /// "[GL](https://ddwiki.reso.org/display/DDW17/GL)": Greenland is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GL,

    /// "[GM](https://ddwiki.reso.org/display/DDW17/GM)": Gambia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GM,

    /// "[GN](https://ddwiki.reso.org/display/DDW17/GN)": Guinea is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GN,

    /// "[GP](https://ddwiki.reso.org/display/DDW17/GP)": Guadeloupe is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GP,

    /// "[GQ](https://ddwiki.reso.org/display/DDW17/GQ)": Equatorial Guinea is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GQ,

    /// "[GR](https://ddwiki.reso.org/display/DDW17/GR)": Greece is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GR,

    /// "[GS](https://ddwiki.reso.org/display/DDW17/GS)": South Georgia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GS,

    /// "[GT](https://ddwiki.reso.org/display/DDW17/GT)": Guatemala is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GT,

    /// "[GU](https://ddwiki.reso.org/display/DDW17/GU)": Guam is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GU,

    /// "[GW](https://ddwiki.reso.org/display/DDW17/GW)": Guinea-Bissau is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GW,

    /// "[GY](https://ddwiki.reso.org/display/DDW17/GY)": Guyana is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    GY,

    /// "[HK](https://ddwiki.reso.org/display/DDW17/HK)": Hong Kong is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    HK,

    /// "[HM](https://ddwiki.reso.org/display/DDW17/HM)": Heard And McDonald Islands is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    HM,

    /// "[HN](https://ddwiki.reso.org/display/DDW17/HN)": Honduras is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    HN,

    /// "[HR](https://ddwiki.reso.org/display/DDW17/HR)": Croatia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    HR,

    /// "[HT](https://ddwiki.reso.org/display/DDW17/HT)": Haiti is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    HT,

    /// "[HU](https://ddwiki.reso.org/display/DDW17/HU)": Hungary is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    HU,

    /// "[ID](https://ddwiki.reso.org/display/DDW17/ID)": Indonesia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    ID,

    /// "[IE](https://ddwiki.reso.org/display/DDW17/IE)": Ireland is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    IE,

    /// "[IL](https://ddwiki.reso.org/display/DDW17/IL)": Israel is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    IL,

    /// "[IM](https://ddwiki.reso.org/display/DDW17/IM)": Isle Of Man is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    IM,

    /// "[IN](https://ddwiki.reso.org/display/DDW17/IN)": India is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    IN,

    /// "[IO](https://ddwiki.reso.org/display/DDW17/IO)": British Indian Ocean Territory is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    IO,

    /// "[IQ](https://ddwiki.reso.org/display/DDW17/IQ)": Iraq is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    IQ,

    /// "[IR](https://ddwiki.reso.org/display/DDW17/IR)": Iran is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    IR,

    /// "[IS](https://ddwiki.reso.org/display/DDW17/IS)": Iceland is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    IS,

    /// "[IT](https://ddwiki.reso.org/display/DDW17/IT)": Italy is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    IT,

    /// "[JE](https://ddwiki.reso.org/display/DDW17/JE)": Jersey is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    JE,

    /// "[JM](https://ddwiki.reso.org/display/DDW17/JM)": Jamaica is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    JM,

    /// "[JO](https://ddwiki.reso.org/display/DDW17/JO)": Jordan is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    JO,

    /// "[JP](https://ddwiki.reso.org/display/DDW17/JP)": Japan is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    JP,

    /// "[KE](https://ddwiki.reso.org/display/DDW17/KE)": Kenya is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    KE,

    /// "[KG](https://ddwiki.reso.org/display/DDW17/KG)": Kyrgyzstan is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    KG,

    /// "[KH](https://ddwiki.reso.org/display/DDW17/KH)": Cambodia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    KH,

    /// "[KI](https://ddwiki.reso.org/display/DDW17/KI)": Kiribati is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    KI,

    /// "[KM](https://ddwiki.reso.org/display/DDW17/KM)": Comoros is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    KM,

    /// "[KN](https://ddwiki.reso.org/display/DDW17/KN)": Saint Kitts And Nevis is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    KN,

    /// "[KP](https://ddwiki.reso.org/display/DDW17/KP)": North Korea, officially named the Democratic People's Republic of Korea, is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    KP,

    /// "[KR](https://ddwiki.reso.org/display/DDW17/KR)": South Korea, officially named the Republic of Korea, is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    KR,

    /// "[KW](https://ddwiki.reso.org/display/DDW17/KW)": Kuwait is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    KW,

    /// "[KY](https://ddwiki.reso.org/display/DDW17/KY)": Cayman Islands is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    KY,

    /// "[KZ](https://ddwiki.reso.org/display/DDW17/KZ)": Kazakhstan is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    KZ,

    /// "[LA](https://ddwiki.reso.org/display/DDW17/LA)": Lao is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    LA,

    /// "[LB](https://ddwiki.reso.org/display/DDW17/LB)": Lebanon is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    LB,

    /// "[LC](https://ddwiki.reso.org/display/DDW17/LC)": Saint Lucia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    LC,

    /// "[LI](https://ddwiki.reso.org/display/DDW17/LI)": Liechtenstein is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    LI,

    /// "[LK](https://ddwiki.reso.org/display/DDW17/LK)": Sri Lanka is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    LK,

    /// "[LR](https://ddwiki.reso.org/display/DDW17/LR)": Liberia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    LR,

    /// "[LS](https://ddwiki.reso.org/display/DDW17/LS)": Lesotho is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    LS,

    /// "[LT](https://ddwiki.reso.org/display/DDW17/LT)": Lithuania is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    LT,

    /// "[LU](https://ddwiki.reso.org/display/DDW17/LU)": Luxembourg is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    LU,

    /// "[LV](https://ddwiki.reso.org/display/DDW17/LV)": Latvia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    LV,

    /// "[LY](https://ddwiki.reso.org/display/DDW17/LY)": Libyan Arab Jamahiriya is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    LY,

    /// "[MA](https://ddwiki.reso.org/display/DDW17/MA)": Morocco is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MA,

    /// "[MC](https://ddwiki.reso.org/display/DDW17/MC)": Monaco is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MC,

    /// "[MD](https://ddwiki.reso.org/display/DDW17/MD)": Moldova is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MD,

    /// "[ME](https://ddwiki.reso.org/display/DDW17/ME)": Montenegro is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    ME,

    /// "[MF](https://ddwiki.reso.org/display/DDW17/MF)": Saint Martin is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MF,

    /// "[MG](https://ddwiki.reso.org/display/DDW17/MG)": Madagascar is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MG,

    /// "[MH](https://ddwiki.reso.org/display/DDW17/MH)": Marshall Islands is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MH,

    /// "[MK](https://ddwiki.reso.org/display/DDW17/MK)": Macedonia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MK,

    /// "[ML](https://ddwiki.reso.org/display/DDW17/ML)": Mali is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    ML,

    /// "[MM](https://ddwiki.reso.org/display/DDW17/MM)": Myanmar is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MM,

    /// "[MN](https://ddwiki.reso.org/display/DDW17/MN)": Mongolia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MN,

    /// "[MO](https://ddwiki.reso.org/display/DDW17/MO)": Macao is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MO,

    /// "[MP](https://ddwiki.reso.org/display/DDW17/MP)": Northern Mariana Islands is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MP,

    /// "[MQ](https://ddwiki.reso.org/display/DDW17/MQ)": Martinique is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MQ,

    /// "[MR](https://ddwiki.reso.org/display/DDW17/MR)": Mauritania is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MR,

    /// "[MS](https://ddwiki.reso.org/display/DDW17/MS)": Montserrat is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MS,

    /// "[MT](https://ddwiki.reso.org/display/DDW17/MT)": Malta is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MT,

    /// "[MU](https://ddwiki.reso.org/display/DDW17/MU)": Mauritius is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MU,

    /// "[MV](https://ddwiki.reso.org/display/DDW17/MV)": Maldives is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MV,

    /// "[MW](https://ddwiki.reso.org/display/DDW17/MW)": Malawi is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MW,

    /// "[MX](https://ddwiki.reso.org/display/DDW17/MX)": Mexico is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MX,

    /// "[MY](https://ddwiki.reso.org/display/DDW17/MY)": Malaysia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MY,

    /// "[MZ](https://ddwiki.reso.org/display/DDW17/MZ)": Mozambique is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    MZ,

    /// "[NA](https://ddwiki.reso.org/display/DDW17/NA)": Namibia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    NA,

    /// "[NC](https://ddwiki.reso.org/display/DDW17/NC)": New Caledonia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    NC,

    /// "[NE](https://ddwiki.reso.org/display/DDW17/NE)": Niger is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    NE,

    /// "[NF](https://ddwiki.reso.org/display/DDW17/NF)": Norfolk Island is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    NF,

    /// "[NG](https://ddwiki.reso.org/display/DDW17/NG)": Nigeria is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    NG,

    /// "[NI](https://ddwiki.reso.org/display/DDW17/NI)": Nicaragua is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    NI,

    /// "[NL](https://ddwiki.reso.org/display/DDW17/NL)": Netherlands is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    NL,

    /// "[NP](https://ddwiki.reso.org/display/DDW17/NP)": Nepal is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    NP,

    /// "[NR](https://ddwiki.reso.org/display/DDW17/NR)": Nauru is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    NR,

    /// "[NU](https://ddwiki.reso.org/display/DDW17/NU)": Niue is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    NU,

    /// "[NZ](https://ddwiki.reso.org/display/DDW17/NZ)": New Zealand is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    NZ,

    /// "[OM](https://ddwiki.reso.org/display/DDW17/OM)": Oman is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    OM,

    /// "[OT](https://ddwiki.reso.org/display/DDW17/OT)": Other is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    OT,

    /// "[PA](https://ddwiki.reso.org/display/DDW17/PA)": Panama is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PA,

    /// "[PE](https://ddwiki.reso.org/display/DDW17/PE)": Peru is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PE,

    /// "[PF](https://ddwiki.reso.org/display/DDW17/PF)": French Polynesia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PF,

    /// "[PG](https://ddwiki.reso.org/display/DDW17/PG)": Papua New Guinea is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PG,

    /// "[PH](https://ddwiki.reso.org/display/DDW17/PH)": Philippines is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PH,

    /// "[PK](https://ddwiki.reso.org/display/DDW17/PK)": Pakistan is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PK,

    /// "[PL](https://ddwiki.reso.org/display/DDW17/PL)": Poland is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PL,

    /// "[PM](https://ddwiki.reso.org/display/DDW17/PM)": Saint Pierre And Miquelon is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PM,

    /// "[PN](https://ddwiki.reso.org/display/DDW17/PN)": Pitcairn is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PN,

    /// "[PR](https://ddwiki.reso.org/display/DDW17/PR)": Puerto Rico is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PR,

    /// "[PS](https://ddwiki.reso.org/display/DDW17/PS)": Palestinian Territory is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PS,

    /// "[PT](https://ddwiki.reso.org/display/DDW17/PT)": Portugal is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PT,

    /// "[PW](https://ddwiki.reso.org/display/DDW17/PW)": Palau is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PW,

    /// "[PY](https://ddwiki.reso.org/display/DDW17/PY)": Paraguay is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    PY,

    /// "[QA](https://ddwiki.reso.org/display/DDW17/QA)": Qatar is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    QA,

    /// "[RE](https://ddwiki.reso.org/display/DDW17/RE)": Reunion is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    RE,

    /// "[RO](https://ddwiki.reso.org/display/DDW17/RO)": Romania is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    RO,

    /// "[RS](https://ddwiki.reso.org/display/DDW17/RS)": Serbia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    RS,

    /// "[RU](https://ddwiki.reso.org/display/DDW17/RU)": Russian Federation is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    RU,

    /// "[RW](https://ddwiki.reso.org/display/DDW17/RW)": Rwanda is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    RW,

    /// "[SA](https://ddwiki.reso.org/display/DDW17/SA)": Saudi Arabia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SA,

    /// "[SB](https://ddwiki.reso.org/display/DDW17/SB)": Solomon Islands is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SB,

    /// "[SC](https://ddwiki.reso.org/display/DDW17/SC)": Seychelles is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SC,

    /// "[SD](https://ddwiki.reso.org/display/DDW17/SD)": Sudan is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SD,

    /// "[SE](https://ddwiki.reso.org/display/DDW17/SE)": Sweden is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SE,

    /// "[SG](https://ddwiki.reso.org/display/DDW17/SG)": Singapore is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SG,

    /// "[SH](https://ddwiki.reso.org/display/DDW17/SH)": Saint Helena is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SH,

    /// "[SI](https://ddwiki.reso.org/display/DDW17/SI)": Slovenia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SI,

    /// "[SJ](https://ddwiki.reso.org/display/DDW17/SJ)": Svalbard - Jan Mayen is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SJ,

    /// "[SK](https://ddwiki.reso.org/display/DDW17/SK)": Slovakia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SK,

    /// "[SL](https://ddwiki.reso.org/display/DDW17/SL)": Sierra Leone is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SL,

    /// "[SM](https://ddwiki.reso.org/display/DDW17/SM)": San Marino is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SM,

    /// "[SN](https://ddwiki.reso.org/display/DDW17/SN)": Senegal is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SN,

    /// "[SO](https://ddwiki.reso.org/display/DDW17/SO)": Somalia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SO,

    /// "[SR](https://ddwiki.reso.org/display/DDW17/SR)": Suriname is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SR,

    /// "[ST](https://ddwiki.reso.org/display/DDW17/ST)": Sao Tome And Principe is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    ST,

    /// "[SV](https://ddwiki.reso.org/display/DDW17/SV)": El Salvador is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SV,

    /// "[SY](https://ddwiki.reso.org/display/DDW17/SY)": Syrian Arab Republic is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SY,

    /// "[SZ](https://ddwiki.reso.org/display/DDW17/SZ)": Swaziland is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    SZ,

    /// "[TC](https://ddwiki.reso.org/display/DDW17/TC)": Turks - Caicos Islands is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TC,

    /// "[TD](https://ddwiki.reso.org/display/DDW17/TD)": Chad is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TD,

    /// "[TF](https://ddwiki.reso.org/display/DDW17/TF)": French Southern Territories is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TF,

    /// "[TG](https://ddwiki.reso.org/display/DDW17/TG)": Togo is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TG,

    /// "[TH](https://ddwiki.reso.org/display/DDW17/TH)": Thailand is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TH,

    /// "[TJ](https://ddwiki.reso.org/display/DDW17/TJ)": Tajikistan is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TJ,

    /// "[TK](https://ddwiki.reso.org/display/DDW17/TK)": Tokelau is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TK,

    /// "[TL](https://ddwiki.reso.org/display/DDW17/TL)": Timor-Leste is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TL,

    /// "[TM](https://ddwiki.reso.org/display/DDW17/TM)": Turkmenistan is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TM,

    /// "[TN](https://ddwiki.reso.org/display/DDW17/TN)": Tunisia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TN,

    /// "[TO](https://ddwiki.reso.org/display/DDW17/TO)": Tonga is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TO,

    /// "[TR](https://ddwiki.reso.org/display/DDW17/TR)": Turkey is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TR,

    /// "[TT](https://ddwiki.reso.org/display/DDW17/TT)": Trinidad - Tobago is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TT,

    /// "[TV](https://ddwiki.reso.org/display/DDW17/TV)": Tuvalu is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TV,

    /// "[TW](https://ddwiki.reso.org/display/DDW17/TW)": Taiwan is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TW,

    /// "[TZ](https://ddwiki.reso.org/display/DDW17/TZ)": Tanzania is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    TZ,

    /// "[UA](https://ddwiki.reso.org/display/DDW17/UA)": Ukraine is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    UA,

    /// "[UG](https://ddwiki.reso.org/display/DDW17/UG)": Uganda is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    UG,

    /// "[UM](https://ddwiki.reso.org/display/DDW17/UM)": United States Minor Islands is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    UM,

    /// "[US](https://ddwiki.reso.org/display/DDW17/US)": United States is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    US,

    /// "[UY](https://ddwiki.reso.org/display/DDW17/UY)": Uruguay is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    UY,

    /// "[UZ](https://ddwiki.reso.org/display/DDW17/UZ)": Uzbekistan is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    UZ,

    /// "[VA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244365)": Holy See (Vatican City) is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    VA,

    /// "[VC](https://ddwiki.reso.org/display/DDW17/VC)": Saint Vincent - Grenadines is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    VC,

    /// "[VE](https://ddwiki.reso.org/display/DDW17/VE)": Venezuela is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    VE,

    /// "[VG](https://ddwiki.reso.org/display/DDW17/VG)": Virgin Islands British is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    VG,

    /// "[VI](https://ddwiki.reso.org/display/DDW17/VI)": Virgin Islands U.S. is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    VI,

    /// "[VN](https://ddwiki.reso.org/display/DDW17/VN)": Viet Nam is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    VN,

    /// "[VU](https://ddwiki.reso.org/display/DDW17/VU)": Vanuatu is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    VU,

    /// "[WF](https://ddwiki.reso.org/display/DDW17/WF)": Wallis And Futuna is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    WF,

    /// "[WS](https://ddwiki.reso.org/display/DDW17/WS)": Samoa is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    WS,

    /// "[YE](https://ddwiki.reso.org/display/DDW17/YE)": Yemen is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    YE,

    /// "[YT](https://ddwiki.reso.org/display/DDW17/YT)": Mayotte is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    YT,

    /// "[ZA](https://ddwiki.reso.org/display/DDW17/ZA)": South Africa is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    ZA,

    /// "[ZM](https://ddwiki.reso.org/display/DDW17/ZM)": Zambia is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    ZM,

    /// "[ZW](https://ddwiki.reso.org/display/DDW17/ZW)": Zimbabwe is the country in which the individual, entity or property is located. The two letter code is based on ISO standard 3166.
    ZW,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Country {
    fn from(s: String) -> Country {
        match s.as_ref() {
            "AD" => Country::AD,

            "AE" => Country::AE,

            "AF" => Country::AF,

            "AG" => Country::AG,

            "AI" => Country::AI,

            "AL" => Country::AL,

            "AM" => Country::AM,

            "AN" => Country::AN,

            "AO" => Country::AO,

            "AQ" => Country::AQ,

            "AR" => Country::AR,

            "AS" => Country::AS,

            "AT" => Country::AT,

            "AU" => Country::AU,

            "AW" => Country::AW,

            "AX" => Country::AX,

            "AZ" => Country::AZ,

            "BA" => Country::BA,

            "BB" => Country::BB,

            "BD" => Country::BD,

            "BE" => Country::BE,

            "BF" => Country::BF,

            "BG" => Country::BG,

            "BH" => Country::BH,

            "BI" => Country::BI,

            "BJ" => Country::BJ,

            "BL" => Country::BL,

            "BM" => Country::BM,

            "BN" => Country::BN,

            "BO" => Country::BO,

            "BR" => Country::BR,

            "BS" => Country::BS,

            "BT" => Country::BT,

            "BV" => Country::BV,

            "BW" => Country::BW,

            "BY" => Country::BY,

            "BZ" => Country::BZ,

            "CA" => Country::CA,

            "CC" => Country::CC,

            "CD" => Country::CD,

            "CF" => Country::CF,

            "CG" => Country::CG,

            "CH" => Country::CH,

            "CI" => Country::CI,

            "CK" => Country::CK,

            "CL" => Country::CL,

            "CM" => Country::CM,

            "CN" => Country::CN,

            "CO" => Country::CO,

            "CR" => Country::CR,

            "CU" => Country::CU,

            "CV" => Country::CV,

            "CX" => Country::CX,

            "CY" => Country::CY,

            "CZ" => Country::CZ,

            "DE" => Country::DE,

            "DJ" => Country::DJ,

            "DK" => Country::DK,

            "DM" => Country::DM,

            "DO" => Country::DO,

            "DZ" => Country::DZ,

            "EC" => Country::EC,

            "EE" => Country::EE,

            "EG" => Country::EG,

            "EH" => Country::EH,

            "ER" => Country::ER,

            "ES" => Country::ES,

            "ET" => Country::ET,

            "FI" => Country::FI,

            "FJ" => Country::FJ,

            "FK" => Country::FK,

            "FM" => Country::FM,

            "FO" => Country::FO,

            "FR" => Country::FR,

            "GA" => Country::GA,

            "GB" => Country::GB,

            "GD" => Country::GD,

            "GE" => Country::GE,

            "GF" => Country::GF,

            "GG" => Country::GG,

            "GH" => Country::GH,

            "GI" => Country::GI,

            "GL" => Country::GL,

            "GM" => Country::GM,

            "GN" => Country::GN,

            "GP" => Country::GP,

            "GQ" => Country::GQ,

            "GR" => Country::GR,

            "GS" => Country::GS,

            "GT" => Country::GT,

            "GU" => Country::GU,

            "GW" => Country::GW,

            "GY" => Country::GY,

            "HK" => Country::HK,

            "HM" => Country::HM,

            "HN" => Country::HN,

            "HR" => Country::HR,

            "HT" => Country::HT,

            "HU" => Country::HU,

            "ID" => Country::ID,

            "IE" => Country::IE,

            "IL" => Country::IL,

            "IM" => Country::IM,

            "IN" => Country::IN,

            "IO" => Country::IO,

            "IQ" => Country::IQ,

            "IR" => Country::IR,

            "IS" => Country::IS,

            "IT" => Country::IT,

            "JE" => Country::JE,

            "JM" => Country::JM,

            "JO" => Country::JO,

            "JP" => Country::JP,

            "KE" => Country::KE,

            "KG" => Country::KG,

            "KH" => Country::KH,

            "KI" => Country::KI,

            "KM" => Country::KM,

            "KN" => Country::KN,

            "KP" => Country::KP,

            "KR" => Country::KR,

            "KW" => Country::KW,

            "KY" => Country::KY,

            "KZ" => Country::KZ,

            "LA" => Country::LA,

            "LB" => Country::LB,

            "LC" => Country::LC,

            "LI" => Country::LI,

            "LK" => Country::LK,

            "LR" => Country::LR,

            "LS" => Country::LS,

            "LT" => Country::LT,

            "LU" => Country::LU,

            "LV" => Country::LV,

            "LY" => Country::LY,

            "MA" => Country::MA,

            "MC" => Country::MC,

            "MD" => Country::MD,

            "ME" => Country::ME,

            "MF" => Country::MF,

            "MG" => Country::MG,

            "MH" => Country::MH,

            "MK" => Country::MK,

            "ML" => Country::ML,

            "MM" => Country::MM,

            "MN" => Country::MN,

            "MO" => Country::MO,

            "MP" => Country::MP,

            "MQ" => Country::MQ,

            "MR" => Country::MR,

            "MS" => Country::MS,

            "MT" => Country::MT,

            "MU" => Country::MU,

            "MV" => Country::MV,

            "MW" => Country::MW,

            "MX" => Country::MX,

            "MY" => Country::MY,

            "MZ" => Country::MZ,

            "NA" => Country::NA,

            "NC" => Country::NC,

            "NE" => Country::NE,

            "NF" => Country::NF,

            "NG" => Country::NG,

            "NI" => Country::NI,

            "NL" => Country::NL,

            "NP" => Country::NP,

            "NR" => Country::NR,

            "NU" => Country::NU,

            "NZ" => Country::NZ,

            "OM" => Country::OM,

            "OT" => Country::OT,

            "PA" => Country::PA,

            "PE" => Country::PE,

            "PF" => Country::PF,

            "PG" => Country::PG,

            "PH" => Country::PH,

            "PK" => Country::PK,

            "PL" => Country::PL,

            "PM" => Country::PM,

            "PN" => Country::PN,

            "PR" => Country::PR,

            "PS" => Country::PS,

            "PT" => Country::PT,

            "PW" => Country::PW,

            "PY" => Country::PY,

            "QA" => Country::QA,

            "RE" => Country::RE,

            "RO" => Country::RO,

            "RS" => Country::RS,

            "RU" => Country::RU,

            "RW" => Country::RW,

            "SA" => Country::SA,

            "SB" => Country::SB,

            "SC" => Country::SC,

            "SD" => Country::SD,

            "SE" => Country::SE,

            "SG" => Country::SG,

            "SH" => Country::SH,

            "SI" => Country::SI,

            "SJ" => Country::SJ,

            "SK" => Country::SK,

            "SL" => Country::SL,

            "SM" => Country::SM,

            "SN" => Country::SN,

            "SO" => Country::SO,

            "SR" => Country::SR,

            "ST" => Country::ST,

            "SV" => Country::SV,

            "SY" => Country::SY,

            "SZ" => Country::SZ,

            "TC" => Country::TC,

            "TD" => Country::TD,

            "TF" => Country::TF,

            "TG" => Country::TG,

            "TH" => Country::TH,

            "TJ" => Country::TJ,

            "TK" => Country::TK,

            "TL" => Country::TL,

            "TM" => Country::TM,

            "TN" => Country::TN,

            "TO" => Country::TO,

            "TR" => Country::TR,

            "TT" => Country::TT,

            "TV" => Country::TV,

            "TW" => Country::TW,

            "TZ" => Country::TZ,

            "UA" => Country::UA,

            "UG" => Country::UG,

            "UM" => Country::UM,

            "US" => Country::US,

            "UY" => Country::UY,

            "UZ" => Country::UZ,

            "VA" => Country::VA,

            "VC" => Country::VC,

            "VE" => Country::VE,

            "VG" => Country::VG,

            "VI" => Country::VI,

            "VN" => Country::VN,

            "VU" => Country::VU,

            "WF" => Country::WF,

            "WS" => Country::WS,

            "YE" => Country::YE,

            "YT" => Country::YT,

            "ZA" => Country::ZA,

            "ZM" => Country::ZM,

            "ZW" => Country::ZW,

            _ => Country::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Country {
    fn from(s: &str) -> Country {
        match s {
            "AD" => Country::AD,

            "AE" => Country::AE,

            "AF" => Country::AF,

            "AG" => Country::AG,

            "AI" => Country::AI,

            "AL" => Country::AL,

            "AM" => Country::AM,

            "AN" => Country::AN,

            "AO" => Country::AO,

            "AQ" => Country::AQ,

            "AR" => Country::AR,

            "AS" => Country::AS,

            "AT" => Country::AT,

            "AU" => Country::AU,

            "AW" => Country::AW,

            "AX" => Country::AX,

            "AZ" => Country::AZ,

            "BA" => Country::BA,

            "BB" => Country::BB,

            "BD" => Country::BD,

            "BE" => Country::BE,

            "BF" => Country::BF,

            "BG" => Country::BG,

            "BH" => Country::BH,

            "BI" => Country::BI,

            "BJ" => Country::BJ,

            "BL" => Country::BL,

            "BM" => Country::BM,

            "BN" => Country::BN,

            "BO" => Country::BO,

            "BR" => Country::BR,

            "BS" => Country::BS,

            "BT" => Country::BT,

            "BV" => Country::BV,

            "BW" => Country::BW,

            "BY" => Country::BY,

            "BZ" => Country::BZ,

            "CA" => Country::CA,

            "CC" => Country::CC,

            "CD" => Country::CD,

            "CF" => Country::CF,

            "CG" => Country::CG,

            "CH" => Country::CH,

            "CI" => Country::CI,

            "CK" => Country::CK,

            "CL" => Country::CL,

            "CM" => Country::CM,

            "CN" => Country::CN,

            "CO" => Country::CO,

            "CR" => Country::CR,

            "CU" => Country::CU,

            "CV" => Country::CV,

            "CX" => Country::CX,

            "CY" => Country::CY,

            "CZ" => Country::CZ,

            "DE" => Country::DE,

            "DJ" => Country::DJ,

            "DK" => Country::DK,

            "DM" => Country::DM,

            "DO" => Country::DO,

            "DZ" => Country::DZ,

            "EC" => Country::EC,

            "EE" => Country::EE,

            "EG" => Country::EG,

            "EH" => Country::EH,

            "ER" => Country::ER,

            "ES" => Country::ES,

            "ET" => Country::ET,

            "FI" => Country::FI,

            "FJ" => Country::FJ,

            "FK" => Country::FK,

            "FM" => Country::FM,

            "FO" => Country::FO,

            "FR" => Country::FR,

            "GA" => Country::GA,

            "GB" => Country::GB,

            "GD" => Country::GD,

            "GE" => Country::GE,

            "GF" => Country::GF,

            "GG" => Country::GG,

            "GH" => Country::GH,

            "GI" => Country::GI,

            "GL" => Country::GL,

            "GM" => Country::GM,

            "GN" => Country::GN,

            "GP" => Country::GP,

            "GQ" => Country::GQ,

            "GR" => Country::GR,

            "GS" => Country::GS,

            "GT" => Country::GT,

            "GU" => Country::GU,

            "GW" => Country::GW,

            "GY" => Country::GY,

            "HK" => Country::HK,

            "HM" => Country::HM,

            "HN" => Country::HN,

            "HR" => Country::HR,

            "HT" => Country::HT,

            "HU" => Country::HU,

            "ID" => Country::ID,

            "IE" => Country::IE,

            "IL" => Country::IL,

            "IM" => Country::IM,

            "IN" => Country::IN,

            "IO" => Country::IO,

            "IQ" => Country::IQ,

            "IR" => Country::IR,

            "IS" => Country::IS,

            "IT" => Country::IT,

            "JE" => Country::JE,

            "JM" => Country::JM,

            "JO" => Country::JO,

            "JP" => Country::JP,

            "KE" => Country::KE,

            "KG" => Country::KG,

            "KH" => Country::KH,

            "KI" => Country::KI,

            "KM" => Country::KM,

            "KN" => Country::KN,

            "KP" => Country::KP,

            "KR" => Country::KR,

            "KW" => Country::KW,

            "KY" => Country::KY,

            "KZ" => Country::KZ,

            "LA" => Country::LA,

            "LB" => Country::LB,

            "LC" => Country::LC,

            "LI" => Country::LI,

            "LK" => Country::LK,

            "LR" => Country::LR,

            "LS" => Country::LS,

            "LT" => Country::LT,

            "LU" => Country::LU,

            "LV" => Country::LV,

            "LY" => Country::LY,

            "MA" => Country::MA,

            "MC" => Country::MC,

            "MD" => Country::MD,

            "ME" => Country::ME,

            "MF" => Country::MF,

            "MG" => Country::MG,

            "MH" => Country::MH,

            "MK" => Country::MK,

            "ML" => Country::ML,

            "MM" => Country::MM,

            "MN" => Country::MN,

            "MO" => Country::MO,

            "MP" => Country::MP,

            "MQ" => Country::MQ,

            "MR" => Country::MR,

            "MS" => Country::MS,

            "MT" => Country::MT,

            "MU" => Country::MU,

            "MV" => Country::MV,

            "MW" => Country::MW,

            "MX" => Country::MX,

            "MY" => Country::MY,

            "MZ" => Country::MZ,

            "NA" => Country::NA,

            "NC" => Country::NC,

            "NE" => Country::NE,

            "NF" => Country::NF,

            "NG" => Country::NG,

            "NI" => Country::NI,

            "NL" => Country::NL,

            "NP" => Country::NP,

            "NR" => Country::NR,

            "NU" => Country::NU,

            "NZ" => Country::NZ,

            "OM" => Country::OM,

            "OT" => Country::OT,

            "PA" => Country::PA,

            "PE" => Country::PE,

            "PF" => Country::PF,

            "PG" => Country::PG,

            "PH" => Country::PH,

            "PK" => Country::PK,

            "PL" => Country::PL,

            "PM" => Country::PM,

            "PN" => Country::PN,

            "PR" => Country::PR,

            "PS" => Country::PS,

            "PT" => Country::PT,

            "PW" => Country::PW,

            "PY" => Country::PY,

            "QA" => Country::QA,

            "RE" => Country::RE,

            "RO" => Country::RO,

            "RS" => Country::RS,

            "RU" => Country::RU,

            "RW" => Country::RW,

            "SA" => Country::SA,

            "SB" => Country::SB,

            "SC" => Country::SC,

            "SD" => Country::SD,

            "SE" => Country::SE,

            "SG" => Country::SG,

            "SH" => Country::SH,

            "SI" => Country::SI,

            "SJ" => Country::SJ,

            "SK" => Country::SK,

            "SL" => Country::SL,

            "SM" => Country::SM,

            "SN" => Country::SN,

            "SO" => Country::SO,

            "SR" => Country::SR,

            "ST" => Country::ST,

            "SV" => Country::SV,

            "SY" => Country::SY,

            "SZ" => Country::SZ,

            "TC" => Country::TC,

            "TD" => Country::TD,

            "TF" => Country::TF,

            "TG" => Country::TG,

            "TH" => Country::TH,

            "TJ" => Country::TJ,

            "TK" => Country::TK,

            "TL" => Country::TL,

            "TM" => Country::TM,

            "TN" => Country::TN,

            "TO" => Country::TO,

            "TR" => Country::TR,

            "TT" => Country::TT,

            "TV" => Country::TV,

            "TW" => Country::TW,

            "TZ" => Country::TZ,

            "UA" => Country::UA,

            "UG" => Country::UG,

            "UM" => Country::UM,

            "US" => Country::US,

            "UY" => Country::UY,

            "UZ" => Country::UZ,

            "VA" => Country::VA,

            "VC" => Country::VC,

            "VE" => Country::VE,

            "VG" => Country::VG,

            "VI" => Country::VI,

            "VN" => Country::VN,

            "VU" => Country::VU,

            "WF" => Country::WF,

            "WS" => Country::WS,

            "YE" => Country::YE,

            "YT" => Country::YT,

            "ZA" => Country::ZA,

            "ZM" => Country::ZM,

            "ZW" => Country::ZW,

            _ => Country::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Country> for &'a str {
    fn from(s: &'a Country) -> &'a str {
        match s {
            Country::AD => "AD",

            Country::AE => "AE",

            Country::AF => "AF",

            Country::AG => "AG",

            Country::AI => "AI",

            Country::AL => "AL",

            Country::AM => "AM",

            Country::AN => "AN",

            Country::AO => "AO",

            Country::AQ => "AQ",

            Country::AR => "AR",

            Country::AS => "AS",

            Country::AT => "AT",

            Country::AU => "AU",

            Country::AW => "AW",

            Country::AX => "AX",

            Country::AZ => "AZ",

            Country::BA => "BA",

            Country::BB => "BB",

            Country::BD => "BD",

            Country::BE => "BE",

            Country::BF => "BF",

            Country::BG => "BG",

            Country::BH => "BH",

            Country::BI => "BI",

            Country::BJ => "BJ",

            Country::BL => "BL",

            Country::BM => "BM",

            Country::BN => "BN",

            Country::BO => "BO",

            Country::BR => "BR",

            Country::BS => "BS",

            Country::BT => "BT",

            Country::BV => "BV",

            Country::BW => "BW",

            Country::BY => "BY",

            Country::BZ => "BZ",

            Country::CA => "CA",

            Country::CC => "CC",

            Country::CD => "CD",

            Country::CF => "CF",

            Country::CG => "CG",

            Country::CH => "CH",

            Country::CI => "CI",

            Country::CK => "CK",

            Country::CL => "CL",

            Country::CM => "CM",

            Country::CN => "CN",

            Country::CO => "CO",

            Country::CR => "CR",

            Country::CU => "CU",

            Country::CV => "CV",

            Country::CX => "CX",

            Country::CY => "CY",

            Country::CZ => "CZ",

            Country::DE => "DE",

            Country::DJ => "DJ",

            Country::DK => "DK",

            Country::DM => "DM",

            Country::DO => "DO",

            Country::DZ => "DZ",

            Country::EC => "EC",

            Country::EE => "EE",

            Country::EG => "EG",

            Country::EH => "EH",

            Country::ER => "ER",

            Country::ES => "ES",

            Country::ET => "ET",

            Country::FI => "FI",

            Country::FJ => "FJ",

            Country::FK => "FK",

            Country::FM => "FM",

            Country::FO => "FO",

            Country::FR => "FR",

            Country::GA => "GA",

            Country::GB => "GB",

            Country::GD => "GD",

            Country::GE => "GE",

            Country::GF => "GF",

            Country::GG => "GG",

            Country::GH => "GH",

            Country::GI => "GI",

            Country::GL => "GL",

            Country::GM => "GM",

            Country::GN => "GN",

            Country::GP => "GP",

            Country::GQ => "GQ",

            Country::GR => "GR",

            Country::GS => "GS",

            Country::GT => "GT",

            Country::GU => "GU",

            Country::GW => "GW",

            Country::GY => "GY",

            Country::HK => "HK",

            Country::HM => "HM",

            Country::HN => "HN",

            Country::HR => "HR",

            Country::HT => "HT",

            Country::HU => "HU",

            Country::ID => "ID",

            Country::IE => "IE",

            Country::IL => "IL",

            Country::IM => "IM",

            Country::IN => "IN",

            Country::IO => "IO",

            Country::IQ => "IQ",

            Country::IR => "IR",

            Country::IS => "IS",

            Country::IT => "IT",

            Country::JE => "JE",

            Country::JM => "JM",

            Country::JO => "JO",

            Country::JP => "JP",

            Country::KE => "KE",

            Country::KG => "KG",

            Country::KH => "KH",

            Country::KI => "KI",

            Country::KM => "KM",

            Country::KN => "KN",

            Country::KP => "KP",

            Country::KR => "KR",

            Country::KW => "KW",

            Country::KY => "KY",

            Country::KZ => "KZ",

            Country::LA => "LA",

            Country::LB => "LB",

            Country::LC => "LC",

            Country::LI => "LI",

            Country::LK => "LK",

            Country::LR => "LR",

            Country::LS => "LS",

            Country::LT => "LT",

            Country::LU => "LU",

            Country::LV => "LV",

            Country::LY => "LY",

            Country::MA => "MA",

            Country::MC => "MC",

            Country::MD => "MD",

            Country::ME => "ME",

            Country::MF => "MF",

            Country::MG => "MG",

            Country::MH => "MH",

            Country::MK => "MK",

            Country::ML => "ML",

            Country::MM => "MM",

            Country::MN => "MN",

            Country::MO => "MO",

            Country::MP => "MP",

            Country::MQ => "MQ",

            Country::MR => "MR",

            Country::MS => "MS",

            Country::MT => "MT",

            Country::MU => "MU",

            Country::MV => "MV",

            Country::MW => "MW",

            Country::MX => "MX",

            Country::MY => "MY",

            Country::MZ => "MZ",

            Country::NA => "NA",

            Country::NC => "NC",

            Country::NE => "NE",

            Country::NF => "NF",

            Country::NG => "NG",

            Country::NI => "NI",

            Country::NL => "NL",

            Country::NP => "NP",

            Country::NR => "NR",

            Country::NU => "NU",

            Country::NZ => "NZ",

            Country::OM => "OM",

            Country::OT => "OT",

            Country::PA => "PA",

            Country::PE => "PE",

            Country::PF => "PF",

            Country::PG => "PG",

            Country::PH => "PH",

            Country::PK => "PK",

            Country::PL => "PL",

            Country::PM => "PM",

            Country::PN => "PN",

            Country::PR => "PR",

            Country::PS => "PS",

            Country::PT => "PT",

            Country::PW => "PW",

            Country::PY => "PY",

            Country::QA => "QA",

            Country::RE => "RE",

            Country::RO => "RO",

            Country::RS => "RS",

            Country::RU => "RU",

            Country::RW => "RW",

            Country::SA => "SA",

            Country::SB => "SB",

            Country::SC => "SC",

            Country::SD => "SD",

            Country::SE => "SE",

            Country::SG => "SG",

            Country::SH => "SH",

            Country::SI => "SI",

            Country::SJ => "SJ",

            Country::SK => "SK",

            Country::SL => "SL",

            Country::SM => "SM",

            Country::SN => "SN",

            Country::SO => "SO",

            Country::SR => "SR",

            Country::ST => "ST",

            Country::SV => "SV",

            Country::SY => "SY",

            Country::SZ => "SZ",

            Country::TC => "TC",

            Country::TD => "TD",

            Country::TF => "TF",

            Country::TG => "TG",

            Country::TH => "TH",

            Country::TJ => "TJ",

            Country::TK => "TK",

            Country::TL => "TL",

            Country::TM => "TM",

            Country::TN => "TN",

            Country::TO => "TO",

            Country::TR => "TR",

            Country::TT => "TT",

            Country::TV => "TV",

            Country::TW => "TW",

            Country::TZ => "TZ",

            Country::UA => "UA",

            Country::UG => "UG",

            Country::UM => "UM",

            Country::US => "US",

            Country::UY => "UY",

            Country::UZ => "UZ",

            Country::VA => "VA",

            Country::VC => "VC",

            Country::VE => "VE",

            Country::VG => "VG",

            Country::VI => "VI",

            Country::VN => "VN",

            Country::VU => "VU",

            Country::WF => "WF",

            Country::WS => "WS",

            Country::YE => "YE",

            Country::YT => "YT",

            Country::ZA => "ZA",

            Country::ZM => "ZM",

            Country::ZW => "ZW",

            Country::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Country {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Country {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_country_format {
    use super::Country;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Country>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Country>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [CurrentFinancing Lookups](https://ddwiki.reso.org/display/DDW17/CurrentFinancing+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum CurrentFinancing {
    /// "[Assumable](https://ddwiki.reso.org/display/DDW17/Assumable)": The financing currently in place may be assumed.
    Assumable,

    /// "[Contract](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244381)": The purchase of a property involves an agreement to perform services, provide product, share of income, or some other agreement as the method of payment for the property.
    Contract,

    /// "[Conventional](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244382)": The buyer is using conventional financing to purchase the home.
    Conventional,

    /// "[FHA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244383)": A loan from an approved provider that follows the guidelines of, and is insured by, the Federal Housing Administration.
    FHA,

    /// "[FHA 203(b)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244384)": The basic home mortgage loan from an approved provider that follows the guidelines of, and is insured by, the Federal Housing Administration.
    FHA203b,

    /// "[FHA 203(k)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244385)": A loan, for the rehabilitation and repair of single family residence, from an approved provider that follows the guidelines of, and is insured by, the Federal Housing Administration.
    FHA203k,

    /// "[Leased Renewables](https://ddwiki.reso.org/display/DDW17/Leased+Renewables)": Definition:  Renewable system (i.e., solar or wind) belonging to a third-party is installed on a customer’s property at little or no cost to the property owner. Property owner has entered an agreement to pay for the lease of the equipment. Structure:  Fee model is based on equipment to generate power, not power itself.  Transfer: If requirements are met it may be possible to transfer lease from home seller to buyer with the approval of the system owner. If being transferred, see Fannie Mae guidelines for more info: since lease is for equipment it must be included in the buyers DTI calculation.  If a buyer cannot or will not adopt a lease, then the seller is required to pay the remaining contract amount in full and the system would be removed.Real or Personal Property:  Renewable system is typically considered personal property.  All tax credits as well as maintenance responsibilities, etc. belong to the third-party owner. Some leases require the homeowner to pay the personal property tax.  Terms:  Lease should provide items homeowner is responsible for paying. In a solar lease model, a customer will sign a contract with an installer/developer and pay for the solar energy equipment over a period of years or decades. Solar leases can be structured so customers pay no up-front costs, some up-front costs (partially prepaid) or can be fully prepaid (the leasing company is then able to depreciate the equipment over time and offers a lower fee for pre-paid leases).  The homeowner may have the option to purchase the system during or at the end of the lease term (most leases are for 20-year terms) at its fair market value or terms set in the original lease contract.
    LeasedRenewables,

    /// "[None](https://ddwiki.reso.org/display/DDW17/None)": The is no current financing on the property.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244388)": The current owner is using another form of financing that is not included in the options provided in this list.
    Other,

    /// "[Power Purchase Agreement](https://ddwiki.reso.org/display/DDW17/Power+Purchase+Agreement)": Definition:  Renewable system belonging to a third-party is installed on a customer’s property at little or no up-front cost to the property owner. Property owner is in an agreement to buy all the power generated at a fixed rate whether it is actually used or not.  This is typically lower than the local utility rate. Structure:  Fee model is based on power, not equipment to generate it. Transfer: A PPA may be transferred to a homebuyer with approval from the system owner. If a buyer will not adopt a PPA, then the seller is required to pay the remaining contract amount in full and the system would be removed. If being transferred, see Fannie Mae guidelines for more info:  portion of the purchase towards equipment must be included in the buyers DTI calculation.  Real or Personal Property: Renewable system is typically considered personal property.  All tax credits as well as maintenance responsibilities, etc. belong to the third-party owner. Terms: The customer agrees to purchase all energy produced by the system.  At the end of the PPA contract term (usually between 10-25 years), property owners can extend the contract and even buy the solar energy system from the developer based on terms in the contract.Additional info on SEIA.org.
    PowerPurchaseAgreement,

    /// "[Private](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244390)": Financing is provided by a private party.
    Private,

    /// "[Property-Assessed Clean Energy](https://ddwiki.reso.org/display/DDW17/Property-Assessed+Clean+Energy)": Definition: Property-assessed clean energy (PACE) is a financing tool for property owners to fund energy or water efficiency or renewable energy installations. Structure: PACE is a secured loan that attaches to the property as a voluntary assessment on the property taxes.  To be eligible for a PACE loan, the building must be located in a local jurisdiction where the City or County has passed a resolution to participate in a PACE program. PACE financing is often a public-private partnership between a private finance company and a public agency.Transfer? The loan may be transferred to the new owner upon sale of the property with the approval of the system owner. Real or Personal Property? If seller owns and not a third-party, then renewable system is typically considered real property and tax credits and maintenance requirements, etc. belong to the property owner.  Terms:  Loan terms can vary between 5 and 30 years. Some programs also allow PACE to finance solar leases and power purchase agreements (PPAs). Due to the complexities of PACE financing, NAR and states like California have provided statements which are worth further consideration. NAR -  http://www.realtor.org/articles/administration-issues-pace-guidance; CAR - http://www.car.org/newsstand/newsreleases/2015releases/fhapacelien
    PropertyAssessedCleanEnergy,

    /// "[Trust Deed](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244392)": Financing where title of the property is placed with a trustee who secures payment of the loan for a beneficiary.
    TrustDeed,

    /// "[USDA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244393)": A loan from an approved provider that follows the guidelines of, and is insured by, the US Department of Agriculture.
    USDA,

    /// "[VA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244394)": A loan from an approved provider that follows the guidelines of, and is insured by, the US Department of Veteran's Affairs.
    VA,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for CurrentFinancing {
    fn from(s: String) -> CurrentFinancing {
        match s.as_ref() {
            "Assumable" => CurrentFinancing::Assumable,

            "Contract" => CurrentFinancing::Contract,

            "Conventional" => CurrentFinancing::Conventional,

            "FHA" => CurrentFinancing::FHA,

            "FHA 203(b)" => CurrentFinancing::FHA203b,

            "FHA 203(k)" => CurrentFinancing::FHA203k,

            "Leased Renewables" => CurrentFinancing::LeasedRenewables,

            "None" => CurrentFinancing::None,

            "Other" => CurrentFinancing::Other,

            "Power Purchase Agreement" => CurrentFinancing::PowerPurchaseAgreement,

            "Private" => CurrentFinancing::Private,

            "Property-Assessed Clean Energy" => CurrentFinancing::PropertyAssessedCleanEnergy,

            "Trust Deed" => CurrentFinancing::TrustDeed,

            "USDA" => CurrentFinancing::USDA,

            "VA" => CurrentFinancing::VA,

            _ => CurrentFinancing::OpenEnumeration(s),
        }
    }
}

impl From<&str> for CurrentFinancing {
    fn from(s: &str) -> CurrentFinancing {
        match s {
            "Assumable" => CurrentFinancing::Assumable,

            "Contract" => CurrentFinancing::Contract,

            "Conventional" => CurrentFinancing::Conventional,

            "FHA" => CurrentFinancing::FHA,

            "FHA 203(b)" => CurrentFinancing::FHA203b,

            "FHA 203(k)" => CurrentFinancing::FHA203k,

            "Leased Renewables" => CurrentFinancing::LeasedRenewables,

            "None" => CurrentFinancing::None,

            "Other" => CurrentFinancing::Other,

            "Power Purchase Agreement" => CurrentFinancing::PowerPurchaseAgreement,

            "Private" => CurrentFinancing::Private,

            "Property-Assessed Clean Energy" => CurrentFinancing::PropertyAssessedCleanEnergy,

            "Trust Deed" => CurrentFinancing::TrustDeed,

            "USDA" => CurrentFinancing::USDA,

            "VA" => CurrentFinancing::VA,

            _ => CurrentFinancing::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a CurrentFinancing> for &'a str {
    fn from(s: &'a CurrentFinancing) -> &'a str {
        match s {
            CurrentFinancing::Assumable => "Assumable",

            CurrentFinancing::Contract => "Contract",

            CurrentFinancing::Conventional => "Conventional",

            CurrentFinancing::FHA => "FHA",

            CurrentFinancing::FHA203b => "FHA 203(b)",

            CurrentFinancing::FHA203k => "FHA 203(k)",

            CurrentFinancing::LeasedRenewables => "Leased Renewables",

            CurrentFinancing::None => "None",

            CurrentFinancing::Other => "Other",

            CurrentFinancing::PowerPurchaseAgreement => "Power Purchase Agreement",

            CurrentFinancing::Private => "Private",

            CurrentFinancing::PropertyAssessedCleanEnergy => "Property-Assessed Clean Energy",

            CurrentFinancing::TrustDeed => "Trust Deed",

            CurrentFinancing::USDA => "USDA",

            CurrentFinancing::VA => "VA",

            CurrentFinancing::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for CurrentFinancing {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for CurrentFinancing {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_current_financing_format {
    use super::CurrentFinancing;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<CurrentFinancing>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<CurrentFinancing>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [CurrentUse Lookups](https://ddwiki.reso.org/display/DDW17/CurrentUse+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum CurrentUse {
    /// "[Agricultural](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244464)": The land is currently used for agriculture.
    Agricultural,

    /// "[Automotive](https://ddwiki.reso.org/display/DDW17/Automotive)": The land is currently used for automotive maintenance or repair.
    Automotive,

    /// "[Cattle](https://ddwiki.reso.org/display/DDW17/Cattle)": The land is currently used for cattle.
    Cattle,

    /// "[Commercial](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244467)": The land is currently used for commercial purposes.
    Commercial,

    /// "[Dairy](https://ddwiki.reso.org/display/DDW17/Dairy)": The land is currently used as a dairy farm.
    Dairy,

    /// "[Farm](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244469)": The land is currently used as a farm.
    Farm,

    /// "[Fishery](https://ddwiki.reso.org/display/DDW17/Fishery)": The land is currently used as a fishery.
    Fishery,

    /// "[Grazing](https://ddwiki.reso.org/display/DDW17/Grazing)": The land is currently used for live stock grazing.
    Grazing,

    /// "[Highway/Tourist Service](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244472)": The land is currently used for a highway/tourist service.
    HighwayTouristService,

    /// "[Horses](https://ddwiki.reso.org/display/DDW17/Horses)": The land is currently used for horses.
    Horses,

    /// "[Hunting](https://ddwiki.reso.org/display/DDW17/Hunting)": The land is currently used for hunting.
    Hunting,

    /// "[Industrial](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244475)": The land is currently used for industrial purposes.
    Industrial,

    /// "[Investment](https://ddwiki.reso.org/display/DDW17/Investment)": The land is currently used as an investment.
    Investment,

    /// "[Livestock](https://ddwiki.reso.org/display/DDW17/Livestock)": The land is currently used for livestock.
    Livestock,

    /// "[Manufactured Home](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244478)": The land is currently used for manufactured home.
    ManufacturedHome,

    /// "[Medical/Dental](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244479)": The land is currently used for medical/dental business.
    MedicalDental,

    /// "[Mini-Storage](https://ddwiki.reso.org/display/DDW17/Mini-Storage)": The land is currently used for mini-storage business.
    MiniStorage,

    /// "[Mixed Use](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244481)": The land is currently used for mixed uses.
    MixedUse,

    /// "[Multi-Family](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244482)": The land is currently used for multi-family dwelling.
    MultiFamily,

    /// "[Nursery](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244483)": The land is currently used as a nursery.
    Nursery,

    /// "[Office](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244484)": The land is currently used as office space.
    Office,

    /// "[Orchard](https://ddwiki.reso.org/display/DDW17/Orchard)": The land is currently used for an orchard.
    Orchard,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244486)": The land is currently used for some use other than those in this list.
    Other,

    /// "[Pasture](https://ddwiki.reso.org/display/DDW17/Pasture)": The land is currently used as a pasture.
    Pasture,

    /// "[Place of Worship](https://ddwiki.reso.org/display/DDW17/Place+of+Worship)": The land is currently used for a place or worship.
    PlaceofWorship,

    /// "[Plantable](https://ddwiki.reso.org/display/DDW17/Plantable)": The land is currently used as a plantabe field.
    Plantable,

    /// "[Poultry](https://ddwiki.reso.org/display/DDW17/Poultry)": The land is currently used as a poultry farm.
    Poultry,

    /// "[Ranch](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244491)": The land is currently used as a ranch.
    Ranch,

    /// "[Recreational](https://ddwiki.reso.org/display/DDW17/Recreational)": The land is currently used for recreational purposes.
    Recreational,

    /// "[Residential](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244493)": The land is currently used for residential purposes.
    Residential,

    /// "[Retail](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244494)": The land is currently used for retail purposes.
    Retail,

    /// "[Row Crops](https://ddwiki.reso.org/display/DDW17/Row+Crops)": The land is currently used for row crops.
    RowCrops,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244496)": See the Public or Private remarks for details on the current use.
    SeeRemarks,

    /// "[Single Family](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244497)": The land is currently used for single family residence.
    SingleFamily,

    /// "[Subdivision](https://ddwiki.reso.org/display/DDW17/Subdivision)": The land is currently used for property subdivisions.
    Subdivision,

    /// "[Timber](https://ddwiki.reso.org/display/DDW17/Timber)": The land is currently used for timber.
    Timber,

    /// "[Tree Farm](https://ddwiki.reso.org/display/DDW17/Tree+Farm)": The land is currently used as a tree farm.
    TreeFarm,

    /// "[Unimproved](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244501)": The land is currently unimproved.
    Unimproved,

    /// "[Vacant](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244502)": The land is currently vacant.
    Vacant,

    /// "[Vineyard](https://ddwiki.reso.org/display/DDW17/Vineyard)": The land is currently used as a vineyard.
    Vineyard,

    /// "[Warehouse](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244504)": The land is currently used for warehousing.
    Warehouse,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for CurrentUse {
    fn from(s: String) -> CurrentUse {
        match s.as_ref() {
            "Agricultural" => CurrentUse::Agricultural,

            "Automotive" => CurrentUse::Automotive,

            "Cattle" => CurrentUse::Cattle,

            "Commercial" => CurrentUse::Commercial,

            "Dairy" => CurrentUse::Dairy,

            "Farm" => CurrentUse::Farm,

            "Fishery" => CurrentUse::Fishery,

            "Grazing" => CurrentUse::Grazing,

            "Highway/Tourist Service" => CurrentUse::HighwayTouristService,

            "Horses" => CurrentUse::Horses,

            "Hunting" => CurrentUse::Hunting,

            "Industrial" => CurrentUse::Industrial,

            "Investment" => CurrentUse::Investment,

            "Livestock" => CurrentUse::Livestock,

            "Manufactured Home" => CurrentUse::ManufacturedHome,

            "Medical/Dental" => CurrentUse::MedicalDental,

            "Mini-Storage" => CurrentUse::MiniStorage,

            "Mixed Use" => CurrentUse::MixedUse,

            "Multi-Family" => CurrentUse::MultiFamily,

            "Nursery" => CurrentUse::Nursery,

            "Office" => CurrentUse::Office,

            "Orchard" => CurrentUse::Orchard,

            "Other" => CurrentUse::Other,

            "Pasture" => CurrentUse::Pasture,

            "Place of Worship" => CurrentUse::PlaceofWorship,

            "Plantable" => CurrentUse::Plantable,

            "Poultry" => CurrentUse::Poultry,

            "Ranch" => CurrentUse::Ranch,

            "Recreational" => CurrentUse::Recreational,

            "Residential" => CurrentUse::Residential,

            "Retail" => CurrentUse::Retail,

            "Row Crops" => CurrentUse::RowCrops,

            "See Remarks" => CurrentUse::SeeRemarks,

            "Single Family" => CurrentUse::SingleFamily,

            "Subdivision" => CurrentUse::Subdivision,

            "Timber" => CurrentUse::Timber,

            "Tree Farm" => CurrentUse::TreeFarm,

            "Unimproved" => CurrentUse::Unimproved,

            "Vacant" => CurrentUse::Vacant,

            "Vineyard" => CurrentUse::Vineyard,

            "Warehouse" => CurrentUse::Warehouse,

            _ => CurrentUse::OpenEnumeration(s),
        }
    }
}

impl From<&str> for CurrentUse {
    fn from(s: &str) -> CurrentUse {
        match s {
            "Agricultural" => CurrentUse::Agricultural,

            "Automotive" => CurrentUse::Automotive,

            "Cattle" => CurrentUse::Cattle,

            "Commercial" => CurrentUse::Commercial,

            "Dairy" => CurrentUse::Dairy,

            "Farm" => CurrentUse::Farm,

            "Fishery" => CurrentUse::Fishery,

            "Grazing" => CurrentUse::Grazing,

            "Highway/Tourist Service" => CurrentUse::HighwayTouristService,

            "Horses" => CurrentUse::Horses,

            "Hunting" => CurrentUse::Hunting,

            "Industrial" => CurrentUse::Industrial,

            "Investment" => CurrentUse::Investment,

            "Livestock" => CurrentUse::Livestock,

            "Manufactured Home" => CurrentUse::ManufacturedHome,

            "Medical/Dental" => CurrentUse::MedicalDental,

            "Mini-Storage" => CurrentUse::MiniStorage,

            "Mixed Use" => CurrentUse::MixedUse,

            "Multi-Family" => CurrentUse::MultiFamily,

            "Nursery" => CurrentUse::Nursery,

            "Office" => CurrentUse::Office,

            "Orchard" => CurrentUse::Orchard,

            "Other" => CurrentUse::Other,

            "Pasture" => CurrentUse::Pasture,

            "Place of Worship" => CurrentUse::PlaceofWorship,

            "Plantable" => CurrentUse::Plantable,

            "Poultry" => CurrentUse::Poultry,

            "Ranch" => CurrentUse::Ranch,

            "Recreational" => CurrentUse::Recreational,

            "Residential" => CurrentUse::Residential,

            "Retail" => CurrentUse::Retail,

            "Row Crops" => CurrentUse::RowCrops,

            "See Remarks" => CurrentUse::SeeRemarks,

            "Single Family" => CurrentUse::SingleFamily,

            "Subdivision" => CurrentUse::Subdivision,

            "Timber" => CurrentUse::Timber,

            "Tree Farm" => CurrentUse::TreeFarm,

            "Unimproved" => CurrentUse::Unimproved,

            "Vacant" => CurrentUse::Vacant,

            "Vineyard" => CurrentUse::Vineyard,

            "Warehouse" => CurrentUse::Warehouse,

            _ => CurrentUse::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a CurrentUse> for &'a str {
    fn from(s: &'a CurrentUse) -> &'a str {
        match s {
            CurrentUse::Agricultural => "Agricultural",

            CurrentUse::Automotive => "Automotive",

            CurrentUse::Cattle => "Cattle",

            CurrentUse::Commercial => "Commercial",

            CurrentUse::Dairy => "Dairy",

            CurrentUse::Farm => "Farm",

            CurrentUse::Fishery => "Fishery",

            CurrentUse::Grazing => "Grazing",

            CurrentUse::HighwayTouristService => "Highway/Tourist Service",

            CurrentUse::Horses => "Horses",

            CurrentUse::Hunting => "Hunting",

            CurrentUse::Industrial => "Industrial",

            CurrentUse::Investment => "Investment",

            CurrentUse::Livestock => "Livestock",

            CurrentUse::ManufacturedHome => "Manufactured Home",

            CurrentUse::MedicalDental => "Medical/Dental",

            CurrentUse::MiniStorage => "Mini-Storage",

            CurrentUse::MixedUse => "Mixed Use",

            CurrentUse::MultiFamily => "Multi-Family",

            CurrentUse::Nursery => "Nursery",

            CurrentUse::Office => "Office",

            CurrentUse::Orchard => "Orchard",

            CurrentUse::Other => "Other",

            CurrentUse::Pasture => "Pasture",

            CurrentUse::PlaceofWorship => "Place of Worship",

            CurrentUse::Plantable => "Plantable",

            CurrentUse::Poultry => "Poultry",

            CurrentUse::Ranch => "Ranch",

            CurrentUse::Recreational => "Recreational",

            CurrentUse::Residential => "Residential",

            CurrentUse::Retail => "Retail",

            CurrentUse::RowCrops => "Row Crops",

            CurrentUse::SeeRemarks => "See Remarks",

            CurrentUse::SingleFamily => "Single Family",

            CurrentUse::Subdivision => "Subdivision",

            CurrentUse::Timber => "Timber",

            CurrentUse::TreeFarm => "Tree Farm",

            CurrentUse::Unimproved => "Unimproved",

            CurrentUse::Vacant => "Vacant",

            CurrentUse::Vineyard => "Vineyard",

            CurrentUse::Warehouse => "Warehouse",

            CurrentUse::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for CurrentUse {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for CurrentUse {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_current_use_format {
    use super::CurrentUse;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<CurrentUse>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<CurrentUse>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [DailySchedule Lookups](https://ddwiki.reso.org/display/DDW17/DailySchedule+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum DailySchedule {
    /// "[Friday AM](https://ddwiki.reso.org/display/DDW17/Friday+AM)": The prospect (auto email) will be sent every Friday morning.
    FridayAM,

    /// "[Friday PM](https://ddwiki.reso.org/display/DDW17/Friday+PM)": The prospect (auto email) will be sent every Friday evening.
    FridayPM,

    /// "[Monday AM](https://ddwiki.reso.org/display/DDW17/Monday+AM)": The prospect (auto email) will be sent every Monday morning.
    MondayAM,

    /// "[Monday PM](https://ddwiki.reso.org/display/DDW17/Monday+PM)": The prospect (auto email) will be sent every Monday evening.
    MondayPM,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244582)": The prospect (auto email) has not been setup for any daily schedule.
    None,

    /// "[Saturday AM](https://ddwiki.reso.org/display/DDW17/Saturday+AM)": The prospect (auto email) will be sent every Saturday morning.
    SaturdayAM,

    /// "[Saturday PM](https://ddwiki.reso.org/display/DDW17/Saturday+PM)": The prospect (auto email) will be sent every Saturday evening.
    SaturdayPM,

    /// "[Sunday AM](https://ddwiki.reso.org/display/DDW17/Sunday+AM)": The prospect (auto email) will be sent every Sunday morning.
    SundayAM,

    /// "[Sunday PM](https://ddwiki.reso.org/display/DDW17/Sunday+PM)": The prospect (auto email) will be sent every Sunday evening.
    SundayPM,

    /// "[Thursday AM](https://ddwiki.reso.org/display/DDW17/Thursday+AM)": The prospect (auto email) will be sent every Thursday morning.
    ThursdayAM,

    /// "[Thursday PM](https://ddwiki.reso.org/display/DDW17/Thursday+PM)": The prospect (auto email) will be sent every Thursday evening.
    ThursdayPM,

    /// "[Tuesday AM](https://ddwiki.reso.org/display/DDW17/Tuesday+AM)": The prospect (auto email) will be sent every Tuesday morning.
    TuesdayAM,

    /// "[Tuesday PM](https://ddwiki.reso.org/display/DDW17/Tuesday+PM)": The prospect (auto email) will be sent every Tuesday evening.
    TuesdayPM,

    /// "[Wednesday AM](https://ddwiki.reso.org/display/DDW17/Wednesday+AM)": The prospect (auto email) will be sent every Wednesday morning.
    WednesdayAM,

    /// "[Wednesday PM](https://ddwiki.reso.org/display/DDW17/Wednesday+PM)": The prospect (auto email) will be sent every Wednesday evening.
    WednesdayPM,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for DailySchedule {
    fn from(s: String) -> DailySchedule {
        match s.as_ref() {
            "Friday AM" => DailySchedule::FridayAM,

            "Friday PM" => DailySchedule::FridayPM,

            "Monday AM" => DailySchedule::MondayAM,

            "Monday PM" => DailySchedule::MondayPM,

            "None" => DailySchedule::None,

            "Saturday AM" => DailySchedule::SaturdayAM,

            "Saturday PM" => DailySchedule::SaturdayPM,

            "Sunday AM" => DailySchedule::SundayAM,

            "Sunday PM" => DailySchedule::SundayPM,

            "Thursday AM" => DailySchedule::ThursdayAM,

            "Thursday PM" => DailySchedule::ThursdayPM,

            "Tuesday AM" => DailySchedule::TuesdayAM,

            "Tuesday PM" => DailySchedule::TuesdayPM,

            "Wednesday AM" => DailySchedule::WednesdayAM,

            "Wednesday PM" => DailySchedule::WednesdayPM,

            _ => DailySchedule::OpenEnumeration(s),
        }
    }
}

impl From<&str> for DailySchedule {
    fn from(s: &str) -> DailySchedule {
        match s {
            "Friday AM" => DailySchedule::FridayAM,

            "Friday PM" => DailySchedule::FridayPM,

            "Monday AM" => DailySchedule::MondayAM,

            "Monday PM" => DailySchedule::MondayPM,

            "None" => DailySchedule::None,

            "Saturday AM" => DailySchedule::SaturdayAM,

            "Saturday PM" => DailySchedule::SaturdayPM,

            "Sunday AM" => DailySchedule::SundayAM,

            "Sunday PM" => DailySchedule::SundayPM,

            "Thursday AM" => DailySchedule::ThursdayAM,

            "Thursday PM" => DailySchedule::ThursdayPM,

            "Tuesday AM" => DailySchedule::TuesdayAM,

            "Tuesday PM" => DailySchedule::TuesdayPM,

            "Wednesday AM" => DailySchedule::WednesdayAM,

            "Wednesday PM" => DailySchedule::WednesdayPM,

            _ => DailySchedule::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a DailySchedule> for &'a str {
    fn from(s: &'a DailySchedule) -> &'a str {
        match s {
            DailySchedule::FridayAM => "Friday AM",

            DailySchedule::FridayPM => "Friday PM",

            DailySchedule::MondayAM => "Monday AM",

            DailySchedule::MondayPM => "Monday PM",

            DailySchedule::None => "None",

            DailySchedule::SaturdayAM => "Saturday AM",

            DailySchedule::SaturdayPM => "Saturday PM",

            DailySchedule::SundayAM => "Sunday AM",

            DailySchedule::SundayPM => "Sunday PM",

            DailySchedule::ThursdayAM => "Thursday AM",

            DailySchedule::ThursdayPM => "Thursday PM",

            DailySchedule::TuesdayAM => "Tuesday AM",

            DailySchedule::TuesdayPM => "Tuesday PM",

            DailySchedule::WednesdayAM => "Wednesday AM",

            DailySchedule::WednesdayPM => "Wednesday PM",

            DailySchedule::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for DailySchedule {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for DailySchedule {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_daily_schedule_format {
    use super::DailySchedule;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<DailySchedule>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<DailySchedule>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [DevelopmentStatus Lookups](https://ddwiki.reso.org/display/DDW17/DevelopmentStatus+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum DevelopmentStatus {
    /// "[Completed](https://ddwiki.reso.org/display/DDW17/Completed)": The development of the land is complete.
    Completed,

    /// "[Finished Lot(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244568)": The development of the land is finished.
    FinishedLots,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244569)": The development status of the land is something other than those options in this list.
    Other,

    /// "[Proposed](https://ddwiki.reso.org/display/DDW17/Proposed)": The development of the land is in the proposal phase.
    Proposed,

    /// "[Raw Land](https://ddwiki.reso.org/display/DDW17/Raw+Land)": The land is raw and undeveloped.
    RawLand,

    /// "[Rough Grade](https://ddwiki.reso.org/display/DDW17/Rough+Grade)": The development of the last is in the rough grade phase.
    RoughGrade,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244573)": See the Public or Private remarks for details on the development status of the land.
    SeeRemarks,

    /// "[Site Plan Approved](https://ddwiki.reso.org/display/DDW17/Site+Plan+Approved)": The site plan has been approved for the development.
    SitePlanApproved,

    /// "[Site Plan Filed](https://ddwiki.reso.org/display/DDW17/Site+Plan+Filed)": The site plan has been filed for the development.
    SitePlanFiled,

    /// "[Under Construction](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244576)": There is construction in progress at the development.
    UnderConstruction,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for DevelopmentStatus {
    fn from(s: String) -> DevelopmentStatus {
        match s.as_ref() {
            "Completed" => DevelopmentStatus::Completed,

            "Finished Lot(s)" => DevelopmentStatus::FinishedLots,

            "Other" => DevelopmentStatus::Other,

            "Proposed" => DevelopmentStatus::Proposed,

            "Raw Land" => DevelopmentStatus::RawLand,

            "Rough Grade" => DevelopmentStatus::RoughGrade,

            "See Remarks" => DevelopmentStatus::SeeRemarks,

            "Site Plan Approved" => DevelopmentStatus::SitePlanApproved,

            "Site Plan Filed" => DevelopmentStatus::SitePlanFiled,

            "Under Construction" => DevelopmentStatus::UnderConstruction,

            _ => DevelopmentStatus::OpenEnumeration(s),
        }
    }
}

impl From<&str> for DevelopmentStatus {
    fn from(s: &str) -> DevelopmentStatus {
        match s {
            "Completed" => DevelopmentStatus::Completed,

            "Finished Lot(s)" => DevelopmentStatus::FinishedLots,

            "Other" => DevelopmentStatus::Other,

            "Proposed" => DevelopmentStatus::Proposed,

            "Raw Land" => DevelopmentStatus::RawLand,

            "Rough Grade" => DevelopmentStatus::RoughGrade,

            "See Remarks" => DevelopmentStatus::SeeRemarks,

            "Site Plan Approved" => DevelopmentStatus::SitePlanApproved,

            "Site Plan Filed" => DevelopmentStatus::SitePlanFiled,

            "Under Construction" => DevelopmentStatus::UnderConstruction,

            _ => DevelopmentStatus::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a DevelopmentStatus> for &'a str {
    fn from(s: &'a DevelopmentStatus) -> &'a str {
        match s {
            DevelopmentStatus::Completed => "Completed",

            DevelopmentStatus::FinishedLots => "Finished Lot(s)",

            DevelopmentStatus::Other => "Other",

            DevelopmentStatus::Proposed => "Proposed",

            DevelopmentStatus::RawLand => "Raw Land",

            DevelopmentStatus::RoughGrade => "Rough Grade",

            DevelopmentStatus::SeeRemarks => "See Remarks",

            DevelopmentStatus::SitePlanApproved => "Site Plan Approved",

            DevelopmentStatus::SitePlanFiled => "Site Plan Filed",

            DevelopmentStatus::UnderConstruction => "Under Construction",

            DevelopmentStatus::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for DevelopmentStatus {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for DevelopmentStatus {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_development_status_format {
    use super::DevelopmentStatus;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<DevelopmentStatus>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<DevelopmentStatus>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [DeviceType Lookups](https://ddwiki.reso.org/display/DDW17/DeviceType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum DeviceType {
    /// "[Desktop](https://ddwiki.reso.org/display/DDW17/Desktop)": The Actor's device has been identified as a desktop device by the source
    Desktop,

    /// "[Mobile](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244595)": The Actor's device has been identified as a mobile device by the source
    Mobile,

    /// "[Tablet](https://ddwiki.reso.org/display/DDW17/Tablet)": The Actor's device has been identified as a tablet device by the source
    Tablet,

    /// "[Unknown](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244597)": The Actor's device could not be identified by the source
    Unknown,

    /// "[Wearable](https://ddwiki.reso.org/display/DDW17/Wearable)": The Actor's device has been identified as a wearable device by the source
    Wearable,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for DeviceType {
    fn from(s: String) -> DeviceType {
        match s.as_ref() {
            "Desktop" => DeviceType::Desktop,

            "Mobile" => DeviceType::Mobile,

            "Tablet" => DeviceType::Tablet,

            "Unknown" => DeviceType::Unknown,

            "Wearable" => DeviceType::Wearable,

            _ => DeviceType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for DeviceType {
    fn from(s: &str) -> DeviceType {
        match s {
            "Desktop" => DeviceType::Desktop,

            "Mobile" => DeviceType::Mobile,

            "Tablet" => DeviceType::Tablet,

            "Unknown" => DeviceType::Unknown,

            "Wearable" => DeviceType::Wearable,

            _ => DeviceType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a DeviceType> for &'a str {
    fn from(s: &'a DeviceType) -> &'a str {
        match s {
            DeviceType::Desktop => "Desktop",

            DeviceType::Mobile => "Mobile",

            DeviceType::Tablet => "Tablet",

            DeviceType::Unknown => "Unknown",

            DeviceType::Wearable => "Wearable",

            DeviceType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for DeviceType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for DeviceType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_device_type_format {
    use super::DeviceType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<DeviceType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<DeviceType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [DirectionFaces Lookups](https://ddwiki.reso.org/display/DDW17/DirectionFaces+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum DirectionFaces {
    /// "[East](https://ddwiki.reso.org/display/DDW17/East)": The front of the structure faces east.
    East,

    /// "[North](https://ddwiki.reso.org/display/DDW17/North)": The front of the structure faces north.
    North,

    /// "[Northeast](https://ddwiki.reso.org/display/DDW17/Northeast)": The front of the structure faces northeast.
    Northeast,

    /// "[Northwest](https://ddwiki.reso.org/display/DDW17/Northwest)": The front of the structure faces northwest.
    Northwest,

    /// "[South](https://ddwiki.reso.org/display/DDW17/South)": The front of the structure faces south.
    South,

    /// "[Southeast](https://ddwiki.reso.org/display/DDW17/Southeast)": The front of the structure faces southeast.
    Southeast,

    /// "[Southwest](https://ddwiki.reso.org/display/DDW17/Southwest)": The front of the structure faces southwest.
    Southwest,

    /// "[West](https://ddwiki.reso.org/display/DDW17/West)": The front of the structure faces west.
    West,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for DirectionFaces {
    fn from(s: String) -> DirectionFaces {
        match s.as_ref() {
            "East" => DirectionFaces::East,

            "North" => DirectionFaces::North,

            "Northeast" => DirectionFaces::Northeast,

            "Northwest" => DirectionFaces::Northwest,

            "South" => DirectionFaces::South,

            "Southeast" => DirectionFaces::Southeast,

            "Southwest" => DirectionFaces::Southwest,

            "West" => DirectionFaces::West,

            _ => DirectionFaces::OpenEnumeration(s),
        }
    }
}

impl From<&str> for DirectionFaces {
    fn from(s: &str) -> DirectionFaces {
        match s {
            "East" => DirectionFaces::East,

            "North" => DirectionFaces::North,

            "Northeast" => DirectionFaces::Northeast,

            "Northwest" => DirectionFaces::Northwest,

            "South" => DirectionFaces::South,

            "Southeast" => DirectionFaces::Southeast,

            "Southwest" => DirectionFaces::Southwest,

            "West" => DirectionFaces::West,

            _ => DirectionFaces::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a DirectionFaces> for &'a str {
    fn from(s: &'a DirectionFaces) -> &'a str {
        match s {
            DirectionFaces::East => "East",

            DirectionFaces::North => "North",

            DirectionFaces::Northeast => "Northeast",

            DirectionFaces::Northwest => "Northwest",

            DirectionFaces::South => "South",

            DirectionFaces::Southeast => "Southeast",

            DirectionFaces::Southwest => "Southwest",

            DirectionFaces::West => "West",

            DirectionFaces::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for DirectionFaces {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for DirectionFaces {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_direction_faces_format {
    use super::DirectionFaces;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<DirectionFaces>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<DirectionFaces>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [DoorFeatures Lookups](https://ddwiki.reso.org/display/DDW17/DoorFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum DoorFeatures {
    /// "[ENERGY STAR Qualified Doors](https://ddwiki.reso.org/display/DDW17/ENERGY+STAR+Qualified+Doors)": The property has ENERGY STAR qualified door(s).
    ENERGYSTARQualifiedDoors,

    /// "[French Doors](https://ddwiki.reso.org/display/DDW17/French+Doors)": The property has doors with glass panes throughout the length of the door.
    FrenchDoors,

    /// "[Mirrored Closet Door(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244602)": The property has one or more closet doors that have a mirrored surface.
    MirroredClosetDoors,

    /// "[Sliding Doors](https://ddwiki.reso.org/display/DDW17/Sliding+Doors)": The property has sliding doors.
    SlidingDoors,

    /// "[Storm Door(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244604)": The property has one or more storm doors.
    StormDoors,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for DoorFeatures {
    fn from(s: String) -> DoorFeatures {
        match s.as_ref() {
            "ENERGY STAR Qualified Doors" => DoorFeatures::ENERGYSTARQualifiedDoors,

            "French Doors" => DoorFeatures::FrenchDoors,

            "Mirrored Closet Door(s)" => DoorFeatures::MirroredClosetDoors,

            "Sliding Doors" => DoorFeatures::SlidingDoors,

            "Storm Door(s)" => DoorFeatures::StormDoors,

            _ => DoorFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for DoorFeatures {
    fn from(s: &str) -> DoorFeatures {
        match s {
            "ENERGY STAR Qualified Doors" => DoorFeatures::ENERGYSTARQualifiedDoors,

            "French Doors" => DoorFeatures::FrenchDoors,

            "Mirrored Closet Door(s)" => DoorFeatures::MirroredClosetDoors,

            "Sliding Doors" => DoorFeatures::SlidingDoors,

            "Storm Door(s)" => DoorFeatures::StormDoors,

            _ => DoorFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a DoorFeatures> for &'a str {
    fn from(s: &'a DoorFeatures) -> &'a str {
        match s {
            DoorFeatures::ENERGYSTARQualifiedDoors => "ENERGY STAR Qualified Doors",

            DoorFeatures::FrenchDoors => "French Doors",

            DoorFeatures::MirroredClosetDoors => "Mirrored Closet Door(s)",

            DoorFeatures::SlidingDoors => "Sliding Doors",

            DoorFeatures::StormDoors => "Storm Door(s)",

            DoorFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for DoorFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for DoorFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_door_features_format {
    use super::DoorFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<DoorFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<DoorFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Electric Lookups](https://ddwiki.reso.org/display/DDW17/Electric+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Electric {
    /// "[100 Amp Service](https://ddwiki.reso.org/display/DDW17/100+Amp+Service)": The electrical features of the property include 100 amp service.
    _100AmpService,

    /// "[150 Amp Service](https://ddwiki.reso.org/display/DDW17/150+Amp+Service)": The electrical features of the property include 150 amp service.
    _150AmpService,

    /// "[200+ Amp Service](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244609)": The electrical features of the property include 200+ amp service.
    _200PlusAmpService,

    /// "[220 Volts](https://ddwiki.reso.org/display/DDW17/220+Volts)": The electrical features of the property include 220 volts.
    _220Volts,

    /// "[220 Volts For Spa](https://ddwiki.reso.org/display/DDW17/220+Volts+For+Spa)": The electrical features of the property include 220 volts for spa.
    _220VoltsForSpa,

    /// "[220 Volts in Garage](https://ddwiki.reso.org/display/DDW17/220+Volts+in+Garage)": The electrical features of the property include 220 volts in garage.
    _220VoltsinGarage,

    /// "[220 Volts in Kitchen](https://ddwiki.reso.org/display/DDW17/220+Volts+in+Kitchen)": The electrical features of the property include 220 volts in kitchen.
    _220VoltsinKitchen,

    /// "[220 Volts in Laundry](https://ddwiki.reso.org/display/DDW17/220+Volts+in+Laundry)": The electrical features of the property include 220 volts in laundry.
    _220VoltsinLaundry,

    /// "[220 Volts in Workshop](https://ddwiki.reso.org/display/DDW17/220+Volts+in+Workshop)": The electrical features of the property include 220 volts in workshop.
    _220VoltsinWorkshop,

    /// "[440 Volts](https://ddwiki.reso.org/display/DDW17/440+Volts)": The electrical features of the property include 440 volts.
    _440Volts,

    /// "[Circuit Breakers](https://ddwiki.reso.org/display/DDW17/Circuit+Breakers)": The electrical features of the property include circuit breakers.
    CircuitBreakers,

    /// "[Energy Storage Device](https://ddwiki.reso.org/display/DDW17/Energy+Storage+Device)": Device(s) that capture energy at one time to be used at a later time.  Most commonly these refer to single or groups of stand-alone batteries, such as could be used as back-up power, but it also might include flywheels or other devices to store power.
    EnergyStorageDevice,

    /// "[Fuses](https://ddwiki.reso.org/display/DDW17/Fuses)": The electrical features of the property include fuses.
    Fuses,

    /// "[Generator](https://ddwiki.reso.org/display/DDW17/Generator)": The electrical features of the property include generator.
    Generator,

    /// "[Net Meter](https://ddwiki.reso.org/display/DDW17/Net+Meter)": Net metering is an electric service that allows electricity generated on a consumer’s site (“on-site”) to offset that consumer’s use.  This generation can include (generally small) renewable energy facilities (such as wind, solar power, fuel cells or hydro).  Net meters might also be used with energy storage devices such as batteries (stand alone or for electric vehicles). Net meters can “spin backwards” such that at the end of the billing period, the consumer only pays for its use, less what it produced (i.e., the “net”).
    NetMeter,

    /// "[Photovoltaics Seller Owned](https://ddwiki.reso.org/display/DDW17/Photovoltaics+Seller+Owned)": The electrical features of the property include a solar photovoltaic system that is owned by the seller.
    PhotovoltaicsSellerOwned,

    /// "[Photovoltaics Third-Party Owned](https://ddwiki.reso.org/display/DDW17/Photovoltaics+Third-Party+Owned)": The electrical features of the property include a solar photovoltaic system owned by a third party.  This is typically a lease but may be some other arrangement where the property owner does not own the photovoltaic system.
    PhotovoltaicsThirdPartyOwned,

    /// "[Pre-Wired for Renewables](https://ddwiki.reso.org/display/DDW17/Pre-Wired+for+Renewables)": Indicates the electric infrastructure on the property has been extended to more easily incorporate an on-site electric generation facility in the future. This would often include, for example, installing conduit and wire from the generation facility to the electric panel, designating circuits on the panel for that generation, and/or leaving room near the panel for future components, such as an inverter.
    PreWiredforRenewables,

    /// "[Ready for Renewables](https://ddwiki.reso.org/display/DDW17/Ready+for+Renewables)": Indicates a comprehensive infrastructure is in place on the property to more easily incorporate an on-site electric generation facility in the future. Can be confirmed via supporting documentation such as a checklist provided by the DOE Zero Energy Ready Homes program. Solar-PV ready, for example, would often include extensive efficiency measures such as insulation and appliances, architectural drawings that design for a clear roof space, installing conduit from the attic to the electric panel, dedicated circuits on the electric panel, and leaving room near the panel for future components of a solar electric system, such as an inverter. Local requirements may vary. (source: DOE Zero Energy Ready Home http://energy.gov/sites/prod/files/2015/05/f22/PV-Ready%20Checklist.pdf )
    ReadyforRenewables,

    /// "[Underground](https://ddwiki.reso.org/display/DDW17/Underground)": The electrical features of the property include underground.
    Underground,

    /// "[Wind Turbine Seller Owned](https://ddwiki.reso.org/display/DDW17/Wind+Turbine+Seller+Owned)": A wind turbine is provided on the property to generate electricity. Seller owned turbines are typically considered real property and can be transferred with the property.
    WindTurbineSellerOwned,

    /// "[Wind Turbine Third-Party Owned](https://ddwiki.reso.org/display/DDW17/Wind+Turbine+Third-Party+Owned)": A wind turbine is provided on the property to generate electricity.  The homeowner enters a lease agreement with the owner of the wind turbine(s). Third-Party Owned turbines indicate a lease or a Power Purchase Agreement (PPA) exists.  The lease/PPA can often be transferred but the financing company has to agree. See CurrentFinancing field for important further definition of these models.
    WindTurbineThirdPartyOwned,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Electric {
    fn from(s: String) -> Electric {
        match s.as_ref() {
            "100 Amp Service" => Electric::_100AmpService,

            "150 Amp Service" => Electric::_150AmpService,

            "200+ Amp Service" => Electric::_200PlusAmpService,

            "220 Volts" => Electric::_220Volts,

            "220 Volts For Spa" => Electric::_220VoltsForSpa,

            "220 Volts in Garage" => Electric::_220VoltsinGarage,

            "220 Volts in Kitchen" => Electric::_220VoltsinKitchen,

            "220 Volts in Laundry" => Electric::_220VoltsinLaundry,

            "220 Volts in Workshop" => Electric::_220VoltsinWorkshop,

            "440 Volts" => Electric::_440Volts,

            "Circuit Breakers" => Electric::CircuitBreakers,

            "Energy Storage Device" => Electric::EnergyStorageDevice,

            "Fuses" => Electric::Fuses,

            "Generator" => Electric::Generator,

            "Net Meter" => Electric::NetMeter,

            "Photovoltaics Seller Owned" => Electric::PhotovoltaicsSellerOwned,

            "Photovoltaics Third-Party Owned" => Electric::PhotovoltaicsThirdPartyOwned,

            "Pre-Wired for Renewables" => Electric::PreWiredforRenewables,

            "Ready for Renewables" => Electric::ReadyforRenewables,

            "Underground" => Electric::Underground,

            "Wind Turbine Seller Owned" => Electric::WindTurbineSellerOwned,

            "Wind Turbine Third-Party Owned" => Electric::WindTurbineThirdPartyOwned,

            _ => Electric::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Electric {
    fn from(s: &str) -> Electric {
        match s {
            "100 Amp Service" => Electric::_100AmpService,

            "150 Amp Service" => Electric::_150AmpService,

            "200+ Amp Service" => Electric::_200PlusAmpService,

            "220 Volts" => Electric::_220Volts,

            "220 Volts For Spa" => Electric::_220VoltsForSpa,

            "220 Volts in Garage" => Electric::_220VoltsinGarage,

            "220 Volts in Kitchen" => Electric::_220VoltsinKitchen,

            "220 Volts in Laundry" => Electric::_220VoltsinLaundry,

            "220 Volts in Workshop" => Electric::_220VoltsinWorkshop,

            "440 Volts" => Electric::_440Volts,

            "Circuit Breakers" => Electric::CircuitBreakers,

            "Energy Storage Device" => Electric::EnergyStorageDevice,

            "Fuses" => Electric::Fuses,

            "Generator" => Electric::Generator,

            "Net Meter" => Electric::NetMeter,

            "Photovoltaics Seller Owned" => Electric::PhotovoltaicsSellerOwned,

            "Photovoltaics Third-Party Owned" => Electric::PhotovoltaicsThirdPartyOwned,

            "Pre-Wired for Renewables" => Electric::PreWiredforRenewables,

            "Ready for Renewables" => Electric::ReadyforRenewables,

            "Underground" => Electric::Underground,

            "Wind Turbine Seller Owned" => Electric::WindTurbineSellerOwned,

            "Wind Turbine Third-Party Owned" => Electric::WindTurbineThirdPartyOwned,

            _ => Electric::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Electric> for &'a str {
    fn from(s: &'a Electric) -> &'a str {
        match s {
            Electric::_100AmpService => "100 Amp Service",

            Electric::_150AmpService => "150 Amp Service",

            Electric::_200PlusAmpService => "200+ Amp Service",

            Electric::_220Volts => "220 Volts",

            Electric::_220VoltsForSpa => "220 Volts For Spa",

            Electric::_220VoltsinGarage => "220 Volts in Garage",

            Electric::_220VoltsinKitchen => "220 Volts in Kitchen",

            Electric::_220VoltsinLaundry => "220 Volts in Laundry",

            Electric::_220VoltsinWorkshop => "220 Volts in Workshop",

            Electric::_440Volts => "440 Volts",

            Electric::CircuitBreakers => "Circuit Breakers",

            Electric::EnergyStorageDevice => "Energy Storage Device",

            Electric::Fuses => "Fuses",

            Electric::Generator => "Generator",

            Electric::NetMeter => "Net Meter",

            Electric::PhotovoltaicsSellerOwned => "Photovoltaics Seller Owned",

            Electric::PhotovoltaicsThirdPartyOwned => "Photovoltaics Third-Party Owned",

            Electric::PreWiredforRenewables => "Pre-Wired for Renewables",

            Electric::ReadyforRenewables => "Ready for Renewables",

            Electric::Underground => "Underground",

            Electric::WindTurbineSellerOwned => "Wind Turbine Seller Owned",

            Electric::WindTurbineThirdPartyOwned => "Wind Turbine Third-Party Owned",

            Electric::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Electric {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Electric {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_electric_format {
    use super::Electric;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Electric>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Electric>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [EventTarget Lookups](https://ddwiki.reso.org/display/DDW17/EventTarget+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum EventTarget {
    /// "[Agent](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244640)": The EventType used a destination pertaining to the listing agent (i.e. the actor's submission of lead form went to the Listing Agent's contact information)
    Agent,

    /// "[Broker](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244641)": The EventType used a destination pertaining to the listing broker (i.e. the "Clicked on Phone Number" EventType is using the Broker's contact information)
    Broker,

    /// "[Digg](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244642)": The Object was shared on Digg
    Digg,

    /// "[Email](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244643)": The Object was sent in an email
    Email,

    /// "[Facebook](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244644)": The Object was shared on Facebook
    Facebook,

    /// "[Facebook Messenger](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244645)": The Object was shared via Facebook Messenger
    FacebookMessenger,

    /// "[GooglePlus](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244646)": The Object was shared to Google Plus
    GooglePlus,

    /// "[iMessage](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244647)": The Object was shared via iMessage
    IMessage,

    /// "[Instagram](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244648)": The Object was shared on Instagram
    Instagram,

    /// "[LinkedIn](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244649)": The Object was shared on LinkedIn
    LinkedIn,

    /// "[Pinterest](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244650)": The Object was pinned on Pinterest
    Pinterest,

    /// "[Reddit](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244651)": The Object was shared on Reddit
    Reddit,

    /// "[Slack](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244652)": The Object was shared via Slack
    Slack,

    /// "[SMS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244653)": The Object was sent in an SMS message
    SMS,

    /// "[Snapchat](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244654)": The Object was shared on Snapchat
    Snapchat,

    /// "[StumbleUpon](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244655)": The Object was shared on StumbleUpon
    StumbleUpon,

    /// "[Tumblr](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244656)": The Object was shared on Tumblr
    Tumblr,

    /// "[Twitter](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244657)": The Object was tweeted on Twitter
    Twitter,

    /// "[YouTube](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244658)": The Object was shared on YouTube
    YouTube,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for EventTarget {
    fn from(s: String) -> EventTarget {
        match s.as_ref() {
            "Agent" => EventTarget::Agent,

            "Broker" => EventTarget::Broker,

            "Digg" => EventTarget::Digg,

            "Email" => EventTarget::Email,

            "Facebook" => EventTarget::Facebook,

            "Facebook Messenger" => EventTarget::FacebookMessenger,

            "GooglePlus" => EventTarget::GooglePlus,

            "iMessage" => EventTarget::IMessage,

            "Instagram" => EventTarget::Instagram,

            "LinkedIn" => EventTarget::LinkedIn,

            "Pinterest" => EventTarget::Pinterest,

            "Reddit" => EventTarget::Reddit,

            "Slack" => EventTarget::Slack,

            "SMS" => EventTarget::SMS,

            "Snapchat" => EventTarget::Snapchat,

            "StumbleUpon" => EventTarget::StumbleUpon,

            "Tumblr" => EventTarget::Tumblr,

            "Twitter" => EventTarget::Twitter,

            "YouTube" => EventTarget::YouTube,

            _ => EventTarget::OpenEnumeration(s),
        }
    }
}

impl From<&str> for EventTarget {
    fn from(s: &str) -> EventTarget {
        match s {
            "Agent" => EventTarget::Agent,

            "Broker" => EventTarget::Broker,

            "Digg" => EventTarget::Digg,

            "Email" => EventTarget::Email,

            "Facebook" => EventTarget::Facebook,

            "Facebook Messenger" => EventTarget::FacebookMessenger,

            "GooglePlus" => EventTarget::GooglePlus,

            "iMessage" => EventTarget::IMessage,

            "Instagram" => EventTarget::Instagram,

            "LinkedIn" => EventTarget::LinkedIn,

            "Pinterest" => EventTarget::Pinterest,

            "Reddit" => EventTarget::Reddit,

            "Slack" => EventTarget::Slack,

            "SMS" => EventTarget::SMS,

            "Snapchat" => EventTarget::Snapchat,

            "StumbleUpon" => EventTarget::StumbleUpon,

            "Tumblr" => EventTarget::Tumblr,

            "Twitter" => EventTarget::Twitter,

            "YouTube" => EventTarget::YouTube,

            _ => EventTarget::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a EventTarget> for &'a str {
    fn from(s: &'a EventTarget) -> &'a str {
        match s {
            EventTarget::Agent => "Agent",

            EventTarget::Broker => "Broker",

            EventTarget::Digg => "Digg",

            EventTarget::Email => "Email",

            EventTarget::Facebook => "Facebook",

            EventTarget::FacebookMessenger => "Facebook Messenger",

            EventTarget::GooglePlus => "GooglePlus",

            EventTarget::IMessage => "iMessage",

            EventTarget::Instagram => "Instagram",

            EventTarget::LinkedIn => "LinkedIn",

            EventTarget::Pinterest => "Pinterest",

            EventTarget::Reddit => "Reddit",

            EventTarget::Slack => "Slack",

            EventTarget::SMS => "SMS",

            EventTarget::Snapchat => "Snapchat",

            EventTarget::StumbleUpon => "StumbleUpon",

            EventTarget::Tumblr => "Tumblr",

            EventTarget::Twitter => "Twitter",

            EventTarget::YouTube => "YouTube",

            EventTarget::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for EventTarget {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for EventTarget {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_event_target_format {
    use super::EventTarget;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<EventTarget>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<EventTarget>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [EventType Lookups](https://ddwiki.reso.org/display/DDW17/EventType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum EventType {
    /// "[Click to Primary Hosted Site](https://ddwiki.reso.org/display/DDW17/Click+to+Primary+Hosted+Site)": The Actor was referred to the Object's primary hosted website
    ClicktoPrimaryHostedSite,

    /// "[Clicked on Email Address](https://ddwiki.reso.org/display/DDW17/Clicked+on+Email+Address)": The Actor engaged in the act of emailing to the Object's email address (note: does not indicate an email was sent)
    ClickedonEmailAddress,

    /// "[Clicked on Phone Number](https://ddwiki.reso.org/display/DDW17/Clicked+on+Phone+Number)": The Actor clicked on a phone number link associated with the Object
    ClickedonPhoneNumber,

    /// "[Comments](https://ddwiki.reso.org/display/DDW17/Comments)": Comments were made on the Object
    Comments,

    /// "[Detailed View](https://ddwiki.reso.org/display/DDW17/Detailed+View)": The object was the main focal point in the Actor's view.
    DetailedView,

    /// "[Discard](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244665)": The Actor has reacted "negatively" to the object.
    Discard,

    /// "[Driving Directions](https://ddwiki.reso.org/display/DDW17/Driving+Directions)": The Actor engaged in driving directions with the Object
    DrivingDirections,

    /// "[Exit Detailed View](https://ddwiki.reso.org/display/DDW17/Exit+Detailed+View)": The actor left the detailed view.
    ExitDetailedView,

    /// "[Favorited](https://ddwiki.reso.org/display/DDW17/Favorited)": The Actor has reacted "positively" to the object.
    Favorited,

    /// "[Maybe](https://ddwiki.reso.org/display/DDW17/Maybe)": The Actor has reacted "possibly positive" to the object.
    Maybe,

    /// "[Non-Detailed View](https://ddwiki.reso.org/display/DDW17/Non-Detailed+View)": The object appeared in the Actor's view but was not the main focal point.®
    NonDetailedView,

    /// "[Object Modified](https://ddwiki.reso.org/display/DDW17/Object+Modified)": The tracking Obect was modified in some way.
    ObjectModified,

    /// "[Photo Gallery](https://ddwiki.reso.org/display/DDW17/Photo+Gallery)": The Actor participated in a photo gallery display
    PhotoGallery,

    /// "[Printed](https://ddwiki.reso.org/display/DDW17/Printed)": The Actor printed the object
    Printed,

    /// "[Property Videos](https://ddwiki.reso.org/display/DDW17/Property+Videos)": The Actor has interacted with a property video with the Object
    PropertyVideos,

    /// "[Search](https://ddwiki.reso.org/display/DDW17/Search)": The tracking Object is data is part of a search and will contain more than one result.  Normally, the search result data will be presented in the ObjectCollection field and include ALL the listings that were part of the search.
    Search,

    /// "[Share](https://ddwiki.reso.org/display/DDW17/Share)": The sharing of a listing to another media or entity (includes social media sites, IM's, email and SMS messages)
    Share,

    /// "[Submission of Lead Form](https://ddwiki.reso.org/display/DDW17/Submission+of+Lead+Form)": The Actor has submitted a lead form
    SubmissionofLeadForm,

    /// "[Virtual Tour](https://ddwiki.reso.org/display/DDW17/Virtual+Tour)": The Actor viewed the Object's virtual tour
    VirtualTour,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for EventType {
    fn from(s: String) -> EventType {
        match s.as_ref() {
            "Click to Primary Hosted Site" => EventType::ClicktoPrimaryHostedSite,

            "Clicked on Email Address" => EventType::ClickedonEmailAddress,

            "Clicked on Phone Number" => EventType::ClickedonPhoneNumber,

            "Comments" => EventType::Comments,

            "Detailed View" => EventType::DetailedView,

            "Discard" => EventType::Discard,

            "Driving Directions" => EventType::DrivingDirections,

            "Exit Detailed View" => EventType::ExitDetailedView,

            "Favorited" => EventType::Favorited,

            "Maybe" => EventType::Maybe,

            "Non-Detailed View" => EventType::NonDetailedView,

            "Object Modified" => EventType::ObjectModified,

            "Photo Gallery" => EventType::PhotoGallery,

            "Printed" => EventType::Printed,

            "Property Videos" => EventType::PropertyVideos,

            "Search" => EventType::Search,

            "Share" => EventType::Share,

            "Submission of Lead Form" => EventType::SubmissionofLeadForm,

            "Virtual Tour" => EventType::VirtualTour,

            _ => EventType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for EventType {
    fn from(s: &str) -> EventType {
        match s {
            "Click to Primary Hosted Site" => EventType::ClicktoPrimaryHostedSite,

            "Clicked on Email Address" => EventType::ClickedonEmailAddress,

            "Clicked on Phone Number" => EventType::ClickedonPhoneNumber,

            "Comments" => EventType::Comments,

            "Detailed View" => EventType::DetailedView,

            "Discard" => EventType::Discard,

            "Driving Directions" => EventType::DrivingDirections,

            "Exit Detailed View" => EventType::ExitDetailedView,

            "Favorited" => EventType::Favorited,

            "Maybe" => EventType::Maybe,

            "Non-Detailed View" => EventType::NonDetailedView,

            "Object Modified" => EventType::ObjectModified,

            "Photo Gallery" => EventType::PhotoGallery,

            "Printed" => EventType::Printed,

            "Property Videos" => EventType::PropertyVideos,

            "Search" => EventType::Search,

            "Share" => EventType::Share,

            "Submission of Lead Form" => EventType::SubmissionofLeadForm,

            "Virtual Tour" => EventType::VirtualTour,

            _ => EventType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a EventType> for &'a str {
    fn from(s: &'a EventType) -> &'a str {
        match s {
            EventType::ClicktoPrimaryHostedSite => "Click to Primary Hosted Site",

            EventType::ClickedonEmailAddress => "Clicked on Email Address",

            EventType::ClickedonPhoneNumber => "Clicked on Phone Number",

            EventType::Comments => "Comments",

            EventType::DetailedView => "Detailed View",

            EventType::Discard => "Discard",

            EventType::DrivingDirections => "Driving Directions",

            EventType::ExitDetailedView => "Exit Detailed View",

            EventType::Favorited => "Favorited",

            EventType::Maybe => "Maybe",

            EventType::NonDetailedView => "Non-Detailed View",

            EventType::ObjectModified => "Object Modified",

            EventType::PhotoGallery => "Photo Gallery",

            EventType::Printed => "Printed",

            EventType::PropertyVideos => "Property Videos",

            EventType::Search => "Search",

            EventType::Share => "Share",

            EventType::SubmissionofLeadForm => "Submission of Lead Form",

            EventType::VirtualTour => "Virtual Tour",

            EventType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for EventType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for EventType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_event_type_format {
    use super::EventType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<EventType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<EventType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ExistingLeaseType Lookups](https://ddwiki.reso.org/display/DDW17/ExistingLeaseType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ExistingLeaseType {
    /// "[Absolute Net](https://ddwiki.reso.org/display/DDW17/Absolute+Net)": Also known as a Bondable Lease, the tenant carries every risk in addition to the costs of a NNN Lease.
    AbsoluteNet,

    /// "[CPI Adjustment](https://ddwiki.reso.org/display/DDW17/CPI+Adjustment)": An escalation clause/provision in a lease to adjust the amount paid by the tenant (lessee) where the adjustment will follow the Consumer Price Index (CPI).
    CPIAdjustment,

    /// "[Escalation Clause](https://ddwiki.reso.org/display/DDW17/Escalation+Clause)": A clause or provision in a lease document that set a formula for how rent will increase over time.
    EscalationClause,

    /// "[Gross](https://ddwiki.reso.org/display/DDW17/Gross)": A lease agreement where the owner (lessor) pays all property changes normal to ownership.  The opposite to net leases where the tenant (lessee) may pay taxes, insurance, maintenance and even for damages that were not caused by the tenant.
    Gross,

    /// "[Ground Lease](https://ddwiki.reso.org/display/DDW17/Ground+Lease)": Typically a long term lease of land where the tenant (lessee) has the right to develop or make improvements.
    GroundLease,

    /// "[Net](https://ddwiki.reso.org/display/DDW17/Net)": A lease agreement where the tenant pays the real estate taxes.
    Net,

    /// "[NN](https://ddwiki.reso.org/display/DDW17/NN)": A lease agreement where the tenant pays real estate taxes and building insurance.
    NN,

    /// "[NNN](https://ddwiki.reso.org/display/DDW17/NNN)": A lease agreement where the tenant pays real estate taxes, building insurance and maintenance.
    NNN,

    /// "[Oral](https://ddwiki.reso.org/display/DDW17/Oral)": The terms of the lease are agreed orally (not in writing) between the lessee and lessor.  Legal restrictions around oral agreements vary from state to state.
    Oral,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ExistingLeaseType {
    fn from(s: String) -> ExistingLeaseType {
        match s.as_ref() {
            "Absolute Net" => ExistingLeaseType::AbsoluteNet,

            "CPI Adjustment" => ExistingLeaseType::CPIAdjustment,

            "Escalation Clause" => ExistingLeaseType::EscalationClause,

            "Gross" => ExistingLeaseType::Gross,

            "Ground Lease" => ExistingLeaseType::GroundLease,

            "Net" => ExistingLeaseType::Net,

            "NN" => ExistingLeaseType::NN,

            "NNN" => ExistingLeaseType::NNN,

            "Oral" => ExistingLeaseType::Oral,

            _ => ExistingLeaseType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ExistingLeaseType {
    fn from(s: &str) -> ExistingLeaseType {
        match s {
            "Absolute Net" => ExistingLeaseType::AbsoluteNet,

            "CPI Adjustment" => ExistingLeaseType::CPIAdjustment,

            "Escalation Clause" => ExistingLeaseType::EscalationClause,

            "Gross" => ExistingLeaseType::Gross,

            "Ground Lease" => ExistingLeaseType::GroundLease,

            "Net" => ExistingLeaseType::Net,

            "NN" => ExistingLeaseType::NN,

            "NNN" => ExistingLeaseType::NNN,

            "Oral" => ExistingLeaseType::Oral,

            _ => ExistingLeaseType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ExistingLeaseType> for &'a str {
    fn from(s: &'a ExistingLeaseType) -> &'a str {
        match s {
            ExistingLeaseType::AbsoluteNet => "Absolute Net",

            ExistingLeaseType::CPIAdjustment => "CPI Adjustment",

            ExistingLeaseType::EscalationClause => "Escalation Clause",

            ExistingLeaseType::Gross => "Gross",

            ExistingLeaseType::GroundLease => "Ground Lease",

            ExistingLeaseType::Net => "Net",

            ExistingLeaseType::NN => "NN",

            ExistingLeaseType::NNN => "NNN",

            ExistingLeaseType::Oral => "Oral",

            ExistingLeaseType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ExistingLeaseType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ExistingLeaseType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_existing_lease_type_format {
    use super::ExistingLeaseType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ExistingLeaseType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ExistingLeaseType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ExteriorFeatures Lookups](https://ddwiki.reso.org/display/DDW17/ExteriorFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ExteriorFeatures {
    /// "[Awning(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244680)": The property has one or more awnings on it's exterior.
    Awnings,

    /// "[Balcony](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244681)": The property has an exterior balcony.
    Balcony,

    /// "[Barbecue](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244682)": The property has an outdoors barbeque.
    Barbecue,

    /// "[Basketball Court](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244683)": The property has a basketball court.
    BasketballCourt,

    /// "[Boat Slip](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244684)": The property includes a boat slip.
    BoatSlip,

    /// "[Built-in Barbecue](https://ddwiki.reso.org/display/DDW17/Built-in+Barbecue)": The property has a built-in outdoor barbeque.
    BuiltinBarbecue,

    /// "[Courtyard](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244686)": The property has a courtyard.
    Courtyard,

    /// "[Covered Courtyard](https://ddwiki.reso.org/display/DDW17/Covered+Courtyard)": The property has a covered courtyard.
    CoveredCourtyard,

    /// "[Dock](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244688)": The property includes a dock.
    Dock,

    /// "[Dog Run](https://ddwiki.reso.org/display/DDW17/Dog+Run)": The property has a dog run.
    DogRun,

    /// "[Electric Grill](https://ddwiki.reso.org/display/DDW17/Electric+Grill)": The property has an outdoor electric grill.
    ElectricGrill,

    /// "[Fire Pit](https://ddwiki.reso.org/display/DDW17/Fire+Pit)": The property has an outdoor fire pit.
    FirePit,

    /// "[Garden](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244692)": The property has a garden.
    Garden,

    /// "[Gas Grill](https://ddwiki.reso.org/display/DDW17/Gas+Grill)": The property has an outdoor gas grill.
    GasGrill,

    /// "[Gray Water System](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244694)": The property has a grey water system.
    GrayWaterSystem,

    /// "[Kennel](https://ddwiki.reso.org/display/DDW17/Kennel)": The property has a kennel.
    Kennel,

    /// "[Lighting](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244696)": The property has exterior lighting.
    Lighting,

    /// "[Misting System](https://ddwiki.reso.org/display/DDW17/Misting+System)": The property has a misting system.
    MistingSystem,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244698)": The property has no exterior features.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244699)": The property has exterior features other than those in this list.
    Other,

    /// "[Outdoor Grill](https://ddwiki.reso.org/display/DDW17/Outdoor+Grill)": The property has an outdoor grill.
    OutdoorGrill,

    /// "[Outdoor Kitchen](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244701)": The property has an outdoor kitchen.
    OutdoorKitchen,

    /// "[Outdoor Shower](https://ddwiki.reso.org/display/DDW17/Outdoor+Shower)": The property has an outdoor shower.
    OutdoorShower,

    /// "[Permeable Paving](https://ddwiki.reso.org/display/DDW17/Permeable+Paving)": The property has preamble paving that allows fluids to run through the paving to the below ground or channeling.
    PermeablePaving,

    /// "[Playground](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244704)": The property has a playground.
    Playground,

    /// "[Private Entrance](https://ddwiki.reso.org/display/DDW17/Private+Entrance)": The property has a private entrance.
    PrivateEntrance,

    /// "[Private Yard](https://ddwiki.reso.org/display/DDW17/Private+Yard)": The property has a private yard.
    PrivateYard,

    /// "[Rain Barrel/Cistern(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244707)": The property has a cistern for water collection.
    RainBarrelCisterns,

    /// "[Rain Gutters](https://ddwiki.reso.org/display/DDW17/Rain+Gutters)": The structure has ran gutters.
    RainGutters,

    /// "[RV Hookup](https://ddwiki.reso.org/display/DDW17/RV+Hookup)": The property has hookups for recreational vehicles.
    RVHookup,

    /// "[Storage](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244710)": The property has external storage.
    Storage,

    /// "[Tennis Court(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244711)": The property has one or more tennis courts.
    TennisCourts,

    /// "[Uncovered Courtyard](https://ddwiki.reso.org/display/DDW17/Uncovered+Courtyard)": The property has an uncovered courtyard.
    UncoveredCourtyard,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ExteriorFeatures {
    fn from(s: String) -> ExteriorFeatures {
        match s.as_ref() {
            "Awning(s)" => ExteriorFeatures::Awnings,

            "Balcony" => ExteriorFeatures::Balcony,

            "Barbecue" => ExteriorFeatures::Barbecue,

            "Basketball Court" => ExteriorFeatures::BasketballCourt,

            "Boat Slip" => ExteriorFeatures::BoatSlip,

            "Built-in Barbecue" => ExteriorFeatures::BuiltinBarbecue,

            "Courtyard" => ExteriorFeatures::Courtyard,

            "Covered Courtyard" => ExteriorFeatures::CoveredCourtyard,

            "Dock" => ExteriorFeatures::Dock,

            "Dog Run" => ExteriorFeatures::DogRun,

            "Electric Grill" => ExteriorFeatures::ElectricGrill,

            "Fire Pit" => ExteriorFeatures::FirePit,

            "Garden" => ExteriorFeatures::Garden,

            "Gas Grill" => ExteriorFeatures::GasGrill,

            "Gray Water System" => ExteriorFeatures::GrayWaterSystem,

            "Kennel" => ExteriorFeatures::Kennel,

            "Lighting" => ExteriorFeatures::Lighting,

            "Misting System" => ExteriorFeatures::MistingSystem,

            "None" => ExteriorFeatures::None,

            "Other" => ExteriorFeatures::Other,

            "Outdoor Grill" => ExteriorFeatures::OutdoorGrill,

            "Outdoor Kitchen" => ExteriorFeatures::OutdoorKitchen,

            "Outdoor Shower" => ExteriorFeatures::OutdoorShower,

            "Permeable Paving" => ExteriorFeatures::PermeablePaving,

            "Playground" => ExteriorFeatures::Playground,

            "Private Entrance" => ExteriorFeatures::PrivateEntrance,

            "Private Yard" => ExteriorFeatures::PrivateYard,

            "Rain Barrel/Cistern(s)" => ExteriorFeatures::RainBarrelCisterns,

            "Rain Gutters" => ExteriorFeatures::RainGutters,

            "RV Hookup" => ExteriorFeatures::RVHookup,

            "Storage" => ExteriorFeatures::Storage,

            "Tennis Court(s)" => ExteriorFeatures::TennisCourts,

            "Uncovered Courtyard" => ExteriorFeatures::UncoveredCourtyard,

            _ => ExteriorFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ExteriorFeatures {
    fn from(s: &str) -> ExteriorFeatures {
        match s {
            "Awning(s)" => ExteriorFeatures::Awnings,

            "Balcony" => ExteriorFeatures::Balcony,

            "Barbecue" => ExteriorFeatures::Barbecue,

            "Basketball Court" => ExteriorFeatures::BasketballCourt,

            "Boat Slip" => ExteriorFeatures::BoatSlip,

            "Built-in Barbecue" => ExteriorFeatures::BuiltinBarbecue,

            "Courtyard" => ExteriorFeatures::Courtyard,

            "Covered Courtyard" => ExteriorFeatures::CoveredCourtyard,

            "Dock" => ExteriorFeatures::Dock,

            "Dog Run" => ExteriorFeatures::DogRun,

            "Electric Grill" => ExteriorFeatures::ElectricGrill,

            "Fire Pit" => ExteriorFeatures::FirePit,

            "Garden" => ExteriorFeatures::Garden,

            "Gas Grill" => ExteriorFeatures::GasGrill,

            "Gray Water System" => ExteriorFeatures::GrayWaterSystem,

            "Kennel" => ExteriorFeatures::Kennel,

            "Lighting" => ExteriorFeatures::Lighting,

            "Misting System" => ExteriorFeatures::MistingSystem,

            "None" => ExteriorFeatures::None,

            "Other" => ExteriorFeatures::Other,

            "Outdoor Grill" => ExteriorFeatures::OutdoorGrill,

            "Outdoor Kitchen" => ExteriorFeatures::OutdoorKitchen,

            "Outdoor Shower" => ExteriorFeatures::OutdoorShower,

            "Permeable Paving" => ExteriorFeatures::PermeablePaving,

            "Playground" => ExteriorFeatures::Playground,

            "Private Entrance" => ExteriorFeatures::PrivateEntrance,

            "Private Yard" => ExteriorFeatures::PrivateYard,

            "Rain Barrel/Cistern(s)" => ExteriorFeatures::RainBarrelCisterns,

            "Rain Gutters" => ExteriorFeatures::RainGutters,

            "RV Hookup" => ExteriorFeatures::RVHookup,

            "Storage" => ExteriorFeatures::Storage,

            "Tennis Court(s)" => ExteriorFeatures::TennisCourts,

            "Uncovered Courtyard" => ExteriorFeatures::UncoveredCourtyard,

            _ => ExteriorFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ExteriorFeatures> for &'a str {
    fn from(s: &'a ExteriorFeatures) -> &'a str {
        match s {
            ExteriorFeatures::Awnings => "Awning(s)",

            ExteriorFeatures::Balcony => "Balcony",

            ExteriorFeatures::Barbecue => "Barbecue",

            ExteriorFeatures::BasketballCourt => "Basketball Court",

            ExteriorFeatures::BoatSlip => "Boat Slip",

            ExteriorFeatures::BuiltinBarbecue => "Built-in Barbecue",

            ExteriorFeatures::Courtyard => "Courtyard",

            ExteriorFeatures::CoveredCourtyard => "Covered Courtyard",

            ExteriorFeatures::Dock => "Dock",

            ExteriorFeatures::DogRun => "Dog Run",

            ExteriorFeatures::ElectricGrill => "Electric Grill",

            ExteriorFeatures::FirePit => "Fire Pit",

            ExteriorFeatures::Garden => "Garden",

            ExteriorFeatures::GasGrill => "Gas Grill",

            ExteriorFeatures::GrayWaterSystem => "Gray Water System",

            ExteriorFeatures::Kennel => "Kennel",

            ExteriorFeatures::Lighting => "Lighting",

            ExteriorFeatures::MistingSystem => "Misting System",

            ExteriorFeatures::None => "None",

            ExteriorFeatures::Other => "Other",

            ExteriorFeatures::OutdoorGrill => "Outdoor Grill",

            ExteriorFeatures::OutdoorKitchen => "Outdoor Kitchen",

            ExteriorFeatures::OutdoorShower => "Outdoor Shower",

            ExteriorFeatures::PermeablePaving => "Permeable Paving",

            ExteriorFeatures::Playground => "Playground",

            ExteriorFeatures::PrivateEntrance => "Private Entrance",

            ExteriorFeatures::PrivateYard => "Private Yard",

            ExteriorFeatures::RainBarrelCisterns => "Rain Barrel/Cistern(s)",

            ExteriorFeatures::RainGutters => "Rain Gutters",

            ExteriorFeatures::RVHookup => "RV Hookup",

            ExteriorFeatures::Storage => "Storage",

            ExteriorFeatures::TennisCourts => "Tennis Court(s)",

            ExteriorFeatures::UncoveredCourtyard => "Uncovered Courtyard",

            ExteriorFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ExteriorFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ExteriorFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_exterior_features_format {
    use super::ExteriorFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ExteriorFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ExteriorFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [FeeFrequency Lookups](https://ddwiki.reso.org/display/DDW17/FeeFrequency+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum FeeFrequency {
    /// "[Annually](https://ddwiki.reso.org/display/DDW17/Annually)": Fee is paid or received once a year.
    Annually,

    /// "[Bi-Monthly](https://ddwiki.reso.org/display/DDW17/Bi-Monthly)": Fee is paid or received every other month.
    BiMonthly,

    /// "[Bi-Weekly](https://ddwiki.reso.org/display/DDW17/Bi-Weekly)": Fee is paid or received every other week.
    BiWeekly,

    /// "[Daily](https://ddwiki.reso.org/display/DDW17/Daily)": Fee is paid or received daily.
    Daily,

    /// "[Monthly](https://ddwiki.reso.org/display/DDW17/Monthly)": Fee is paid or received once a month.
    Monthly,

    /// "[One Time](https://ddwiki.reso.org/display/DDW17/One+Time)": Fee is paid or received once and is not reoccurring.
    OneTime,

    /// "[Quarterly](https://ddwiki.reso.org/display/DDW17/Quarterly)": Fee is paid or received every three months.
    Quarterly,

    /// "[Seasonal](https://ddwiki.reso.org/display/DDW17/Seasonal)": Fee is paid or received seasonally.
    Seasonal,

    /// "[Semi-Annually](https://ddwiki.reso.org/display/DDW17/Semi-Annually)": Fee is paid or received twice a year.
    SemiAnnually,

    /// "[Semi-Monthly](https://ddwiki.reso.org/display/DDW17/Semi-Monthly)": Fee is paid or received twice a month, generally on the 1st and 15th, but that may vary.
    SemiMonthly,

    /// "[Weekly](https://ddwiki.reso.org/display/DDW17/Weekly)": Fee is paid or received weekly.
    Weekly,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for FeeFrequency {
    fn from(s: String) -> FeeFrequency {
        match s.as_ref() {
            "Annually" => FeeFrequency::Annually,

            "Bi-Monthly" => FeeFrequency::BiMonthly,

            "Bi-Weekly" => FeeFrequency::BiWeekly,

            "Daily" => FeeFrequency::Daily,

            "Monthly" => FeeFrequency::Monthly,

            "One Time" => FeeFrequency::OneTime,

            "Quarterly" => FeeFrequency::Quarterly,

            "Seasonal" => FeeFrequency::Seasonal,

            "Semi-Annually" => FeeFrequency::SemiAnnually,

            "Semi-Monthly" => FeeFrequency::SemiMonthly,

            "Weekly" => FeeFrequency::Weekly,

            _ => FeeFrequency::OpenEnumeration(s),
        }
    }
}

impl From<&str> for FeeFrequency {
    fn from(s: &str) -> FeeFrequency {
        match s {
            "Annually" => FeeFrequency::Annually,

            "Bi-Monthly" => FeeFrequency::BiMonthly,

            "Bi-Weekly" => FeeFrequency::BiWeekly,

            "Daily" => FeeFrequency::Daily,

            "Monthly" => FeeFrequency::Monthly,

            "One Time" => FeeFrequency::OneTime,

            "Quarterly" => FeeFrequency::Quarterly,

            "Seasonal" => FeeFrequency::Seasonal,

            "Semi-Annually" => FeeFrequency::SemiAnnually,

            "Semi-Monthly" => FeeFrequency::SemiMonthly,

            "Weekly" => FeeFrequency::Weekly,

            _ => FeeFrequency::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a FeeFrequency> for &'a str {
    fn from(s: &'a FeeFrequency) -> &'a str {
        match s {
            FeeFrequency::Annually => "Annually",

            FeeFrequency::BiMonthly => "Bi-Monthly",

            FeeFrequency::BiWeekly => "Bi-Weekly",

            FeeFrequency::Daily => "Daily",

            FeeFrequency::Monthly => "Monthly",

            FeeFrequency::OneTime => "One Time",

            FeeFrequency::Quarterly => "Quarterly",

            FeeFrequency::Seasonal => "Seasonal",

            FeeFrequency::SemiAnnually => "Semi-Annually",

            FeeFrequency::SemiMonthly => "Semi-Monthly",

            FeeFrequency::Weekly => "Weekly",

            FeeFrequency::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for FeeFrequency {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for FeeFrequency {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_fee_frequency_format {
    use super::FeeFrequency;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<FeeFrequency>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<FeeFrequency>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Fencing Lookups](https://ddwiki.reso.org/display/DDW17/Fencing+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Fencing {
    /// "[Back Yard](https://ddwiki.reso.org/display/DDW17/Back+Yard)": The back yard is fenced.
    BackYard,

    /// "[Barbed Wire](https://ddwiki.reso.org/display/DDW17/Barbed+Wire)": The fencing has barbed wire.
    BarbedWire,

    /// "[Block](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244752)": The property has a block wall(s).
    Block,

    /// "[Brick](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244753)": The property has a brick wall(s).
    Brick,

    /// "[Chain Link](https://ddwiki.reso.org/display/DDW17/Chain+Link)": The property has chain link fencing.
    ChainLink,

    /// "[Cross Fenced](https://ddwiki.reso.org/display/DDW17/Cross+Fenced)": The property is cross fenced.
    CrossFenced,

    /// "[Electric](https://ddwiki.reso.org/display/DDW17/Electric)": The property has electric fencing.
    Electric,

    /// "[Fenced](https://ddwiki.reso.org/display/DDW17/Fenced)": The property is fenced.
    Fenced,

    /// "[Front Yard](https://ddwiki.reso.org/display/DDW17/Front+Yard)": The front yard is fenced.
    FrontYard,

    /// "[Full](https://ddwiki.reso.org/display/DDW17/Full)": The full property is fenced.
    Full,

    /// "[Gate](https://ddwiki.reso.org/display/DDW17/Gate)": The fencing has a gate(s).
    Gate,

    /// "[Invisible](https://ddwiki.reso.org/display/DDW17/Invisible)": The property has invisible fencing.
    Invisible,

    /// "[Masonry](https://ddwiki.reso.org/display/DDW17/Masonry)": The property has masonry wall(s).
    Masonry,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244763)": The property has no fencing.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244764)": The property has a type of fencing that is not included in this list.
    Other,

    /// "[Partial](https://ddwiki.reso.org/display/DDW17/Partial)": The property is partially fenced.
    Partial,

    /// "[Partial Cross](https://ddwiki.reso.org/display/DDW17/Partial+Cross)": The property has partial cross fencing.
    PartialCross,

    /// "[Perimeter](https://ddwiki.reso.org/display/DDW17/Perimeter)": The property has a perimeter fence.
    Perimeter,

    /// "[Pipe](https://ddwiki.reso.org/display/DDW17/Pipe)": The property has pipe fencing.
    Pipe,

    /// "[Privacy](https://ddwiki.reso.org/display/DDW17/Privacy)": The property has privacy fencing.
    Privacy,

    /// "[Security](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244770)": The property has security fencing.
    Security,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244771)": See the Public or Private remarks for details on the fencing.
    SeeRemarks,

    /// "[Slump Stone](https://ddwiki.reso.org/display/DDW17/Slump+Stone)": The property has slump stone wall(s).
    SlumpStone,

    /// "[Split Rail](https://ddwiki.reso.org/display/DDW17/Split+Rail)": The property has split rail fencing.
    SplitRail,

    /// "[Stone](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244774)": The property has stone wall(s).
    Stone,

    /// "[Vinyl](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244775)": The property has vinyl fencing.
    Vinyl,

    /// "[Wire](https://ddwiki.reso.org/display/DDW17/Wire)": The property has wire fencing.
    Wire,

    /// "[Wood](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244777)": The property has wooden fencing.
    Wood,

    /// "[Wrought Iron](https://ddwiki.reso.org/display/DDW17/Wrought+Iron)": The property has wrought iron fencing.
    WroughtIron,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Fencing {
    fn from(s: String) -> Fencing {
        match s.as_ref() {
            "Back Yard" => Fencing::BackYard,

            "Barbed Wire" => Fencing::BarbedWire,

            "Block" => Fencing::Block,

            "Brick" => Fencing::Brick,

            "Chain Link" => Fencing::ChainLink,

            "Cross Fenced" => Fencing::CrossFenced,

            "Electric" => Fencing::Electric,

            "Fenced" => Fencing::Fenced,

            "Front Yard" => Fencing::FrontYard,

            "Full" => Fencing::Full,

            "Gate" => Fencing::Gate,

            "Invisible" => Fencing::Invisible,

            "Masonry" => Fencing::Masonry,

            "None" => Fencing::None,

            "Other" => Fencing::Other,

            "Partial" => Fencing::Partial,

            "Partial Cross" => Fencing::PartialCross,

            "Perimeter" => Fencing::Perimeter,

            "Pipe" => Fencing::Pipe,

            "Privacy" => Fencing::Privacy,

            "Security" => Fencing::Security,

            "See Remarks" => Fencing::SeeRemarks,

            "Slump Stone" => Fencing::SlumpStone,

            "Split Rail" => Fencing::SplitRail,

            "Stone" => Fencing::Stone,

            "Vinyl" => Fencing::Vinyl,

            "Wire" => Fencing::Wire,

            "Wood" => Fencing::Wood,

            "Wrought Iron" => Fencing::WroughtIron,

            _ => Fencing::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Fencing {
    fn from(s: &str) -> Fencing {
        match s {
            "Back Yard" => Fencing::BackYard,

            "Barbed Wire" => Fencing::BarbedWire,

            "Block" => Fencing::Block,

            "Brick" => Fencing::Brick,

            "Chain Link" => Fencing::ChainLink,

            "Cross Fenced" => Fencing::CrossFenced,

            "Electric" => Fencing::Electric,

            "Fenced" => Fencing::Fenced,

            "Front Yard" => Fencing::FrontYard,

            "Full" => Fencing::Full,

            "Gate" => Fencing::Gate,

            "Invisible" => Fencing::Invisible,

            "Masonry" => Fencing::Masonry,

            "None" => Fencing::None,

            "Other" => Fencing::Other,

            "Partial" => Fencing::Partial,

            "Partial Cross" => Fencing::PartialCross,

            "Perimeter" => Fencing::Perimeter,

            "Pipe" => Fencing::Pipe,

            "Privacy" => Fencing::Privacy,

            "Security" => Fencing::Security,

            "See Remarks" => Fencing::SeeRemarks,

            "Slump Stone" => Fencing::SlumpStone,

            "Split Rail" => Fencing::SplitRail,

            "Stone" => Fencing::Stone,

            "Vinyl" => Fencing::Vinyl,

            "Wire" => Fencing::Wire,

            "Wood" => Fencing::Wood,

            "Wrought Iron" => Fencing::WroughtIron,

            _ => Fencing::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Fencing> for &'a str {
    fn from(s: &'a Fencing) -> &'a str {
        match s {
            Fencing::BackYard => "Back Yard",

            Fencing::BarbedWire => "Barbed Wire",

            Fencing::Block => "Block",

            Fencing::Brick => "Brick",

            Fencing::ChainLink => "Chain Link",

            Fencing::CrossFenced => "Cross Fenced",

            Fencing::Electric => "Electric",

            Fencing::Fenced => "Fenced",

            Fencing::FrontYard => "Front Yard",

            Fencing::Full => "Full",

            Fencing::Gate => "Gate",

            Fencing::Invisible => "Invisible",

            Fencing::Masonry => "Masonry",

            Fencing::None => "None",

            Fencing::Other => "Other",

            Fencing::Partial => "Partial",

            Fencing::PartialCross => "Partial Cross",

            Fencing::Perimeter => "Perimeter",

            Fencing::Pipe => "Pipe",

            Fencing::Privacy => "Privacy",

            Fencing::Security => "Security",

            Fencing::SeeRemarks => "See Remarks",

            Fencing::SlumpStone => "Slump Stone",

            Fencing::SplitRail => "Split Rail",

            Fencing::Stone => "Stone",

            Fencing::Vinyl => "Vinyl",

            Fencing::Wire => "Wire",

            Fencing::Wood => "Wood",

            Fencing::WroughtIron => "Wrought Iron",

            Fencing::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Fencing {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Fencing {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_fencing_format {
    use super::Fencing;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Fencing>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Fencing>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [FinancialDataSource Lookups](https://ddwiki.reso.org/display/DDW17/FinancialDataSource+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum FinancialDataSource {
    /// "[Accountant](https://ddwiki.reso.org/display/DDW17/Accountant)": The financial data in the listing was provided by an accountant.
    Accountant,

    /// "[Owner](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244728)": the financial data in the listing was provided by the owner.
    Owner,

    /// "[Property Manager](https://ddwiki.reso.org/display/DDW17/Property+Manager)": the financial data in the listing was provided by the property manager.
    PropertyManager,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for FinancialDataSource {
    fn from(s: String) -> FinancialDataSource {
        match s.as_ref() {
            "Accountant" => FinancialDataSource::Accountant,

            "Owner" => FinancialDataSource::Owner,

            "Property Manager" => FinancialDataSource::PropertyManager,

            _ => FinancialDataSource::OpenEnumeration(s),
        }
    }
}

impl From<&str> for FinancialDataSource {
    fn from(s: &str) -> FinancialDataSource {
        match s {
            "Accountant" => FinancialDataSource::Accountant,

            "Owner" => FinancialDataSource::Owner,

            "Property Manager" => FinancialDataSource::PropertyManager,

            _ => FinancialDataSource::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a FinancialDataSource> for &'a str {
    fn from(s: &'a FinancialDataSource) -> &'a str {
        match s {
            FinancialDataSource::Accountant => "Accountant",

            FinancialDataSource::Owner => "Owner",

            FinancialDataSource::PropertyManager => "Property Manager",

            FinancialDataSource::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for FinancialDataSource {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for FinancialDataSource {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_financial_data_source_format {
    use super::FinancialDataSource;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<FinancialDataSource>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<FinancialDataSource>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [FireplaceFeatures Lookups](https://ddwiki.reso.org/display/DDW17/FireplaceFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum FireplaceFeatures {
    /// "[Basement](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244790)": There is a fireplace in the basement.
    Basement,

    /// "[Bath](https://ddwiki.reso.org/display/DDW17/Bath)": The property includes a bathroom fireplace.
    Bath,

    /// "[Bedroom](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244792)": The property has a bedroom fireplace.
    Bedroom,

    /// "[Blower Fan](https://ddwiki.reso.org/display/DDW17/Blower+Fan)": The fireplace has a blower fan.
    BlowerFan,

    /// "[Circulating](https://ddwiki.reso.org/display/DDW17/Circulating)": The fireplace has a circulation system.
    Circulating,

    /// "[Decorative](https://ddwiki.reso.org/display/DDW17/Decorative)": The property has a decorative fireplace.
    Decorative,

    /// "[Den](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244796)": The property has a fireplace in the den.
    Den,

    /// "[Dining Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244797)": The property has a fireplace in the dining room.
    DiningRoom,

    /// "[Double Sided](https://ddwiki.reso.org/display/DDW17/Double+Sided)": The property has a double sided fireplace.  Double sided fireplaces often have openings in adjacent rooms.
    DoubleSided,

    /// "[Electric](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244799)": The fireplace is electric.
    Electric,

    /// "[EPA Certified Wood Stove](https://ddwiki.reso.org/display/DDW17/EPA+Certified+Wood+Stove)": The property has an EPA certified wood stove.
    EPACertifiedWoodStove,

    /// "[EPA Qualified Fireplace](https://ddwiki.reso.org/display/DDW17/EPA+Qualified+Fireplace)": The property has an EPA certified fireplace.
    EPAQualifiedFireplace,

    /// "[Factory Built](https://ddwiki.reso.org/display/DDW17/Factory+Built)": The fireplace is factory built and later installed into the property.
    FactoryBuilt,

    /// "[Family Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244803)": There is a fireplace in the family room.
    FamilyRoom,

    /// "[Fire Pit](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244804)": The property has a fire pit.
    FirePit,

    /// "[Free Standing](https://ddwiki.reso.org/display/DDW17/Free+Standing)": The fireplace is free standing, rather than built-in.
    FreeStanding,

    /// "[Gas](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244806)": The fireplace burns gas.
    Gas,

    /// "[Gas Log](https://ddwiki.reso.org/display/DDW17/Gas+Log)": The gas fireplace has a gas log.
    GasLog,

    /// "[Gas Starter](https://ddwiki.reso.org/display/DDW17/Gas+Starter)": The fireplace has a gas started, but also burns wood or other fuels.
    GasStarter,

    /// "[Glass Doors](https://ddwiki.reso.org/display/DDW17/Glass+Doors)": The fireplace has glass doors.
    GlassDoors,

    /// "[Great Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244810)": There is a fireplace in the great room.
    GreatRoom,

    /// "[Heatilator](https://ddwiki.reso.org/display/DDW17/Heatilator)": The fireplace has a built in ventilation system used to circulate heat.
    Heatilator,

    /// "[Insert](https://ddwiki.reso.org/display/DDW17/Insert)": A fireplace insert is a device inserted into an existing masonry or prefabricated fireplace.  Inserts are used for their aesthetic, insulating, circulating or other features.
    Insert,

    /// "[Kitchen](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244813)": The property has a fireplace in the kitchen.
    Kitchen,

    /// "[Library](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244814)": The property has a fireplace in the library.
    Library,

    /// "[Living Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244815)": The property has a fireplace in the living room.
    LivingRoom,

    /// "[Masonry](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244816)": The fireplace is made of masonry.
    Masonry,

    /// "[Master Bedroom](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244817)": The property has a fireplace in the master bedroom.
    MasterBedroom,

    /// "[Metal](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244818)": The fireplace is make of metal.
    Metal,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244819)": The property has no fireplace.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244820)": The fireplace has features that are not included in this list.
    Other,

    /// "[Outside](https://ddwiki.reso.org/display/DDW17/Outside)": The property has an outdoor fireplace.
    Outside,

    /// "[Pellet Stove](https://ddwiki.reso.org/display/DDW17/Pellet+Stove)": The property has a stove that burns compressed wood or biomass pellets to generate heat.
    PelletStove,

    /// "[Propane](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244823)": The fireplace burns propane.
    Propane,

    /// "[Raised Hearth](https://ddwiki.reso.org/display/DDW17/Raised+Hearth)": The fireplace has a raised hearth.
    RaisedHearth,

    /// "[Recreation Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244825)": The property has a fireplace in the recreation room.
    RecreationRoom,

    /// "[Sealed Combustion](https://ddwiki.reso.org/display/DDW17/Sealed+Combustion)": The fireplace has sealed combustion chamber.
    SealedCombustion,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244827)": See the remarks fields for additional information about the fireplace(s).
    SeeRemarks,

    /// "[See Through](https://ddwiki.reso.org/display/DDW17/See+Through)": The property has a see-through fireplace, usually positioned between two rooms.
    SeeThrough,

    /// "[Stone](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244829)": The property has a fireplace made with stone.
    Stone,

    /// "[Ventless](https://ddwiki.reso.org/display/DDW17/Ventless)": The property has a ventless fireplace.
    Ventless,

    /// "[Wood Burning](https://ddwiki.reso.org/display/DDW17/Wood+Burning)": The fireplace is wood burning.
    WoodBurning,

    /// "[Wood Burning Stove](https://ddwiki.reso.org/display/DDW17/Wood+Burning+Stove)": The property includes a wood burning stove.
    WoodBurningStove,

    /// "[Zero Clearance](https://ddwiki.reso.org/display/DDW17/Zero+Clearance)": The property has a zero clearance fireplace.  Zero clearance fireplaces are built to be placed almost directly against combustible materials like wood, walls, or paneling.
    ZeroClearance,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for FireplaceFeatures {
    fn from(s: String) -> FireplaceFeatures {
        match s.as_ref() {
            "Basement" => FireplaceFeatures::Basement,

            "Bath" => FireplaceFeatures::Bath,

            "Bedroom" => FireplaceFeatures::Bedroom,

            "Blower Fan" => FireplaceFeatures::BlowerFan,

            "Circulating" => FireplaceFeatures::Circulating,

            "Decorative" => FireplaceFeatures::Decorative,

            "Den" => FireplaceFeatures::Den,

            "Dining Room" => FireplaceFeatures::DiningRoom,

            "Double Sided" => FireplaceFeatures::DoubleSided,

            "Electric" => FireplaceFeatures::Electric,

            "EPA Certified Wood Stove" => FireplaceFeatures::EPACertifiedWoodStove,

            "EPA Qualified Fireplace" => FireplaceFeatures::EPAQualifiedFireplace,

            "Factory Built" => FireplaceFeatures::FactoryBuilt,

            "Family Room" => FireplaceFeatures::FamilyRoom,

            "Fire Pit" => FireplaceFeatures::FirePit,

            "Free Standing" => FireplaceFeatures::FreeStanding,

            "Gas" => FireplaceFeatures::Gas,

            "Gas Log" => FireplaceFeatures::GasLog,

            "Gas Starter" => FireplaceFeatures::GasStarter,

            "Glass Doors" => FireplaceFeatures::GlassDoors,

            "Great Room" => FireplaceFeatures::GreatRoom,

            "Heatilator" => FireplaceFeatures::Heatilator,

            "Insert" => FireplaceFeatures::Insert,

            "Kitchen" => FireplaceFeatures::Kitchen,

            "Library" => FireplaceFeatures::Library,

            "Living Room" => FireplaceFeatures::LivingRoom,

            "Masonry" => FireplaceFeatures::Masonry,

            "Master Bedroom" => FireplaceFeatures::MasterBedroom,

            "Metal" => FireplaceFeatures::Metal,

            "None" => FireplaceFeatures::None,

            "Other" => FireplaceFeatures::Other,

            "Outside" => FireplaceFeatures::Outside,

            "Pellet Stove" => FireplaceFeatures::PelletStove,

            "Propane" => FireplaceFeatures::Propane,

            "Raised Hearth" => FireplaceFeatures::RaisedHearth,

            "Recreation Room" => FireplaceFeatures::RecreationRoom,

            "Sealed Combustion" => FireplaceFeatures::SealedCombustion,

            "See Remarks" => FireplaceFeatures::SeeRemarks,

            "See Through" => FireplaceFeatures::SeeThrough,

            "Stone" => FireplaceFeatures::Stone,

            "Ventless" => FireplaceFeatures::Ventless,

            "Wood Burning" => FireplaceFeatures::WoodBurning,

            "Wood Burning Stove" => FireplaceFeatures::WoodBurningStove,

            "Zero Clearance" => FireplaceFeatures::ZeroClearance,

            _ => FireplaceFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for FireplaceFeatures {
    fn from(s: &str) -> FireplaceFeatures {
        match s {
            "Basement" => FireplaceFeatures::Basement,

            "Bath" => FireplaceFeatures::Bath,

            "Bedroom" => FireplaceFeatures::Bedroom,

            "Blower Fan" => FireplaceFeatures::BlowerFan,

            "Circulating" => FireplaceFeatures::Circulating,

            "Decorative" => FireplaceFeatures::Decorative,

            "Den" => FireplaceFeatures::Den,

            "Dining Room" => FireplaceFeatures::DiningRoom,

            "Double Sided" => FireplaceFeatures::DoubleSided,

            "Electric" => FireplaceFeatures::Electric,

            "EPA Certified Wood Stove" => FireplaceFeatures::EPACertifiedWoodStove,

            "EPA Qualified Fireplace" => FireplaceFeatures::EPAQualifiedFireplace,

            "Factory Built" => FireplaceFeatures::FactoryBuilt,

            "Family Room" => FireplaceFeatures::FamilyRoom,

            "Fire Pit" => FireplaceFeatures::FirePit,

            "Free Standing" => FireplaceFeatures::FreeStanding,

            "Gas" => FireplaceFeatures::Gas,

            "Gas Log" => FireplaceFeatures::GasLog,

            "Gas Starter" => FireplaceFeatures::GasStarter,

            "Glass Doors" => FireplaceFeatures::GlassDoors,

            "Great Room" => FireplaceFeatures::GreatRoom,

            "Heatilator" => FireplaceFeatures::Heatilator,

            "Insert" => FireplaceFeatures::Insert,

            "Kitchen" => FireplaceFeatures::Kitchen,

            "Library" => FireplaceFeatures::Library,

            "Living Room" => FireplaceFeatures::LivingRoom,

            "Masonry" => FireplaceFeatures::Masonry,

            "Master Bedroom" => FireplaceFeatures::MasterBedroom,

            "Metal" => FireplaceFeatures::Metal,

            "None" => FireplaceFeatures::None,

            "Other" => FireplaceFeatures::Other,

            "Outside" => FireplaceFeatures::Outside,

            "Pellet Stove" => FireplaceFeatures::PelletStove,

            "Propane" => FireplaceFeatures::Propane,

            "Raised Hearth" => FireplaceFeatures::RaisedHearth,

            "Recreation Room" => FireplaceFeatures::RecreationRoom,

            "Sealed Combustion" => FireplaceFeatures::SealedCombustion,

            "See Remarks" => FireplaceFeatures::SeeRemarks,

            "See Through" => FireplaceFeatures::SeeThrough,

            "Stone" => FireplaceFeatures::Stone,

            "Ventless" => FireplaceFeatures::Ventless,

            "Wood Burning" => FireplaceFeatures::WoodBurning,

            "Wood Burning Stove" => FireplaceFeatures::WoodBurningStove,

            "Zero Clearance" => FireplaceFeatures::ZeroClearance,

            _ => FireplaceFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a FireplaceFeatures> for &'a str {
    fn from(s: &'a FireplaceFeatures) -> &'a str {
        match s {
            FireplaceFeatures::Basement => "Basement",

            FireplaceFeatures::Bath => "Bath",

            FireplaceFeatures::Bedroom => "Bedroom",

            FireplaceFeatures::BlowerFan => "Blower Fan",

            FireplaceFeatures::Circulating => "Circulating",

            FireplaceFeatures::Decorative => "Decorative",

            FireplaceFeatures::Den => "Den",

            FireplaceFeatures::DiningRoom => "Dining Room",

            FireplaceFeatures::DoubleSided => "Double Sided",

            FireplaceFeatures::Electric => "Electric",

            FireplaceFeatures::EPACertifiedWoodStove => "EPA Certified Wood Stove",

            FireplaceFeatures::EPAQualifiedFireplace => "EPA Qualified Fireplace",

            FireplaceFeatures::FactoryBuilt => "Factory Built",

            FireplaceFeatures::FamilyRoom => "Family Room",

            FireplaceFeatures::FirePit => "Fire Pit",

            FireplaceFeatures::FreeStanding => "Free Standing",

            FireplaceFeatures::Gas => "Gas",

            FireplaceFeatures::GasLog => "Gas Log",

            FireplaceFeatures::GasStarter => "Gas Starter",

            FireplaceFeatures::GlassDoors => "Glass Doors",

            FireplaceFeatures::GreatRoom => "Great Room",

            FireplaceFeatures::Heatilator => "Heatilator",

            FireplaceFeatures::Insert => "Insert",

            FireplaceFeatures::Kitchen => "Kitchen",

            FireplaceFeatures::Library => "Library",

            FireplaceFeatures::LivingRoom => "Living Room",

            FireplaceFeatures::Masonry => "Masonry",

            FireplaceFeatures::MasterBedroom => "Master Bedroom",

            FireplaceFeatures::Metal => "Metal",

            FireplaceFeatures::None => "None",

            FireplaceFeatures::Other => "Other",

            FireplaceFeatures::Outside => "Outside",

            FireplaceFeatures::PelletStove => "Pellet Stove",

            FireplaceFeatures::Propane => "Propane",

            FireplaceFeatures::RaisedHearth => "Raised Hearth",

            FireplaceFeatures::RecreationRoom => "Recreation Room",

            FireplaceFeatures::SealedCombustion => "Sealed Combustion",

            FireplaceFeatures::SeeRemarks => "See Remarks",

            FireplaceFeatures::SeeThrough => "See Through",

            FireplaceFeatures::Stone => "Stone",

            FireplaceFeatures::Ventless => "Ventless",

            FireplaceFeatures::WoodBurning => "Wood Burning",

            FireplaceFeatures::WoodBurningStove => "Wood Burning Stove",

            FireplaceFeatures::ZeroClearance => "Zero Clearance",

            FireplaceFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for FireplaceFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for FireplaceFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_fireplace_features_format {
    use super::FireplaceFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<FireplaceFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<FireplaceFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Flooring Lookups](https://ddwiki.reso.org/display/DDW17/Flooring+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Flooring {
    /// "[Adobe](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244835)": The property includes adobe flooring.
    Adobe,

    /// "[Bamboo](https://ddwiki.reso.org/display/DDW17/Bamboo)": The property includes bamboo flooring.
    Bamboo,

    /// "[Brick](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244837)": The property includes brick flooring.
    Brick,

    /// "[Carpet](https://ddwiki.reso.org/display/DDW17/Carpet)": The property includes carpet flooring.
    Carpet,

    /// "[Ceramic Tile](https://ddwiki.reso.org/display/DDW17/Ceramic+Tile)": The property includes ceramic tile flooring.
    CeramicTile,

    /// "[Clay](https://ddwiki.reso.org/display/DDW17/Clay)": The property includes clay flooring.
    Clay,

    /// "[Combination](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244841)": The property includes combination flooring.
    Combination,

    /// "[Concrete](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244842)": The property includes concrete flooring.
    Concrete,

    /// "[Cork](https://ddwiki.reso.org/display/DDW17/Cork)": The property includes cork flooring.
    Cork,

    /// "[CRI Green Label Plus Certified Carpet](https://ddwiki.reso.org/display/DDW17/CRI+Green+Label+Plus+Certified+Carpet)": The property includes CRI Green Label Plus certified carpet flooring.
    CRIGreenLabelPlusCertifiedCarpet,

    /// "[Dirt](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244845)": The property has dirt flooring.
    Dirt,

    /// "[FloorScore(r) Certified Flooring](https://ddwiki.reso.org/display/DDW17/FloorScore%28r%29+Certified+Flooring)": The property includes FloorScore(r) certified flooring .
    FloorScorerCertifiedFlooring,

    /// "[FSC or SFI Certified Source Hardwood](https://ddwiki.reso.org/display/DDW17/FSC+or+SFI+Certified+Source+Hardwood)": The property includes FSC or SFI certified source hardwood flooring.
    FSCorSFICertifiedSourceHardwood,

    /// "[Granite](https://ddwiki.reso.org/display/DDW17/Granite)": The property includes granite flooring.
    Granite,

    /// "[Hardwood](https://ddwiki.reso.org/display/DDW17/Hardwood)": The property includes hardwood flooring.
    Hardwood,

    /// "[Laminate](https://ddwiki.reso.org/display/DDW17/Laminate)": The property includes laminate flooring.
    Laminate,

    /// "[Linoleum](https://ddwiki.reso.org/display/DDW17/Linoleum)": The property includes linoleum flooring.
    Linoleum,

    /// "[Marble](https://ddwiki.reso.org/display/DDW17/Marble)": The property includes marble flooring.
    Marble,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244853)": The property has no flooring.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244854)": The property includes flooring that is not included in this list.
    Other,

    /// "[Painted/Stained](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244855)": The property includes painted or stained flooring.
    PaintedStained,

    /// "[Parquet](https://ddwiki.reso.org/display/DDW17/Parquet)": The property includes parquet flooring.
    Parquet,

    /// "[Pavers](https://ddwiki.reso.org/display/DDW17/Pavers)": The property includes flooring pavers.
    Pavers,

    /// "[Reclaimed Wood](https://ddwiki.reso.org/display/DDW17/Reclaimed+Wood)": The property includes reclaimed wood flooring.
    ReclaimedWood,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244859)": See the remarks field for additional information about the flooring included with the property.
    SeeRemarks,

    /// "[Simulated Wood](https://ddwiki.reso.org/display/DDW17/Simulated+Wood)": The property includes simulated wood flooring.
    SimulatedWood,

    /// "[Slate](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244861)": The property includes slate flooring.
    Slate,

    /// "[Softwood](https://ddwiki.reso.org/display/DDW17/Softwood)": The property includes softwood flooring.
    Softwood,

    /// "[Stamped](https://ddwiki.reso.org/display/DDW17/Stamped)": The property includes stamped flooring.
    Stamped,

    /// "[Stone](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244864)": The property includes stone flooring.
    Stone,

    /// "[Sustainable](https://ddwiki.reso.org/display/DDW17/Sustainable)": The property includes sustainable flooring.
    Sustainable,

    /// "[Terrazzo](https://ddwiki.reso.org/display/DDW17/Terrazzo)": The property includes terrazzo flooring.
    Terrazzo,

    /// "[Tile](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244867)": The property includes tile flooring.
    Tile,

    /// "[Varies](https://ddwiki.reso.org/display/DDW17/Varies)": The property flooring type varies.
    Varies,

    /// "[Vinyl](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244869)": The property includes vinyl flooring.
    Vinyl,

    /// "[Wood](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244870)": The property includes wood flooring.
    Wood,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Flooring {
    fn from(s: String) -> Flooring {
        match s.as_ref() {
            "Adobe" => Flooring::Adobe,

            "Bamboo" => Flooring::Bamboo,

            "Brick" => Flooring::Brick,

            "Carpet" => Flooring::Carpet,

            "Ceramic Tile" => Flooring::CeramicTile,

            "Clay" => Flooring::Clay,

            "Combination" => Flooring::Combination,

            "Concrete" => Flooring::Concrete,

            "Cork" => Flooring::Cork,

            "CRI Green Label Plus Certified Carpet" => Flooring::CRIGreenLabelPlusCertifiedCarpet,

            "Dirt" => Flooring::Dirt,

            "FloorScore(r) Certified Flooring" => Flooring::FloorScorerCertifiedFlooring,

            "FSC or SFI Certified Source Hardwood" => Flooring::FSCorSFICertifiedSourceHardwood,

            "Granite" => Flooring::Granite,

            "Hardwood" => Flooring::Hardwood,

            "Laminate" => Flooring::Laminate,

            "Linoleum" => Flooring::Linoleum,

            "Marble" => Flooring::Marble,

            "None" => Flooring::None,

            "Other" => Flooring::Other,

            "Painted/Stained" => Flooring::PaintedStained,

            "Parquet" => Flooring::Parquet,

            "Pavers" => Flooring::Pavers,

            "Reclaimed Wood" => Flooring::ReclaimedWood,

            "See Remarks" => Flooring::SeeRemarks,

            "Simulated Wood" => Flooring::SimulatedWood,

            "Slate" => Flooring::Slate,

            "Softwood" => Flooring::Softwood,

            "Stamped" => Flooring::Stamped,

            "Stone" => Flooring::Stone,

            "Sustainable" => Flooring::Sustainable,

            "Terrazzo" => Flooring::Terrazzo,

            "Tile" => Flooring::Tile,

            "Varies" => Flooring::Varies,

            "Vinyl" => Flooring::Vinyl,

            "Wood" => Flooring::Wood,

            _ => Flooring::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Flooring {
    fn from(s: &str) -> Flooring {
        match s {
            "Adobe" => Flooring::Adobe,

            "Bamboo" => Flooring::Bamboo,

            "Brick" => Flooring::Brick,

            "Carpet" => Flooring::Carpet,

            "Ceramic Tile" => Flooring::CeramicTile,

            "Clay" => Flooring::Clay,

            "Combination" => Flooring::Combination,

            "Concrete" => Flooring::Concrete,

            "Cork" => Flooring::Cork,

            "CRI Green Label Plus Certified Carpet" => Flooring::CRIGreenLabelPlusCertifiedCarpet,

            "Dirt" => Flooring::Dirt,

            "FloorScore(r) Certified Flooring" => Flooring::FloorScorerCertifiedFlooring,

            "FSC or SFI Certified Source Hardwood" => Flooring::FSCorSFICertifiedSourceHardwood,

            "Granite" => Flooring::Granite,

            "Hardwood" => Flooring::Hardwood,

            "Laminate" => Flooring::Laminate,

            "Linoleum" => Flooring::Linoleum,

            "Marble" => Flooring::Marble,

            "None" => Flooring::None,

            "Other" => Flooring::Other,

            "Painted/Stained" => Flooring::PaintedStained,

            "Parquet" => Flooring::Parquet,

            "Pavers" => Flooring::Pavers,

            "Reclaimed Wood" => Flooring::ReclaimedWood,

            "See Remarks" => Flooring::SeeRemarks,

            "Simulated Wood" => Flooring::SimulatedWood,

            "Slate" => Flooring::Slate,

            "Softwood" => Flooring::Softwood,

            "Stamped" => Flooring::Stamped,

            "Stone" => Flooring::Stone,

            "Sustainable" => Flooring::Sustainable,

            "Terrazzo" => Flooring::Terrazzo,

            "Tile" => Flooring::Tile,

            "Varies" => Flooring::Varies,

            "Vinyl" => Flooring::Vinyl,

            "Wood" => Flooring::Wood,

            _ => Flooring::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Flooring> for &'a str {
    fn from(s: &'a Flooring) -> &'a str {
        match s {
            Flooring::Adobe => "Adobe",

            Flooring::Bamboo => "Bamboo",

            Flooring::Brick => "Brick",

            Flooring::Carpet => "Carpet",

            Flooring::CeramicTile => "Ceramic Tile",

            Flooring::Clay => "Clay",

            Flooring::Combination => "Combination",

            Flooring::Concrete => "Concrete",

            Flooring::Cork => "Cork",

            Flooring::CRIGreenLabelPlusCertifiedCarpet => "CRI Green Label Plus Certified Carpet",

            Flooring::Dirt => "Dirt",

            Flooring::FloorScorerCertifiedFlooring => "FloorScore(r) Certified Flooring",

            Flooring::FSCorSFICertifiedSourceHardwood => "FSC or SFI Certified Source Hardwood",

            Flooring::Granite => "Granite",

            Flooring::Hardwood => "Hardwood",

            Flooring::Laminate => "Laminate",

            Flooring::Linoleum => "Linoleum",

            Flooring::Marble => "Marble",

            Flooring::None => "None",

            Flooring::Other => "Other",

            Flooring::PaintedStained => "Painted/Stained",

            Flooring::Parquet => "Parquet",

            Flooring::Pavers => "Pavers",

            Flooring::ReclaimedWood => "Reclaimed Wood",

            Flooring::SeeRemarks => "See Remarks",

            Flooring::SimulatedWood => "Simulated Wood",

            Flooring::Slate => "Slate",

            Flooring::Softwood => "Softwood",

            Flooring::Stamped => "Stamped",

            Flooring::Stone => "Stone",

            Flooring::Sustainable => "Sustainable",

            Flooring::Terrazzo => "Terrazzo",

            Flooring::Tile => "Tile",

            Flooring::Varies => "Varies",

            Flooring::Vinyl => "Vinyl",

            Flooring::Wood => "Wood",

            Flooring::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Flooring {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Flooring {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_flooring_format {
    use super::Flooring;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Flooring>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Flooring>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [FoundationDetails Lookups](https://ddwiki.reso.org/display/DDW17/FoundationDetails+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum FoundationDetails {
    /// "[Block](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244731)": The foundation of the property is made wholly or partially of block.
    Block,

    /// "[Brick/Mortar](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244732)": The foundation of the property is made wholly or partially of brick/mortar.
    BrickMortar,

    /// "[Combination](https://ddwiki.reso.org/display/DDW17/Combination)": The foundation of the property is made of a combination of materials.
    Combination,

    /// "[Concrete Perimeter](https://ddwiki.reso.org/display/DDW17/Concrete+Perimeter)": The foundation of the property has a concrete perimeter.
    ConcretePerimeter,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244735)": There are no details about the foundation of the property.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244742)": A foundation type not included in this list.
    Other,

    /// "[Permanent](https://ddwiki.reso.org/display/DDW17/Permanent)": The foundation is permanent and not temporary or movable.
    Permanent,

    /// "[Pillar/Post/Pier](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244737)": The foundation of the property is made wholly or partially of  pillar/post/pier.
    PillarPostPier,

    /// "[Raised](https://ddwiki.reso.org/display/DDW17/Raised)": The foundation of the property is raised.
    Raised,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244739)": See the listing's remarks for details about the foundation.
    SeeRemarks,

    /// "[Slab](https://ddwiki.reso.org/display/DDW17/Slab)": The foundation of the property is made wholly or partially of  a concrete slab.
    Slab,

    /// "[Stone](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244741)": The foundation of the property is made wholly or partially of  stone.
    Stone,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for FoundationDetails {
    fn from(s: String) -> FoundationDetails {
        match s.as_ref() {
            "Block" => FoundationDetails::Block,

            "Brick/Mortar" => FoundationDetails::BrickMortar,

            "Combination" => FoundationDetails::Combination,

            "Concrete Perimeter" => FoundationDetails::ConcretePerimeter,

            "None" => FoundationDetails::None,

            "Other" => FoundationDetails::Other,

            "Permanent" => FoundationDetails::Permanent,

            "Pillar/Post/Pier" => FoundationDetails::PillarPostPier,

            "Raised" => FoundationDetails::Raised,

            "See Remarks" => FoundationDetails::SeeRemarks,

            "Slab" => FoundationDetails::Slab,

            "Stone" => FoundationDetails::Stone,

            _ => FoundationDetails::OpenEnumeration(s),
        }
    }
}

impl From<&str> for FoundationDetails {
    fn from(s: &str) -> FoundationDetails {
        match s {
            "Block" => FoundationDetails::Block,

            "Brick/Mortar" => FoundationDetails::BrickMortar,

            "Combination" => FoundationDetails::Combination,

            "Concrete Perimeter" => FoundationDetails::ConcretePerimeter,

            "None" => FoundationDetails::None,

            "Other" => FoundationDetails::Other,

            "Permanent" => FoundationDetails::Permanent,

            "Pillar/Post/Pier" => FoundationDetails::PillarPostPier,

            "Raised" => FoundationDetails::Raised,

            "See Remarks" => FoundationDetails::SeeRemarks,

            "Slab" => FoundationDetails::Slab,

            "Stone" => FoundationDetails::Stone,

            _ => FoundationDetails::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a FoundationDetails> for &'a str {
    fn from(s: &'a FoundationDetails) -> &'a str {
        match s {
            FoundationDetails::Block => "Block",

            FoundationDetails::BrickMortar => "Brick/Mortar",

            FoundationDetails::Combination => "Combination",

            FoundationDetails::ConcretePerimeter => "Concrete Perimeter",

            FoundationDetails::None => "None",

            FoundationDetails::Other => "Other",

            FoundationDetails::Permanent => "Permanent",

            FoundationDetails::PillarPostPier => "Pillar/Post/Pier",

            FoundationDetails::Raised => "Raised",

            FoundationDetails::SeeRemarks => "See Remarks",

            FoundationDetails::Slab => "Slab",

            FoundationDetails::Stone => "Stone",

            FoundationDetails::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for FoundationDetails {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for FoundationDetails {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_foundation_details_format {
    use super::FoundationDetails;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<FoundationDetails>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<FoundationDetails>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [FrontageType Lookups](https://ddwiki.reso.org/display/DDW17/FrontageType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum FrontageType {
    /// "[Bay/Harbor](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244780)": The property fronts to a bay or harbor.
    BayHarbor,

    /// "[Golf Course](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244781)": The property fronts to a golf course.
    GolfCourse,

    /// "[Lagoon/Estuary](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244782)": The property fronts to a lagoon or estuary.
    LagoonEstuary,

    /// "[Lakefront](https://ddwiki.reso.org/display/DDW17/Lakefront)": The property is on a lakefront.
    Lakefront,

    /// "[Oceanfront](https://ddwiki.reso.org/display/DDW17/Oceanfront)": The property is on an oceanfront.
    Oceanfront,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244785)": The frontage of the property is something other than the options in this list.
    Other,

    /// "[River](https://ddwiki.reso.org/display/DDW17/River)": The property is on a riverfront.
    River,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244787)": See the Public or Private Remarks for details on the frontage of the property.
    SeeRemarks,

    /// "[Waterfront](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244788)": The property is on a waterfront.
    Waterfront,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for FrontageType {
    fn from(s: String) -> FrontageType {
        match s.as_ref() {
            "Bay/Harbor" => FrontageType::BayHarbor,

            "Golf Course" => FrontageType::GolfCourse,

            "Lagoon/Estuary" => FrontageType::LagoonEstuary,

            "Lakefront" => FrontageType::Lakefront,

            "Oceanfront" => FrontageType::Oceanfront,

            "Other" => FrontageType::Other,

            "River" => FrontageType::River,

            "See Remarks" => FrontageType::SeeRemarks,

            "Waterfront" => FrontageType::Waterfront,

            _ => FrontageType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for FrontageType {
    fn from(s: &str) -> FrontageType {
        match s {
            "Bay/Harbor" => FrontageType::BayHarbor,

            "Golf Course" => FrontageType::GolfCourse,

            "Lagoon/Estuary" => FrontageType::LagoonEstuary,

            "Lakefront" => FrontageType::Lakefront,

            "Oceanfront" => FrontageType::Oceanfront,

            "Other" => FrontageType::Other,

            "River" => FrontageType::River,

            "See Remarks" => FrontageType::SeeRemarks,

            "Waterfront" => FrontageType::Waterfront,

            _ => FrontageType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a FrontageType> for &'a str {
    fn from(s: &'a FrontageType) -> &'a str {
        match s {
            FrontageType::BayHarbor => "Bay/Harbor",

            FrontageType::GolfCourse => "Golf Course",

            FrontageType::LagoonEstuary => "Lagoon/Estuary",

            FrontageType::Lakefront => "Lakefront",

            FrontageType::Oceanfront => "Oceanfront",

            FrontageType::Other => "Other",

            FrontageType::River => "River",

            FrontageType::SeeRemarks => "See Remarks",

            FrontageType::Waterfront => "Waterfront",

            FrontageType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for FrontageType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for FrontageType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_frontage_type_format {
    use super::FrontageType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<FrontageType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<FrontageType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Furnished Lookups](https://ddwiki.reso.org/display/DDW17/Furnished+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Furnished {
    /// "[Furnished](https://ddwiki.reso.org/display/DDW17/Furnished)": The dwelling being leased is furnished.
    Furnished,

    /// "[Negotiable](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244748)": The property may be furnished or left unfurnished at the lessor's request.  Contact the listing agent/office to discuss options and cost differences.
    Negotiable,

    /// "[Partially](https://ddwiki.reso.org/display/DDW17/Partially)": The dwelling being leased is partially furnished.
    Partially,

    /// "[Unfurnished](https://ddwiki.reso.org/display/DDW17/Unfurnished)": The dwelling being leased is not furnished.
    Unfurnished,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Furnished {
    fn from(s: String) -> Furnished {
        match s.as_ref() {
            "Furnished" => Furnished::Furnished,

            "Negotiable" => Furnished::Negotiable,

            "Partially" => Furnished::Partially,

            "Unfurnished" => Furnished::Unfurnished,

            _ => Furnished::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Furnished {
    fn from(s: &str) -> Furnished {
        match s {
            "Furnished" => Furnished::Furnished,

            "Negotiable" => Furnished::Negotiable,

            "Partially" => Furnished::Partially,

            "Unfurnished" => Furnished::Unfurnished,

            _ => Furnished::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Furnished> for &'a str {
    fn from(s: &'a Furnished) -> &'a str {
        match s {
            Furnished::Furnished => "Furnished",

            Furnished::Negotiable => "Negotiable",

            Furnished::Partially => "Partially",

            Furnished::Unfurnished => "Unfurnished",

            Furnished::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Furnished {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Furnished {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_furnished_format {
    use super::Furnished;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Furnished>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Furnished>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [GreenBuildingVerificationType Lookups](https://ddwiki.reso.org/display/DDW17/GreenBuildingVerificationType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum GreenBuildingVerificationType {
    /// "[Certified Passive House](https://ddwiki.reso.org/display/DDW17/Certified+Passive+House)": Super-insulated new homes that have been built to meet certification requirements demonstrating minimal or no heating and cooling system.
    CertifiedPassiveHouse,

    /// "[ENERGY STAR Certified Homes](https://ddwiki.reso.org/display/DDW17/ENERGY+STAR+Certified+Homes)": EPA ENERGY STAR Certified Homes is a set of optional construction practices and technologies (above minimum code requirements) that builders can follow to upgrade a new home's energy efficiency beyond minimum code requirements. Guidelines are outlined in the National Performance Path; or the National Prescriptive Path; This whole-house label differs from the ENERGY STAR products label. To achieve the ENERGY STAR Certified Homes label, a home's energy efficiency must be verified by a third-party organization.
    ENERGYSTARCertifiedHomes,

    /// "[EnerPHit](https://ddwiki.reso.org/display/DDW17/EnerPHit)": Super-insulated existing homes that have been remodeled to meet certification requirements demonstrating minimal or no heating and cooling system.
    EnerPHit,

    /// "[HERS Index Score](https://ddwiki.reso.org/display/DDW17/HERS+Index+Score)": The HERS Index is the nationally recognized scoring system for measuring a home's energy performance. To calculate a home's HERS Index Score, a certified RESNET home energy rater will do a home energy rating and compare the data against a reference home (a design-modeled home of the same size and shape as the actual home), so the HERS Index Score is always relative to the size, shape, and type of the house. The lower the number, the more energy efficient the home.
    HERSIndexScore,

    /// "[Home Energy Score](https://ddwiki.reso.org/display/DDW17/Home+Energy+Score)": The Home Energy Score, managed by the US DOE, is a national system that allows homes to receive an energy efficiency rating, similar to the MPG rating available for cars. The Home Energy Score uses a 10-point scale to reflect how much energy a home is expected to use under standard operating conditions. Homes that are expected to use the least amount of energy (and are considered the most energy efficient) score a 10, and homes that are expected to use the most amount of energy (and are considered the least energy efficient) score a 1. The Home Energy Score uses a standard calculation method and takes into account the home's structure and envelope (walls, windows, foundation) and its heating, cooling, and hot water systems. Only Qualified Assessors who pass a DOE exam are allowed to provide the Home Energy Score.
    HomeEnergyScore,

    /// "[Home Energy Upgrade Certificate of Energy Efficiency Improvements](https://ddwiki.reso.org/display/DDW17/Home+Energy+Upgrade+Certificate+of+Energy+Efficiency+Improvements)": Buildings Performance Institute BPI- 2101 Standard Requirements for a Certificate of Completion for Whole-House Energy Efficiency Upgrades specifies a standard way of describing the improvements made to an existing home through a home energy upgrade (HEU). Certificates are provided by a local energy efficiency program sponsor.
    HomeEnergyUpgradeCertificateofEnergyEfficiencyImprovements,

    /// "[Home Energy Upgrade Certificate of Energy Efficiency Performance](https://ddwiki.reso.org/display/DDW17/Home+Energy+Upgrade+Certificate+of+Energy+Efficiency+Performance)": Buildings Performance Institute BPI- 2101 Standard Requirements for a Certificate of Completion for Whole-House Energy Efficiency Upgrades specifies a standard way of describing the improvements made to an existing home through a home energy upgrade (HEU) and provides one or more measures of a home's performance. Measures of performance may include a HERS rating, a Home Energy Score, an indication of projected or actual energy consumption, or other systems. Certificates are provided by a local energy efficiency program sponsor.
    HomeEnergyUpgradeCertificateofEnergyEfficiencyPerformance,

    /// "[Home Performance with ENERGY STAR](https://ddwiki.reso.org/display/DDW17/Home+Performance+with+ENERGY+STAR)": Home Performance with ENERGY STAR offers whole-house solutions to high energy bills and homes with comfort problems. The program is managed by a local sponsor that recruits home improvement contractors who are qualified to perform comprehensive home assessments and improvements.   Local sponsors must follow specific guidelines to participate as outlined in the HPwES Sponsor Guide and Reference Manual.
    HomePerformancewithENERGYSTAR,

    /// "[Indoor airPLUS](https://ddwiki.reso.org/display/DDW17/Indoor+airPLUS)": EPA Indoor airPLUS is a set of optional construction practices and technologies builders can follow to reduce indoor air pollutants and improve the indoor air quality in a new home beyond minimum code requirements. It is only available to homes that first meet ENERGY STAR Certified Homes certification.
    IndoorairPLUS,

    /// "[LEED For Homes](https://ddwiki.reso.org/display/DDW17/LEED+For+Homes)": USGBC's residential rating system, LEED for Homes, was launched in 2008. The LEED rating systems are developed through an open, consensus-based process led by LEED committees. LEED is a voluntary program that provides independent, third-party verification that a home was designed and built using methods for achieving high performance in multiple areas of sustainability including energy, water, waste management, indoor air quality, and sustainable site development. There are multiple rating systems for all types of buildings including Existing Buildings and Homes for residential projects. Homes may achieve different levels of certification (platinum, gold, silver, certified) depending on the number of LEED prerequisites and credits that are met.
    LEEDForHomes,

    /// "[Living Building Challenge](https://ddwiki.reso.org/display/DDW17/Living+Building+Challenge)": Living Future Institute's Homes certified by a third-party that they produce as much or more energy than they use. Super-insulated homes that have met certification requirements demonstrating minimal or no heating and cooling system.
    LivingBuildingChallenge,

    /// "[NGBS New Construction](https://ddwiki.reso.org/display/DDW17/NGBS+New+Construction)": Home Innovation Research Labs certifies homes to the ICC-700 National Green Building Standard(tm) (NGBS), which has undergone the full consensus process and received approval from the American National Standards Institute (ANSI). Home Innovation Research Labs provides project certification to the NGBS. NGBS applies to both single-family homes and multifamily buildings. Certification options also exist for new construction, remodel projects (both whole-home and functional areas such as a kitchen or bathroom) and land development/subdivision. Homes may qualify for a bronze, silver, gold, or emerald certification level depending on the number of green building practices met.
    NGBSNewConstruction,

    /// "[NGBS Small Projects Remodel](https://ddwiki.reso.org/display/DDW17/NGBS+Small+Projects+Remodel)": Home Innovation Research Labs provides project certification to the NGBS. NGBS applies to both single-family homes and multifamily buildings. Certification options also exist for new construction, remodel projects (both whole-home and functional areas such as a kitchen or bathroom), and land development/subdivision. For the Small Projects Remodel, the functional area (kitchen, bathroom, basement, addition) is either certified or not. Unlike other NGBS certifications, multiple certification levels (bronze, silver, gold, or emerald) do not exist for this certification option.
    NGBSSmallProjectsRemodel,

    /// "[NGBS Whole-Home Remodel](https://ddwiki.reso.org/display/DDW17/NGBS+Whole-Home+Remodel)": Home Innovation Research Labs provides project certification to the NGBS. NGBS applies to both single-family homes and multifamily buildings. Certification options also exist for new construction, remodel projects (both whole-home and functional areas such as a kitchen or bathroom), and land development/subdivision. Homes may qualify for a bronze, silver, gold, or emerald certification level depending on the number of green building practices met.
    NGBSWholeHomeRemodel,

    /// "[PHIUS+](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244887)": Super-insulated homes that have met certification requirements demonstrating minimal or no heating and cooling system.
    PHIUSPlus,

    /// "[WaterSense](https://ddwiki.reso.org/display/DDW17/WaterSense)": EPA WaterSense is a set of optional construction practices and technologies (above minimum code requirements) that builders can follow to ensure a home uses less water while still providing the same level of comfort and convenience. WaterSense also applies to specific plumbing fixtures (see InteriorFeatures) and should not be confused with the whole-house label.
    WaterSense,

    /// "[Zero Energy Ready Home](https://ddwiki.reso.org/display/DDW17/Zero+Energy+Ready+Home)": DOE Zero Energy Ready Home is a set of optional construction practices and technologies (above minimum code and ENERGY STAR Certified Home requirements) that builders can follow to ensure high-performance homes so energy efficient all or most annual energy consumption can be offset with renewable energy. Guidelines are outlined in the "DOE Zero Energy Ready Home National Program Requirements."
    ZeroEnergyReadyHome,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for GreenBuildingVerificationType {
    fn from(s: String) -> GreenBuildingVerificationType {
        match s.as_ref() {


"Certified Passive House" => GreenBuildingVerificationType::CertifiedPassiveHouse,

"ENERGY STAR Certified Homes" => GreenBuildingVerificationType::ENERGYSTARCertifiedHomes,

"EnerPHit" => GreenBuildingVerificationType::EnerPHit,

"HERS Index Score" => GreenBuildingVerificationType::HERSIndexScore,

"Home Energy Score" => GreenBuildingVerificationType::HomeEnergyScore,

"Home Energy Upgrade Certificate of Energy Efficiency Improvements" => GreenBuildingVerificationType::HomeEnergyUpgradeCertificateofEnergyEfficiencyImprovements,

"Home Energy Upgrade Certificate of Energy Efficiency Performance" => GreenBuildingVerificationType::HomeEnergyUpgradeCertificateofEnergyEfficiencyPerformance,

"Home Performance with ENERGY STAR" => GreenBuildingVerificationType::HomePerformancewithENERGYSTAR,

"Indoor airPLUS" => GreenBuildingVerificationType::IndoorairPLUS,

"LEED For Homes" => GreenBuildingVerificationType::LEEDForHomes,

"Living Building Challenge" => GreenBuildingVerificationType::LivingBuildingChallenge,

"NGBS New Construction" => GreenBuildingVerificationType::NGBSNewConstruction,

"NGBS Small Projects Remodel" => GreenBuildingVerificationType::NGBSSmallProjectsRemodel,

"NGBS Whole-Home Remodel" => GreenBuildingVerificationType::NGBSWholeHomeRemodel,

"PHIUS+" => GreenBuildingVerificationType::PHIUSPlus,

"WaterSense" => GreenBuildingVerificationType::WaterSense,

"Zero Energy Ready Home" => GreenBuildingVerificationType::ZeroEnergyReadyHome,

_ => GreenBuildingVerificationType::OpenEnumeration(s),
}
    }
}

impl From<&str> for GreenBuildingVerificationType {
    fn from(s: &str) -> GreenBuildingVerificationType {
        match s {


"Certified Passive House" => GreenBuildingVerificationType::CertifiedPassiveHouse,

"ENERGY STAR Certified Homes" => GreenBuildingVerificationType::ENERGYSTARCertifiedHomes,

"EnerPHit" => GreenBuildingVerificationType::EnerPHit,

"HERS Index Score" => GreenBuildingVerificationType::HERSIndexScore,

"Home Energy Score" => GreenBuildingVerificationType::HomeEnergyScore,

"Home Energy Upgrade Certificate of Energy Efficiency Improvements" => GreenBuildingVerificationType::HomeEnergyUpgradeCertificateofEnergyEfficiencyImprovements,

"Home Energy Upgrade Certificate of Energy Efficiency Performance" => GreenBuildingVerificationType::HomeEnergyUpgradeCertificateofEnergyEfficiencyPerformance,

"Home Performance with ENERGY STAR" => GreenBuildingVerificationType::HomePerformancewithENERGYSTAR,

"Indoor airPLUS" => GreenBuildingVerificationType::IndoorairPLUS,

"LEED For Homes" => GreenBuildingVerificationType::LEEDForHomes,

"Living Building Challenge" => GreenBuildingVerificationType::LivingBuildingChallenge,

"NGBS New Construction" => GreenBuildingVerificationType::NGBSNewConstruction,

"NGBS Small Projects Remodel" => GreenBuildingVerificationType::NGBSSmallProjectsRemodel,

"NGBS Whole-Home Remodel" => GreenBuildingVerificationType::NGBSWholeHomeRemodel,

"PHIUS+" => GreenBuildingVerificationType::PHIUSPlus,

"WaterSense" => GreenBuildingVerificationType::WaterSense,

"Zero Energy Ready Home" => GreenBuildingVerificationType::ZeroEnergyReadyHome,

_ => GreenBuildingVerificationType::OpenEnumeration(s.into()),
}
    }
}

impl<'a> From<&'a GreenBuildingVerificationType> for &'a str {
    fn from(s: &'a GreenBuildingVerificationType) -> &'a str {
        match s {


GreenBuildingVerificationType::CertifiedPassiveHouse => "Certified Passive House",

GreenBuildingVerificationType::ENERGYSTARCertifiedHomes => "ENERGY STAR Certified Homes",

GreenBuildingVerificationType::EnerPHit => "EnerPHit",

GreenBuildingVerificationType::HERSIndexScore => "HERS Index Score",

GreenBuildingVerificationType::HomeEnergyScore => "Home Energy Score",

GreenBuildingVerificationType::HomeEnergyUpgradeCertificateofEnergyEfficiencyImprovements => "Home Energy Upgrade Certificate of Energy Efficiency Improvements",

GreenBuildingVerificationType::HomeEnergyUpgradeCertificateofEnergyEfficiencyPerformance => "Home Energy Upgrade Certificate of Energy Efficiency Performance",

GreenBuildingVerificationType::HomePerformancewithENERGYSTAR => "Home Performance with ENERGY STAR",

GreenBuildingVerificationType::IndoorairPLUS => "Indoor airPLUS",

GreenBuildingVerificationType::LEEDForHomes => "LEED For Homes",

GreenBuildingVerificationType::LivingBuildingChallenge => "Living Building Challenge",

GreenBuildingVerificationType::NGBSNewConstruction => "NGBS New Construction",

GreenBuildingVerificationType::NGBSSmallProjectsRemodel => "NGBS Small Projects Remodel",

GreenBuildingVerificationType::NGBSWholeHomeRemodel => "NGBS Whole-Home Remodel",

GreenBuildingVerificationType::PHIUSPlus => "PHIUS+",

GreenBuildingVerificationType::WaterSense => "WaterSense",

GreenBuildingVerificationType::ZeroEnergyReadyHome => "Zero Energy Ready Home",

GreenBuildingVerificationType::OpenEnumeration(s) => s,
}
    }
}

impl Serialize for GreenBuildingVerificationType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for GreenBuildingVerificationType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_green_building_verification_type_format {
    use super::GreenBuildingVerificationType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<GreenBuildingVerificationType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<GreenBuildingVerificationType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [GreenEnergyEfficient Lookups](https://ddwiki.reso.org/display/DDW17/GreenEnergyEfficient+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum GreenEnergyEfficient {
    /// "[Appliances](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244891)": For purposes of marketing, the property has appliances that have some green/efficient rating or quality.
    Appliances,

    /// "[Construction](https://ddwiki.reso.org/display/DDW17/Construction)": For purposes of marketing, the property has construction that has some green/efficient rating or quality.
    Construction,

    /// "[Doors](https://ddwiki.reso.org/display/DDW17/Doors)": For purposes of marketing, the property has doors that have some green/efficient rating or quality.
    Doors,

    /// "[Exposure/Shade](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244894)": For purposes of marketing, the property has exposure/shade that has some green/efficient rating or quality.
    ExposureShade,

    /// "[HVAC](https://ddwiki.reso.org/display/DDW17/HVAC)": For purposes of marketing, the property has a heating, ventilation and air conditioning system that has some green/efficient rating or quality.
    HVAC,

    /// "[Incentives](https://ddwiki.reso.org/display/DDW17/Incentives)": For purposes of marketing, the property has incentives that have some green/efficiency focus.
    Incentives,

    /// "[Insulation](https://ddwiki.reso.org/display/DDW17/Insulation)": For purposes of marketing, the property has insulation that has some green/efficient rating or quality.
    Insulation,

    /// "[Lighting](https://ddwiki.reso.org/display/DDW17/Lighting)": For purposes of marketing, the property has lighting that has some green/efficient rating or quality.
    Lighting,

    /// "[Roof](https://ddwiki.reso.org/display/DDW17/Roof)": For purposes of marketing, the property has a roof that has some green/efficient rating or quality.
    Roof,

    /// "[Thermostat](https://ddwiki.reso.org/display/DDW17/Thermostat)": For purposes of marketing, the property has thermostat(s) that have some green/efficient rating or quality.
    Thermostat,

    /// "[Water Heater](https://ddwiki.reso.org/display/DDW17/Water+Heater)": For purposes of marketing, the property has a water heater that have some green/efficient rating or quality.
    WaterHeater,

    /// "[Windows](https://ddwiki.reso.org/display/DDW17/Windows)": For purposes of marketing, the property has windows that have some green/efficient rating or quality.
    Windows,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for GreenEnergyEfficient {
    fn from(s: String) -> GreenEnergyEfficient {
        match s.as_ref() {
            "Appliances" => GreenEnergyEfficient::Appliances,

            "Construction" => GreenEnergyEfficient::Construction,

            "Doors" => GreenEnergyEfficient::Doors,

            "Exposure/Shade" => GreenEnergyEfficient::ExposureShade,

            "HVAC" => GreenEnergyEfficient::HVAC,

            "Incentives" => GreenEnergyEfficient::Incentives,

            "Insulation" => GreenEnergyEfficient::Insulation,

            "Lighting" => GreenEnergyEfficient::Lighting,

            "Roof" => GreenEnergyEfficient::Roof,

            "Thermostat" => GreenEnergyEfficient::Thermostat,

            "Water Heater" => GreenEnergyEfficient::WaterHeater,

            "Windows" => GreenEnergyEfficient::Windows,

            _ => GreenEnergyEfficient::OpenEnumeration(s),
        }
    }
}

impl From<&str> for GreenEnergyEfficient {
    fn from(s: &str) -> GreenEnergyEfficient {
        match s {
            "Appliances" => GreenEnergyEfficient::Appliances,

            "Construction" => GreenEnergyEfficient::Construction,

            "Doors" => GreenEnergyEfficient::Doors,

            "Exposure/Shade" => GreenEnergyEfficient::ExposureShade,

            "HVAC" => GreenEnergyEfficient::HVAC,

            "Incentives" => GreenEnergyEfficient::Incentives,

            "Insulation" => GreenEnergyEfficient::Insulation,

            "Lighting" => GreenEnergyEfficient::Lighting,

            "Roof" => GreenEnergyEfficient::Roof,

            "Thermostat" => GreenEnergyEfficient::Thermostat,

            "Water Heater" => GreenEnergyEfficient::WaterHeater,

            "Windows" => GreenEnergyEfficient::Windows,

            _ => GreenEnergyEfficient::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a GreenEnergyEfficient> for &'a str {
    fn from(s: &'a GreenEnergyEfficient) -> &'a str {
        match s {
            GreenEnergyEfficient::Appliances => "Appliances",

            GreenEnergyEfficient::Construction => "Construction",

            GreenEnergyEfficient::Doors => "Doors",

            GreenEnergyEfficient::ExposureShade => "Exposure/Shade",

            GreenEnergyEfficient::HVAC => "HVAC",

            GreenEnergyEfficient::Incentives => "Incentives",

            GreenEnergyEfficient::Insulation => "Insulation",

            GreenEnergyEfficient::Lighting => "Lighting",

            GreenEnergyEfficient::Roof => "Roof",

            GreenEnergyEfficient::Thermostat => "Thermostat",

            GreenEnergyEfficient::WaterHeater => "Water Heater",

            GreenEnergyEfficient::Windows => "Windows",

            GreenEnergyEfficient::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for GreenEnergyEfficient {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for GreenEnergyEfficient {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_green_energy_efficient_format {
    use super::GreenEnergyEfficient;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<GreenEnergyEfficient>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<GreenEnergyEfficient>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [GreenEnergyGeneration Lookups](https://ddwiki.reso.org/display/DDW17/GreenEnergyGeneration+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum GreenEnergyGeneration {
    /// "[Solar](https://ddwiki.reso.org/display/DDW17/Solar)": Renewable form of onsite power generation. Most common are solar photovoltaic (PV) devices which generate electricity directly from sunlight via an electronic process that occurs naturally in certain types of material, called semiconductors. Powers electrical devices or sends electricity to the grid. See: <a href="http://www.seia.org/policy/solar-technology/photovoltaic-solar-electric">http://www.seia.org/policy/solar-technology/photovoltaic-solar-electric</a>
    Solar,

    /// "[Wind](https://ddwiki.reso.org/display/DDW17/Wind)": Renewable form of onsite power generation. Wind turbines use wind to make electricity. Powers electrical devices or sends electricity to the grid. See: <a href="http://energy.gov/eere/wind/how-do-wind-turbines-work">http://energy.gov/eere/wind/how-do-wind-turbines-work</a>
    Wind,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for GreenEnergyGeneration {
    fn from(s: String) -> GreenEnergyGeneration {
        match s.as_ref() {
            "Solar" => GreenEnergyGeneration::Solar,

            "Wind" => GreenEnergyGeneration::Wind,

            _ => GreenEnergyGeneration::OpenEnumeration(s),
        }
    }
}

impl From<&str> for GreenEnergyGeneration {
    fn from(s: &str) -> GreenEnergyGeneration {
        match s {
            "Solar" => GreenEnergyGeneration::Solar,

            "Wind" => GreenEnergyGeneration::Wind,

            _ => GreenEnergyGeneration::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a GreenEnergyGeneration> for &'a str {
    fn from(s: &'a GreenEnergyGeneration) -> &'a str {
        match s {
            GreenEnergyGeneration::Solar => "Solar",

            GreenEnergyGeneration::Wind => "Wind",

            GreenEnergyGeneration::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for GreenEnergyGeneration {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for GreenEnergyGeneration {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_green_energy_generation_format {
    use super::GreenEnergyGeneration;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<GreenEnergyGeneration>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<GreenEnergyGeneration>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [GreenIndoorAirQuality Lookups](https://ddwiki.reso.org/display/DDW17/GreenIndoorAirQuality+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum GreenIndoorAirQuality {
    /// "[Contaminant Control](https://ddwiki.reso.org/display/DDW17/Contaminant+Control)": Property has been carefully designed to prevent, monitor, and suppress pollution issues. Carefully selected low-emission materials have been used in the home. May include passive or active radon control, carbon monoxide monitoring, and high-efficiency sealed combustion for equipment such as furnaces and water heaters. May include elimination of materials that contain lead or asbestos. May include reduction of materials that contain volatile organic compounds (VOCs, including formaldehyde) and pesticides.
    ContaminantControl,

    /// "[Integrated Pest Management](https://ddwiki.reso.org/display/DDW17/Integrated+Pest+Management)": Property is designed for systematic management of pests that uses prevention, exclusion, monitoring, and suppression.
    IntegratedPestManagement,

    /// "[Moisture Control](https://ddwiki.reso.org/display/DDW17/Moisture+Control)": Every foundation, roof, roofing component, exterior wall, door, skylight, and window is designed and maintained to be watertight and free of persistent dampness or moisture.
    MoistureControl,

    /// "[Ventilation](https://ddwiki.reso.org/display/DDW17/Ventilation)": Furnaces, water heaters, woodstoves, and other devices that employ combustion-burning fuel are vented to the outside in a manner that meets manufacturer specifications to prevent back-drafting. Natural and/or mechanical ventilation delivers fresh air to every habitable room and bathroom to remove moisture laden air and other contaminants generated during cooking and bathing/showering. The air exhausted from a bathroom, toilet room, or kitchen does not vent into habitable space or an attic.
    Ventilation,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for GreenIndoorAirQuality {
    fn from(s: String) -> GreenIndoorAirQuality {
        match s.as_ref() {
            "Contaminant Control" => GreenIndoorAirQuality::ContaminantControl,

            "Integrated Pest Management" => GreenIndoorAirQuality::IntegratedPestManagement,

            "Moisture Control" => GreenIndoorAirQuality::MoistureControl,

            "Ventilation" => GreenIndoorAirQuality::Ventilation,

            _ => GreenIndoorAirQuality::OpenEnumeration(s),
        }
    }
}

impl From<&str> for GreenIndoorAirQuality {
    fn from(s: &str) -> GreenIndoorAirQuality {
        match s {
            "Contaminant Control" => GreenIndoorAirQuality::ContaminantControl,

            "Integrated Pest Management" => GreenIndoorAirQuality::IntegratedPestManagement,

            "Moisture Control" => GreenIndoorAirQuality::MoistureControl,

            "Ventilation" => GreenIndoorAirQuality::Ventilation,

            _ => GreenIndoorAirQuality::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a GreenIndoorAirQuality> for &'a str {
    fn from(s: &'a GreenIndoorAirQuality) -> &'a str {
        match s {
            GreenIndoorAirQuality::ContaminantControl => "Contaminant Control",

            GreenIndoorAirQuality::IntegratedPestManagement => "Integrated Pest Management",

            GreenIndoorAirQuality::MoistureControl => "Moisture Control",

            GreenIndoorAirQuality::Ventilation => "Ventilation",

            GreenIndoorAirQuality::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for GreenIndoorAirQuality {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for GreenIndoorAirQuality {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_green_indoor_air_quality_format {
    use super::GreenIndoorAirQuality;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<GreenIndoorAirQuality>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<GreenIndoorAirQuality>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [GreenSustainability Lookups](https://ddwiki.reso.org/display/DDW17/GreenSustainability+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum GreenSustainability {
    /// "[Conserving Methods](https://ddwiki.reso.org/display/DDW17/Conserving+Methods)": Construction is planned to require fewer materials while maintaining structural integrity. May include advanced wall framing as documented in several major green building programs. May also include indigenous construction methods such as straw bale, sod, clay, etc., based on local climate, materials, and practices.
    ConservingMethods,

    /// "[Onsite Recycling Center](https://ddwiki.reso.org/display/DDW17/Onsite+Recycling+Center)": Property includes sufficient built-in storage space and/ or containers for temporary storage of recyclable materials and/or compost collection.
    OnsiteRecyclingCenter,

    /// "[Recyclable Materials](https://ddwiki.reso.org/display/DDW17/Recyclable+Materials)": Structure includes multiple products that have a significant amount of postconsumer recycled content. Major green building programs tend to use 25 percent postconsumer recycled content as a threshold. Postindustrial recycled content tends to count toward overall content, but to a less scale. Some more common examples of recycled content materials include masonry, paving stones, or foundations with fly ash; aluminum gutters and downspouts; decking; drywall fibers, insulation, and house wrap; vinyl plastics; countertops; and cabinets, interior doors, or trim. More details are available on Home Innovation Research Labs “Browse Green Certified Products” tool or LEED Environmentally Preferred Products credit table.
    RecyclableMaterials,

    /// "[Recycled Materials](https://ddwiki.reso.org/display/DDW17/Recycled+Materials)": Structure includes multiple products that have a significant amount of postconsumer recycled content. Major green building programs tend to use 25 percent postconsumer recycled content as a threshold. Postindustrial recycled content tends to count toward overall content, but to a less scale. Some more common examples of recycled content materials include masonry, paving stones, or foundations with fly ash; aluminum gutters and downspouts; decking; drywall fibers, insulation, and house wrap; vinyl plastics; countertops; and cabinets, interior doors, or trim. More details are available on Home Innovation Research Labs “Browse Green Certified Products” tool or LEED Environmentally Preferred Products credit table.
    RecycledMaterials,

    /// "[Regionally-Sourced Materials](https://ddwiki.reso.org/display/DDW17/Regionally-Sourced+Materials)": Refers to building materials that were manufactured, extracted, harvested, or recovered within 500 miles of the building. Several major green building programs define regionally sourced as within a 500-mile radius.
    RegionallySourcedMaterials,

    /// "[Renewable Materials](https://ddwiki.reso.org/display/DDW17/Renewable+Materials)": Structure includes materials that are naturally occurring, abundant, and/or fast-growing materials. Some products are certified to come from fast-growing or otherwise renewable sources such as flooring and wood products. Some materials may be bio-based, which means they have been processed from once-living materials such as paper, straw, soy, natural fibers, and crops.
    RenewableMaterials,

    /// "[Salvaged Materials](https://ddwiki.reso.org/display/DDW17/Salvaged+Materials)": Structure incorporates materials that were diverted from a landfill and/or sourced to give an otherwise unused item fresh use as an attached fixture. May include bricks, timbers, roofing, flooring, walls, cabinets, doors, etc.
    SalvagedMaterials,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for GreenSustainability {
    fn from(s: String) -> GreenSustainability {
        match s.as_ref() {
            "Conserving Methods" => GreenSustainability::ConservingMethods,

            "Onsite Recycling Center" => GreenSustainability::OnsiteRecyclingCenter,

            "Recyclable Materials" => GreenSustainability::RecyclableMaterials,

            "Recycled Materials" => GreenSustainability::RecycledMaterials,

            "Regionally-Sourced Materials" => GreenSustainability::RegionallySourcedMaterials,

            "Renewable Materials" => GreenSustainability::RenewableMaterials,

            "Salvaged Materials" => GreenSustainability::SalvagedMaterials,

            _ => GreenSustainability::OpenEnumeration(s),
        }
    }
}

impl From<&str> for GreenSustainability {
    fn from(s: &str) -> GreenSustainability {
        match s {
            "Conserving Methods" => GreenSustainability::ConservingMethods,

            "Onsite Recycling Center" => GreenSustainability::OnsiteRecyclingCenter,

            "Recyclable Materials" => GreenSustainability::RecyclableMaterials,

            "Recycled Materials" => GreenSustainability::RecycledMaterials,

            "Regionally-Sourced Materials" => GreenSustainability::RegionallySourcedMaterials,

            "Renewable Materials" => GreenSustainability::RenewableMaterials,

            "Salvaged Materials" => GreenSustainability::SalvagedMaterials,

            _ => GreenSustainability::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a GreenSustainability> for &'a str {
    fn from(s: &'a GreenSustainability) -> &'a str {
        match s {
            GreenSustainability::ConservingMethods => "Conserving Methods",

            GreenSustainability::OnsiteRecyclingCenter => "Onsite Recycling Center",

            GreenSustainability::RecyclableMaterials => "Recyclable Materials",

            GreenSustainability::RecycledMaterials => "Recycled Materials",

            GreenSustainability::RegionallySourcedMaterials => "Regionally-Sourced Materials",

            GreenSustainability::RenewableMaterials => "Renewable Materials",

            GreenSustainability::SalvagedMaterials => "Salvaged Materials",

            GreenSustainability::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for GreenSustainability {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for GreenSustainability {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_green_sustainability_format {
    use super::GreenSustainability;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<GreenSustainability>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<GreenSustainability>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [GreenVerificationSource Lookups](https://ddwiki.reso.org/display/DDW17/GreenVerificationSource+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum GreenVerificationSource {
    /// "[Administrator](https://ddwiki.reso.org/display/DDW17/Administrator)": An administrator such as a utility, governmental entity, etc. provided data such as photovoltaic characteristics, or a verified score, certification, label, etc.
    Administrator,

    /// "[Assessor](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244921)": The assessor provided data such as photovoltaic characteristics, or a verified score, certification, label, etc.
    Assessor,

    /// "[Builder](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244922)": The builder provided data such as photovoltaic characteristics, or a verified score, certification, label, etc.
    Builder,

    /// "[Contractor or Installer](https://ddwiki.reso.org/display/DDW17/Contractor+or+Installer)": The contractor or installer provided data such as photovoltaic characteristics, or a verified score, certification, label, etc.
    ContractororInstaller,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244924)": Data such as photovoltaic characteristics, or a verified score, certification, label, etc. was received from another party not listed.
    Other,

    /// "[Owner](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244925)": The owner provided data such as photovoltaic characteristics, or a verified score, certification, label, etc.
    Owner,

    /// "[Program Sponsor](https://ddwiki.reso.org/display/DDW17/Program+Sponsor)": The program sponsor provided data such as photovoltaic characteristics, or a verified score, certification, label, etc.
    ProgramSponsor,

    /// "[Program Verifier](https://ddwiki.reso.org/display/DDW17/Program+Verifier)": The program verifier hired as a third-party provided data such as photovoltaic characteristics, or a verified score, certification, label, etc.
    ProgramVerifier,

    /// "[Public Records](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244928)": Data such as photovoltaic characteristics, or a verified score, certification, label, etc. was received from public record such as a building permit.
    PublicRecords,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244929)": See remarks for information about the source of data such as photovoltaic characteristics, or a verified score, certification, label, etc.
    SeeRemarks,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for GreenVerificationSource {
    fn from(s: String) -> GreenVerificationSource {
        match s.as_ref() {
            "Administrator" => GreenVerificationSource::Administrator,

            "Assessor" => GreenVerificationSource::Assessor,

            "Builder" => GreenVerificationSource::Builder,

            "Contractor or Installer" => GreenVerificationSource::ContractororInstaller,

            "Other" => GreenVerificationSource::Other,

            "Owner" => GreenVerificationSource::Owner,

            "Program Sponsor" => GreenVerificationSource::ProgramSponsor,

            "Program Verifier" => GreenVerificationSource::ProgramVerifier,

            "Public Records" => GreenVerificationSource::PublicRecords,

            "See Remarks" => GreenVerificationSource::SeeRemarks,

            _ => GreenVerificationSource::OpenEnumeration(s),
        }
    }
}

impl From<&str> for GreenVerificationSource {
    fn from(s: &str) -> GreenVerificationSource {
        match s {
            "Administrator" => GreenVerificationSource::Administrator,

            "Assessor" => GreenVerificationSource::Assessor,

            "Builder" => GreenVerificationSource::Builder,

            "Contractor or Installer" => GreenVerificationSource::ContractororInstaller,

            "Other" => GreenVerificationSource::Other,

            "Owner" => GreenVerificationSource::Owner,

            "Program Sponsor" => GreenVerificationSource::ProgramSponsor,

            "Program Verifier" => GreenVerificationSource::ProgramVerifier,

            "Public Records" => GreenVerificationSource::PublicRecords,

            "See Remarks" => GreenVerificationSource::SeeRemarks,

            _ => GreenVerificationSource::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a GreenVerificationSource> for &'a str {
    fn from(s: &'a GreenVerificationSource) -> &'a str {
        match s {
            GreenVerificationSource::Administrator => "Administrator",

            GreenVerificationSource::Assessor => "Assessor",

            GreenVerificationSource::Builder => "Builder",

            GreenVerificationSource::ContractororInstaller => "Contractor or Installer",

            GreenVerificationSource::Other => "Other",

            GreenVerificationSource::Owner => "Owner",

            GreenVerificationSource::ProgramSponsor => "Program Sponsor",

            GreenVerificationSource::ProgramVerifier => "Program Verifier",

            GreenVerificationSource::PublicRecords => "Public Records",

            GreenVerificationSource::SeeRemarks => "See Remarks",

            GreenVerificationSource::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for GreenVerificationSource {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for GreenVerificationSource {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_green_verification_source_format {
    use super::GreenVerificationSource;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<GreenVerificationSource>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<GreenVerificationSource>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [GreenVerificationStatus Lookups](https://ddwiki.reso.org/display/DDW17/GreenVerificationStatus+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum GreenVerificationStatus {
    /// "[Complete](https://ddwiki.reso.org/display/DDW17/Complete)": Indicates that verification process is complete.  All requirements are complete and official verification documentation is on file or published; or more than 12 months of occupancy.
    Complete,

    /// "[In Process](https://ddwiki.reso.org/display/DDW17/In+Process)": Indicates that verification process is underway, but not complete.  Application, plans testing or specifications in process; or may be less than 12 months of occupancy.
    InProcess,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for GreenVerificationStatus {
    fn from(s: String) -> GreenVerificationStatus {
        match s.as_ref() {
            "Complete" => GreenVerificationStatus::Complete,

            "In Process" => GreenVerificationStatus::InProcess,

            _ => GreenVerificationStatus::OpenEnumeration(s),
        }
    }
}

impl From<&str> for GreenVerificationStatus {
    fn from(s: &str) -> GreenVerificationStatus {
        match s {
            "Complete" => GreenVerificationStatus::Complete,

            "In Process" => GreenVerificationStatus::InProcess,

            _ => GreenVerificationStatus::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a GreenVerificationStatus> for &'a str {
    fn from(s: &'a GreenVerificationStatus) -> &'a str {
        match s {
            GreenVerificationStatus::Complete => "Complete",

            GreenVerificationStatus::InProcess => "In Process",

            GreenVerificationStatus::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for GreenVerificationStatus {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for GreenVerificationStatus {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_green_verification_status_format {
    use super::GreenVerificationStatus;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<GreenVerificationStatus>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<GreenVerificationStatus>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [GreenWaterConservation Lookups](https://ddwiki.reso.org/display/DDW17/GreenWaterConservation+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum GreenWaterConservation {
    /// "[Efficient Hot Water Distribution](https://ddwiki.reso.org/display/DDW17/Efficient+Hot+Water+Distribution)": Efficient hot water distribution systems are designed to generate hot water using fewer fuel resources, and to get hot water to low-flow faucets and fixtures more quickly. These systems often feature carefully designed plumbing lines that are less redundant and/or shorter. Rather than measuring time to hot water at a fixture in gallons, efficient distribution systems can be measured in cups. EPA WaterSense Guide for Hot Water Distribution as well as several green building programs have further details. This may also be known as Structured Plumbing.
    EfficientHotWaterDistribution,

    /// "[Gray Water System](https://ddwiki.reso.org/display/DDW17/Gray+Water+System)": The property includes a grey water system.
    GrayWaterSystem,

    /// "[Green Infrastructure](https://ddwiki.reso.org/display/DDW17/Green+Infrastructure)": Green Infrastructure is a set of strategies and specifically designed systems to manage stormwater runoff through a variety of small, cost-effective landscape features located on a property. Green Infrastructure employs infiltration (allowing water to slowly sink into the soil), evaporation/transpiration using native vegetation, and rainwater capture and reuse (storing runoff to water plants, flush toilets, etc.). May include green roof, rain gardens, rain barrels, permeable paving, etc. EPA Green Infrastructure webpage has more information
    GreenInfrastructure,

    /// "[Low-Flow Fixtures](https://ddwiki.reso.org/display/DDW17/Low-Flow+Fixtures)": Toilets, bathroom faucets, showerheads, irrigation controllers, and other products can be manufactured to use less water than minimum standards. Some products are qualified by third-party programs like the EPA WaterSense and are typically at least 20 percent more water-efficient than standard products. EPA WaterSense website has additional information
    LowFlowFixtures,

    /// "[Water Recycling](https://ddwiki.reso.org/display/DDW17/Water+Recycling)": The property includes a system to reuse stormwater via rain barrels or cisterns for landscaping, or to treat and reuse water from bathroom sinks, showers, and clothes washing drains for landscape irrigation and/or toilet flushing.
    WaterRecycling,

    /// "[Water-Smart Landscaping](https://ddwiki.reso.org/display/DDW17/Water-Smart+Landscaping)": Water-smart landscapes are designed to require less water and fertilizer treatments. These landscapes feature regionally appropriate plants that require low water and are native to the local climate. Plants are organized by hydrozones (watering needs). Any irrigation system is qualified for high water-efficiency. Turfgrass is minimized and grown to the tallest height recommended. Strategic maintenance includes mulching and soil aeration. Other details are documented in EPA’s Water-Smart Landscape Design Tips.
    WaterSmartLandscaping,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for GreenWaterConservation {
    fn from(s: String) -> GreenWaterConservation {
        match s.as_ref() {
            "Efficient Hot Water Distribution" => {
                GreenWaterConservation::EfficientHotWaterDistribution
            }

            "Gray Water System" => GreenWaterConservation::GrayWaterSystem,

            "Green Infrastructure" => GreenWaterConservation::GreenInfrastructure,

            "Low-Flow Fixtures" => GreenWaterConservation::LowFlowFixtures,

            "Water Recycling" => GreenWaterConservation::WaterRecycling,

            "Water-Smart Landscaping" => GreenWaterConservation::WaterSmartLandscaping,

            _ => GreenWaterConservation::OpenEnumeration(s),
        }
    }
}

impl From<&str> for GreenWaterConservation {
    fn from(s: &str) -> GreenWaterConservation {
        match s {
            "Efficient Hot Water Distribution" => {
                GreenWaterConservation::EfficientHotWaterDistribution
            }

            "Gray Water System" => GreenWaterConservation::GrayWaterSystem,

            "Green Infrastructure" => GreenWaterConservation::GreenInfrastructure,

            "Low-Flow Fixtures" => GreenWaterConservation::LowFlowFixtures,

            "Water Recycling" => GreenWaterConservation::WaterRecycling,

            "Water-Smart Landscaping" => GreenWaterConservation::WaterSmartLandscaping,

            _ => GreenWaterConservation::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a GreenWaterConservation> for &'a str {
    fn from(s: &'a GreenWaterConservation) -> &'a str {
        match s {
            GreenWaterConservation::EfficientHotWaterDistribution => {
                "Efficient Hot Water Distribution"
            }

            GreenWaterConservation::GrayWaterSystem => "Gray Water System",

            GreenWaterConservation::GreenInfrastructure => "Green Infrastructure",

            GreenWaterConservation::LowFlowFixtures => "Low-Flow Fixtures",

            GreenWaterConservation::WaterRecycling => "Water Recycling",

            GreenWaterConservation::WaterSmartLandscaping => "Water-Smart Landscaping",

            GreenWaterConservation::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for GreenWaterConservation {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for GreenWaterConservation {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_green_water_conservation_format {
    use super::GreenWaterConservation;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<GreenWaterConservation>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<GreenWaterConservation>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Heating Lookups](https://ddwiki.reso.org/display/DDW17/Heating+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Heating {
    /// "[Active Solar](https://ddwiki.reso.org/display/DDW17/Active+Solar)": Active solar heating systems use solar energy to heat a fluid -- either liquid or air -- and then transfer the solar heat directly to the interior space or to a storage system for later use.
    ActiveSolar,

    /// "[Baseboard](https://ddwiki.reso.org/display/DDW17/Baseboard)": Baseboard heating utilizes convection, as cold air drops from the window, it enters the baseboard heating unit where the air is warmed by heating elements, typically fins.
    Baseboard,

    /// "[Ceiling](https://ddwiki.reso.org/display/DDW17/Ceiling)": A heating unit that is installed into, or upon the surface, of the ceiling.
    Ceiling,

    /// "[Central](https://ddwiki.reso.org/display/DDW17/Central)": A system where heat is generated in one or more locations in the structure and distributed throughout the structure.  The term "Central" is commonly understood as distribution done by ducting air.  Piping a fluid to radiators is also a central type of heating, but this can be clarified with the options "Radiator" and "Forced Air".
    Central,

    /// "[Coal](https://ddwiki.reso.org/display/DDW17/Coal)": The heating system uses coal as its fuel to generate heat.
    Coal,

    /// "[Coal Stove](https://ddwiki.reso.org/display/DDW17/Coal+Stove)": A coal burning stove that is used for heat.
    CoalStove,

    /// "[Ductless](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244958)": The heating system does not have ducting like that found in central forced air systems.
    Ductless,

    /// "[Electric](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244959)": A heating system that utilizes electricity and heating elements, such as coils or fins, to generate heat.
    Electric,

    /// "[ENERGY STAR Qualified Equipment](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244961)": The heating system is ENERGY STAR Qualified.  Specific performance information must be determined by review of the actual unit.
    ENERGYSTARQualifiedEquipment,

    /// "[ENERGY STAR/ACCA RSI Qualified Installation](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244960)": The heating system installation was done by an ENERGY STAR or ACCA RSI qualified contractor.
    ENERGYSTARACCARSIQualifiedInstallation,

    /// "[Exhaust Fan](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244962)": The property has an exhaust fan.
    ExhaustFan,

    /// "[Fireplace Insert](https://ddwiki.reso.org/display/DDW17/Fireplace+Insert)": The property has a fireplace insert for generating heat.
    FireplaceInsert,

    /// "[Fireplace(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244963)": The property has one or more fireplaces used to generate heat.
    Fireplaces,

    /// "[Floor Furnace](https://ddwiki.reso.org/display/DDW17/Floor+Furnace)": A radiant heating system that is mounted into the floor and distributes the heat via convection.
    FloorFurnace,

    /// "[Forced Air](https://ddwiki.reso.org/display/DDW17/Forced+Air)": The property has a forced air system, typically via ducting throughout the structure.
    ForcedAir,

    /// "[Geothermal](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244967)": A geothermal heating system, also known as a ground source heat pump, transfers heat from below ground into the structure.
    Geothermal,

    /// "[Gravity](https://ddwiki.reso.org/display/DDW17/Gravity)": A gravity heating system, also known as an octopus furnace, is typically a ducted system that doesn't use a fan, but rather is designed to allow the heat to rise naturally thought the ducts to the different areas of the structure.
    Gravity,

    /// "[Heat Pump](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244969)": A system that exchanges heat between a warm and cool space.  The heat exchange is done between the dwelling and another air space, like outdoors; or a water source; or below ground (geothermal).
    HeatPump,

    /// "[Hot Water](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244970)": The heating system uses a boiler and pipes to deliver hot water to radiators throughout the dwelling.
    HotWater,

    /// "[Humidity Control](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244971)": The heating system has humidity control.
    HumidityControl,

    /// "[Kerosene](https://ddwiki.reso.org/display/DDW17/Kerosene)": The heating system uses kerosene as its fuel to generate heat.
    Kerosene,

    /// "[Natural Gas](https://ddwiki.reso.org/display/DDW17/Natural+Gas)": The heating system uses natural gas as its fuel to generate heat.
    NaturalGas,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244974)": The property does not have a heating system.
    None,

    /// "[Oil](https://ddwiki.reso.org/display/DDW17/Oil)": The heating system uses oil as its fuel to generate heat.
    Oil,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244976)": The property has a heating system or features that are not included in this list.
    Other,

    /// "[Passive Solar](https://ddwiki.reso.org/display/DDW17/Passive+Solar)": Passive solar is a building design where the walls, windows, floors, etc., are made to collect heat and warm the dwelling.
    PassiveSolar,

    /// "[Pellet Stove](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244978)": The property has a stove that burns compressed wood or biomass pellets to generate heat.
    PelletStove,

    /// "[Propane](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244979)": The heating system uses propane as its fuel to generate heat.
    Propane,

    /// "[Propane Stove](https://ddwiki.reso.org/display/DDW17/Propane+Stove)": The property has a stove that burns propane to generate heat.
    PropaneStove,

    /// "[Radiant](https://ddwiki.reso.org/display/DDW17/Radiant)": The heating system uses radiators to release heat within the dwelling.  The heat is typically delivered to the radiator(s) by water/steam or electricity.
    Radiant,

    /// "[Radiant Ceiling](https://ddwiki.reso.org/display/DDW17/Radiant+Ceiling)": The radiant heating element(s) are located in the ceiling.
    RadiantCeiling,

    /// "[Radiant Floor](https://ddwiki.reso.org/display/DDW17/Radiant+Floor)": The radiant heating element(s) are located in the floor.
    RadiantFloor,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244984)": See the remarks fields for additional information about the heating system included with the property.
    SeeRemarks,

    /// "[Separate Meters](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244985)": The heating system has multiple units and/or is zoned with separate meters for each zone/unit.
    SeparateMeters,

    /// "[Solar](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244986)": The property has a heating system or method that uses an unspecified type of solar heating.
    Solar,

    /// "[Space Heater](https://ddwiki.reso.org/display/DDW17/Space+Heater)": The property comes with a stand-alone space heater.
    SpaceHeater,

    /// "[Steam](https://ddwiki.reso.org/display/DDW17/Steam)": The heating system uses a boiler and pipes to deliver hot water to radiators throughout the dwelling.
    Steam,

    /// "[Varies by Unit](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244989)": The type of heating or heating features vary from unit to unit.
    VariesbyUnit,

    /// "[Wall Furnace](https://ddwiki.reso.org/display/DDW17/Wall+Furnace)": Typically a ductless system that is built into a wall to deliver to the room in which it's installed.
    WallFurnace,

    /// "[Wood](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244991)": The heating system uses wood as its fuel to generate heat.
    Wood,

    /// "[Wood Stove](https://ddwiki.reso.org/display/DDW17/Wood+Stove)": The property has a stove that burns wood to generate heat.
    WoodStove,

    /// "[Zoned](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244993)": The heating system is zoned allowing for indepenant control of two or more parts of the structure.
    Zoned,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Heating {
    fn from(s: String) -> Heating {
        match s.as_ref() {
            "Active Solar" => Heating::ActiveSolar,

            "Baseboard" => Heating::Baseboard,

            "Ceiling" => Heating::Ceiling,

            "Central" => Heating::Central,

            "Coal" => Heating::Coal,

            "Coal Stove" => Heating::CoalStove,

            "Ductless" => Heating::Ductless,

            "Electric" => Heating::Electric,

            "ENERGY STAR Qualified Equipment" => Heating::ENERGYSTARQualifiedEquipment,

            "ENERGY STAR/ACCA RSI Qualified Installation" => {
                Heating::ENERGYSTARACCARSIQualifiedInstallation
            }

            "Exhaust Fan" => Heating::ExhaustFan,

            "Fireplace Insert" => Heating::FireplaceInsert,

            "Fireplace(s)" => Heating::Fireplaces,

            "Floor Furnace" => Heating::FloorFurnace,

            "Forced Air" => Heating::ForcedAir,

            "Geothermal" => Heating::Geothermal,

            "Gravity" => Heating::Gravity,

            "Heat Pump" => Heating::HeatPump,

            "Hot Water" => Heating::HotWater,

            "Humidity Control" => Heating::HumidityControl,

            "Kerosene" => Heating::Kerosene,

            "Natural Gas" => Heating::NaturalGas,

            "None" => Heating::None,

            "Oil" => Heating::Oil,

            "Other" => Heating::Other,

            "Passive Solar" => Heating::PassiveSolar,

            "Pellet Stove" => Heating::PelletStove,

            "Propane" => Heating::Propane,

            "Propane Stove" => Heating::PropaneStove,

            "Radiant" => Heating::Radiant,

            "Radiant Ceiling" => Heating::RadiantCeiling,

            "Radiant Floor" => Heating::RadiantFloor,

            "See Remarks" => Heating::SeeRemarks,

            "Separate Meters" => Heating::SeparateMeters,

            "Solar" => Heating::Solar,

            "Space Heater" => Heating::SpaceHeater,

            "Steam" => Heating::Steam,

            "Varies by Unit" => Heating::VariesbyUnit,

            "Wall Furnace" => Heating::WallFurnace,

            "Wood" => Heating::Wood,

            "Wood Stove" => Heating::WoodStove,

            "Zoned" => Heating::Zoned,

            _ => Heating::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Heating {
    fn from(s: &str) -> Heating {
        match s {
            "Active Solar" => Heating::ActiveSolar,

            "Baseboard" => Heating::Baseboard,

            "Ceiling" => Heating::Ceiling,

            "Central" => Heating::Central,

            "Coal" => Heating::Coal,

            "Coal Stove" => Heating::CoalStove,

            "Ductless" => Heating::Ductless,

            "Electric" => Heating::Electric,

            "ENERGY STAR Qualified Equipment" => Heating::ENERGYSTARQualifiedEquipment,

            "ENERGY STAR/ACCA RSI Qualified Installation" => {
                Heating::ENERGYSTARACCARSIQualifiedInstallation
            }

            "Exhaust Fan" => Heating::ExhaustFan,

            "Fireplace Insert" => Heating::FireplaceInsert,

            "Fireplace(s)" => Heating::Fireplaces,

            "Floor Furnace" => Heating::FloorFurnace,

            "Forced Air" => Heating::ForcedAir,

            "Geothermal" => Heating::Geothermal,

            "Gravity" => Heating::Gravity,

            "Heat Pump" => Heating::HeatPump,

            "Hot Water" => Heating::HotWater,

            "Humidity Control" => Heating::HumidityControl,

            "Kerosene" => Heating::Kerosene,

            "Natural Gas" => Heating::NaturalGas,

            "None" => Heating::None,

            "Oil" => Heating::Oil,

            "Other" => Heating::Other,

            "Passive Solar" => Heating::PassiveSolar,

            "Pellet Stove" => Heating::PelletStove,

            "Propane" => Heating::Propane,

            "Propane Stove" => Heating::PropaneStove,

            "Radiant" => Heating::Radiant,

            "Radiant Ceiling" => Heating::RadiantCeiling,

            "Radiant Floor" => Heating::RadiantFloor,

            "See Remarks" => Heating::SeeRemarks,

            "Separate Meters" => Heating::SeparateMeters,

            "Solar" => Heating::Solar,

            "Space Heater" => Heating::SpaceHeater,

            "Steam" => Heating::Steam,

            "Varies by Unit" => Heating::VariesbyUnit,

            "Wall Furnace" => Heating::WallFurnace,

            "Wood" => Heating::Wood,

            "Wood Stove" => Heating::WoodStove,

            "Zoned" => Heating::Zoned,

            _ => Heating::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Heating> for &'a str {
    fn from(s: &'a Heating) -> &'a str {
        match s {
            Heating::ActiveSolar => "Active Solar",

            Heating::Baseboard => "Baseboard",

            Heating::Ceiling => "Ceiling",

            Heating::Central => "Central",

            Heating::Coal => "Coal",

            Heating::CoalStove => "Coal Stove",

            Heating::Ductless => "Ductless",

            Heating::Electric => "Electric",

            Heating::ENERGYSTARQualifiedEquipment => "ENERGY STAR Qualified Equipment",

            Heating::ENERGYSTARACCARSIQualifiedInstallation => {
                "ENERGY STAR/ACCA RSI Qualified Installation"
            }

            Heating::ExhaustFan => "Exhaust Fan",

            Heating::FireplaceInsert => "Fireplace Insert",

            Heating::Fireplaces => "Fireplace(s)",

            Heating::FloorFurnace => "Floor Furnace",

            Heating::ForcedAir => "Forced Air",

            Heating::Geothermal => "Geothermal",

            Heating::Gravity => "Gravity",

            Heating::HeatPump => "Heat Pump",

            Heating::HotWater => "Hot Water",

            Heating::HumidityControl => "Humidity Control",

            Heating::Kerosene => "Kerosene",

            Heating::NaturalGas => "Natural Gas",

            Heating::None => "None",

            Heating::Oil => "Oil",

            Heating::Other => "Other",

            Heating::PassiveSolar => "Passive Solar",

            Heating::PelletStove => "Pellet Stove",

            Heating::Propane => "Propane",

            Heating::PropaneStove => "Propane Stove",

            Heating::Radiant => "Radiant",

            Heating::RadiantCeiling => "Radiant Ceiling",

            Heating::RadiantFloor => "Radiant Floor",

            Heating::SeeRemarks => "See Remarks",

            Heating::SeparateMeters => "Separate Meters",

            Heating::Solar => "Solar",

            Heating::SpaceHeater => "Space Heater",

            Heating::Steam => "Steam",

            Heating::VariesbyUnit => "Varies by Unit",

            Heating::WallFurnace => "Wall Furnace",

            Heating::Wood => "Wood",

            Heating::WoodStove => "Wood Stove",

            Heating::Zoned => "Zoned",

            Heating::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Heating {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Heating {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_heating_format {
    use super::Heating;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Heating>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Heating>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [HorseAmenities Lookups](https://ddwiki.reso.org/display/DDW17/HorseAmenities+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum HorseAmenities {
    /// "[Arena](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244995)": The property allows for horses and has an arena.
    Arena,

    /// "[Barn](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244996)": The property allows horses and has a barn.
    Barn,

    /// "[Boarding Facilities](https://ddwiki.reso.org/display/DDW17/Boarding+Facilities)": The property had horse boarding facilities.
    BoardingFacilities,

    /// "[Corral(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244998)": The property allows horses and has one or more corrals.
    Corrals,

    /// "[Hay Storage](https://ddwiki.reso.org/display/DDW17/Hay+Storage)": The property allows horses and has hay storage.
    HayStorage,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245000)": The property either does not allow horses or has no amenities for horses.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245001)": The property has horse amenities other than those in this list.
    Other,

    /// "[Paddocks](https://ddwiki.reso.org/display/DDW17/Paddocks)": The property allows horses and has an enclosed living are for your horse(s).  A paddock is also known as a sacrifice area which got its name because the owner was sacrificing some of their land for the benefit of the horse.
    Paddocks,

    /// "[Palpation Chute](https://ddwiki.reso.org/display/DDW17/Palpation+Chute)": A portion of the livestock chute where the animal is held for examination or other purposes.
    PalpationChute,

    /// "[Pasture](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245004)": The property includes or has access to a pasture for horses.
    Pasture,

    /// "[Riding Trail](https://ddwiki.reso.org/display/DDW17/Riding+Trail)": The property includes or has access to a riding trail(s).
    RidingTrail,

    /// "[Round Pen](https://ddwiki.reso.org/display/DDW17/Round+Pen)": The property includes or has access to a round enclosure used for horse training.
    RoundPen,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245007)": See the remarks fields for additional information about horse amenities.
    SeeRemarks,

    /// "[Shaving Bin](https://ddwiki.reso.org/display/DDW17/Shaving+Bin)": The property includes or has access to a storage container for wood shavings that are use as ground cover for horses.
    ShavingBin,

    /// "[Stable(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245009)": The property includes or has access to horse stable(s).
    Stables,

    /// "[Tack Room](https://ddwiki.reso.org/display/DDW17/Tack+Room)": The property includes or has access to a room to store equipment such as saddles, stirrups, bridles, halters, reins, bits, harnesses, martingales, breastplates, etc.
    TackRoom,

    /// "[Trailer Storage](https://ddwiki.reso.org/display/DDW17/Trailer+Storage)": The property includes or has access to a place to store a horse trailer.
    TrailerStorage,

    /// "[Wash Rack](https://ddwiki.reso.org/display/DDW17/Wash+Rack)": The property includes or has access to a rack used to confine/restrain a horse for purposes of washing the horse.
    WashRack,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for HorseAmenities {
    fn from(s: String) -> HorseAmenities {
        match s.as_ref() {
            "Arena" => HorseAmenities::Arena,

            "Barn" => HorseAmenities::Barn,

            "Boarding Facilities" => HorseAmenities::BoardingFacilities,

            "Corral(s)" => HorseAmenities::Corrals,

            "Hay Storage" => HorseAmenities::HayStorage,

            "None" => HorseAmenities::None,

            "Other" => HorseAmenities::Other,

            "Paddocks" => HorseAmenities::Paddocks,

            "Palpation Chute" => HorseAmenities::PalpationChute,

            "Pasture" => HorseAmenities::Pasture,

            "Riding Trail" => HorseAmenities::RidingTrail,

            "Round Pen" => HorseAmenities::RoundPen,

            "See Remarks" => HorseAmenities::SeeRemarks,

            "Shaving Bin" => HorseAmenities::ShavingBin,

            "Stable(s)" => HorseAmenities::Stables,

            "Tack Room" => HorseAmenities::TackRoom,

            "Trailer Storage" => HorseAmenities::TrailerStorage,

            "Wash Rack" => HorseAmenities::WashRack,

            _ => HorseAmenities::OpenEnumeration(s),
        }
    }
}

impl From<&str> for HorseAmenities {
    fn from(s: &str) -> HorseAmenities {
        match s {
            "Arena" => HorseAmenities::Arena,

            "Barn" => HorseAmenities::Barn,

            "Boarding Facilities" => HorseAmenities::BoardingFacilities,

            "Corral(s)" => HorseAmenities::Corrals,

            "Hay Storage" => HorseAmenities::HayStorage,

            "None" => HorseAmenities::None,

            "Other" => HorseAmenities::Other,

            "Paddocks" => HorseAmenities::Paddocks,

            "Palpation Chute" => HorseAmenities::PalpationChute,

            "Pasture" => HorseAmenities::Pasture,

            "Riding Trail" => HorseAmenities::RidingTrail,

            "Round Pen" => HorseAmenities::RoundPen,

            "See Remarks" => HorseAmenities::SeeRemarks,

            "Shaving Bin" => HorseAmenities::ShavingBin,

            "Stable(s)" => HorseAmenities::Stables,

            "Tack Room" => HorseAmenities::TackRoom,

            "Trailer Storage" => HorseAmenities::TrailerStorage,

            "Wash Rack" => HorseAmenities::WashRack,

            _ => HorseAmenities::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a HorseAmenities> for &'a str {
    fn from(s: &'a HorseAmenities) -> &'a str {
        match s {
            HorseAmenities::Arena => "Arena",

            HorseAmenities::Barn => "Barn",

            HorseAmenities::BoardingFacilities => "Boarding Facilities",

            HorseAmenities::Corrals => "Corral(s)",

            HorseAmenities::HayStorage => "Hay Storage",

            HorseAmenities::None => "None",

            HorseAmenities::Other => "Other",

            HorseAmenities::Paddocks => "Paddocks",

            HorseAmenities::PalpationChute => "Palpation Chute",

            HorseAmenities::Pasture => "Pasture",

            HorseAmenities::RidingTrail => "Riding Trail",

            HorseAmenities::RoundPen => "Round Pen",

            HorseAmenities::SeeRemarks => "See Remarks",

            HorseAmenities::ShavingBin => "Shaving Bin",

            HorseAmenities::Stables => "Stable(s)",

            HorseAmenities::TackRoom => "Tack Room",

            HorseAmenities::TrailerStorage => "Trailer Storage",

            HorseAmenities::WashRack => "Wash Rack",

            HorseAmenities::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for HorseAmenities {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for HorseAmenities {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_horse_amenities_format {
    use super::HorseAmenities;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<HorseAmenities>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<HorseAmenities>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [HoursDaysOfOperation Lookups](https://ddwiki.reso.org/display/DDW17/HoursDaysOfOperation+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum HoursDaysOfOperation {
    /// "[Evenings Only](https://ddwiki.reso.org/display/DDW17/Evenings+Only)": The business being sold is open in the evenings only.
    EveningsOnly,

    /// "[Open -8 Hours/Day](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244946)": The business being sold is open less than 8 hours per day.
    OpenLessThan8HoursDay,

    /// "[Open 24 Hours](https://ddwiki.reso.org/display/DDW17/Open+24+Hours)": The business being sold is open 24 hours per day.
    Open24Hours,

    /// "[Open 7 Days](https://ddwiki.reso.org/display/DDW17/Open+7+Days)": The business being sold is open 7 days per week.
    Open7Days,

    /// "[Open 8 Hours/Day](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244945)": The business being sold is open 8 hours per day.
    Open8HoursDay,

    /// "[Open 8+ Hours/Day](https://ddwiki.reso.org/pages/viewpage.action?pageId=29244947)": The business being sold is open more than 8 hours/day.
    Open8PlusHoursDay,

    /// "[Open Monday-Friday](https://ddwiki.reso.org/display/DDW17/Open+Monday-Friday)": The business being sold is open Monday through Friday.
    OpenMondayFriday,

    /// "[Open Saturday](https://ddwiki.reso.org/display/DDW17/Open+Saturday)": The business being sold is open on Saturdays.
    OpenSaturday,

    /// "[Open Sunday](https://ddwiki.reso.org/display/DDW17/Open+Sunday)": The business being sold is open on Sundays.
    OpenSunday,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for HoursDaysOfOperation {
    fn from(s: String) -> HoursDaysOfOperation {
        match s.as_ref() {
            "Evenings Only" => HoursDaysOfOperation::EveningsOnly,

            "Open -8 Hours/Day" => HoursDaysOfOperation::OpenLessThan8HoursDay,

            "Open 24 Hours" => HoursDaysOfOperation::Open24Hours,

            "Open 7 Days" => HoursDaysOfOperation::Open7Days,

            "Open 8 Hours/Day" => HoursDaysOfOperation::Open8HoursDay,

            "Open 8+ Hours/Day" => HoursDaysOfOperation::Open8PlusHoursDay,

            "Open Monday-Friday" => HoursDaysOfOperation::OpenMondayFriday,

            "Open Saturday" => HoursDaysOfOperation::OpenSaturday,

            "Open Sunday" => HoursDaysOfOperation::OpenSunday,

            _ => HoursDaysOfOperation::OpenEnumeration(s),
        }
    }
}

impl From<&str> for HoursDaysOfOperation {
    fn from(s: &str) -> HoursDaysOfOperation {
        match s {
            "Evenings Only" => HoursDaysOfOperation::EveningsOnly,

            "Open -8 Hours/Day" => HoursDaysOfOperation::OpenLessThan8HoursDay,

            "Open 24 Hours" => HoursDaysOfOperation::Open24Hours,

            "Open 7 Days" => HoursDaysOfOperation::Open7Days,

            "Open 8 Hours/Day" => HoursDaysOfOperation::Open8HoursDay,

            "Open 8+ Hours/Day" => HoursDaysOfOperation::Open8PlusHoursDay,

            "Open Monday-Friday" => HoursDaysOfOperation::OpenMondayFriday,

            "Open Saturday" => HoursDaysOfOperation::OpenSaturday,

            "Open Sunday" => HoursDaysOfOperation::OpenSunday,

            _ => HoursDaysOfOperation::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a HoursDaysOfOperation> for &'a str {
    fn from(s: &'a HoursDaysOfOperation) -> &'a str {
        match s {
            HoursDaysOfOperation::EveningsOnly => "Evenings Only",

            HoursDaysOfOperation::OpenLessThan8HoursDay => "Open -8 Hours/Day",

            HoursDaysOfOperation::Open24Hours => "Open 24 Hours",

            HoursDaysOfOperation::Open7Days => "Open 7 Days",

            HoursDaysOfOperation::Open8HoursDay => "Open 8 Hours/Day",

            HoursDaysOfOperation::Open8PlusHoursDay => "Open 8+ Hours/Day",

            HoursDaysOfOperation::OpenMondayFriday => "Open Monday-Friday",

            HoursDaysOfOperation::OpenSaturday => "Open Saturday",

            HoursDaysOfOperation::OpenSunday => "Open Sunday",

            HoursDaysOfOperation::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for HoursDaysOfOperation {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for HoursDaysOfOperation {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_hours_days_of_operation_format {
    use super::HoursDaysOfOperation;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<HoursDaysOfOperation>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<HoursDaysOfOperation>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ImageOf Lookups](https://ddwiki.reso.org/display/DDW17/ImageOf+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ImageOf {
    /// "[Aerial View](https://ddwiki.reso.org/display/DDW17/Aerial+View)": The image/photo is an areal view of the structure or property.
    AerialView,

    /// "[Atrium](https://ddwiki.reso.org/display/DDW17/Atrium)": The image/photo is of the atrium.
    Atrium,

    /// "[Attic](https://ddwiki.reso.org/display/DDW17/Attic)": The image/photo is of the attic.
    Attic,

    /// "[Back of Structure](https://ddwiki.reso.org/display/DDW17/Back+of+Structure)": The image/photo is of the back of the structure.
    BackofStructure,

    /// "[Balcony](https://ddwiki.reso.org/display/DDW17/Balcony)": The image/photo is of a balcony.
    Balcony,

    /// "[Bar](https://ddwiki.reso.org/display/DDW17/Bar)": The image/photo is of the bar.
    Bar,

    /// "[Barn](https://ddwiki.reso.org/display/DDW17/Barn)": The image/photo is of the barn.
    Barn,

    /// "[Basement](https://ddwiki.reso.org/display/DDW17/Basement)": The image/photo is of the basement.
    Basement,

    /// "[Bathroom](https://ddwiki.reso.org/display/DDW17/Bathroom)": The image/photo is of a bathroom.
    Bathroom,

    /// "[Bedroom](https://ddwiki.reso.org/display/DDW17/Bedroom)": The image/photo is of a bedroom.
    Bedroom,

    /// "[Bonus Room](https://ddwiki.reso.org/display/DDW17/Bonus+Room)": The image/photo is of the bonus room.
    BonusRoom,

    /// "[Breakfast Area](https://ddwiki.reso.org/display/DDW17/Breakfast+Area)": The image/photo is of the breakfast area.
    BreakfastArea,

    /// "[Closet](https://ddwiki.reso.org/display/DDW17/Closet)": The image/photo is of a closet.
    Closet,

    /// "[Community](https://ddwiki.reso.org/display/DDW17/Community)": The image/photo is of the community.
    Community,

    /// "[Courtyard](https://ddwiki.reso.org/display/DDW17/Courtyard)": The image/photo is of the courtyard.
    Courtyard,

    /// "[Deck](https://ddwiki.reso.org/display/DDW17/Deck)": The image/photo is of the deck.
    Deck,

    /// "[Den](https://ddwiki.reso.org/display/DDW17/Den)": The image/photo is of the den.
    Den,

    /// "[Dining Area](https://ddwiki.reso.org/display/DDW17/Dining+Area)": The image/photo is of the dining area.
    DiningArea,

    /// "[Dining Room](https://ddwiki.reso.org/display/DDW17/Dining+Room)": The image/photo is of the dining room.
    DiningRoom,

    /// "[Dock](https://ddwiki.reso.org/display/DDW17/Dock)": The image/photo is of the dock.
    Dock,

    /// "[Entry](https://ddwiki.reso.org/display/DDW17/Entry)": The image/photo is of the entry.
    Entry,

    /// "[Exercise Room](https://ddwiki.reso.org/display/DDW17/Exercise+Room)": The image/photo is of the exercise room.
    ExerciseRoom,

    /// "[Family Room](https://ddwiki.reso.org/display/DDW17/Family+Room)": The image/photo is of the family room.
    FamilyRoom,

    /// "[Fence](https://ddwiki.reso.org/display/DDW17/Fence)": The image/photo is of the fence.
    Fence,

    /// "[Fireplace](https://ddwiki.reso.org/display/DDW17/Fireplace)": The image/photo is of a fireplace.
    Fireplace,

    /// "[Floor Plan](https://ddwiki.reso.org/display/DDW17/Floor+Plan)": The image/photo is of the floor plan.
    FloorPlan,

    /// "[Front of Structure](https://ddwiki.reso.org/display/DDW17/Front+of+Structure)": The image/photo is of the front of structure.
    FrontofStructure,

    /// "[Game Room](https://ddwiki.reso.org/display/DDW17/Game+Room)": The image/photo is of the game room.
    GameRoom,

    /// "[Garage](https://ddwiki.reso.org/display/DDW17/Garage)": The image/photo is of the garage.
    Garage,

    /// "[Garden](https://ddwiki.reso.org/display/DDW17/Garden)": The image/photo is of the garden.
    Garden,

    /// "[Golf Course](https://ddwiki.reso.org/display/DDW17/Golf+Course)": The image/photo is of a golf course.
    GolfCourse,

    /// "[Great Room](https://ddwiki.reso.org/display/DDW17/Great+Room)": The image/photo is of the great room.
    GreatRoom,

    /// "[Guest Quarters](https://ddwiki.reso.org/display/DDW17/Guest+Quarters)": The image/photo is of the guest quarters.
    GuestQuarters,

    /// "[Gym](https://ddwiki.reso.org/display/DDW17/Gym)": The image/photo is of the gym.
    Gym,

    /// "[Hobby Room](https://ddwiki.reso.org/display/DDW17/Hobby+Room)": The image/photo is of the hobby room.
    HobbyRoom,

    /// "[Inlaw](https://ddwiki.reso.org/display/DDW17/Inlaw)": The image/photo is of the inlaw / mother-in-law quarters/room.
    Inlaw,

    /// "[Kitchen](https://ddwiki.reso.org/display/DDW17/Kitchen)": The image/photo is of the kitchen.
    Kitchen,

    /// "[Lake](https://ddwiki.reso.org/display/DDW17/Lake)": The image/photo is of the lake.
    Lake,

    /// "[Laundry](https://ddwiki.reso.org/display/DDW17/Laundry)": The image/photo is of the laundry.
    Laundry,

    /// "[Library](https://ddwiki.reso.org/display/DDW17/Library)": The image/photo is of the library.
    Library,

    /// "[Living Room](https://ddwiki.reso.org/display/DDW17/Living+Room)": The image/photo is of the living room.
    LivingRoom,

    /// "[Loading Dock](https://ddwiki.reso.org/display/DDW17/Loading+Dock)": The image/photo is of the loading dock.
    LoadingDock,

    /// "[Lobby](https://ddwiki.reso.org/display/DDW17/Lobby)": The image/photo is of the lobby.
    Lobby,

    /// "[Loft](https://ddwiki.reso.org/display/DDW17/Loft)": The image/photo is of the loft.
    Loft,

    /// "[Lot](https://ddwiki.reso.org/display/DDW17/Lot)": The image/photo is of the lot.
    Lot,

    /// "[Master Bathroom](https://ddwiki.reso.org/display/DDW17/Master+Bathroom)": The image/photo is of the master bathroom.
    MasterBathroom,

    /// "[Master Bedroom](https://ddwiki.reso.org/display/DDW17/Master+Bedroom)": The image/photo is of the master bedroom.
    MasterBedroom,

    /// "[Media Room](https://ddwiki.reso.org/display/DDW17/Media+Room)": The image/photo is of the media room.
    MediaRoom,

    /// "[Mud Room](https://ddwiki.reso.org/display/DDW17/Mud+Room)": The image/photo is of the mud room.
    MudRoom,

    /// "[Nursery](https://ddwiki.reso.org/display/DDW17/Nursery)": The image/photo is of the nursery.
    Nursery,

    /// "[Office](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245065)": The image/photo is of the office.
    Office,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245066)": The image/photo is of a room or aspect of the property other than those listed in the ImageOf enumerations.
    Other,

    /// "[Out Buildings](https://ddwiki.reso.org/display/DDW17/Out+Buildings)": The image/photo is of an out building(s).
    OutBuildings,

    /// "[Pantry](https://ddwiki.reso.org/display/DDW17/Pantry)": The image/photo is of the pantry.
    Pantry,

    /// "[Parking](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245069)": The image/photo is of the parking.
    Parking,

    /// "[Patio](https://ddwiki.reso.org/display/DDW17/Patio)": The image/photo is of a patio.
    Patio,

    /// "[Pier](https://ddwiki.reso.org/display/DDW17/Pier)": The image/photo is of a pier.
    Pier,

    /// "[Plat Map](https://ddwiki.reso.org/display/DDW17/Plat+Map)": The image/photo is of the plat map.
    PlatMap,

    /// "[Pond](https://ddwiki.reso.org/display/DDW17/Pond)": The image/photo is of the pond.
    Pond,

    /// "[Pool](https://ddwiki.reso.org/display/DDW17/Pool)": The image/photo is of the pool.
    Pool,

    /// "[Reception](https://ddwiki.reso.org/display/DDW17/Reception)": The image/photo is of the reception.
    Reception,

    /// "[Recreation Room](https://ddwiki.reso.org/display/DDW17/Recreation+Room)": The image/photo is of the recreation room.
    RecreationRoom,

    /// "[Sauna](https://ddwiki.reso.org/display/DDW17/Sauna)": The image/photo is of the sauna.
    Sauna,

    /// "[Showroom](https://ddwiki.reso.org/display/DDW17/Showroom)": The image/photo is of the showroom.
    Showroom,

    /// "[Side of Structure](https://ddwiki.reso.org/display/DDW17/Side+of+Structure)": The image/photo is of the side of structure.
    SideofStructure,

    /// "[Sitting Room](https://ddwiki.reso.org/display/DDW17/Sitting+Room)": The image/photo is of the sitting room.
    SittingRoom,

    /// "[Spa](https://ddwiki.reso.org/display/DDW17/Spa)": The image/photo is of the spa.
    Spa,

    /// "[Stable](https://ddwiki.reso.org/display/DDW17/Stable)": The image/photo is of the stable.
    Stable,

    /// "[Storage](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245083)": The image/photo is of the storage.
    Storage,

    /// "[Studio](https://ddwiki.reso.org/display/DDW17/Studio)": The image/photo is of the studio.
    Studio,

    /// "[Study](https://ddwiki.reso.org/display/DDW17/Study)": The image/photo is of the study.
    Study,

    /// "[Sun Room](https://ddwiki.reso.org/display/DDW17/Sun+Room)": The image/photo is of the sun room.
    SunRoom,

    /// "[View](https://ddwiki.reso.org/display/DDW17/View)": The image/photo is of the view.
    View,

    /// "[Waterfront](https://ddwiki.reso.org/display/DDW17/Waterfront)": The image/photo is of the waterfront.
    Waterfront,

    /// "[Wine Cellar](https://ddwiki.reso.org/display/DDW17/Wine+Cellar)": The image/photo is of the wine cellar.
    WineCellar,

    /// "[Workshop](https://ddwiki.reso.org/display/DDW17/Workshop)": The image/photo is of the workshop.
    Workshop,

    /// "[Yard](https://ddwiki.reso.org/display/DDW17/Yard)": The image/photo is of the yard.
    Yard,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ImageOf {
    fn from(s: String) -> ImageOf {
        match s.as_ref() {
            "Aerial View" => ImageOf::AerialView,

            "Atrium" => ImageOf::Atrium,

            "Attic" => ImageOf::Attic,

            "Back of Structure" => ImageOf::BackofStructure,

            "Balcony" => ImageOf::Balcony,

            "Bar" => ImageOf::Bar,

            "Barn" => ImageOf::Barn,

            "Basement" => ImageOf::Basement,

            "Bathroom" => ImageOf::Bathroom,

            "Bedroom" => ImageOf::Bedroom,

            "Bonus Room" => ImageOf::BonusRoom,

            "Breakfast Area" => ImageOf::BreakfastArea,

            "Closet" => ImageOf::Closet,

            "Community" => ImageOf::Community,

            "Courtyard" => ImageOf::Courtyard,

            "Deck" => ImageOf::Deck,

            "Den" => ImageOf::Den,

            "Dining Area" => ImageOf::DiningArea,

            "Dining Room" => ImageOf::DiningRoom,

            "Dock" => ImageOf::Dock,

            "Entry" => ImageOf::Entry,

            "Exercise Room" => ImageOf::ExerciseRoom,

            "Family Room" => ImageOf::FamilyRoom,

            "Fence" => ImageOf::Fence,

            "Fireplace" => ImageOf::Fireplace,

            "Floor Plan" => ImageOf::FloorPlan,

            "Front of Structure" => ImageOf::FrontofStructure,

            "Game Room" => ImageOf::GameRoom,

            "Garage" => ImageOf::Garage,

            "Garden" => ImageOf::Garden,

            "Golf Course" => ImageOf::GolfCourse,

            "Great Room" => ImageOf::GreatRoom,

            "Guest Quarters" => ImageOf::GuestQuarters,

            "Gym" => ImageOf::Gym,

            "Hobby Room" => ImageOf::HobbyRoom,

            "Inlaw" => ImageOf::Inlaw,

            "Kitchen" => ImageOf::Kitchen,

            "Lake" => ImageOf::Lake,

            "Laundry" => ImageOf::Laundry,

            "Library" => ImageOf::Library,

            "Living Room" => ImageOf::LivingRoom,

            "Loading Dock" => ImageOf::LoadingDock,

            "Lobby" => ImageOf::Lobby,

            "Loft" => ImageOf::Loft,

            "Lot" => ImageOf::Lot,

            "Master Bathroom" => ImageOf::MasterBathroom,

            "Master Bedroom" => ImageOf::MasterBedroom,

            "Media Room" => ImageOf::MediaRoom,

            "Mud Room" => ImageOf::MudRoom,

            "Nursery" => ImageOf::Nursery,

            "Office" => ImageOf::Office,

            "Other" => ImageOf::Other,

            "Out Buildings" => ImageOf::OutBuildings,

            "Pantry" => ImageOf::Pantry,

            "Parking" => ImageOf::Parking,

            "Patio" => ImageOf::Patio,

            "Pier" => ImageOf::Pier,

            "Plat Map" => ImageOf::PlatMap,

            "Pond" => ImageOf::Pond,

            "Pool" => ImageOf::Pool,

            "Reception" => ImageOf::Reception,

            "Recreation Room" => ImageOf::RecreationRoom,

            "Sauna" => ImageOf::Sauna,

            "Showroom" => ImageOf::Showroom,

            "Side of Structure" => ImageOf::SideofStructure,

            "Sitting Room" => ImageOf::SittingRoom,

            "Spa" => ImageOf::Spa,

            "Stable" => ImageOf::Stable,

            "Storage" => ImageOf::Storage,

            "Studio" => ImageOf::Studio,

            "Study" => ImageOf::Study,

            "Sun Room" => ImageOf::SunRoom,

            "View" => ImageOf::View,

            "Waterfront" => ImageOf::Waterfront,

            "Wine Cellar" => ImageOf::WineCellar,

            "Workshop" => ImageOf::Workshop,

            "Yard" => ImageOf::Yard,

            _ => ImageOf::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ImageOf {
    fn from(s: &str) -> ImageOf {
        match s {
            "Aerial View" => ImageOf::AerialView,

            "Atrium" => ImageOf::Atrium,

            "Attic" => ImageOf::Attic,

            "Back of Structure" => ImageOf::BackofStructure,

            "Balcony" => ImageOf::Balcony,

            "Bar" => ImageOf::Bar,

            "Barn" => ImageOf::Barn,

            "Basement" => ImageOf::Basement,

            "Bathroom" => ImageOf::Bathroom,

            "Bedroom" => ImageOf::Bedroom,

            "Bonus Room" => ImageOf::BonusRoom,

            "Breakfast Area" => ImageOf::BreakfastArea,

            "Closet" => ImageOf::Closet,

            "Community" => ImageOf::Community,

            "Courtyard" => ImageOf::Courtyard,

            "Deck" => ImageOf::Deck,

            "Den" => ImageOf::Den,

            "Dining Area" => ImageOf::DiningArea,

            "Dining Room" => ImageOf::DiningRoom,

            "Dock" => ImageOf::Dock,

            "Entry" => ImageOf::Entry,

            "Exercise Room" => ImageOf::ExerciseRoom,

            "Family Room" => ImageOf::FamilyRoom,

            "Fence" => ImageOf::Fence,

            "Fireplace" => ImageOf::Fireplace,

            "Floor Plan" => ImageOf::FloorPlan,

            "Front of Structure" => ImageOf::FrontofStructure,

            "Game Room" => ImageOf::GameRoom,

            "Garage" => ImageOf::Garage,

            "Garden" => ImageOf::Garden,

            "Golf Course" => ImageOf::GolfCourse,

            "Great Room" => ImageOf::GreatRoom,

            "Guest Quarters" => ImageOf::GuestQuarters,

            "Gym" => ImageOf::Gym,

            "Hobby Room" => ImageOf::HobbyRoom,

            "Inlaw" => ImageOf::Inlaw,

            "Kitchen" => ImageOf::Kitchen,

            "Lake" => ImageOf::Lake,

            "Laundry" => ImageOf::Laundry,

            "Library" => ImageOf::Library,

            "Living Room" => ImageOf::LivingRoom,

            "Loading Dock" => ImageOf::LoadingDock,

            "Lobby" => ImageOf::Lobby,

            "Loft" => ImageOf::Loft,

            "Lot" => ImageOf::Lot,

            "Master Bathroom" => ImageOf::MasterBathroom,

            "Master Bedroom" => ImageOf::MasterBedroom,

            "Media Room" => ImageOf::MediaRoom,

            "Mud Room" => ImageOf::MudRoom,

            "Nursery" => ImageOf::Nursery,

            "Office" => ImageOf::Office,

            "Other" => ImageOf::Other,

            "Out Buildings" => ImageOf::OutBuildings,

            "Pantry" => ImageOf::Pantry,

            "Parking" => ImageOf::Parking,

            "Patio" => ImageOf::Patio,

            "Pier" => ImageOf::Pier,

            "Plat Map" => ImageOf::PlatMap,

            "Pond" => ImageOf::Pond,

            "Pool" => ImageOf::Pool,

            "Reception" => ImageOf::Reception,

            "Recreation Room" => ImageOf::RecreationRoom,

            "Sauna" => ImageOf::Sauna,

            "Showroom" => ImageOf::Showroom,

            "Side of Structure" => ImageOf::SideofStructure,

            "Sitting Room" => ImageOf::SittingRoom,

            "Spa" => ImageOf::Spa,

            "Stable" => ImageOf::Stable,

            "Storage" => ImageOf::Storage,

            "Studio" => ImageOf::Studio,

            "Study" => ImageOf::Study,

            "Sun Room" => ImageOf::SunRoom,

            "View" => ImageOf::View,

            "Waterfront" => ImageOf::Waterfront,

            "Wine Cellar" => ImageOf::WineCellar,

            "Workshop" => ImageOf::Workshop,

            "Yard" => ImageOf::Yard,

            _ => ImageOf::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ImageOf> for &'a str {
    fn from(s: &'a ImageOf) -> &'a str {
        match s {
            ImageOf::AerialView => "Aerial View",

            ImageOf::Atrium => "Atrium",

            ImageOf::Attic => "Attic",

            ImageOf::BackofStructure => "Back of Structure",

            ImageOf::Balcony => "Balcony",

            ImageOf::Bar => "Bar",

            ImageOf::Barn => "Barn",

            ImageOf::Basement => "Basement",

            ImageOf::Bathroom => "Bathroom",

            ImageOf::Bedroom => "Bedroom",

            ImageOf::BonusRoom => "Bonus Room",

            ImageOf::BreakfastArea => "Breakfast Area",

            ImageOf::Closet => "Closet",

            ImageOf::Community => "Community",

            ImageOf::Courtyard => "Courtyard",

            ImageOf::Deck => "Deck",

            ImageOf::Den => "Den",

            ImageOf::DiningArea => "Dining Area",

            ImageOf::DiningRoom => "Dining Room",

            ImageOf::Dock => "Dock",

            ImageOf::Entry => "Entry",

            ImageOf::ExerciseRoom => "Exercise Room",

            ImageOf::FamilyRoom => "Family Room",

            ImageOf::Fence => "Fence",

            ImageOf::Fireplace => "Fireplace",

            ImageOf::FloorPlan => "Floor Plan",

            ImageOf::FrontofStructure => "Front of Structure",

            ImageOf::GameRoom => "Game Room",

            ImageOf::Garage => "Garage",

            ImageOf::Garden => "Garden",

            ImageOf::GolfCourse => "Golf Course",

            ImageOf::GreatRoom => "Great Room",

            ImageOf::GuestQuarters => "Guest Quarters",

            ImageOf::Gym => "Gym",

            ImageOf::HobbyRoom => "Hobby Room",

            ImageOf::Inlaw => "Inlaw",

            ImageOf::Kitchen => "Kitchen",

            ImageOf::Lake => "Lake",

            ImageOf::Laundry => "Laundry",

            ImageOf::Library => "Library",

            ImageOf::LivingRoom => "Living Room",

            ImageOf::LoadingDock => "Loading Dock",

            ImageOf::Lobby => "Lobby",

            ImageOf::Loft => "Loft",

            ImageOf::Lot => "Lot",

            ImageOf::MasterBathroom => "Master Bathroom",

            ImageOf::MasterBedroom => "Master Bedroom",

            ImageOf::MediaRoom => "Media Room",

            ImageOf::MudRoom => "Mud Room",

            ImageOf::Nursery => "Nursery",

            ImageOf::Office => "Office",

            ImageOf::Other => "Other",

            ImageOf::OutBuildings => "Out Buildings",

            ImageOf::Pantry => "Pantry",

            ImageOf::Parking => "Parking",

            ImageOf::Patio => "Patio",

            ImageOf::Pier => "Pier",

            ImageOf::PlatMap => "Plat Map",

            ImageOf::Pond => "Pond",

            ImageOf::Pool => "Pool",

            ImageOf::Reception => "Reception",

            ImageOf::RecreationRoom => "Recreation Room",

            ImageOf::Sauna => "Sauna",

            ImageOf::Showroom => "Showroom",

            ImageOf::SideofStructure => "Side of Structure",

            ImageOf::SittingRoom => "Sitting Room",

            ImageOf::Spa => "Spa",

            ImageOf::Stable => "Stable",

            ImageOf::Storage => "Storage",

            ImageOf::Studio => "Studio",

            ImageOf::Study => "Study",

            ImageOf::SunRoom => "Sun Room",

            ImageOf::View => "View",

            ImageOf::Waterfront => "Waterfront",

            ImageOf::WineCellar => "Wine Cellar",

            ImageOf::Workshop => "Workshop",

            ImageOf::Yard => "Yard",

            ImageOf::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ImageOf {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ImageOf {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_image_of_format {
    use super::ImageOf;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ImageOf>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<ImageOf>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [IncomeIncludes Lookups](https://ddwiki.reso.org/display/DDW17/IncomeIncludes+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum IncomeIncludes {
    /// "[Laundry](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245093)": The income amount includes income from laundry facilities.
    Laundry,

    /// "[Parking](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245094)": The income amount includes income from parking.
    Parking,

    /// "[Recreation](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245095)": The income amount includes income from charging for recreation facilities.
    Recreation,

    /// "[Rent Only](https://ddwiki.reso.org/display/DDW17/Rent+Only)": The income amount includes income from only the rent charged to the tenants.
    RentOnly,

    /// "[RV Storage](https://ddwiki.reso.org/display/DDW17/RV+Storage)": The income amount includes income from charging for RV storage.
    RVStorage,

    /// "[Storage](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245098)": The income amount includes income from charging for general storage.
    Storage,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for IncomeIncludes {
    fn from(s: String) -> IncomeIncludes {
        match s.as_ref() {
            "Laundry" => IncomeIncludes::Laundry,

            "Parking" => IncomeIncludes::Parking,

            "Recreation" => IncomeIncludes::Recreation,

            "Rent Only" => IncomeIncludes::RentOnly,

            "RV Storage" => IncomeIncludes::RVStorage,

            "Storage" => IncomeIncludes::Storage,

            _ => IncomeIncludes::OpenEnumeration(s),
        }
    }
}

impl From<&str> for IncomeIncludes {
    fn from(s: &str) -> IncomeIncludes {
        match s {
            "Laundry" => IncomeIncludes::Laundry,

            "Parking" => IncomeIncludes::Parking,

            "Recreation" => IncomeIncludes::Recreation,

            "Rent Only" => IncomeIncludes::RentOnly,

            "RV Storage" => IncomeIncludes::RVStorage,

            "Storage" => IncomeIncludes::Storage,

            _ => IncomeIncludes::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a IncomeIncludes> for &'a str {
    fn from(s: &'a IncomeIncludes) -> &'a str {
        match s {
            IncomeIncludes::Laundry => "Laundry",

            IncomeIncludes::Parking => "Parking",

            IncomeIncludes::Recreation => "Recreation",

            IncomeIncludes::RentOnly => "Rent Only",

            IncomeIncludes::RVStorage => "RV Storage",

            IncomeIncludes::Storage => "Storage",

            IncomeIncludes::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for IncomeIncludes {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for IncomeIncludes {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_income_includes_format {
    use super::IncomeIncludes;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<IncomeIncludes>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<IncomeIncludes>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [InteriorOrRoomFeatures Lookups](https://ddwiki.reso.org/display/DDW17/InteriorOrRoomFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum InteriorOrRoomFeatures {
    /// "[Bar](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245100)": A built-in or movable fixture for the storage, preparation, serving and/or consumption of drinks.
    Bar,

    /// "[Beamed Ceilings](https://ddwiki.reso.org/display/DDW17/Beamed+Ceilings)": A property where the room, or rooms, have exposed beams across the ceiling.
    BeamedCeilings,

    /// "[Bidet](https://ddwiki.reso.org/display/DDW17/Bidet)": A type of sink designed to wash the undercarriage of the human body.
    Bidet,

    /// "[Bookcases](https://ddwiki.reso.org/display/DDW17/Bookcases)": Shelfs for books or other objects which may or may not be built into the property.
    Bookcases,

    /// "[Breakfast Bar](https://ddwiki.reso.org/display/DDW17/Breakfast+Bar)": A surface designed for eating, which is typically smaller than dining table and attached to the other kitchen surfaces.
    BreakfastBar,

    /// "[Built-in Features](https://ddwiki.reso.org/display/DDW17/Built-in+Features)": Some features are physically attached to the structure.
    BuiltinFeatures,

    /// "[Cathedral Ceiling(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245106)": A type of vaulted ceiling that is typically higher than normal ceilings and has a slant or curve to reach it's upper most point, which tends to be equal distance from the two shorter walls in the room.
    CathedralCeilings,

    /// "[Cedar Closet(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245107)": A closet that is partially or fully lined with cedar wood.
    CedarClosets,

    /// "[Ceiling Fan(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245108)": The room(s) have fans that are mounted from the ceiling.
    CeilingFans,

    /// "[Central Vacuum](https://ddwiki.reso.org/display/DDW17/Central+Vacuum)": A built-in vacuum that typically consists of a power/collection unit that is typically install in a garage or closet, tubing from the power unit to rooms thought the house, and wall mounted receptacles for the connection of a movable vacuum hose.
    CentralVacuum,

    /// "[Chandelier](https://ddwiki.reso.org/display/DDW17/Chandelier)": A decorative lighting fixture that typically branches out with several lights (or candles) with other decorative components such as glass, crystal or other reflective or light enhancing materials.
    Chandelier,

    /// "[Coffered Ceiling(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245111)": A ceiling with multiple decorative indentations, trays or sunken panels.
    CofferedCeilings,

    /// "[Crown Molding](https://ddwiki.reso.org/display/DDW17/Crown+Molding)": A decorative trim covering the seam between the ceiling and walls.
    CrownMolding,

    /// "[Double Vanity](https://ddwiki.reso.org/display/DDW17/Double+Vanity)": Bathroom cabinetry with two built-in sinks.
    DoubleVanity,

    /// "[Dry Bar](https://ddwiki.reso.org/display/DDW17/Dry+Bar)": A built-in or movable fixture for the storage, preparation, serving and consumption of drinks that does not have a water supply or sink.
    DryBar,

    /// "[Dumbwaiter](https://ddwiki.reso.org/display/DDW17/Dumbwaiter)": A small elevator, typically for carrying food between floors in a structure.
    Dumbwaiter,

    /// "[Eat-in Kitchen](https://ddwiki.reso.org/display/DDW17/Eat-in+Kitchen)": A kitchen that has been designed to accommodate dining.
    EatinKitchen,

    /// "[Elevator](https://ddwiki.reso.org/display/DDW17/Elevator)": A platform or compartment housed within a shaft for raising or lowering people or objects.
    Elevator,

    /// "[Entrance Foyer](https://ddwiki.reso.org/display/DDW17/Entrance+Foyer)": A room or hall at the entrance leading to other parts of the structure.
    EntranceFoyer,

    /// "[Granite Counters](https://ddwiki.reso.org/display/DDW17/Granite+Counters)": The counters are made of a type of granite stone.
    GraniteCounters,

    /// "[High Ceilings](https://ddwiki.reso.org/display/DDW17/High+Ceilings)": The ceiling height is greater than what might be considered a normal celling height.
    HighCeilings,

    /// "[High Speed Internet](https://ddwiki.reso.org/display/DDW17/High+Speed+Internet)": The property has access to high speed internet service, but may or may not be wired and/or connected to that service.
    HighSpeedInternet,

    /// "[His and Hers Closets](https://ddwiki.reso.org/display/DDW17/His+and+Hers+Closets)": The room(s) have two separate closets.
    HisandHersClosets,

    /// "[In-Law Floorplan](https://ddwiki.reso.org/display/DDW17/In-Law+Floorplan)": The structure has an area within that has the characteristics of an independent apartment.  Typically with a living area, kitchen, bedroom and bathroom, and in-law floor plan is not necessarily an Accessory Dwelling Unit (ADU).
    InLawFloorplan,

    /// "[Kitchen Island](https://ddwiki.reso.org/display/DDW17/Kitchen+Island)": A separate counter surface in a kitchen that is not attached to other surfaces or to a wall.  A kitchen island may or may not include a sink, stove or other fixtures.
    KitchenIsland,

    /// "[Laminate Counters](https://ddwiki.reso.org/display/DDW17/Laminate+Counters)": The counters are covered with a laminate.
    LaminateCounters,

    /// "[Low Flow Plumbing Fixtures](https://ddwiki.reso.org/display/DDW17/Low+Flow+Plumbing+Fixtures)": Some or all of the fixtures are designed to save water.
    LowFlowPlumbingFixtures,

    /// "[Master Downstairs](https://ddwiki.reso.org/display/DDW17/Master+Downstairs)": There is a master bedroom on the main level of the structure.
    MasterDownstairs,

    /// "[Natural Woodwork](https://ddwiki.reso.org/display/DDW17/Natural+Woodwork)": The property or room has features made from real wood.
    NaturalWoodwork,

    /// "[Open Floorplan](https://ddwiki.reso.org/display/DDW17/Open+Floorplan)": A generic design term for a floor plan that makes use of large open spaces and avoids the use of small enclosed spaces.
    OpenFloorplan,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245130)": The room or interior has features other than those included in this list.
    Other,

    /// "[Pantry](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245131)": A small room or closet where food, dishes and utensils are stored.
    Pantry,

    /// "[Recessed Lighting](https://ddwiki.reso.org/display/DDW17/Recessed+Lighting)": A light fixture installed into a hallow opening in the celling.
    RecessedLighting,

    /// "[Sauna](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245133)": A small room or separate structure designed to produce heat, wet with steam, or dry, to induce perspiration.
    Sauna,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245134)": See the remarks fields for additional information about the room or interior.
    SeeRemarks,

    /// "[Smart Home](https://ddwiki.reso.org/display/DDW17/Smart+Home)": Smart Home features are a generic term for electronic automation of features such as lighting, heating/cooling, security and other amenities.  The features are typically linked though an app or software via one or more third party services. The features are also known for their convenience and energy efficiency.
    SmartHome,

    /// "[Smart Thermostat](https://ddwiki.reso.org/display/DDW17/Smart+Thermostat)": A heating/cooling control unit that has convenience and energy saving aspects.  A smart thermostat may also integrate with a larger smart home system and typically operates through a third party service.
    SmartThermostat,

    /// "[Soaking Tub](https://ddwiki.reso.org/display/DDW17/Soaking+Tub)": A bath tub that is typically deeper and may be shorter than traditional tubs.
    SoakingTub,

    /// "[Solar Tube(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245138)": A reflective tube that extends from a light gathering surface on the roof of the structure down into a room where the outside light is distributed.
    SolarTubes,

    /// "[Sound System](https://ddwiki.reso.org/display/DDW17/Sound+System)": The includes a sound system.  This typically includes in-wall wiring and recessed/built-in speakers and a built in location for the amplifier and other audio equipment.
    SoundSystem,

    /// "[Stone Counters](https://ddwiki.reso.org/display/DDW17/Stone+Counters)": The property or room has counters that are made of some type of stone.
    StoneCounters,

    /// "[Storage](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245141)": The property or room has storage space.
    Storage,

    /// "[Tile Counters](https://ddwiki.reso.org/display/DDW17/Tile+Counters)": The property or room has counters that are made of some type of tile.
    TileCounters,

    /// "[Track Lighting](https://ddwiki.reso.org/display/DDW17/Track+Lighting)": A type of lighting where the light fixtures are mounted on a track allowing for adjustment of the position of the lights.
    TrackLighting,

    /// "[Tray Ceiling(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245144)": A ceiling with a inverted tray or recessed area, often rectangular, that adds depth and interest.
    TrayCeilings,

    /// "[Vaulted Ceiling(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245145)": From the Italian word Volta, is typically a high celling with no attic between the ceiling and the roof.  When a vaulted celling has two angles that meet in the center of the room, you may use Cathedral Ceiling(s).
    VaultedCeilings,

    /// "[Walk-In Closet(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245146)": A closet that is a small room with an entryway.
    WalkInClosets,

    /// "[WaterSense Fixture(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245147)": Water fixtures that are backed by independent, third–party certification and meet EPA’s specifications for water efficiency and performance.
    WaterSenseFixtures,

    /// "[Wet Bar](https://ddwiki.reso.org/display/DDW17/Wet+Bar)": Commonly a built-in fixture for the storage, preparation, serving and/or consumption of drinks that has a faucet and sink.
    WetBar,

    /// "[Wired for Data](https://ddwiki.reso.org/display/DDW17/Wired+for+Data)": The property has been wired for data, typically Category 5 or 6 wiring for the support of ethernet data communications.
    WiredforData,

    /// "[Wired for Sound](https://ddwiki.reso.org/display/DDW17/Wired+for+Sound)": The property has been wired for a built-in sound system.  This typically includes in-wall wiring and recessed/built-in speakers and a location for audio equipment.  The wiring is in place, but equipment may not be included.
    WiredforSound,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for InteriorOrRoomFeatures {
    fn from(s: String) -> InteriorOrRoomFeatures {
        match s.as_ref() {
            "Bar" => InteriorOrRoomFeatures::Bar,

            "Beamed Ceilings" => InteriorOrRoomFeatures::BeamedCeilings,

            "Bidet" => InteriorOrRoomFeatures::Bidet,

            "Bookcases" => InteriorOrRoomFeatures::Bookcases,

            "Breakfast Bar" => InteriorOrRoomFeatures::BreakfastBar,

            "Built-in Features" => InteriorOrRoomFeatures::BuiltinFeatures,

            "Cathedral Ceiling(s)" => InteriorOrRoomFeatures::CathedralCeilings,

            "Cedar Closet(s)" => InteriorOrRoomFeatures::CedarClosets,

            "Ceiling Fan(s)" => InteriorOrRoomFeatures::CeilingFans,

            "Central Vacuum" => InteriorOrRoomFeatures::CentralVacuum,

            "Chandelier" => InteriorOrRoomFeatures::Chandelier,

            "Coffered Ceiling(s)" => InteriorOrRoomFeatures::CofferedCeilings,

            "Crown Molding" => InteriorOrRoomFeatures::CrownMolding,

            "Double Vanity" => InteriorOrRoomFeatures::DoubleVanity,

            "Dry Bar" => InteriorOrRoomFeatures::DryBar,

            "Dumbwaiter" => InteriorOrRoomFeatures::Dumbwaiter,

            "Eat-in Kitchen" => InteriorOrRoomFeatures::EatinKitchen,

            "Elevator" => InteriorOrRoomFeatures::Elevator,

            "Entrance Foyer" => InteriorOrRoomFeatures::EntranceFoyer,

            "Granite Counters" => InteriorOrRoomFeatures::GraniteCounters,

            "High Ceilings" => InteriorOrRoomFeatures::HighCeilings,

            "High Speed Internet" => InteriorOrRoomFeatures::HighSpeedInternet,

            "His and Hers Closets" => InteriorOrRoomFeatures::HisandHersClosets,

            "In-Law Floorplan" => InteriorOrRoomFeatures::InLawFloorplan,

            "Kitchen Island" => InteriorOrRoomFeatures::KitchenIsland,

            "Laminate Counters" => InteriorOrRoomFeatures::LaminateCounters,

            "Low Flow Plumbing Fixtures" => InteriorOrRoomFeatures::LowFlowPlumbingFixtures,

            "Master Downstairs" => InteriorOrRoomFeatures::MasterDownstairs,

            "Natural Woodwork" => InteriorOrRoomFeatures::NaturalWoodwork,

            "Open Floorplan" => InteriorOrRoomFeatures::OpenFloorplan,

            "Other" => InteriorOrRoomFeatures::Other,

            "Pantry" => InteriorOrRoomFeatures::Pantry,

            "Recessed Lighting" => InteriorOrRoomFeatures::RecessedLighting,

            "Sauna" => InteriorOrRoomFeatures::Sauna,

            "See Remarks" => InteriorOrRoomFeatures::SeeRemarks,

            "Smart Home" => InteriorOrRoomFeatures::SmartHome,

            "Smart Thermostat" => InteriorOrRoomFeatures::SmartThermostat,

            "Soaking Tub" => InteriorOrRoomFeatures::SoakingTub,

            "Solar Tube(s)" => InteriorOrRoomFeatures::SolarTubes,

            "Sound System" => InteriorOrRoomFeatures::SoundSystem,

            "Stone Counters" => InteriorOrRoomFeatures::StoneCounters,

            "Storage" => InteriorOrRoomFeatures::Storage,

            "Tile Counters" => InteriorOrRoomFeatures::TileCounters,

            "Track Lighting" => InteriorOrRoomFeatures::TrackLighting,

            "Tray Ceiling(s)" => InteriorOrRoomFeatures::TrayCeilings,

            "Vaulted Ceiling(s)" => InteriorOrRoomFeatures::VaultedCeilings,

            "Walk-In Closet(s)" => InteriorOrRoomFeatures::WalkInClosets,

            "WaterSense Fixture(s)" => InteriorOrRoomFeatures::WaterSenseFixtures,

            "Wet Bar" => InteriorOrRoomFeatures::WetBar,

            "Wired for Data" => InteriorOrRoomFeatures::WiredforData,

            "Wired for Sound" => InteriorOrRoomFeatures::WiredforSound,

            _ => InteriorOrRoomFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for InteriorOrRoomFeatures {
    fn from(s: &str) -> InteriorOrRoomFeatures {
        match s {
            "Bar" => InteriorOrRoomFeatures::Bar,

            "Beamed Ceilings" => InteriorOrRoomFeatures::BeamedCeilings,

            "Bidet" => InteriorOrRoomFeatures::Bidet,

            "Bookcases" => InteriorOrRoomFeatures::Bookcases,

            "Breakfast Bar" => InteriorOrRoomFeatures::BreakfastBar,

            "Built-in Features" => InteriorOrRoomFeatures::BuiltinFeatures,

            "Cathedral Ceiling(s)" => InteriorOrRoomFeatures::CathedralCeilings,

            "Cedar Closet(s)" => InteriorOrRoomFeatures::CedarClosets,

            "Ceiling Fan(s)" => InteriorOrRoomFeatures::CeilingFans,

            "Central Vacuum" => InteriorOrRoomFeatures::CentralVacuum,

            "Chandelier" => InteriorOrRoomFeatures::Chandelier,

            "Coffered Ceiling(s)" => InteriorOrRoomFeatures::CofferedCeilings,

            "Crown Molding" => InteriorOrRoomFeatures::CrownMolding,

            "Double Vanity" => InteriorOrRoomFeatures::DoubleVanity,

            "Dry Bar" => InteriorOrRoomFeatures::DryBar,

            "Dumbwaiter" => InteriorOrRoomFeatures::Dumbwaiter,

            "Eat-in Kitchen" => InteriorOrRoomFeatures::EatinKitchen,

            "Elevator" => InteriorOrRoomFeatures::Elevator,

            "Entrance Foyer" => InteriorOrRoomFeatures::EntranceFoyer,

            "Granite Counters" => InteriorOrRoomFeatures::GraniteCounters,

            "High Ceilings" => InteriorOrRoomFeatures::HighCeilings,

            "High Speed Internet" => InteriorOrRoomFeatures::HighSpeedInternet,

            "His and Hers Closets" => InteriorOrRoomFeatures::HisandHersClosets,

            "In-Law Floorplan" => InteriorOrRoomFeatures::InLawFloorplan,

            "Kitchen Island" => InteriorOrRoomFeatures::KitchenIsland,

            "Laminate Counters" => InteriorOrRoomFeatures::LaminateCounters,

            "Low Flow Plumbing Fixtures" => InteriorOrRoomFeatures::LowFlowPlumbingFixtures,

            "Master Downstairs" => InteriorOrRoomFeatures::MasterDownstairs,

            "Natural Woodwork" => InteriorOrRoomFeatures::NaturalWoodwork,

            "Open Floorplan" => InteriorOrRoomFeatures::OpenFloorplan,

            "Other" => InteriorOrRoomFeatures::Other,

            "Pantry" => InteriorOrRoomFeatures::Pantry,

            "Recessed Lighting" => InteriorOrRoomFeatures::RecessedLighting,

            "Sauna" => InteriorOrRoomFeatures::Sauna,

            "See Remarks" => InteriorOrRoomFeatures::SeeRemarks,

            "Smart Home" => InteriorOrRoomFeatures::SmartHome,

            "Smart Thermostat" => InteriorOrRoomFeatures::SmartThermostat,

            "Soaking Tub" => InteriorOrRoomFeatures::SoakingTub,

            "Solar Tube(s)" => InteriorOrRoomFeatures::SolarTubes,

            "Sound System" => InteriorOrRoomFeatures::SoundSystem,

            "Stone Counters" => InteriorOrRoomFeatures::StoneCounters,

            "Storage" => InteriorOrRoomFeatures::Storage,

            "Tile Counters" => InteriorOrRoomFeatures::TileCounters,

            "Track Lighting" => InteriorOrRoomFeatures::TrackLighting,

            "Tray Ceiling(s)" => InteriorOrRoomFeatures::TrayCeilings,

            "Vaulted Ceiling(s)" => InteriorOrRoomFeatures::VaultedCeilings,

            "Walk-In Closet(s)" => InteriorOrRoomFeatures::WalkInClosets,

            "WaterSense Fixture(s)" => InteriorOrRoomFeatures::WaterSenseFixtures,

            "Wet Bar" => InteriorOrRoomFeatures::WetBar,

            "Wired for Data" => InteriorOrRoomFeatures::WiredforData,

            "Wired for Sound" => InteriorOrRoomFeatures::WiredforSound,

            _ => InteriorOrRoomFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a InteriorOrRoomFeatures> for &'a str {
    fn from(s: &'a InteriorOrRoomFeatures) -> &'a str {
        match s {
            InteriorOrRoomFeatures::Bar => "Bar",

            InteriorOrRoomFeatures::BeamedCeilings => "Beamed Ceilings",

            InteriorOrRoomFeatures::Bidet => "Bidet",

            InteriorOrRoomFeatures::Bookcases => "Bookcases",

            InteriorOrRoomFeatures::BreakfastBar => "Breakfast Bar",

            InteriorOrRoomFeatures::BuiltinFeatures => "Built-in Features",

            InteriorOrRoomFeatures::CathedralCeilings => "Cathedral Ceiling(s)",

            InteriorOrRoomFeatures::CedarClosets => "Cedar Closet(s)",

            InteriorOrRoomFeatures::CeilingFans => "Ceiling Fan(s)",

            InteriorOrRoomFeatures::CentralVacuum => "Central Vacuum",

            InteriorOrRoomFeatures::Chandelier => "Chandelier",

            InteriorOrRoomFeatures::CofferedCeilings => "Coffered Ceiling(s)",

            InteriorOrRoomFeatures::CrownMolding => "Crown Molding",

            InteriorOrRoomFeatures::DoubleVanity => "Double Vanity",

            InteriorOrRoomFeatures::DryBar => "Dry Bar",

            InteriorOrRoomFeatures::Dumbwaiter => "Dumbwaiter",

            InteriorOrRoomFeatures::EatinKitchen => "Eat-in Kitchen",

            InteriorOrRoomFeatures::Elevator => "Elevator",

            InteriorOrRoomFeatures::EntranceFoyer => "Entrance Foyer",

            InteriorOrRoomFeatures::GraniteCounters => "Granite Counters",

            InteriorOrRoomFeatures::HighCeilings => "High Ceilings",

            InteriorOrRoomFeatures::HighSpeedInternet => "High Speed Internet",

            InteriorOrRoomFeatures::HisandHersClosets => "His and Hers Closets",

            InteriorOrRoomFeatures::InLawFloorplan => "In-Law Floorplan",

            InteriorOrRoomFeatures::KitchenIsland => "Kitchen Island",

            InteriorOrRoomFeatures::LaminateCounters => "Laminate Counters",

            InteriorOrRoomFeatures::LowFlowPlumbingFixtures => "Low Flow Plumbing Fixtures",

            InteriorOrRoomFeatures::MasterDownstairs => "Master Downstairs",

            InteriorOrRoomFeatures::NaturalWoodwork => "Natural Woodwork",

            InteriorOrRoomFeatures::OpenFloorplan => "Open Floorplan",

            InteriorOrRoomFeatures::Other => "Other",

            InteriorOrRoomFeatures::Pantry => "Pantry",

            InteriorOrRoomFeatures::RecessedLighting => "Recessed Lighting",

            InteriorOrRoomFeatures::Sauna => "Sauna",

            InteriorOrRoomFeatures::SeeRemarks => "See Remarks",

            InteriorOrRoomFeatures::SmartHome => "Smart Home",

            InteriorOrRoomFeatures::SmartThermostat => "Smart Thermostat",

            InteriorOrRoomFeatures::SoakingTub => "Soaking Tub",

            InteriorOrRoomFeatures::SolarTubes => "Solar Tube(s)",

            InteriorOrRoomFeatures::SoundSystem => "Sound System",

            InteriorOrRoomFeatures::StoneCounters => "Stone Counters",

            InteriorOrRoomFeatures::Storage => "Storage",

            InteriorOrRoomFeatures::TileCounters => "Tile Counters",

            InteriorOrRoomFeatures::TrackLighting => "Track Lighting",

            InteriorOrRoomFeatures::TrayCeilings => "Tray Ceiling(s)",

            InteriorOrRoomFeatures::VaultedCeilings => "Vaulted Ceiling(s)",

            InteriorOrRoomFeatures::WalkInClosets => "Walk-In Closet(s)",

            InteriorOrRoomFeatures::WaterSenseFixtures => "WaterSense Fixture(s)",

            InteriorOrRoomFeatures::WetBar => "Wet Bar",

            InteriorOrRoomFeatures::WiredforData => "Wired for Data",

            InteriorOrRoomFeatures::WiredforSound => "Wired for Sound",

            InteriorOrRoomFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for InteriorOrRoomFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for InteriorOrRoomFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_interior_or_room_features_format {
    use super::InteriorOrRoomFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<InteriorOrRoomFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<InteriorOrRoomFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [LaborInformation Lookups](https://ddwiki.reso.org/display/DDW17/LaborInformation+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum LaborInformation {
    /// "[Employee License Required](https://ddwiki.reso.org/display/DDW17/Employee+License+Required)": Special licensing is required for employees.
    EmployeeLicenseRequired,

    /// "[Non-Union](https://ddwiki.reso.org/display/DDW17/Non-Union)": A labor union(s) are not currently established with the given business.
    NonUnion,

    /// "[Union](https://ddwiki.reso.org/display/DDW17/Union)": A labor union(s) are established with the given business.
    Union,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for LaborInformation {
    fn from(s: String) -> LaborInformation {
        match s.as_ref() {
            "Employee License Required" => LaborInformation::EmployeeLicenseRequired,

            "Non-Union" => LaborInformation::NonUnion,

            "Union" => LaborInformation::Union,

            _ => LaborInformation::OpenEnumeration(s),
        }
    }
}

impl From<&str> for LaborInformation {
    fn from(s: &str) -> LaborInformation {
        match s {
            "Employee License Required" => LaborInformation::EmployeeLicenseRequired,

            "Non-Union" => LaborInformation::NonUnion,

            "Union" => LaborInformation::Union,

            _ => LaborInformation::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a LaborInformation> for &'a str {
    fn from(s: &'a LaborInformation) -> &'a str {
        match s {
            LaborInformation::EmployeeLicenseRequired => "Employee License Required",

            LaborInformation::NonUnion => "Non-Union",

            LaborInformation::Union => "Union",

            LaborInformation::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for LaborInformation {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for LaborInformation {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_labor_information_format {
    use super::LaborInformation;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<LaborInformation>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<LaborInformation>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Languages Lookups](https://ddwiki.reso.org/display/DDW17/Languages+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Languages {
    /// "[Abkhazian](https://ddwiki.reso.org/display/DDW17/Abkhazian)": The language spoken by the member/individual is Abkhazian.
    Abkhazian,

    /// "[Afar](https://ddwiki.reso.org/display/DDW17/Afar)": The language spoken by the member/individual is Afar.
    Afar,

    /// "[Afrikaans](https://ddwiki.reso.org/display/DDW17/Afrikaans)": The language spoken by the member/individual is Afrikaans.
    Afrikaans,

    /// "[Albanian](https://ddwiki.reso.org/display/DDW17/Albanian)": The language spoken by the member/individual is Albanian.
    Albanian,

    /// "[American Sign Language](https://ddwiki.reso.org/display/DDW17/American+Sign+Language)": The language spoken by the member/individual is American Sign Language.
    AmericanSignLanguage,

    /// "[Amharic](https://ddwiki.reso.org/display/DDW17/Amharic)": The language spoken by the member/individual is Amharic.
    Amharic,

    /// "[Arabic](https://ddwiki.reso.org/display/DDW17/Arabic)": The language spoken by the member/individual is Arabic.
    Arabic,

    /// "[Aramaic](https://ddwiki.reso.org/display/DDW17/Aramaic)": The language spoken by the member/individual is Aramaic.
    Aramaic,

    /// "[Armenian](https://ddwiki.reso.org/display/DDW17/Armenian)": The language spoken by the member/individual is Armenian.
    Armenian,

    /// "[Assamese](https://ddwiki.reso.org/display/DDW17/Assamese)": The language spoken by the member/individual is Assamese.
    Assamese,

    /// "[Assyrian Neo-Aramaic](https://ddwiki.reso.org/display/DDW17/Assyrian+Neo-Aramaic)": The language spoken by the member/individual is Assyrian Neo-Aramaic.
    AssyrianNeoAramaic,

    /// "[Avestan](https://ddwiki.reso.org/display/DDW17/Avestan)": The language spoken by the member/individual is Avestan.
    Avestan,

    /// "[Aymara](https://ddwiki.reso.org/display/DDW17/Aymara)": The language spoken by the member/individual is Aymara.
    Aymara,

    /// "[Azerbaijani](https://ddwiki.reso.org/display/DDW17/Azerbaijani)": The language spoken by the member/individual is Azerbaijani.
    Azerbaijani,

    /// "[Bambara](https://ddwiki.reso.org/display/DDW17/Bambara)": The language spoken by the member/individual is Bambara.
    Bambara,

    /// "[Bashkir](https://ddwiki.reso.org/display/DDW17/Bashkir)": The language spoken by the member/individual is Bashkir.
    Bashkir,

    /// "[Basque](https://ddwiki.reso.org/display/DDW17/Basque)": The language spoken by the member/individual is Basque.
    Basque,

    /// "[Bengali](https://ddwiki.reso.org/display/DDW17/Bengali)": The language spoken by the member/individual is Bengali.
    Bengali,

    /// "[Bihari](https://ddwiki.reso.org/display/DDW17/Bihari)": The language spoken by the member/individual is Bihari.
    Bihari,

    /// "[Bikol](https://ddwiki.reso.org/display/DDW17/Bikol)": The language spoken by the member/individual is Bikol.
    Bikol,

    /// "[Bislama](https://ddwiki.reso.org/display/DDW17/Bislama)": The language spoken by the member/individual is Bislama.
    Bislama,

    /// "[Bosnian](https://ddwiki.reso.org/display/DDW17/Bosnian)": The language spoken by the member/individual is Bosnian.
    Bosnian,

    /// "[Brazilian Portuguese](https://ddwiki.reso.org/display/DDW17/Brazilian+Portuguese)": The language spoken by the member/individual is Brazilian Portuguese.
    BrazilianPortuguese,

    /// "[Bulgarian](https://ddwiki.reso.org/display/DDW17/Bulgarian)": The language spoken by the member/individual is Bulgarian.
    Bulgarian,

    /// "[Burmese](https://ddwiki.reso.org/display/DDW17/Burmese)": The language spoken by the member/individual is Burmese.
    Burmese,

    /// "[Byelorussian](https://ddwiki.reso.org/display/DDW17/Byelorussian)": The language spoken by the member/individual is Byelorussian.
    Byelorussian,

    /// "[Cambodian](https://ddwiki.reso.org/display/DDW17/Cambodian)": The language spoken by the member/individual is Cambodian.
    Cambodian,

    /// "[Cantonese](https://ddwiki.reso.org/display/DDW17/Cantonese)": The language spoken by the member/individual is Cantonese.
    Cantonese,

    /// "[Cape Verdean Creole](https://ddwiki.reso.org/display/DDW17/Cape+Verdean+Creole)": The language spoken by the member/individual is Cape Verdean Creole.
    CapeVerdeanCreole,

    /// "[Catalan](https://ddwiki.reso.org/display/DDW17/Catalan)": The language spoken by the member/individual is Catalan.
    Catalan,

    /// "[Cebuano](https://ddwiki.reso.org/display/DDW17/Cebuano)": The language spoken by the member/individual is Cebuano.
    Cebuano,

    /// "[Chamorro](https://ddwiki.reso.org/display/DDW17/Chamorro)": The language spoken by the member/individual is Chamorro.
    Chamorro,

    /// "[Chechen](https://ddwiki.reso.org/display/DDW17/Chechen)": The language spoken by the member/individual is Chechen.
    Chechen,

    /// "[Chinese](https://ddwiki.reso.org/display/DDW17/Chinese)": The language spoken by the member/individual is Chinese.
    Chinese,

    /// "[Chuukese](https://ddwiki.reso.org/display/DDW17/Chuukese)": The language spoken by the member/individual is Chuukese.
    Chuukese,

    /// "[Chuvash](https://ddwiki.reso.org/display/DDW17/Chuvash)": The language spoken by the member/individual is Chuvash.
    Chuvash,

    /// "[Cornish](https://ddwiki.reso.org/display/DDW17/Cornish)": The language spoken by the member/individual is Cornish.
    Cornish,

    /// "[Corsican](https://ddwiki.reso.org/display/DDW17/Corsican)": The language spoken by the member/individual is Corsican.
    Corsican,

    /// "[Croatian](https://ddwiki.reso.org/display/DDW17/Croatian)": The language spoken by the member/individual is Croatian.
    Croatian,

    /// "[Czech](https://ddwiki.reso.org/display/DDW17/Czech)": The language spoken by the member/individual is Czech.
    Czech,

    /// "[Danish](https://ddwiki.reso.org/display/DDW17/Danish)": The language spoken by the member/individual is Danish.
    Danish,

    /// "[Dari (Afghan Persian)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245194)": The language spoken by the member/individual is Dari (Afghan Persian).
    DariAfghanPersian,

    /// "[Dioula](https://ddwiki.reso.org/display/DDW17/Dioula)": The language spoken by the member/individual is Dioula.
    Dioula,

    /// "[Dutch](https://ddwiki.reso.org/display/DDW17/Dutch)": The language spoken by the member/individual is Dutch.
    Dutch,

    /// "[Dzongkha](https://ddwiki.reso.org/display/DDW17/Dzongkha)": The language spoken by the member/individual is Dzongkha.
    Dzongkha,

    /// "[English](https://ddwiki.reso.org/display/DDW17/English)": The language spoken by the member/individual is English.
    English,

    /// "[Esperanto](https://ddwiki.reso.org/display/DDW17/Esperanto)": The language spoken by the member/individual is Esperanto.
    Esperanto,

    /// "[Estonian](https://ddwiki.reso.org/display/DDW17/Estonian)": The language spoken by the member/individual is Estonian.
    Estonian,

    /// "[Faroese](https://ddwiki.reso.org/display/DDW17/Faroese)": The language spoken by the member/individual is Faroese.
    Faroese,

    /// "[Farsi](https://ddwiki.reso.org/display/DDW17/Farsi)": The language spoken by the member/individual is Farsi.
    Farsi,

    /// "[Fiji](https://ddwiki.reso.org/display/DDW17/Fiji)": The language spoken by the member/individual is Fiji.
    Fiji,

    /// "[Finnish](https://ddwiki.reso.org/display/DDW17/Finnish)": The language spoken by the member/individual is Finnish.
    Finnish,

    /// "[Flemish](https://ddwiki.reso.org/display/DDW17/Flemish)": The language spoken by the member/individual is Flemish.
    Flemish,

    /// "[French](https://ddwiki.reso.org/display/DDW17/French)": The language spoken by the member/individual is French.
    French,

    /// "[Frisian](https://ddwiki.reso.org/display/DDW17/Frisian)": The language spoken by the member/individual is Frisian.
    Frisian,

    /// "[Galician](https://ddwiki.reso.org/display/DDW17/Galician)": The language spoken by the member/individual is Galician.
    Galician,

    /// "[Georgian](https://ddwiki.reso.org/display/DDW17/Georgian)": The language spoken by the member/individual is Georgian.
    Georgian,

    /// "[German](https://ddwiki.reso.org/display/DDW17/German)": The language spoken by the member/individual is German.
    German,

    /// "[Greek](https://ddwiki.reso.org/display/DDW17/Greek)": The language spoken by the member/individual is Greek.
    Greek,

    /// "[Greenlandic](https://ddwiki.reso.org/display/DDW17/Greenlandic)": The language spoken by the member/individual is Greenlandic.
    Greenlandic,

    /// "[Guarani](https://ddwiki.reso.org/display/DDW17/Guarani)": The language spoken by the member/individual is Guarani.
    Guarani,

    /// "[Gujarati](https://ddwiki.reso.org/display/DDW17/Gujarati)": The language spoken by the member/individual is Gujarati.
    Gujarati,

    /// "[Haitian Creole](https://ddwiki.reso.org/display/DDW17/Haitian+Creole)": The language spoken by the member/individual is Haitian Creole.
    HaitianCreole,

    /// "[Hausa](https://ddwiki.reso.org/display/DDW17/Hausa)": The language spoken by the member/individual is Hausa.
    Hausa,

    /// "[Hebrew](https://ddwiki.reso.org/display/DDW17/Hebrew)": The language spoken by the member/individual is Hebrew.
    Hebrew,

    /// "[Herero](https://ddwiki.reso.org/display/DDW17/Herero)": The language spoken by the member/individual is Herero.
    Herero,

    /// "[Hiligaynon](https://ddwiki.reso.org/display/DDW17/Hiligaynon)": The language spoken by the member/individual is Hiligaynon.
    Hiligaynon,

    /// "[Hindi](https://ddwiki.reso.org/display/DDW17/Hindi)": The language spoken by the member/individual is Hindi.
    Hindi,

    /// "[Hiri Motu](https://ddwiki.reso.org/display/DDW17/Hiri+Motu)": The language spoken by the member/individual is Hiri Motu.
    HiriMotu,

    /// "[Hmong](https://ddwiki.reso.org/display/DDW17/Hmong)": The language spoken by the member/individual is Hmong.
    Hmong,

    /// "[Hungarian](https://ddwiki.reso.org/display/DDW17/Hungarian)": The language spoken by the member/individual is Hungarian.
    Hungarian,

    /// "[Iban](https://ddwiki.reso.org/display/DDW17/Iban)": The language spoken by the member/individual is Iban.
    Iban,

    /// "[Icelandic](https://ddwiki.reso.org/display/DDW17/Icelandic)": The language spoken by the member/individual is Icelandic.
    Icelandic,

    /// "[Igbo](https://ddwiki.reso.org/display/DDW17/Igbo)": The language spoken by the member/individual is Igbo.
    Igbo,

    /// "[Ilocano](https://ddwiki.reso.org/display/DDW17/Ilocano)": The language spoken by the member/individual is Ilocano.
    Ilocano,

    /// "[Indonesian](https://ddwiki.reso.org/display/DDW17/Indonesian)": The language spoken by the member/individual is Indonesian.
    Indonesian,

    /// "[Interlingua](https://ddwiki.reso.org/display/DDW17/Interlingua)": The language spoken by the member/individual is Interlingua.
    Interlingua,

    /// "[Inuktitut](https://ddwiki.reso.org/display/DDW17/Inuktitut)": The language spoken by the member/individual is Inuktitut.
    Inuktitut,

    /// "[Inupiak](https://ddwiki.reso.org/display/DDW17/Inupiak)": The language spoken by the member/individual is Inupiak.
    Inupiak,

    /// "[Irish (Gaelic)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245232)": The language spoken by the member/individual is Irish (Gaelic).
    IrishGaelic,

    /// "[Italian](https://ddwiki.reso.org/display/DDW17/Italian)": The language spoken by the member/individual is Italian.
    Italian,

    /// "[Japanese](https://ddwiki.reso.org/display/DDW17/Japanese)": The language spoken by the member/individual is Japanese.
    Japanese,

    /// "[Javanese](https://ddwiki.reso.org/display/DDW17/Javanese)": The language spoken by the member/individual is Javanese.
    Javanese,

    /// "[K'iche'](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245239)": The language spoken by the member/individual is K'iche'.
    Kiche,

    /// "[Kannada](https://ddwiki.reso.org/display/DDW17/Kannada)": The language spoken by the member/individual is Kannada.
    Kannada,

    /// "[Kashmiri](https://ddwiki.reso.org/display/DDW17/Kashmiri)": The language spoken by the member/individual is Kashmiri.
    Kashmiri,

    /// "[Kazakh](https://ddwiki.reso.org/display/DDW17/Kazakh)": The language spoken by the member/individual is Kazakh.
    Kazakh,

    /// "[Kichwa](https://ddwiki.reso.org/display/DDW17/Kichwa)": The language spoken by the member/individual is Kichwa.
    Kichwa,

    /// "[Kikuyu](https://ddwiki.reso.org/display/DDW17/Kikuyu)": The language spoken by the member/individual is Kikuyu.
    Kikuyu,

    /// "[Kinyarwanda](https://ddwiki.reso.org/display/DDW17/Kinyarwanda)": The language spoken by the member/individual is Kinyarwanda.
    Kinyarwanda,

    /// "[Kirghiz](https://ddwiki.reso.org/display/DDW17/Kirghiz)": The language spoken by the member/individual is Kirghiz.
    Kirghiz,

    /// "[Kirundi](https://ddwiki.reso.org/display/DDW17/Kirundi)": The language spoken by the member/individual is Kirundi.
    Kirundi,

    /// "[Komi](https://ddwiki.reso.org/display/DDW17/Komi)": The language spoken by the member/individual is Komi.
    Komi,

    /// "[Korean](https://ddwiki.reso.org/display/DDW17/Korean)": The language spoken by the member/individual is Korean.
    Korean,

    /// "[Kpelle](https://ddwiki.reso.org/display/DDW17/Kpelle)": The language spoken by the member/individual is Kpelle.
    Kpelle,

    /// "[Kru](https://ddwiki.reso.org/display/DDW17/Kru)": The language spoken by the member/individual is Kru.
    Kru,

    /// "[Kurdish](https://ddwiki.reso.org/display/DDW17/Kurdish)": The language spoken by the member/individual is Kurdish.
    Kurdish,

    /// "[Lao](https://ddwiki.reso.org/display/DDW17/Lao)": The language spoken by the member/individual is Lao.
    Lao,

    /// "[Latin](https://ddwiki.reso.org/display/DDW17/Latin)": The language spoken by the member/individual is Latin.
    Latin,

    /// "[Latvian](https://ddwiki.reso.org/display/DDW17/Latvian)": The language spoken by the member/individual is Latvian.
    Latvian,

    /// "[Lingala](https://ddwiki.reso.org/display/DDW17/Lingala)": The language spoken by the member/individual is Lingala.
    Lingala,

    /// "[Lithuanian](https://ddwiki.reso.org/display/DDW17/Lithuanian)": The language spoken by the member/individual is Lithuanian.
    Lithuanian,

    /// "[Luxemburgish](https://ddwiki.reso.org/display/DDW17/Luxemburgish)": The language spoken by the member/individual is Luxemburgish.
    Luxemburgish,

    /// "[Macedonian](https://ddwiki.reso.org/display/DDW17/Macedonian)": The language spoken by the member/individual is Macedonian.
    Macedonian,

    /// "[Malagasy](https://ddwiki.reso.org/display/DDW17/Malagasy)": The language spoken by the member/individual is Malagasy.
    Malagasy,

    /// "[Malay](https://ddwiki.reso.org/display/DDW17/Malay)": The language spoken by the member/individual is Malay.
    Malay,

    /// "[Malayalam](https://ddwiki.reso.org/display/DDW17/Malayalam)": The language spoken by the member/individual is Malayalam.
    Malayalam,

    /// "[Maltese](https://ddwiki.reso.org/display/DDW17/Maltese)": The language spoken by the member/individual is Maltese.
    Maltese,

    /// "[Mandarin](https://ddwiki.reso.org/display/DDW17/Mandarin)": The language spoken by the member/individual is Mandarin.
    Mandarin,

    /// "[Maninka](https://ddwiki.reso.org/display/DDW17/Maninka)": The language spoken by the member/individual is Maninka.
    Maninka,

    /// "[Manx Gaelic](https://ddwiki.reso.org/display/DDW17/Manx+Gaelic)": The language spoken by the member/individual is Manx Gaelic.
    ManxGaelic,

    /// "[Maori](https://ddwiki.reso.org/display/DDW17/Maori)": The language spoken by the member/individual is Maori.
    Maori,

    /// "[Marathi](https://ddwiki.reso.org/display/DDW17/Marathi)": The language spoken by the member/individual is Marathi.
    Marathi,

    /// "[Marshallese](https://ddwiki.reso.org/display/DDW17/Marshallese)": The language spoken by the member/individual is Marshallese.
    Marshallese,

    /// "[Moldovan](https://ddwiki.reso.org/display/DDW17/Moldovan)": The language spoken by the member/individual is Moldovan.
    Moldovan,

    /// "[Mongolian](https://ddwiki.reso.org/display/DDW17/Mongolian)": The language spoken by the member/individual is Mongolian.
    Mongolian,

    /// "[Nauru](https://ddwiki.reso.org/display/DDW17/Nauru)": The language spoken by the member/individual is Nauru.
    Nauru,

    /// "[Navajo](https://ddwiki.reso.org/display/DDW17/Navajo)": The language spoken by the member/individual is Navajo.
    Navajo,

    /// "[Ndebele](https://ddwiki.reso.org/display/DDW17/Ndebele)": The language spoken by the member/individual is Ndebele.
    Ndebele,

    /// "[Ndonga](https://ddwiki.reso.org/display/DDW17/Ndonga)": The language spoken by the member/individual is Ndonga.
    Ndonga,

    /// "[Nepali](https://ddwiki.reso.org/display/DDW17/Nepali)": The language spoken by the member/individual is Nepali.
    Nepali,

    /// "[Norwegian](https://ddwiki.reso.org/display/DDW17/Norwegian)": The language spoken by the member/individual is Norwegian.
    Norwegian,

    /// "[Norwegian (Nynorsk)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245275)": The language spoken by the member/individual is Norwegian (Nynorsk).
    NorwegianNynorsk,

    /// "[Nyanja](https://ddwiki.reso.org/display/DDW17/Nyanja)": The language spoken by the member/individual is Nyanja.
    Nyanja,

    /// "[Occitan](https://ddwiki.reso.org/display/DDW17/Occitan)": The language spoken by the member/individual is Occitan.
    Occitan,

    /// "[Oriya](https://ddwiki.reso.org/display/DDW17/Oriya)": The language spoken by the member/individual is Oriya.
    Oriya,

    /// "[Oromo](https://ddwiki.reso.org/display/DDW17/Oromo)": The language spoken by the member/individual is Oromo.
    Oromo,

    /// "[Ossetian](https://ddwiki.reso.org/display/DDW17/Ossetian)": The language spoken by the member/individual is Ossetian.
    Ossetian,

    /// "[Pali](https://ddwiki.reso.org/display/DDW17/Pali)": The language spoken by the member/individual is Pali.
    Pali,

    /// "[Pangasinan](https://ddwiki.reso.org/display/DDW17/Pangasinan)": The language spoken by the member/individual is Pangasinan.
    Pangasinan,

    /// "[Papiamento](https://ddwiki.reso.org/display/DDW17/Papiamento)": The language spoken by the member/individual is Papiamento.
    Papiamento,

    /// "[Pashto](https://ddwiki.reso.org/display/DDW17/Pashto)": The language spoken by the member/individual is Pashto.
    Pashto,

    /// "[Polish](https://ddwiki.reso.org/display/DDW17/Polish)": The language spoken by the member/individual is Polish.
    Polish,

    /// "[Portuguese](https://ddwiki.reso.org/display/DDW17/Portuguese)": The language spoken by the member/individual is Portuguese.
    Portuguese,

    /// "[Punjabi](https://ddwiki.reso.org/display/DDW17/Punjabi)": The language spoken by the member/individual is Punjabi.
    Punjabi,

    /// "[Quechua](https://ddwiki.reso.org/display/DDW17/Quechua)": The language spoken by the member/individual is Quechua.
    Quechua,

    /// "[Romanian](https://ddwiki.reso.org/display/DDW17/Romanian)": The language spoken by the member/individual is Romanian.
    Romanian,

    /// "[Romany](https://ddwiki.reso.org/display/DDW17/Romany)": The language spoken by the member/individual is Romany.
    Romany,

    /// "[Russian](https://ddwiki.reso.org/display/DDW17/Russian)": The language spoken by the member/individual is Russian.
    Russian,

    /// "[Sami](https://ddwiki.reso.org/display/DDW17/Sami)": The language spoken by the member/individual is Sami.
    Sami,

    /// "[Samoan](https://ddwiki.reso.org/display/DDW17/Samoan)": The language spoken by the member/individual is Samoan.
    Samoan,

    /// "[Sangho](https://ddwiki.reso.org/display/DDW17/Sangho)": The language spoken by the member/individual is Sangho.
    Sangho,

    /// "[Sanskrit](https://ddwiki.reso.org/display/DDW17/Sanskrit)": The language spoken by the member/individual is Sanskrit.
    Sanskrit,

    /// "[Sardinian](https://ddwiki.reso.org/display/DDW17/Sardinian)": The language spoken by the member/individual is Sardinian.
    Sardinian,

    /// "[Scots Gaelic](https://ddwiki.reso.org/display/DDW17/Scots+Gaelic)": The language spoken by the member/individual is Scots Gaelic.
    ScotsGaelic,

    /// "[Serbian](https://ddwiki.reso.org/display/DDW17/Serbian)": The language spoken by the member/individual is Serbian.
    Serbian,

    /// "[Serbo-Croatian](https://ddwiki.reso.org/display/DDW17/Serbo-Croatian)": The language spoken by the member/individual is Serbo-Croatian.
    SerboCroatian,

    /// "[Sesotho](https://ddwiki.reso.org/display/DDW17/Sesotho)": The language spoken by the member/individual is Sesotho.
    Sesotho,

    /// "[Setswana](https://ddwiki.reso.org/display/DDW17/Setswana)": The language spoken by the member/individual is Setswana.
    Setswana,

    /// "[Shan](https://ddwiki.reso.org/display/DDW17/Shan)": The language spoken by the member/individual is Shan.
    Shan,

    /// "[Shona](https://ddwiki.reso.org/display/DDW17/Shona)": The language spoken by the member/individual is Shona.
    Shona,

    /// "[Sindhi](https://ddwiki.reso.org/display/DDW17/Sindhi)": The language spoken by the member/individual is Sindhi.
    Sindhi,

    /// "[Sinhalese](https://ddwiki.reso.org/display/DDW17/Sinhalese)": The language spoken by the member/individual is Sinhalese.
    Sinhalese,

    /// "[Siswati](https://ddwiki.reso.org/display/DDW17/Siswati)": The language spoken by the member/individual is Siswati.
    Siswati,

    /// "[Slovak](https://ddwiki.reso.org/display/DDW17/Slovak)": The language spoken by the member/individual is Slovak.
    Slovak,

    /// "[Slovenian](https://ddwiki.reso.org/display/DDW17/Slovenian)": The language spoken by the member/individual is Slovenian.
    Slovenian,

    /// "[Somali](https://ddwiki.reso.org/display/DDW17/Somali)": The language spoken by the member/individual is Somali.
    Somali,

    /// "[Southern Ndebele](https://ddwiki.reso.org/display/DDW17/Southern+Ndebele)": The language spoken by the member/individual is Southern Ndebele.
    SouthernNdebele,

    /// "[Spanish](https://ddwiki.reso.org/display/DDW17/Spanish)": The language spoken by the member/individual is Spanish.
    Spanish,

    /// "[Sundanese](https://ddwiki.reso.org/display/DDW17/Sundanese)": The language spoken by the member/individual is Sundanese.
    Sundanese,

    /// "[Swahili](https://ddwiki.reso.org/display/DDW17/Swahili)": The language spoken by the member/individual is Swahili.
    Swahili,

    /// "[Swedish](https://ddwiki.reso.org/display/DDW17/Swedish)": The language spoken by the member/individual is Swedish.
    Swedish,

    /// "[Syriac](https://ddwiki.reso.org/display/DDW17/Syriac)": The language spoken by the member/individual is Syriac.
    Syriac,

    /// "[Tagalog](https://ddwiki.reso.org/display/DDW17/Tagalog)": The language spoken by the member/individual is Tagalog.
    Tagalog,

    /// "[Tahitian](https://ddwiki.reso.org/display/DDW17/Tahitian)": The language spoken by the member/individual is Tahitian.
    Tahitian,

    /// "[Tajik](https://ddwiki.reso.org/display/DDW17/Tajik)": The language spoken by the member/individual is Tajik.
    Tajik,

    /// "[Tamil](https://ddwiki.reso.org/display/DDW17/Tamil)": The language spoken by the member/individual is Tamil.
    Tamil,

    /// "[Tatar](https://ddwiki.reso.org/display/DDW17/Tatar)": The language spoken by the member/individual is Tatar.
    Tatar,

    /// "[Telugu](https://ddwiki.reso.org/display/DDW17/Telugu)": The language spoken by the member/individual is Telugu.
    Telugu,

    /// "[Thai](https://ddwiki.reso.org/display/DDW17/Thai)": The language spoken by the member/individual is Thai.
    Thai,

    /// "[Tibetan](https://ddwiki.reso.org/display/DDW17/Tibetan)": The language spoken by the member/individual is Tibetan.
    Tibetan,

    /// "[Tigrinya](https://ddwiki.reso.org/display/DDW17/Tigrinya)": The language spoken by the member/individual is Tigrinya.
    Tigrinya,

    /// "[Tongan](https://ddwiki.reso.org/display/DDW17/Tongan)": The language spoken by the member/individual is Tongan.
    Tongan,

    /// "[Tsonga](https://ddwiki.reso.org/display/DDW17/Tsonga)": The language spoken by the member/individual is Tsonga.
    Tsonga,

    /// "[Turkish](https://ddwiki.reso.org/display/DDW17/Turkish)": The language spoken by the member/individual is Turkish.
    Turkish,

    /// "[Turkmen](https://ddwiki.reso.org/display/DDW17/Turkmen)": The language spoken by the member/individual is Turkmen.
    Turkmen,

    /// "[Twi](https://ddwiki.reso.org/display/DDW17/Twi)": The language spoken by the member/individual is Twi.
    Twi,

    /// "[Uigur](https://ddwiki.reso.org/display/DDW17/Uigur)": The language spoken by the member/individual is Uigur.
    Uigur,

    /// "[Ukrainian](https://ddwiki.reso.org/display/DDW17/Ukrainian)": The language spoken by the member/individual is Ukrainian.
    Ukrainian,

    /// "[Urdu](https://ddwiki.reso.org/display/DDW17/Urdu)": The language spoken by the member/individual is Urdu.
    Urdu,

    /// "[Uzbek](https://ddwiki.reso.org/display/DDW17/Uzbek)": The language spoken by the member/individual is Uzbek.
    Uzbek,

    /// "[Vietnamese](https://ddwiki.reso.org/display/DDW17/Vietnamese)": The language spoken by the member/individual is Vietnamese.
    Vietnamese,

    /// "[Volapuk](https://ddwiki.reso.org/display/DDW17/Volapuk)": The language spoken by the member/individual is Volapuk.
    Volapuk,

    /// "[Welsh](https://ddwiki.reso.org/display/DDW17/Welsh)": The language spoken by the member/individual is Welsh.
    Welsh,

    /// "[Wolof](https://ddwiki.reso.org/display/DDW17/Wolof)": The language spoken by the member/individual is Wolof.
    Wolof,

    /// "[Xhosa](https://ddwiki.reso.org/display/DDW17/Xhosa)": The language spoken by the member/individual is Xhosa.
    Xhosa,

    /// "[Yiddish](https://ddwiki.reso.org/display/DDW17/Yiddish)": The language spoken by the member/individual is Yiddish.
    Yiddish,

    /// "[Yoruba](https://ddwiki.reso.org/display/DDW17/Yoruba)": The language spoken by the member/individual is Yoruba.
    Yoruba,

    /// "[Zhuang](https://ddwiki.reso.org/display/DDW17/Zhuang)": The language spoken by the member/individual is Zhuang.
    Zhuang,

    /// "[Zulu](https://ddwiki.reso.org/display/DDW17/Zulu)": The language spoken by the member/individual is Zulu.
    Zulu,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Languages {
    fn from(s: String) -> Languages {
        match s.as_ref() {
            "Abkhazian" => Languages::Abkhazian,

            "Afar" => Languages::Afar,

            "Afrikaans" => Languages::Afrikaans,

            "Albanian" => Languages::Albanian,

            "American Sign Language" => Languages::AmericanSignLanguage,

            "Amharic" => Languages::Amharic,

            "Arabic" => Languages::Arabic,

            "Aramaic" => Languages::Aramaic,

            "Armenian" => Languages::Armenian,

            "Assamese" => Languages::Assamese,

            "Assyrian Neo-Aramaic" => Languages::AssyrianNeoAramaic,

            "Avestan" => Languages::Avestan,

            "Aymara" => Languages::Aymara,

            "Azerbaijani" => Languages::Azerbaijani,

            "Bambara" => Languages::Bambara,

            "Bashkir" => Languages::Bashkir,

            "Basque" => Languages::Basque,

            "Bengali" => Languages::Bengali,

            "Bihari" => Languages::Bihari,

            "Bikol" => Languages::Bikol,

            "Bislama" => Languages::Bislama,

            "Bosnian" => Languages::Bosnian,

            "Brazilian Portuguese" => Languages::BrazilianPortuguese,

            "Bulgarian" => Languages::Bulgarian,

            "Burmese" => Languages::Burmese,

            "Byelorussian" => Languages::Byelorussian,

            "Cambodian" => Languages::Cambodian,

            "Cantonese" => Languages::Cantonese,

            "Cape Verdean Creole" => Languages::CapeVerdeanCreole,

            "Catalan" => Languages::Catalan,

            "Cebuano" => Languages::Cebuano,

            "Chamorro" => Languages::Chamorro,

            "Chechen" => Languages::Chechen,

            "Chinese" => Languages::Chinese,

            "Chuukese" => Languages::Chuukese,

            "Chuvash" => Languages::Chuvash,

            "Cornish" => Languages::Cornish,

            "Corsican" => Languages::Corsican,

            "Croatian" => Languages::Croatian,

            "Czech" => Languages::Czech,

            "Danish" => Languages::Danish,

            "Dari (Afghan Persian)" => Languages::DariAfghanPersian,

            "Dioula" => Languages::Dioula,

            "Dutch" => Languages::Dutch,

            "Dzongkha" => Languages::Dzongkha,

            "English" => Languages::English,

            "Esperanto" => Languages::Esperanto,

            "Estonian" => Languages::Estonian,

            "Faroese" => Languages::Faroese,

            "Farsi" => Languages::Farsi,

            "Fiji" => Languages::Fiji,

            "Finnish" => Languages::Finnish,

            "Flemish" => Languages::Flemish,

            "French" => Languages::French,

            "Frisian" => Languages::Frisian,

            "Galician" => Languages::Galician,

            "Georgian" => Languages::Georgian,

            "German" => Languages::German,

            "Greek" => Languages::Greek,

            "Greenlandic" => Languages::Greenlandic,

            "Guarani" => Languages::Guarani,

            "Gujarati" => Languages::Gujarati,

            "Haitian Creole" => Languages::HaitianCreole,

            "Hausa" => Languages::Hausa,

            "Hebrew" => Languages::Hebrew,

            "Herero" => Languages::Herero,

            "Hiligaynon" => Languages::Hiligaynon,

            "Hindi" => Languages::Hindi,

            "Hiri Motu" => Languages::HiriMotu,

            "Hmong" => Languages::Hmong,

            "Hungarian" => Languages::Hungarian,

            "Iban" => Languages::Iban,

            "Icelandic" => Languages::Icelandic,

            "Igbo" => Languages::Igbo,

            "Ilocano" => Languages::Ilocano,

            "Indonesian" => Languages::Indonesian,

            "Interlingua" => Languages::Interlingua,

            "Inuktitut" => Languages::Inuktitut,

            "Inupiak" => Languages::Inupiak,

            "Irish (Gaelic)" => Languages::IrishGaelic,

            "Italian" => Languages::Italian,

            "Japanese" => Languages::Japanese,

            "Javanese" => Languages::Javanese,

            "K'iche'" => Languages::Kiche,

            "Kannada" => Languages::Kannada,

            "Kashmiri" => Languages::Kashmiri,

            "Kazakh" => Languages::Kazakh,

            "Kichwa" => Languages::Kichwa,

            "Kikuyu" => Languages::Kikuyu,

            "Kinyarwanda" => Languages::Kinyarwanda,

            "Kirghiz" => Languages::Kirghiz,

            "Kirundi" => Languages::Kirundi,

            "Komi" => Languages::Komi,

            "Korean" => Languages::Korean,

            "Kpelle" => Languages::Kpelle,

            "Kru" => Languages::Kru,

            "Kurdish" => Languages::Kurdish,

            "Lao" => Languages::Lao,

            "Latin" => Languages::Latin,

            "Latvian" => Languages::Latvian,

            "Lingala" => Languages::Lingala,

            "Lithuanian" => Languages::Lithuanian,

            "Luxemburgish" => Languages::Luxemburgish,

            "Macedonian" => Languages::Macedonian,

            "Malagasy" => Languages::Malagasy,

            "Malay" => Languages::Malay,

            "Malayalam" => Languages::Malayalam,

            "Maltese" => Languages::Maltese,

            "Mandarin" => Languages::Mandarin,

            "Maninka" => Languages::Maninka,

            "Manx Gaelic" => Languages::ManxGaelic,

            "Maori" => Languages::Maori,

            "Marathi" => Languages::Marathi,

            "Marshallese" => Languages::Marshallese,

            "Moldovan" => Languages::Moldovan,

            "Mongolian" => Languages::Mongolian,

            "Nauru" => Languages::Nauru,

            "Navajo" => Languages::Navajo,

            "Ndebele" => Languages::Ndebele,

            "Ndonga" => Languages::Ndonga,

            "Nepali" => Languages::Nepali,

            "Norwegian" => Languages::Norwegian,

            "Norwegian (Nynorsk)" => Languages::NorwegianNynorsk,

            "Nyanja" => Languages::Nyanja,

            "Occitan" => Languages::Occitan,

            "Oriya" => Languages::Oriya,

            "Oromo" => Languages::Oromo,

            "Ossetian" => Languages::Ossetian,

            "Pali" => Languages::Pali,

            "Pangasinan" => Languages::Pangasinan,

            "Papiamento" => Languages::Papiamento,

            "Pashto" => Languages::Pashto,

            "Polish" => Languages::Polish,

            "Portuguese" => Languages::Portuguese,

            "Punjabi" => Languages::Punjabi,

            "Quechua" => Languages::Quechua,

            "Romanian" => Languages::Romanian,

            "Romany" => Languages::Romany,

            "Russian" => Languages::Russian,

            "Sami" => Languages::Sami,

            "Samoan" => Languages::Samoan,

            "Sangho" => Languages::Sangho,

            "Sanskrit" => Languages::Sanskrit,

            "Sardinian" => Languages::Sardinian,

            "Scots Gaelic" => Languages::ScotsGaelic,

            "Serbian" => Languages::Serbian,

            "Serbo-Croatian" => Languages::SerboCroatian,

            "Sesotho" => Languages::Sesotho,

            "Setswana" => Languages::Setswana,

            "Shan" => Languages::Shan,

            "Shona" => Languages::Shona,

            "Sindhi" => Languages::Sindhi,

            "Sinhalese" => Languages::Sinhalese,

            "Siswati" => Languages::Siswati,

            "Slovak" => Languages::Slovak,

            "Slovenian" => Languages::Slovenian,

            "Somali" => Languages::Somali,

            "Southern Ndebele" => Languages::SouthernNdebele,

            "Spanish" => Languages::Spanish,

            "Sundanese" => Languages::Sundanese,

            "Swahili" => Languages::Swahili,

            "Swedish" => Languages::Swedish,

            "Syriac" => Languages::Syriac,

            "Tagalog" => Languages::Tagalog,

            "Tahitian" => Languages::Tahitian,

            "Tajik" => Languages::Tajik,

            "Tamil" => Languages::Tamil,

            "Tatar" => Languages::Tatar,

            "Telugu" => Languages::Telugu,

            "Thai" => Languages::Thai,

            "Tibetan" => Languages::Tibetan,

            "Tigrinya" => Languages::Tigrinya,

            "Tongan" => Languages::Tongan,

            "Tsonga" => Languages::Tsonga,

            "Turkish" => Languages::Turkish,

            "Turkmen" => Languages::Turkmen,

            "Twi" => Languages::Twi,

            "Uigur" => Languages::Uigur,

            "Ukrainian" => Languages::Ukrainian,

            "Urdu" => Languages::Urdu,

            "Uzbek" => Languages::Uzbek,

            "Vietnamese" => Languages::Vietnamese,

            "Volapuk" => Languages::Volapuk,

            "Welsh" => Languages::Welsh,

            "Wolof" => Languages::Wolof,

            "Xhosa" => Languages::Xhosa,

            "Yiddish" => Languages::Yiddish,

            "Yoruba" => Languages::Yoruba,

            "Zhuang" => Languages::Zhuang,

            "Zulu" => Languages::Zulu,

            _ => Languages::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Languages {
    fn from(s: &str) -> Languages {
        match s {
            "Abkhazian" => Languages::Abkhazian,

            "Afar" => Languages::Afar,

            "Afrikaans" => Languages::Afrikaans,

            "Albanian" => Languages::Albanian,

            "American Sign Language" => Languages::AmericanSignLanguage,

            "Amharic" => Languages::Amharic,

            "Arabic" => Languages::Arabic,

            "Aramaic" => Languages::Aramaic,

            "Armenian" => Languages::Armenian,

            "Assamese" => Languages::Assamese,

            "Assyrian Neo-Aramaic" => Languages::AssyrianNeoAramaic,

            "Avestan" => Languages::Avestan,

            "Aymara" => Languages::Aymara,

            "Azerbaijani" => Languages::Azerbaijani,

            "Bambara" => Languages::Bambara,

            "Bashkir" => Languages::Bashkir,

            "Basque" => Languages::Basque,

            "Bengali" => Languages::Bengali,

            "Bihari" => Languages::Bihari,

            "Bikol" => Languages::Bikol,

            "Bislama" => Languages::Bislama,

            "Bosnian" => Languages::Bosnian,

            "Brazilian Portuguese" => Languages::BrazilianPortuguese,

            "Bulgarian" => Languages::Bulgarian,

            "Burmese" => Languages::Burmese,

            "Byelorussian" => Languages::Byelorussian,

            "Cambodian" => Languages::Cambodian,

            "Cantonese" => Languages::Cantonese,

            "Cape Verdean Creole" => Languages::CapeVerdeanCreole,

            "Catalan" => Languages::Catalan,

            "Cebuano" => Languages::Cebuano,

            "Chamorro" => Languages::Chamorro,

            "Chechen" => Languages::Chechen,

            "Chinese" => Languages::Chinese,

            "Chuukese" => Languages::Chuukese,

            "Chuvash" => Languages::Chuvash,

            "Cornish" => Languages::Cornish,

            "Corsican" => Languages::Corsican,

            "Croatian" => Languages::Croatian,

            "Czech" => Languages::Czech,

            "Danish" => Languages::Danish,

            "Dari (Afghan Persian)" => Languages::DariAfghanPersian,

            "Dioula" => Languages::Dioula,

            "Dutch" => Languages::Dutch,

            "Dzongkha" => Languages::Dzongkha,

            "English" => Languages::English,

            "Esperanto" => Languages::Esperanto,

            "Estonian" => Languages::Estonian,

            "Faroese" => Languages::Faroese,

            "Farsi" => Languages::Farsi,

            "Fiji" => Languages::Fiji,

            "Finnish" => Languages::Finnish,

            "Flemish" => Languages::Flemish,

            "French" => Languages::French,

            "Frisian" => Languages::Frisian,

            "Galician" => Languages::Galician,

            "Georgian" => Languages::Georgian,

            "German" => Languages::German,

            "Greek" => Languages::Greek,

            "Greenlandic" => Languages::Greenlandic,

            "Guarani" => Languages::Guarani,

            "Gujarati" => Languages::Gujarati,

            "Haitian Creole" => Languages::HaitianCreole,

            "Hausa" => Languages::Hausa,

            "Hebrew" => Languages::Hebrew,

            "Herero" => Languages::Herero,

            "Hiligaynon" => Languages::Hiligaynon,

            "Hindi" => Languages::Hindi,

            "Hiri Motu" => Languages::HiriMotu,

            "Hmong" => Languages::Hmong,

            "Hungarian" => Languages::Hungarian,

            "Iban" => Languages::Iban,

            "Icelandic" => Languages::Icelandic,

            "Igbo" => Languages::Igbo,

            "Ilocano" => Languages::Ilocano,

            "Indonesian" => Languages::Indonesian,

            "Interlingua" => Languages::Interlingua,

            "Inuktitut" => Languages::Inuktitut,

            "Inupiak" => Languages::Inupiak,

            "Irish (Gaelic)" => Languages::IrishGaelic,

            "Italian" => Languages::Italian,

            "Japanese" => Languages::Japanese,

            "Javanese" => Languages::Javanese,

            "K'iche'" => Languages::Kiche,

            "Kannada" => Languages::Kannada,

            "Kashmiri" => Languages::Kashmiri,

            "Kazakh" => Languages::Kazakh,

            "Kichwa" => Languages::Kichwa,

            "Kikuyu" => Languages::Kikuyu,

            "Kinyarwanda" => Languages::Kinyarwanda,

            "Kirghiz" => Languages::Kirghiz,

            "Kirundi" => Languages::Kirundi,

            "Komi" => Languages::Komi,

            "Korean" => Languages::Korean,

            "Kpelle" => Languages::Kpelle,

            "Kru" => Languages::Kru,

            "Kurdish" => Languages::Kurdish,

            "Lao" => Languages::Lao,

            "Latin" => Languages::Latin,

            "Latvian" => Languages::Latvian,

            "Lingala" => Languages::Lingala,

            "Lithuanian" => Languages::Lithuanian,

            "Luxemburgish" => Languages::Luxemburgish,

            "Macedonian" => Languages::Macedonian,

            "Malagasy" => Languages::Malagasy,

            "Malay" => Languages::Malay,

            "Malayalam" => Languages::Malayalam,

            "Maltese" => Languages::Maltese,

            "Mandarin" => Languages::Mandarin,

            "Maninka" => Languages::Maninka,

            "Manx Gaelic" => Languages::ManxGaelic,

            "Maori" => Languages::Maori,

            "Marathi" => Languages::Marathi,

            "Marshallese" => Languages::Marshallese,

            "Moldovan" => Languages::Moldovan,

            "Mongolian" => Languages::Mongolian,

            "Nauru" => Languages::Nauru,

            "Navajo" => Languages::Navajo,

            "Ndebele" => Languages::Ndebele,

            "Ndonga" => Languages::Ndonga,

            "Nepali" => Languages::Nepali,

            "Norwegian" => Languages::Norwegian,

            "Norwegian (Nynorsk)" => Languages::NorwegianNynorsk,

            "Nyanja" => Languages::Nyanja,

            "Occitan" => Languages::Occitan,

            "Oriya" => Languages::Oriya,

            "Oromo" => Languages::Oromo,

            "Ossetian" => Languages::Ossetian,

            "Pali" => Languages::Pali,

            "Pangasinan" => Languages::Pangasinan,

            "Papiamento" => Languages::Papiamento,

            "Pashto" => Languages::Pashto,

            "Polish" => Languages::Polish,

            "Portuguese" => Languages::Portuguese,

            "Punjabi" => Languages::Punjabi,

            "Quechua" => Languages::Quechua,

            "Romanian" => Languages::Romanian,

            "Romany" => Languages::Romany,

            "Russian" => Languages::Russian,

            "Sami" => Languages::Sami,

            "Samoan" => Languages::Samoan,

            "Sangho" => Languages::Sangho,

            "Sanskrit" => Languages::Sanskrit,

            "Sardinian" => Languages::Sardinian,

            "Scots Gaelic" => Languages::ScotsGaelic,

            "Serbian" => Languages::Serbian,

            "Serbo-Croatian" => Languages::SerboCroatian,

            "Sesotho" => Languages::Sesotho,

            "Setswana" => Languages::Setswana,

            "Shan" => Languages::Shan,

            "Shona" => Languages::Shona,

            "Sindhi" => Languages::Sindhi,

            "Sinhalese" => Languages::Sinhalese,

            "Siswati" => Languages::Siswati,

            "Slovak" => Languages::Slovak,

            "Slovenian" => Languages::Slovenian,

            "Somali" => Languages::Somali,

            "Southern Ndebele" => Languages::SouthernNdebele,

            "Spanish" => Languages::Spanish,

            "Sundanese" => Languages::Sundanese,

            "Swahili" => Languages::Swahili,

            "Swedish" => Languages::Swedish,

            "Syriac" => Languages::Syriac,

            "Tagalog" => Languages::Tagalog,

            "Tahitian" => Languages::Tahitian,

            "Tajik" => Languages::Tajik,

            "Tamil" => Languages::Tamil,

            "Tatar" => Languages::Tatar,

            "Telugu" => Languages::Telugu,

            "Thai" => Languages::Thai,

            "Tibetan" => Languages::Tibetan,

            "Tigrinya" => Languages::Tigrinya,

            "Tongan" => Languages::Tongan,

            "Tsonga" => Languages::Tsonga,

            "Turkish" => Languages::Turkish,

            "Turkmen" => Languages::Turkmen,

            "Twi" => Languages::Twi,

            "Uigur" => Languages::Uigur,

            "Ukrainian" => Languages::Ukrainian,

            "Urdu" => Languages::Urdu,

            "Uzbek" => Languages::Uzbek,

            "Vietnamese" => Languages::Vietnamese,

            "Volapuk" => Languages::Volapuk,

            "Welsh" => Languages::Welsh,

            "Wolof" => Languages::Wolof,

            "Xhosa" => Languages::Xhosa,

            "Yiddish" => Languages::Yiddish,

            "Yoruba" => Languages::Yoruba,

            "Zhuang" => Languages::Zhuang,

            "Zulu" => Languages::Zulu,

            _ => Languages::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Languages> for &'a str {
    fn from(s: &'a Languages) -> &'a str {
        match s {
            Languages::Abkhazian => "Abkhazian",

            Languages::Afar => "Afar",

            Languages::Afrikaans => "Afrikaans",

            Languages::Albanian => "Albanian",

            Languages::AmericanSignLanguage => "American Sign Language",

            Languages::Amharic => "Amharic",

            Languages::Arabic => "Arabic",

            Languages::Aramaic => "Aramaic",

            Languages::Armenian => "Armenian",

            Languages::Assamese => "Assamese",

            Languages::AssyrianNeoAramaic => "Assyrian Neo-Aramaic",

            Languages::Avestan => "Avestan",

            Languages::Aymara => "Aymara",

            Languages::Azerbaijani => "Azerbaijani",

            Languages::Bambara => "Bambara",

            Languages::Bashkir => "Bashkir",

            Languages::Basque => "Basque",

            Languages::Bengali => "Bengali",

            Languages::Bihari => "Bihari",

            Languages::Bikol => "Bikol",

            Languages::Bislama => "Bislama",

            Languages::Bosnian => "Bosnian",

            Languages::BrazilianPortuguese => "Brazilian Portuguese",

            Languages::Bulgarian => "Bulgarian",

            Languages::Burmese => "Burmese",

            Languages::Byelorussian => "Byelorussian",

            Languages::Cambodian => "Cambodian",

            Languages::Cantonese => "Cantonese",

            Languages::CapeVerdeanCreole => "Cape Verdean Creole",

            Languages::Catalan => "Catalan",

            Languages::Cebuano => "Cebuano",

            Languages::Chamorro => "Chamorro",

            Languages::Chechen => "Chechen",

            Languages::Chinese => "Chinese",

            Languages::Chuukese => "Chuukese",

            Languages::Chuvash => "Chuvash",

            Languages::Cornish => "Cornish",

            Languages::Corsican => "Corsican",

            Languages::Croatian => "Croatian",

            Languages::Czech => "Czech",

            Languages::Danish => "Danish",

            Languages::DariAfghanPersian => "Dari (Afghan Persian)",

            Languages::Dioula => "Dioula",

            Languages::Dutch => "Dutch",

            Languages::Dzongkha => "Dzongkha",

            Languages::English => "English",

            Languages::Esperanto => "Esperanto",

            Languages::Estonian => "Estonian",

            Languages::Faroese => "Faroese",

            Languages::Farsi => "Farsi",

            Languages::Fiji => "Fiji",

            Languages::Finnish => "Finnish",

            Languages::Flemish => "Flemish",

            Languages::French => "French",

            Languages::Frisian => "Frisian",

            Languages::Galician => "Galician",

            Languages::Georgian => "Georgian",

            Languages::German => "German",

            Languages::Greek => "Greek",

            Languages::Greenlandic => "Greenlandic",

            Languages::Guarani => "Guarani",

            Languages::Gujarati => "Gujarati",

            Languages::HaitianCreole => "Haitian Creole",

            Languages::Hausa => "Hausa",

            Languages::Hebrew => "Hebrew",

            Languages::Herero => "Herero",

            Languages::Hiligaynon => "Hiligaynon",

            Languages::Hindi => "Hindi",

            Languages::HiriMotu => "Hiri Motu",

            Languages::Hmong => "Hmong",

            Languages::Hungarian => "Hungarian",

            Languages::Iban => "Iban",

            Languages::Icelandic => "Icelandic",

            Languages::Igbo => "Igbo",

            Languages::Ilocano => "Ilocano",

            Languages::Indonesian => "Indonesian",

            Languages::Interlingua => "Interlingua",

            Languages::Inuktitut => "Inuktitut",

            Languages::Inupiak => "Inupiak",

            Languages::IrishGaelic => "Irish (Gaelic)",

            Languages::Italian => "Italian",

            Languages::Japanese => "Japanese",

            Languages::Javanese => "Javanese",

            Languages::Kiche => "K'iche'",

            Languages::Kannada => "Kannada",

            Languages::Kashmiri => "Kashmiri",

            Languages::Kazakh => "Kazakh",

            Languages::Kichwa => "Kichwa",

            Languages::Kikuyu => "Kikuyu",

            Languages::Kinyarwanda => "Kinyarwanda",

            Languages::Kirghiz => "Kirghiz",

            Languages::Kirundi => "Kirundi",

            Languages::Komi => "Komi",

            Languages::Korean => "Korean",

            Languages::Kpelle => "Kpelle",

            Languages::Kru => "Kru",

            Languages::Kurdish => "Kurdish",

            Languages::Lao => "Lao",

            Languages::Latin => "Latin",

            Languages::Latvian => "Latvian",

            Languages::Lingala => "Lingala",

            Languages::Lithuanian => "Lithuanian",

            Languages::Luxemburgish => "Luxemburgish",

            Languages::Macedonian => "Macedonian",

            Languages::Malagasy => "Malagasy",

            Languages::Malay => "Malay",

            Languages::Malayalam => "Malayalam",

            Languages::Maltese => "Maltese",

            Languages::Mandarin => "Mandarin",

            Languages::Maninka => "Maninka",

            Languages::ManxGaelic => "Manx Gaelic",

            Languages::Maori => "Maori",

            Languages::Marathi => "Marathi",

            Languages::Marshallese => "Marshallese",

            Languages::Moldovan => "Moldovan",

            Languages::Mongolian => "Mongolian",

            Languages::Nauru => "Nauru",

            Languages::Navajo => "Navajo",

            Languages::Ndebele => "Ndebele",

            Languages::Ndonga => "Ndonga",

            Languages::Nepali => "Nepali",

            Languages::Norwegian => "Norwegian",

            Languages::NorwegianNynorsk => "Norwegian (Nynorsk)",

            Languages::Nyanja => "Nyanja",

            Languages::Occitan => "Occitan",

            Languages::Oriya => "Oriya",

            Languages::Oromo => "Oromo",

            Languages::Ossetian => "Ossetian",

            Languages::Pali => "Pali",

            Languages::Pangasinan => "Pangasinan",

            Languages::Papiamento => "Papiamento",

            Languages::Pashto => "Pashto",

            Languages::Polish => "Polish",

            Languages::Portuguese => "Portuguese",

            Languages::Punjabi => "Punjabi",

            Languages::Quechua => "Quechua",

            Languages::Romanian => "Romanian",

            Languages::Romany => "Romany",

            Languages::Russian => "Russian",

            Languages::Sami => "Sami",

            Languages::Samoan => "Samoan",

            Languages::Sangho => "Sangho",

            Languages::Sanskrit => "Sanskrit",

            Languages::Sardinian => "Sardinian",

            Languages::ScotsGaelic => "Scots Gaelic",

            Languages::Serbian => "Serbian",

            Languages::SerboCroatian => "Serbo-Croatian",

            Languages::Sesotho => "Sesotho",

            Languages::Setswana => "Setswana",

            Languages::Shan => "Shan",

            Languages::Shona => "Shona",

            Languages::Sindhi => "Sindhi",

            Languages::Sinhalese => "Sinhalese",

            Languages::Siswati => "Siswati",

            Languages::Slovak => "Slovak",

            Languages::Slovenian => "Slovenian",

            Languages::Somali => "Somali",

            Languages::SouthernNdebele => "Southern Ndebele",

            Languages::Spanish => "Spanish",

            Languages::Sundanese => "Sundanese",

            Languages::Swahili => "Swahili",

            Languages::Swedish => "Swedish",

            Languages::Syriac => "Syriac",

            Languages::Tagalog => "Tagalog",

            Languages::Tahitian => "Tahitian",

            Languages::Tajik => "Tajik",

            Languages::Tamil => "Tamil",

            Languages::Tatar => "Tatar",

            Languages::Telugu => "Telugu",

            Languages::Thai => "Thai",

            Languages::Tibetan => "Tibetan",

            Languages::Tigrinya => "Tigrinya",

            Languages::Tongan => "Tongan",

            Languages::Tsonga => "Tsonga",

            Languages::Turkish => "Turkish",

            Languages::Turkmen => "Turkmen",

            Languages::Twi => "Twi",

            Languages::Uigur => "Uigur",

            Languages::Ukrainian => "Ukrainian",

            Languages::Urdu => "Urdu",

            Languages::Uzbek => "Uzbek",

            Languages::Vietnamese => "Vietnamese",

            Languages::Volapuk => "Volapuk",

            Languages::Welsh => "Welsh",

            Languages::Wolof => "Wolof",

            Languages::Xhosa => "Xhosa",

            Languages::Yiddish => "Yiddish",

            Languages::Yoruba => "Yoruba",

            Languages::Zhuang => "Zhuang",

            Languages::Zulu => "Zulu",

            Languages::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Languages {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Languages {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_languages_format {
    use super::Languages;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Languages>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Languages>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [LaundryFeatures Lookups](https://ddwiki.reso.org/display/DDW17/LaundryFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum LaundryFeatures {
    /// "[Common Area](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245476)": Laundry facilities are in a common area.
    CommonArea,

    /// "[Electric Dryer Hookup](https://ddwiki.reso.org/display/DDW17/Electric+Dryer+Hookup)": The property has electric cloths dryer connections.
    ElectricDryerHookup,

    /// "[Gas Dryer Hookup](https://ddwiki.reso.org/display/DDW17/Gas+Dryer+Hookup)": The property has gas cloths dryer connections.
    GasDryerHookup,

    /// "[In Basement](https://ddwiki.reso.org/display/DDW17/In+Basement)": Laundry is located in the basement.
    InBasement,

    /// "[In Bathroom](https://ddwiki.reso.org/display/DDW17/In+Bathroom)": Laundry is located in the bathroom.
    InBathroom,

    /// "[In Carport](https://ddwiki.reso.org/display/DDW17/In+Carport)": Laundry is located in the carport.
    InCarport,

    /// "[In Garage](https://ddwiki.reso.org/display/DDW17/In+Garage)": Laundry is located in the garage.
    InGarage,

    /// "[In Hall](https://ddwiki.reso.org/display/DDW17/In+Hall)": Laundry is located in the hall.
    InHall,

    /// "[In Kitchen](https://ddwiki.reso.org/display/DDW17/In+Kitchen)": Laundry is located in the kitchen.
    InKitchen,

    /// "[In Unit](https://ddwiki.reso.org/display/DDW17/In+Unit)": Laundry is located within the unit.
    InUnit,

    /// "[Inside](https://ddwiki.reso.org/display/DDW17/Inside)": Laundry is located indoors.
    Inside,

    /// "[Laundry Chute](https://ddwiki.reso.org/display/DDW17/Laundry+Chute)": The property has a laundry chute.
    LaundryChute,

    /// "[Laundry Closet](https://ddwiki.reso.org/display/DDW17/Laundry+Closet)": The property has a laundry closet.
    LaundryCloset,

    /// "[Laundry Room](https://ddwiki.reso.org/display/DDW17/Laundry+Room)": The property has a laundry room.
    LaundryRoom,

    /// "[Lower Level](https://ddwiki.reso.org/display/DDW17/Lower+Level)": Laundry is on the lower level.
    LowerLevel,

    /// "[Main Level](https://ddwiki.reso.org/display/DDW17/Main+Level)": Laundry is on the main level.
    MainLevel,

    /// "[Multiple Locations](https://ddwiki.reso.org/display/DDW17/Multiple+Locations)": Laundry is in multiple locations.
    MultipleLocations,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245493)": There are no laundry features.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245494)": There are laundry features other than those in this list.
    Other,

    /// "[Outside](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245495)": Laundry is located outside.
    Outside,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245496)": See remarks for additional information about laundry.
    SeeRemarks,

    /// "[Sink](https://ddwiki.reso.org/display/DDW17/Sink)": The laundry area has a sink.
    Sink,

    /// "[Upper Level](https://ddwiki.reso.org/display/DDW17/Upper+Level)": Laundry is on the upper level.
    UpperLevel,

    /// "[Washer Hookup](https://ddwiki.reso.org/display/DDW17/Washer+Hookup)": The property has a hookups for a cloths washer.
    WasherHookup,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for LaundryFeatures {
    fn from(s: String) -> LaundryFeatures {
        match s.as_ref() {
            "Common Area" => LaundryFeatures::CommonArea,

            "Electric Dryer Hookup" => LaundryFeatures::ElectricDryerHookup,

            "Gas Dryer Hookup" => LaundryFeatures::GasDryerHookup,

            "In Basement" => LaundryFeatures::InBasement,

            "In Bathroom" => LaundryFeatures::InBathroom,

            "In Carport" => LaundryFeatures::InCarport,

            "In Garage" => LaundryFeatures::InGarage,

            "In Hall" => LaundryFeatures::InHall,

            "In Kitchen" => LaundryFeatures::InKitchen,

            "In Unit" => LaundryFeatures::InUnit,

            "Inside" => LaundryFeatures::Inside,

            "Laundry Chute" => LaundryFeatures::LaundryChute,

            "Laundry Closet" => LaundryFeatures::LaundryCloset,

            "Laundry Room" => LaundryFeatures::LaundryRoom,

            "Lower Level" => LaundryFeatures::LowerLevel,

            "Main Level" => LaundryFeatures::MainLevel,

            "Multiple Locations" => LaundryFeatures::MultipleLocations,

            "None" => LaundryFeatures::None,

            "Other" => LaundryFeatures::Other,

            "Outside" => LaundryFeatures::Outside,

            "See Remarks" => LaundryFeatures::SeeRemarks,

            "Sink" => LaundryFeatures::Sink,

            "Upper Level" => LaundryFeatures::UpperLevel,

            "Washer Hookup" => LaundryFeatures::WasherHookup,

            _ => LaundryFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for LaundryFeatures {
    fn from(s: &str) -> LaundryFeatures {
        match s {
            "Common Area" => LaundryFeatures::CommonArea,

            "Electric Dryer Hookup" => LaundryFeatures::ElectricDryerHookup,

            "Gas Dryer Hookup" => LaundryFeatures::GasDryerHookup,

            "In Basement" => LaundryFeatures::InBasement,

            "In Bathroom" => LaundryFeatures::InBathroom,

            "In Carport" => LaundryFeatures::InCarport,

            "In Garage" => LaundryFeatures::InGarage,

            "In Hall" => LaundryFeatures::InHall,

            "In Kitchen" => LaundryFeatures::InKitchen,

            "In Unit" => LaundryFeatures::InUnit,

            "Inside" => LaundryFeatures::Inside,

            "Laundry Chute" => LaundryFeatures::LaundryChute,

            "Laundry Closet" => LaundryFeatures::LaundryCloset,

            "Laundry Room" => LaundryFeatures::LaundryRoom,

            "Lower Level" => LaundryFeatures::LowerLevel,

            "Main Level" => LaundryFeatures::MainLevel,

            "Multiple Locations" => LaundryFeatures::MultipleLocations,

            "None" => LaundryFeatures::None,

            "Other" => LaundryFeatures::Other,

            "Outside" => LaundryFeatures::Outside,

            "See Remarks" => LaundryFeatures::SeeRemarks,

            "Sink" => LaundryFeatures::Sink,

            "Upper Level" => LaundryFeatures::UpperLevel,

            "Washer Hookup" => LaundryFeatures::WasherHookup,

            _ => LaundryFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a LaundryFeatures> for &'a str {
    fn from(s: &'a LaundryFeatures) -> &'a str {
        match s {
            LaundryFeatures::CommonArea => "Common Area",

            LaundryFeatures::ElectricDryerHookup => "Electric Dryer Hookup",

            LaundryFeatures::GasDryerHookup => "Gas Dryer Hookup",

            LaundryFeatures::InBasement => "In Basement",

            LaundryFeatures::InBathroom => "In Bathroom",

            LaundryFeatures::InCarport => "In Carport",

            LaundryFeatures::InGarage => "In Garage",

            LaundryFeatures::InHall => "In Hall",

            LaundryFeatures::InKitchen => "In Kitchen",

            LaundryFeatures::InUnit => "In Unit",

            LaundryFeatures::Inside => "Inside",

            LaundryFeatures::LaundryChute => "Laundry Chute",

            LaundryFeatures::LaundryCloset => "Laundry Closet",

            LaundryFeatures::LaundryRoom => "Laundry Room",

            LaundryFeatures::LowerLevel => "Lower Level",

            LaundryFeatures::MainLevel => "Main Level",

            LaundryFeatures::MultipleLocations => "Multiple Locations",

            LaundryFeatures::None => "None",

            LaundryFeatures::Other => "Other",

            LaundryFeatures::Outside => "Outside",

            LaundryFeatures::SeeRemarks => "See Remarks",

            LaundryFeatures::Sink => "Sink",

            LaundryFeatures::UpperLevel => "Upper Level",

            LaundryFeatures::WasherHookup => "Washer Hookup",

            LaundryFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for LaundryFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for LaundryFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_laundry_features_format {
    use super::LaundryFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<LaundryFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<LaundryFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [LeaseRenewalCompensation Lookups](https://ddwiki.reso.org/display/DDW17/LeaseRenewalCompensation+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum LeaseRenewalCompensation {
    /// "[Call Listing Agent](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245344)": For details on about additional selling office compensation for lease renewals, contact the listing agent.
    CallListingAgent,

    /// "[Call Listing Office](https://ddwiki.reso.org/display/DDW17/Call+Listing+Office)": For details on about additional selling office compensation for lease renewals, contact the listing office.
    CallListingOffice,

    /// "[Commission Paid On Tenant Purchase](https://ddwiki.reso.org/display/DDW17/Commission+Paid+On+Tenant+Purchase)": Additional commission is paid in the event the tenant purchase the property.
    CommissionPaidOnTenantPurchase,

    /// "[No Renewal Commission](https://ddwiki.reso.org/display/DDW17/No+Renewal+Commission)": There is no additional commission if the tenant renews or extends the lease.
    NoRenewalCommission,

    /// "[Renewal Commission Paid](https://ddwiki.reso.org/display/DDW17/Renewal+Commission+Paid)": There is additional commission paid if the tenant renews the lease.
    RenewalCommissionPaid,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for LeaseRenewalCompensation {
    fn from(s: String) -> LeaseRenewalCompensation {
        match s.as_ref() {
            "Call Listing Agent" => LeaseRenewalCompensation::CallListingAgent,

            "Call Listing Office" => LeaseRenewalCompensation::CallListingOffice,

            "Commission Paid On Tenant Purchase" => {
                LeaseRenewalCompensation::CommissionPaidOnTenantPurchase
            }

            "No Renewal Commission" => LeaseRenewalCompensation::NoRenewalCommission,

            "Renewal Commission Paid" => LeaseRenewalCompensation::RenewalCommissionPaid,

            _ => LeaseRenewalCompensation::OpenEnumeration(s),
        }
    }
}

impl From<&str> for LeaseRenewalCompensation {
    fn from(s: &str) -> LeaseRenewalCompensation {
        match s {
            "Call Listing Agent" => LeaseRenewalCompensation::CallListingAgent,

            "Call Listing Office" => LeaseRenewalCompensation::CallListingOffice,

            "Commission Paid On Tenant Purchase" => {
                LeaseRenewalCompensation::CommissionPaidOnTenantPurchase
            }

            "No Renewal Commission" => LeaseRenewalCompensation::NoRenewalCommission,

            "Renewal Commission Paid" => LeaseRenewalCompensation::RenewalCommissionPaid,

            _ => LeaseRenewalCompensation::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a LeaseRenewalCompensation> for &'a str {
    fn from(s: &'a LeaseRenewalCompensation) -> &'a str {
        match s {
            LeaseRenewalCompensation::CallListingAgent => "Call Listing Agent",

            LeaseRenewalCompensation::CallListingOffice => "Call Listing Office",

            LeaseRenewalCompensation::CommissionPaidOnTenantPurchase => {
                "Commission Paid On Tenant Purchase"
            }

            LeaseRenewalCompensation::NoRenewalCommission => "No Renewal Commission",

            LeaseRenewalCompensation::RenewalCommissionPaid => "Renewal Commission Paid",

            LeaseRenewalCompensation::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for LeaseRenewalCompensation {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for LeaseRenewalCompensation {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_lease_renewal_compensation_format {
    use super::LeaseRenewalCompensation;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<LeaseRenewalCompensation>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<LeaseRenewalCompensation>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [LeaseTerm Lookups](https://ddwiki.reso.org/display/DDW17/LeaseTerm+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum LeaseTerm {
    /// "[12 Months](https://ddwiki.reso.org/display/DDW17/12+Months)": The length of the lease is 12 months.
    _12Months,

    /// "[24 Months](https://ddwiki.reso.org/display/DDW17/24+Months)": The length of the lease is 24 months.
    _24Months,

    /// "[6 Months](https://ddwiki.reso.org/display/DDW17/6+Months)": The length of the lease is 6 months.
    _6Months,

    /// "[Month To Month](https://ddwiki.reso.org/display/DDW17/Month+To+Month)": The length of the lease is month to month.
    MonthToMonth,

    /// "[Negotiable](https://ddwiki.reso.org/display/DDW17/Negotiable)": The length of the lease is negotiable.
    Negotiable,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245355)": There is no stated term to the lease.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245356)": The term of the lease is something other than is available in this list.
    Other,

    /// "[Renewal Option](https://ddwiki.reso.org/display/DDW17/Renewal+Option)": The lease has a renewal option.
    RenewalOption,

    /// "[Short Term Lease](https://ddwiki.reso.org/display/DDW17/Short+Term+Lease)": The lease is short term.
    ShortTermLease,

    /// "[Weekly](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245359)": The length of the lease is weekly.
    Weekly,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for LeaseTerm {
    fn from(s: String) -> LeaseTerm {
        match s.as_ref() {
            "12 Months" => LeaseTerm::_12Months,

            "24 Months" => LeaseTerm::_24Months,

            "6 Months" => LeaseTerm::_6Months,

            "Month To Month" => LeaseTerm::MonthToMonth,

            "Negotiable" => LeaseTerm::Negotiable,

            "None" => LeaseTerm::None,

            "Other" => LeaseTerm::Other,

            "Renewal Option" => LeaseTerm::RenewalOption,

            "Short Term Lease" => LeaseTerm::ShortTermLease,

            "Weekly" => LeaseTerm::Weekly,

            _ => LeaseTerm::OpenEnumeration(s),
        }
    }
}

impl From<&str> for LeaseTerm {
    fn from(s: &str) -> LeaseTerm {
        match s {
            "12 Months" => LeaseTerm::_12Months,

            "24 Months" => LeaseTerm::_24Months,

            "6 Months" => LeaseTerm::_6Months,

            "Month To Month" => LeaseTerm::MonthToMonth,

            "Negotiable" => LeaseTerm::Negotiable,

            "None" => LeaseTerm::None,

            "Other" => LeaseTerm::Other,

            "Renewal Option" => LeaseTerm::RenewalOption,

            "Short Term Lease" => LeaseTerm::ShortTermLease,

            "Weekly" => LeaseTerm::Weekly,

            _ => LeaseTerm::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a LeaseTerm> for &'a str {
    fn from(s: &'a LeaseTerm) -> &'a str {
        match s {
            LeaseTerm::_12Months => "12 Months",

            LeaseTerm::_24Months => "24 Months",

            LeaseTerm::_6Months => "6 Months",

            LeaseTerm::MonthToMonth => "Month To Month",

            LeaseTerm::Negotiable => "Negotiable",

            LeaseTerm::None => "None",

            LeaseTerm::Other => "Other",

            LeaseTerm::RenewalOption => "Renewal Option",

            LeaseTerm::ShortTermLease => "Short Term Lease",

            LeaseTerm::Weekly => "Weekly",

            LeaseTerm::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for LeaseTerm {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for LeaseTerm {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_lease_term_format {
    use super::LeaseTerm;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<LeaseTerm>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<LeaseTerm>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Levels Lookups](https://ddwiki.reso.org/display/DDW17/Levels+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Levels {
    /// "[Multi/Split](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245361)": A split-level home (also called a tri-level home) is a style of house in which the floor levels are staggered, so that the "main" level of the house (e.g. the level that usually contains the front entry), is partway between the upper and lower floors.
    MultiSplit,

    /// "[One](https://ddwiki.reso.org/display/DDW17/One)": The property being sold has one level.  A discreet horizontal plane of interior living space (excluding basements).
    One,

    /// "[One and One Half](https://ddwiki.reso.org/display/DDW17/One+and+One+Half)": A 1.5 story house is where the height of any of the walls on the second floor are less than the height of the walls on the first floor.  First floor walls that extend up to the second floor level are not included in the height comparison.  Depending on your State, Provence or other local regulations there may be a specific height difference required.  For example some areas required that the second floor walls be less than 70% the height of the first floor walls in order to be called a 1.5 story structure.  Other areas are 50% and it is clear that this may vary substantially from region to region.  Another common trait is angled ceilings that compensate for the short walls making all but the edges of the room high enough for normal use.
    OneandOneHalf,

    /// "[Three Or More](https://ddwiki.reso.org/display/DDW17/Three+Or+More)": The property being sold has three or more levels.  A discreet horizontal plane of interior living space (excluding basements).
    ThreeOrMore,

    /// "[Two](https://ddwiki.reso.org/display/DDW17/Two)": The property being sold has two levels.  A discreet horizontal plane of interior living space (excluding basements).
    Two,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Levels {
    fn from(s: String) -> Levels {
        match s.as_ref() {
            "Multi/Split" => Levels::MultiSplit,

            "One" => Levels::One,

            "One and One Half" => Levels::OneandOneHalf,

            "Three Or More" => Levels::ThreeOrMore,

            "Two" => Levels::Two,

            _ => Levels::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Levels {
    fn from(s: &str) -> Levels {
        match s {
            "Multi/Split" => Levels::MultiSplit,

            "One" => Levels::One,

            "One and One Half" => Levels::OneandOneHalf,

            "Three Or More" => Levels::ThreeOrMore,

            "Two" => Levels::Two,

            _ => Levels::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Levels> for &'a str {
    fn from(s: &'a Levels) -> &'a str {
        match s {
            Levels::MultiSplit => "Multi/Split",

            Levels::One => "One",

            Levels::OneandOneHalf => "One and One Half",

            Levels::ThreeOrMore => "Three Or More",

            Levels::Two => "Two",

            Levels::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Levels {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Levels {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_levels_format {
    use super::Levels;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Levels>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Levels>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [LinearUnits Lookups](https://ddwiki.reso.org/display/DDW17/LinearUnits+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum LinearUnits {
    /// "[Feet](https://ddwiki.reso.org/display/DDW17/Feet)": The elevation of the property is measured in feet.
    Feet,

    /// "[Meters](https://ddwiki.reso.org/display/DDW17/Meters)": The elevation of the property is measured in meters.
    Meters,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for LinearUnits {
    fn from(s: String) -> LinearUnits {
        match s.as_ref() {
            "Feet" => LinearUnits::Feet,

            "Meters" => LinearUnits::Meters,

            _ => LinearUnits::OpenEnumeration(s),
        }
    }
}

impl From<&str> for LinearUnits {
    fn from(s: &str) -> LinearUnits {
        match s {
            "Feet" => LinearUnits::Feet,

            "Meters" => LinearUnits::Meters,

            _ => LinearUnits::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a LinearUnits> for &'a str {
    fn from(s: &'a LinearUnits) -> &'a str {
        match s {
            LinearUnits::Feet => "Feet",

            LinearUnits::Meters => "Meters",

            LinearUnits::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for LinearUnits {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for LinearUnits {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_linear_units_format {
    use super::LinearUnits;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<LinearUnits>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<LinearUnits>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ListAgentDesignation Lookups](https://ddwiki.reso.org/display/DDW17/ListAgentDesignation+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ListAgentDesignation {
    /// "[Accredited Buyer's Representative / ABR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245436)": The Accredited Buyer’s Representative (ABR®) designation is designed for real estate buyer agents who focus on working directly with buyer-clients.  http://www.rebac.net/abr
    AccreditedBuyersRepresentativeABR,

    /// "[Accredited Land Consultant / ALC](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245437)": Accredited Land Consultants (ALCs) are the most trusted, knowledgeable, experienced, and highest-producing experts in all segments of land. Conferred by the REALTORS® Land Institute, the designation requires successful completion of a rigorous LANDU education program, a specific, high-volume and experience level, and adherence to an honorable Code of Conduct. https://www.nar.realtor/designations-and-certifications/alc
    AccreditedLandConsultantALC,

    /// "[At Home With Diversity / AHWD](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245438)": Learn to work effectively with – and within – today’s diverse real estate market. The At Home With Diversity certification teaches you how to conduct your business with sensitivity to all client profiles and build a business plan to successfully serve them.  https://www.nar.realtor/designations-and-certifications/ahwd
    AtHomeWithDiversityAHWD,

    /// "[Certified Commercial Investment Member / CCIM](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245439)": The Certified Commercial Investment Member (CCIM) designation is commercial real estate’s global standard for professional achievement, earned through an extensive curriculum of 200 classroom hours and professional experiential requirements. https://www.nar.realtor/designations-and-certifications/ccim
    CertifiedCommercialInvestmentMemberCCIM,

    /// "[Certified Distressed Property Expert / CDPE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245440)": A Certified Distressed Property Expert® (CDPE) has a thorough understanding of complex issues in today’s turbulent real estate industry and knowledge of foreclosure avoidance options available to homeowners. CDPEs can provide solutions, specifically short sales, for homeowners facing market hardships.  http://www.cdpe.com/
    CertifiedDistressedPropertyExpertCDPE,

    /// "[Certified International Property Specialist / CIPS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245441)": The CIPS designation is for REALTORS® from the United States and abroad, as well as association staff and volunteer leaders who wish to develop or grow their international real estate business. It will provide you with the knowledge, research, network, and tools to globalize your business.                        https://www.nar.realtor/designations-and-certifications/cips-designation
    CertifiedInternationalPropertySpecialistCIPS,

    /// "[Certified Property Manager / CPM](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245442)": Certified Property Managers® (CPM®) are recognized as experts in real estate management, and they are at the top of the profession. 70% of those who hold the CPM® designation hold the highest management positions in their offices (owner/partner/officer/director). https://www.nar.realtor/designations-and-certifications/cpm
    CertifiedPropertyManagerCPM,

    /// "[Certified Real Estate Brokerage Manager / CRB](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245443)": The Certified Real Estate Brokerage Manager (CRB) Designation raises professional standards, strengthens individual and office performance, and indicates expertise in brokerage management. This designation represents the highest level of professional achievement in real estate brokerage management. You do not need a broker's license to earn the CRB Designation.  https://www.nar.realtor/designations-and-certifications/crb
    CertifiedRealEstateBrokerageManagerCRB,

    /// "[Certified Real Estate Team Specialist / C-RETS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245444)": The Certified Real Estate Team Specialist certification is designed to improve team development, individual leadership skills, and financial performance. The courses provide the tools, strategies, and knowledge that are required of today’s real estate professionals who are either considering or currently operating in a team environment. It is for team leaders, team members, those looking to start a team, and those who simply want to sharpen their management skills.  https://www.nar.realtor/designations-and-certifications/c-rets
    CertifiedRealEstateTeamSpecialistCRETS,

    /// "[Certified Residential Specialist / CRS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245445)": Certified Residential Specialist (CRS) is the highest credential awarded to residential sales agents, managers and brokers.  https://www.nar.realtor/designations-and-certifications/crs
    CertifiedResidentialSpecialistCRS,

    /// "[Counselor of Real Estate / CRE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245446)": The Counselors of Real Estate®  is an international group of recognized professionals who provide seasoned, expert, objective advice on real property and land-related matters. Only 1,100 practitioners throughout the world carry the CRE® designation. Membership is by invitation only.  https://www.nar.realtor/designations-and-certifications/cre
    CounselorofRealEstateCRE,

    /// "[e-PRO](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245447)": NAR's e-PRO® certification  teaches you to use cutting-edge technologies and digital initiatives to link up with today's savvy real estate consumer.  https://www.nar.realtor/designations-and-certifications/e-pro
    EPRO,

    /// "[General Accredited Appraiser / GAA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245448)": For general appraisers, this designation is awarded to those whose education and experience exceed state appraisal certification requirements and is supported by the National Association of REALTORS®. https://www.nar.realtor/designations-and-certifications/gaa
    GeneralAccreditedAppraiserGAA,

    /// "[Graduate, REALTOR Institute / GRI](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245449)": REALTORS® with the GRI designation have in-depth training in legal and regulatory issues, technology, professional standards, and the sales process. Earning the designation is a way to stand out to prospective buyers and sellers as a professional with expertise in these areas.  https://www.nar.realtor/designations-and-certifications/gri
    GraduateREALTORInstituteGRI,

    /// "[Military Relocation Professional / MRP](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245450)": NAR's Military Relocation Professional certification focuses on educating real estate professionals about working with current and former military service members to find housing solutions that best suit their needs and take full advantage of military benefits and support.  https://www.nar.realtor/designations-and-certifications/mrp
    MilitaryRelocationProfessionalMRP,

    /// "[NAR's Green Designation / GREEN](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245451)": Through NAR's Green Designation, the Green Resource Council provides ongoing education, resources and tools to help real estate practitioners find, understand, and market properties with green features.  https://www.nar.realtor/designations-and-certifications/green
    NARsGreenDesignationGREEN,

    /// "[Performance Management Network / PMN](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245452)": This designation is unique to the REALTOR® family designations, emphasizing that in order to enhance your business, you must enhance yourself. It focuses on negotiating strategies and tactics, networking and referrals, business planning and systems, personal performance management and  leadership development.  https://www.nar.realtor/designations-and-certifications/pmn
    PerformanceManagementNetworkPMN,

    /// "[Pricing Strategy Advisor / PSA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245453)": Enhance your skills in pricing properties, creating CMAs, working with appraisers, and guiding clients through the anxieties and misperceptions they often have about home values with NAR’s PSA (Pricing Strategy Advisor) certification. https://www.nar.realtor/designations-and-certifications/psa
    PricingStrategyAdvisorPSA,

    /// "[Real Estate Negotiation Expert / RENE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245454)": This certification is for real estate professionals who want to sharpen their negotiation skills. The RENE certification program gives REALTORS® the tips and tools they need to be skillful advocates for their clients.  https://www.nar.realtor/designations-and-certifications/rene
    RealEstateNegotiationExpertRENE,

    /// "[REALTOR Association Certified Executive / RCE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245455)": RCE is the only professional designation designed specifically for REALTOR® association executives. RCE designees exemplify goal-oriented AEs with drive, experience and commitment to professional growth.  https://www.nar.realtor/designations-and-certifications/rce
    REALTORAssociationCertifiedExecutiveRCE,

    /// "[Residential Accredited Appraiser / RAA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245456)": For residential appraisers, this designation is awarded to those whose education and experience exceed state appraisal certification requirements and is supported by the National Association of REALTORS®.  https://www.nar.realtor/designations-and-certifications/raa
    ResidentialAccreditedAppraiserRAA,

    /// "[Resort & Second-Home Property Specialist / RSPS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245457)": This certification is designed for REALTORS® who facilitate the buying, selling, or management of properties for investment, development, retirement, or second homes in a resort, recreational and/or vacation destination are involved in this market niche.  https://www.nar.realtor/designations-and-certifications/rsps
    ResortSecondHomePropertySpecialistRSPS,

    /// "[Seller Representative Specialist / SRS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245458)": The Seller Representative Specialist (SRS) designation is the premier credential in seller representation. It is designed to elevate professional standards and enhance personal performance. The designation is awarded to real estate practitioners by the Real Estate Business Institute (REBI) who meet specific educational and practical experience criteria.  https://www.nar.realtor/designations-and-certifications/seller-representative-specialist-srs
    SellerRepresentativeSpecialistSRS,

    /// "[Seniors Real Estate Specialist / SRES](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245459)": The SRES® Designation program educates REALTORS® on how to profitably and ethically serve the real estate needs of the fastest growing market in real estate, clients age 50+. By earning the SRES® designation, you gain access to valuable member benefits, useful resources, and networking opportunities across the U.S. and Canada to help you in your business.  https://www.nar.realtor/designations-and-certifications/sres
    SeniorsRealEstateSpecialistSRES,

    /// "[Short Sales & Foreclosure Resource / SFR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245460)": The SFR® certification  teaches real estate professionals to work with distressed sellers and the finance, tax, and legal professionals who can help them, qualify sellers for short sales, develop a short sale package, negotiate with lenders, safeguard your commission, limit risk, and protect buyers.  https://www.nar.realtor/designations-and-certifications/sfr
    ShortSalesForeclosureResourceSFR,

    /// "[Society of Industrial and Office REALTORS / SIOR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245461)": The SIOR designation is held by only the most knowledgeable, experienced, and successful commercial real estate brokerage specialists. To earn it, designees must meet standards of experience, production, education, ethics, and provide recommendations.  https://www.nar.realtor/designations-and-certifications/sior
    SocietyofIndustrialandOfficeREALTORSSIOR,

    /// "[Transnational Referral Certification / TRC](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245462)": Real estate professionals who have taken the Transnational Referral Certified (TRC) training, have completed special training on  making and receiving client referrals from professionals in other countries. https://worldproperties.com/about-us/international-referrals-and-trc/
    TransnationalReferralCertificationTRC,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ListAgentDesignation {
    fn from(s: String) -> ListAgentDesignation {
        match s.as_ref() {
            "Accredited Buyer's Representative / ABR" => {
                ListAgentDesignation::AccreditedBuyersRepresentativeABR
            }

            "Accredited Land Consultant / ALC" => ListAgentDesignation::AccreditedLandConsultantALC,

            "At Home With Diversity / AHWD" => ListAgentDesignation::AtHomeWithDiversityAHWD,

            "Certified Commercial Investment Member / CCIM" => {
                ListAgentDesignation::CertifiedCommercialInvestmentMemberCCIM
            }

            "Certified Distressed Property Expert / CDPE" => {
                ListAgentDesignation::CertifiedDistressedPropertyExpertCDPE
            }

            "Certified International Property Specialist / CIPS" => {
                ListAgentDesignation::CertifiedInternationalPropertySpecialistCIPS
            }

            "Certified Property Manager / CPM" => ListAgentDesignation::CertifiedPropertyManagerCPM,

            "Certified Real Estate Brokerage Manager / CRB" => {
                ListAgentDesignation::CertifiedRealEstateBrokerageManagerCRB
            }

            "Certified Real Estate Team Specialist / C-RETS" => {
                ListAgentDesignation::CertifiedRealEstateTeamSpecialistCRETS
            }

            "Certified Residential Specialist / CRS" => {
                ListAgentDesignation::CertifiedResidentialSpecialistCRS
            }

            "Counselor of Real Estate / CRE" => ListAgentDesignation::CounselorofRealEstateCRE,

            "e-PRO" => ListAgentDesignation::EPRO,

            "General Accredited Appraiser / GAA" => {
                ListAgentDesignation::GeneralAccreditedAppraiserGAA
            }

            "Graduate, REALTOR Institute / GRI" => {
                ListAgentDesignation::GraduateREALTORInstituteGRI
            }

            "Military Relocation Professional / MRP" => {
                ListAgentDesignation::MilitaryRelocationProfessionalMRP
            }

            "NAR's Green Designation / GREEN" => ListAgentDesignation::NARsGreenDesignationGREEN,

            "Performance Management Network / PMN" => {
                ListAgentDesignation::PerformanceManagementNetworkPMN
            }

            "Pricing Strategy Advisor / PSA" => ListAgentDesignation::PricingStrategyAdvisorPSA,

            "Real Estate Negotiation Expert / RENE" => {
                ListAgentDesignation::RealEstateNegotiationExpertRENE
            }

            "REALTOR Association Certified Executive / RCE" => {
                ListAgentDesignation::REALTORAssociationCertifiedExecutiveRCE
            }

            "Residential Accredited Appraiser / RAA" => {
                ListAgentDesignation::ResidentialAccreditedAppraiserRAA
            }

            "Resort & Second-Home Property Specialist / RSPS" => {
                ListAgentDesignation::ResortSecondHomePropertySpecialistRSPS
            }

            "Seller Representative Specialist / SRS" => {
                ListAgentDesignation::SellerRepresentativeSpecialistSRS
            }

            "Seniors Real Estate Specialist / SRES" => {
                ListAgentDesignation::SeniorsRealEstateSpecialistSRES
            }

            "Short Sales & Foreclosure Resource / SFR" => {
                ListAgentDesignation::ShortSalesForeclosureResourceSFR
            }

            "Society of Industrial and Office REALTORS / SIOR" => {
                ListAgentDesignation::SocietyofIndustrialandOfficeREALTORSSIOR
            }

            "Transnational Referral Certification / TRC" => {
                ListAgentDesignation::TransnationalReferralCertificationTRC
            }

            _ => ListAgentDesignation::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ListAgentDesignation {
    fn from(s: &str) -> ListAgentDesignation {
        match s {
            "Accredited Buyer's Representative / ABR" => {
                ListAgentDesignation::AccreditedBuyersRepresentativeABR
            }

            "Accredited Land Consultant / ALC" => ListAgentDesignation::AccreditedLandConsultantALC,

            "At Home With Diversity / AHWD" => ListAgentDesignation::AtHomeWithDiversityAHWD,

            "Certified Commercial Investment Member / CCIM" => {
                ListAgentDesignation::CertifiedCommercialInvestmentMemberCCIM
            }

            "Certified Distressed Property Expert / CDPE" => {
                ListAgentDesignation::CertifiedDistressedPropertyExpertCDPE
            }

            "Certified International Property Specialist / CIPS" => {
                ListAgentDesignation::CertifiedInternationalPropertySpecialistCIPS
            }

            "Certified Property Manager / CPM" => ListAgentDesignation::CertifiedPropertyManagerCPM,

            "Certified Real Estate Brokerage Manager / CRB" => {
                ListAgentDesignation::CertifiedRealEstateBrokerageManagerCRB
            }

            "Certified Real Estate Team Specialist / C-RETS" => {
                ListAgentDesignation::CertifiedRealEstateTeamSpecialistCRETS
            }

            "Certified Residential Specialist / CRS" => {
                ListAgentDesignation::CertifiedResidentialSpecialistCRS
            }

            "Counselor of Real Estate / CRE" => ListAgentDesignation::CounselorofRealEstateCRE,

            "e-PRO" => ListAgentDesignation::EPRO,

            "General Accredited Appraiser / GAA" => {
                ListAgentDesignation::GeneralAccreditedAppraiserGAA
            }

            "Graduate, REALTOR Institute / GRI" => {
                ListAgentDesignation::GraduateREALTORInstituteGRI
            }

            "Military Relocation Professional / MRP" => {
                ListAgentDesignation::MilitaryRelocationProfessionalMRP
            }

            "NAR's Green Designation / GREEN" => ListAgentDesignation::NARsGreenDesignationGREEN,

            "Performance Management Network / PMN" => {
                ListAgentDesignation::PerformanceManagementNetworkPMN
            }

            "Pricing Strategy Advisor / PSA" => ListAgentDesignation::PricingStrategyAdvisorPSA,

            "Real Estate Negotiation Expert / RENE" => {
                ListAgentDesignation::RealEstateNegotiationExpertRENE
            }

            "REALTOR Association Certified Executive / RCE" => {
                ListAgentDesignation::REALTORAssociationCertifiedExecutiveRCE
            }

            "Residential Accredited Appraiser / RAA" => {
                ListAgentDesignation::ResidentialAccreditedAppraiserRAA
            }

            "Resort & Second-Home Property Specialist / RSPS" => {
                ListAgentDesignation::ResortSecondHomePropertySpecialistRSPS
            }

            "Seller Representative Specialist / SRS" => {
                ListAgentDesignation::SellerRepresentativeSpecialistSRS
            }

            "Seniors Real Estate Specialist / SRES" => {
                ListAgentDesignation::SeniorsRealEstateSpecialistSRES
            }

            "Short Sales & Foreclosure Resource / SFR" => {
                ListAgentDesignation::ShortSalesForeclosureResourceSFR
            }

            "Society of Industrial and Office REALTORS / SIOR" => {
                ListAgentDesignation::SocietyofIndustrialandOfficeREALTORSSIOR
            }

            "Transnational Referral Certification / TRC" => {
                ListAgentDesignation::TransnationalReferralCertificationTRC
            }

            _ => ListAgentDesignation::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ListAgentDesignation> for &'a str {
    fn from(s: &'a ListAgentDesignation) -> &'a str {
        match s {
            ListAgentDesignation::AccreditedBuyersRepresentativeABR => {
                "Accredited Buyer's Representative / ABR"
            }

            ListAgentDesignation::AccreditedLandConsultantALC => "Accredited Land Consultant / ALC",

            ListAgentDesignation::AtHomeWithDiversityAHWD => "At Home With Diversity / AHWD",

            ListAgentDesignation::CertifiedCommercialInvestmentMemberCCIM => {
                "Certified Commercial Investment Member / CCIM"
            }

            ListAgentDesignation::CertifiedDistressedPropertyExpertCDPE => {
                "Certified Distressed Property Expert / CDPE"
            }

            ListAgentDesignation::CertifiedInternationalPropertySpecialistCIPS => {
                "Certified International Property Specialist / CIPS"
            }

            ListAgentDesignation::CertifiedPropertyManagerCPM => "Certified Property Manager / CPM",

            ListAgentDesignation::CertifiedRealEstateBrokerageManagerCRB => {
                "Certified Real Estate Brokerage Manager / CRB"
            }

            ListAgentDesignation::CertifiedRealEstateTeamSpecialistCRETS => {
                "Certified Real Estate Team Specialist / C-RETS"
            }

            ListAgentDesignation::CertifiedResidentialSpecialistCRS => {
                "Certified Residential Specialist / CRS"
            }

            ListAgentDesignation::CounselorofRealEstateCRE => "Counselor of Real Estate / CRE",

            ListAgentDesignation::EPRO => "e-PRO",

            ListAgentDesignation::GeneralAccreditedAppraiserGAA => {
                "General Accredited Appraiser / GAA"
            }

            ListAgentDesignation::GraduateREALTORInstituteGRI => {
                "Graduate, REALTOR Institute / GRI"
            }

            ListAgentDesignation::MilitaryRelocationProfessionalMRP => {
                "Military Relocation Professional / MRP"
            }

            ListAgentDesignation::NARsGreenDesignationGREEN => "NAR's Green Designation / GREEN",

            ListAgentDesignation::PerformanceManagementNetworkPMN => {
                "Performance Management Network / PMN"
            }

            ListAgentDesignation::PricingStrategyAdvisorPSA => "Pricing Strategy Advisor / PSA",

            ListAgentDesignation::RealEstateNegotiationExpertRENE => {
                "Real Estate Negotiation Expert / RENE"
            }

            ListAgentDesignation::REALTORAssociationCertifiedExecutiveRCE => {
                "REALTOR Association Certified Executive / RCE"
            }

            ListAgentDesignation::ResidentialAccreditedAppraiserRAA => {
                "Residential Accredited Appraiser / RAA"
            }

            ListAgentDesignation::ResortSecondHomePropertySpecialistRSPS => {
                "Resort & Second-Home Property Specialist / RSPS"
            }

            ListAgentDesignation::SellerRepresentativeSpecialistSRS => {
                "Seller Representative Specialist / SRS"
            }

            ListAgentDesignation::SeniorsRealEstateSpecialistSRES => {
                "Seniors Real Estate Specialist / SRES"
            }

            ListAgentDesignation::ShortSalesForeclosureResourceSFR => {
                "Short Sales & Foreclosure Resource / SFR"
            }

            ListAgentDesignation::SocietyofIndustrialandOfficeREALTORSSIOR => {
                "Society of Industrial and Office REALTORS / SIOR"
            }

            ListAgentDesignation::TransnationalReferralCertificationTRC => {
                "Transnational Referral Certification / TRC"
            }

            ListAgentDesignation::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ListAgentDesignation {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ListAgentDesignation {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_list_agent_designation_format {
    use super::ListAgentDesignation;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ListAgentDesignation>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ListAgentDesignation>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ListingAgreement Lookups](https://ddwiki.reso.org/display/DDW17/ListingAgreement+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ListingAgreement {
    /// "[Exclusive Agency](https://ddwiki.reso.org/display/DDW17/Exclusive+Agency)": A contract giving one Brokerage Firm, for a specified time, the right to sell/lease the property and also allowing the owner, acting alone, to sell/lease the property without paying commission.
    ExclusiveAgency,

    /// "[Exclusive Right To Lease](https://ddwiki.reso.org/display/DDW17/Exclusive+Right+To+Lease)": A contract giving the Broker the right to collect commission if the property is leased by anyone, including the owning, during the term of the agreement.
    ExclusiveRightToLease,

    /// "[Exclusive Right To Sell](https://ddwiki.reso.org/display/DDW17/Exclusive+Right+To+Sell)": A contract giving the Broker the right to collect commission if the property is sold by anyone, including the owning, during the term of the agreement.
    ExclusiveRightToSell,

    /// "[Exclusive Right With Exception](https://ddwiki.reso.org/display/DDW17/Exclusive+Right+With+Exception)": A contract giving the Broker the right to collect commission if the property is sold by anyone, including the owner, during the term of the agreement unless some specified exceptions to the agreement occur.
    ExclusiveRightWithException,

    /// "[Net](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245374)": A listing in which the broker's commission is the excess of the sale price over an agreed-upon (net0 price to the seller; illegal in some states because it can create a conflict of interest for the broker.
    Net,

    /// "[Open](https://ddwiki.reso.org/display/DDW17/Open)": Often used for commercial property, a listing given to any number of Brokers without liability to compensate any except the one who first secures a buyer who is ready, willing and able to meet the terms of the listing and secures the seller's acceptance.  The seller may, acting alone, sell the property without paying commission.
    Open,

    /// "[Probate](https://ddwiki.reso.org/display/DDW17/Probate)": An Exclusive Right To Sell listing agreement that also resides under authority of the local probate code.
    Probate,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ListingAgreement {
    fn from(s: String) -> ListingAgreement {
        match s.as_ref() {
            "Exclusive Agency" => ListingAgreement::ExclusiveAgency,

            "Exclusive Right To Lease" => ListingAgreement::ExclusiveRightToLease,

            "Exclusive Right To Sell" => ListingAgreement::ExclusiveRightToSell,

            "Exclusive Right With Exception" => ListingAgreement::ExclusiveRightWithException,

            "Net" => ListingAgreement::Net,

            "Open" => ListingAgreement::Open,

            "Probate" => ListingAgreement::Probate,

            _ => ListingAgreement::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ListingAgreement {
    fn from(s: &str) -> ListingAgreement {
        match s {
            "Exclusive Agency" => ListingAgreement::ExclusiveAgency,

            "Exclusive Right To Lease" => ListingAgreement::ExclusiveRightToLease,

            "Exclusive Right To Sell" => ListingAgreement::ExclusiveRightToSell,

            "Exclusive Right With Exception" => ListingAgreement::ExclusiveRightWithException,

            "Net" => ListingAgreement::Net,

            "Open" => ListingAgreement::Open,

            "Probate" => ListingAgreement::Probate,

            _ => ListingAgreement::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ListingAgreement> for &'a str {
    fn from(s: &'a ListingAgreement) -> &'a str {
        match s {
            ListingAgreement::ExclusiveAgency => "Exclusive Agency",

            ListingAgreement::ExclusiveRightToLease => "Exclusive Right To Lease",

            ListingAgreement::ExclusiveRightToSell => "Exclusive Right To Sell",

            ListingAgreement::ExclusiveRightWithException => "Exclusive Right With Exception",

            ListingAgreement::Net => "Net",

            ListingAgreement::Open => "Open",

            ListingAgreement::Probate => "Probate",

            ListingAgreement::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ListingAgreement {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ListingAgreement {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_listing_agreement_format {
    use super::ListingAgreement;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ListingAgreement>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ListingAgreement>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ListingService Lookups](https://ddwiki.reso.org/display/DDW17/ListingService+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ListingService {
    /// "[Entry Only](https://ddwiki.reso.org/display/DDW17/Entry+Only)": The only service provided by the brokerage is the input of the listing into the MLS system.
    EntryOnly,

    /// "[Full Service](https://ddwiki.reso.org/display/DDW17/Full+Service)": A full set of services offered by a brokerage.
    FullService,

    /// "[Limited Service](https://ddwiki.reso.org/display/DDW17/Limited+Service)": A limited set of services offered by a brokerage
    LimitedService,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ListingService {
    fn from(s: String) -> ListingService {
        match s.as_ref() {
            "Entry Only" => ListingService::EntryOnly,

            "Full Service" => ListingService::FullService,

            "Limited Service" => ListingService::LimitedService,

            _ => ListingService::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ListingService {
    fn from(s: &str) -> ListingService {
        match s {
            "Entry Only" => ListingService::EntryOnly,

            "Full Service" => ListingService::FullService,

            "Limited Service" => ListingService::LimitedService,

            _ => ListingService::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ListingService> for &'a str {
    fn from(s: &'a ListingService) -> &'a str {
        match s {
            ListingService::EntryOnly => "Entry Only",

            ListingService::FullService => "Full Service",

            ListingService::LimitedService => "Limited Service",

            ListingService::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ListingService {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ListingService {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_listing_service_format {
    use super::ListingService;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ListingService>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ListingService>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ListingTerms Lookups](https://ddwiki.reso.org/display/DDW17/ListingTerms+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ListingTerms {
    /// "[1031 Exchange](https://ddwiki.reso.org/display/DDW17/1031+Exchange)": The seller is may be interested in a 1031 exchange as part of the sale.
    _1031Exchange,

    /// "[All Inclusive Trust Deed](https://ddwiki.reso.org/display/DDW17/All+Inclusive+Trust+Deed)": The property is under an all inclusive trust deed.
    AllInclusiveTrustDeed,

    /// "[Assumable](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245384)": The seller is interested in assumable financing.
    Assumable,

    /// "[Cash](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245385)": The seller would like a cash sale.
    Cash,

    /// "[Contract](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245386)": The seller may be interested in an agreement to perform services, provide product, share of income, or some other agreement as the method of payment for the property.
    Contract,

    /// "[Conventional](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245387)": The seller may accept a buyer using conventional financing to purchase the home.
    Conventional,

    /// "[Existing Bonds](https://ddwiki.reso.org/display/DDW17/Existing+Bonds)": The property for sale has existing bonds.
    ExistingBonds,

    /// "[FHA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245389)": The seller may accept a buyer with a loan from an approved provider that follows the guidelines of, and is insured by, the Federal Housing Administration.
    FHA,

    /// "[Land Use Fee](https://ddwiki.reso.org/display/DDW17/Land+Use+Fee)": The listed property has a land use fee.
    LandUseFee,

    /// "[Lease Back](https://ddwiki.reso.org/display/DDW17/Lease+Back)": The seller may be interested in the simultaneous sale of a property with a lease back to the seller, who then becomes the tenant.
    LeaseBack,

    /// "[Lease Option](https://ddwiki.reso.org/display/DDW17/Lease+Option)": The seller may be interested in selling as a lease option to the buyer.
    LeaseOption,

    /// "[Lease Purchase](https://ddwiki.reso.org/display/DDW17/Lease+Purchase)": The seller may be interested in selling as a lease purchase.
    LeasePurchase,

    /// "[Lien Release](https://ddwiki.reso.org/display/DDW17/Lien+Release)": The property for sale may require a lien release.
    LienRelease,

    /// "[Owner May Carry](https://ddwiki.reso.org/display/DDW17/Owner+May+Carry)": The seller may be interested in carrying the mortgage note.
    OwnerMayCarry,

    /// "[Owner Pay Points](https://ddwiki.reso.org/display/DDW17/Owner+Pay+Points)": The seller may carry points.
    OwnerPayPoints,

    /// "[Owner Will Carry](https://ddwiki.reso.org/display/DDW17/Owner+Will+Carry)": The seller will carry points.
    OwnerWillCarry,

    /// "[Private Financing Available](https://ddwiki.reso.org/display/DDW17/Private+Financing+Available)": Financing is provided by a private party.
    PrivateFinancingAvailable,

    /// "[Relocation Property](https://ddwiki.reso.org/display/DDW17/Relocation+Property)": The property for sale is a relocation property.
    RelocationProperty,

    /// "[Seller Equity Share](https://ddwiki.reso.org/display/DDW17/Seller+Equity+Share)": The seller may be interested in investing in an equity share.
    SellerEquityShare,

    /// "[Special Funding](https://ddwiki.reso.org/display/DDW17/Special+Funding)": The seller may be interested in a special funding arrangement.
    SpecialFunding,

    /// "[Submit](https://ddwiki.reso.org/display/DDW17/Submit)": Contact the listing agent for the listing terms.
    Submit,

    /// "[Trade](https://ddwiki.reso.org/display/DDW17/Trade)": The seller may be interested in a trade arrangement.
    Trade,

    /// "[Trust Conveyance](https://ddwiki.reso.org/display/DDW17/Trust+Conveyance)": A trust conveyance (to another trustee) may be involved in the sale of the property.
    TrustConveyance,

    /// "[Trust Deed](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245405)": The seller may accept financing where title of the property is placed with a trustee who secures payment of the loan for a beneficiary.
    TrustDeed,

    /// "[USDA Loan](https://ddwiki.reso.org/display/DDW17/USDA+Loan)": The seller may accept a loan from an approved provider that follows the guidelines of, and is insured by, the US Department of Agriculture.
    USDALoan,

    /// "[VA Loan](https://ddwiki.reso.org/display/DDW17/VA+Loan)": The seller may accept a loan from an approved provider that follows the guidelines of, and is insured by, the US Department of Veteran's Affairs.
    VALoan,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ListingTerms {
    fn from(s: String) -> ListingTerms {
        match s.as_ref() {
            "1031 Exchange" => ListingTerms::_1031Exchange,

            "All Inclusive Trust Deed" => ListingTerms::AllInclusiveTrustDeed,

            "Assumable" => ListingTerms::Assumable,

            "Cash" => ListingTerms::Cash,

            "Contract" => ListingTerms::Contract,

            "Conventional" => ListingTerms::Conventional,

            "Existing Bonds" => ListingTerms::ExistingBonds,

            "FHA" => ListingTerms::FHA,

            "Land Use Fee" => ListingTerms::LandUseFee,

            "Lease Back" => ListingTerms::LeaseBack,

            "Lease Option" => ListingTerms::LeaseOption,

            "Lease Purchase" => ListingTerms::LeasePurchase,

            "Lien Release" => ListingTerms::LienRelease,

            "Owner May Carry" => ListingTerms::OwnerMayCarry,

            "Owner Pay Points" => ListingTerms::OwnerPayPoints,

            "Owner Will Carry" => ListingTerms::OwnerWillCarry,

            "Private Financing Available" => ListingTerms::PrivateFinancingAvailable,

            "Relocation Property" => ListingTerms::RelocationProperty,

            "Seller Equity Share" => ListingTerms::SellerEquityShare,

            "Special Funding" => ListingTerms::SpecialFunding,

            "Submit" => ListingTerms::Submit,

            "Trade" => ListingTerms::Trade,

            "Trust Conveyance" => ListingTerms::TrustConveyance,

            "Trust Deed" => ListingTerms::TrustDeed,

            "USDA Loan" => ListingTerms::USDALoan,

            "VA Loan" => ListingTerms::VALoan,

            _ => ListingTerms::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ListingTerms {
    fn from(s: &str) -> ListingTerms {
        match s {
            "1031 Exchange" => ListingTerms::_1031Exchange,

            "All Inclusive Trust Deed" => ListingTerms::AllInclusiveTrustDeed,

            "Assumable" => ListingTerms::Assumable,

            "Cash" => ListingTerms::Cash,

            "Contract" => ListingTerms::Contract,

            "Conventional" => ListingTerms::Conventional,

            "Existing Bonds" => ListingTerms::ExistingBonds,

            "FHA" => ListingTerms::FHA,

            "Land Use Fee" => ListingTerms::LandUseFee,

            "Lease Back" => ListingTerms::LeaseBack,

            "Lease Option" => ListingTerms::LeaseOption,

            "Lease Purchase" => ListingTerms::LeasePurchase,

            "Lien Release" => ListingTerms::LienRelease,

            "Owner May Carry" => ListingTerms::OwnerMayCarry,

            "Owner Pay Points" => ListingTerms::OwnerPayPoints,

            "Owner Will Carry" => ListingTerms::OwnerWillCarry,

            "Private Financing Available" => ListingTerms::PrivateFinancingAvailable,

            "Relocation Property" => ListingTerms::RelocationProperty,

            "Seller Equity Share" => ListingTerms::SellerEquityShare,

            "Special Funding" => ListingTerms::SpecialFunding,

            "Submit" => ListingTerms::Submit,

            "Trade" => ListingTerms::Trade,

            "Trust Conveyance" => ListingTerms::TrustConveyance,

            "Trust Deed" => ListingTerms::TrustDeed,

            "USDA Loan" => ListingTerms::USDALoan,

            "VA Loan" => ListingTerms::VALoan,

            _ => ListingTerms::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ListingTerms> for &'a str {
    fn from(s: &'a ListingTerms) -> &'a str {
        match s {
            ListingTerms::_1031Exchange => "1031 Exchange",

            ListingTerms::AllInclusiveTrustDeed => "All Inclusive Trust Deed",

            ListingTerms::Assumable => "Assumable",

            ListingTerms::Cash => "Cash",

            ListingTerms::Contract => "Contract",

            ListingTerms::Conventional => "Conventional",

            ListingTerms::ExistingBonds => "Existing Bonds",

            ListingTerms::FHA => "FHA",

            ListingTerms::LandUseFee => "Land Use Fee",

            ListingTerms::LeaseBack => "Lease Back",

            ListingTerms::LeaseOption => "Lease Option",

            ListingTerms::LeasePurchase => "Lease Purchase",

            ListingTerms::LienRelease => "Lien Release",

            ListingTerms::OwnerMayCarry => "Owner May Carry",

            ListingTerms::OwnerPayPoints => "Owner Pay Points",

            ListingTerms::OwnerWillCarry => "Owner Will Carry",

            ListingTerms::PrivateFinancingAvailable => "Private Financing Available",

            ListingTerms::RelocationProperty => "Relocation Property",

            ListingTerms::SellerEquityShare => "Seller Equity Share",

            ListingTerms::SpecialFunding => "Special Funding",

            ListingTerms::Submit => "Submit",

            ListingTerms::Trade => "Trade",

            ListingTerms::TrustConveyance => "Trust Conveyance",

            ListingTerms::TrustDeed => "Trust Deed",

            ListingTerms::USDALoan => "USDA Loan",

            ListingTerms::VALoan => "VA Loan",

            ListingTerms::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ListingTerms {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ListingTerms {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_listing_terms_format {
    use super::ListingTerms;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ListingTerms>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ListingTerms>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [LockBoxType Lookups](https://ddwiki.reso.org/display/DDW17/LockBoxType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum LockBoxType {
    /// "[Call Listing Office](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245409)": Call the listing office for information about accessing the property.
    CallListingOffice,

    /// "[Call Seller Direct](https://ddwiki.reso.org/display/DDW17/Call+Seller+Direct)": Call the seller directly to arrange for access to the property.
    CallSellerDirect,

    /// "[Combo](https://ddwiki.reso.org/display/DDW17/Combo)": The lockbox on the property is opened via combination.  See remarks or contact the agent/office for the combination.
    Combo,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245412)": There is no lockbox on the property.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245416)": A lock box type not included in this list.
    Other,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245413)": See remarks for details about the lockbox and accessing the property.
    SeeRemarks,

    /// "[SentriLock](https://ddwiki.reso.org/display/DDW17/SentriLock)": The lockbox is from SentriLock and requires a SentriLock key or access code.
    SentriLock,

    /// "[Supra](https://ddwiki.reso.org/display/DDW17/Supra)": The lockbox is from Supra and requires a Supra key.
    Supra,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for LockBoxType {
    fn from(s: String) -> LockBoxType {
        match s.as_ref() {
            "Call Listing Office" => LockBoxType::CallListingOffice,

            "Call Seller Direct" => LockBoxType::CallSellerDirect,

            "Combo" => LockBoxType::Combo,

            "None" => LockBoxType::None,

            "Other" => LockBoxType::Other,

            "See Remarks" => LockBoxType::SeeRemarks,

            "SentriLock" => LockBoxType::SentriLock,

            "Supra" => LockBoxType::Supra,

            _ => LockBoxType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for LockBoxType {
    fn from(s: &str) -> LockBoxType {
        match s {
            "Call Listing Office" => LockBoxType::CallListingOffice,

            "Call Seller Direct" => LockBoxType::CallSellerDirect,

            "Combo" => LockBoxType::Combo,

            "None" => LockBoxType::None,

            "Other" => LockBoxType::Other,

            "See Remarks" => LockBoxType::SeeRemarks,

            "SentriLock" => LockBoxType::SentriLock,

            "Supra" => LockBoxType::Supra,

            _ => LockBoxType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a LockBoxType> for &'a str {
    fn from(s: &'a LockBoxType) -> &'a str {
        match s {
            LockBoxType::CallListingOffice => "Call Listing Office",

            LockBoxType::CallSellerDirect => "Call Seller Direct",

            LockBoxType::Combo => "Combo",

            LockBoxType::None => "None",

            LockBoxType::Other => "Other",

            LockBoxType::SeeRemarks => "See Remarks",

            LockBoxType::SentriLock => "SentriLock",

            LockBoxType::Supra => "Supra",

            LockBoxType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for LockBoxType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for LockBoxType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_lock_box_type_format {
    use super::LockBoxType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<LockBoxType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<LockBoxType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [LotDimensionsSource Lookups](https://ddwiki.reso.org/display/DDW17/LotDimensionsSource+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum LotDimensionsSource {
    /// "[Appraiser](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245464)": The lot dimensions were provided by an appraiser.
    Appraiser,

    /// "[Assessor](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245465)": The lot dimensions were provided by the assessor.
    Assessor,

    /// "[Builder](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245466)": The lot dimensions were provided by the builder.
    Builder,

    /// "[Estimated](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245467)": The lot dimensions were estimated.
    Estimated,

    /// "[GIS Calculated](https://ddwiki.reso.org/display/DDW17/GIS+Calculated)": The lot dimensions were GIS calculated.
    GISCalculated,

    /// "[Measured](https://ddwiki.reso.org/display/DDW17/Measured)": The lot dimensions were measured.
    Measured,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245470)": The lot dimensions were provided by a source other than those in this list.
    Other,

    /// "[Owner](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245471)": The lot dimensions were provided by the owner.
    Owner,

    /// "[Public Records](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245472)": The lot dimensions were taken from public records.
    PublicRecords,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245473)": See the Public or Private Remarks for details on the source of the lot dimensions.
    SeeRemarks,

    /// "[Survey](https://ddwiki.reso.org/display/DDW17/Survey)": The lot dimensions were provided by a land survey.
    Survey,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for LotDimensionsSource {
    fn from(s: String) -> LotDimensionsSource {
        match s.as_ref() {
            "Appraiser" => LotDimensionsSource::Appraiser,

            "Assessor" => LotDimensionsSource::Assessor,

            "Builder" => LotDimensionsSource::Builder,

            "Estimated" => LotDimensionsSource::Estimated,

            "GIS Calculated" => LotDimensionsSource::GISCalculated,

            "Measured" => LotDimensionsSource::Measured,

            "Other" => LotDimensionsSource::Other,

            "Owner" => LotDimensionsSource::Owner,

            "Public Records" => LotDimensionsSource::PublicRecords,

            "See Remarks" => LotDimensionsSource::SeeRemarks,

            "Survey" => LotDimensionsSource::Survey,

            _ => LotDimensionsSource::OpenEnumeration(s),
        }
    }
}

impl From<&str> for LotDimensionsSource {
    fn from(s: &str) -> LotDimensionsSource {
        match s {
            "Appraiser" => LotDimensionsSource::Appraiser,

            "Assessor" => LotDimensionsSource::Assessor,

            "Builder" => LotDimensionsSource::Builder,

            "Estimated" => LotDimensionsSource::Estimated,

            "GIS Calculated" => LotDimensionsSource::GISCalculated,

            "Measured" => LotDimensionsSource::Measured,

            "Other" => LotDimensionsSource::Other,

            "Owner" => LotDimensionsSource::Owner,

            "Public Records" => LotDimensionsSource::PublicRecords,

            "See Remarks" => LotDimensionsSource::SeeRemarks,

            "Survey" => LotDimensionsSource::Survey,

            _ => LotDimensionsSource::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a LotDimensionsSource> for &'a str {
    fn from(s: &'a LotDimensionsSource) -> &'a str {
        match s {
            LotDimensionsSource::Appraiser => "Appraiser",

            LotDimensionsSource::Assessor => "Assessor",

            LotDimensionsSource::Builder => "Builder",

            LotDimensionsSource::Estimated => "Estimated",

            LotDimensionsSource::GISCalculated => "GIS Calculated",

            LotDimensionsSource::Measured => "Measured",

            LotDimensionsSource::Other => "Other",

            LotDimensionsSource::Owner => "Owner",

            LotDimensionsSource::PublicRecords => "Public Records",

            LotDimensionsSource::SeeRemarks => "See Remarks",

            LotDimensionsSource::Survey => "Survey",

            LotDimensionsSource::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for LotDimensionsSource {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for LotDimensionsSource {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_lot_dimensions_source_format {
    use super::LotDimensionsSource;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<LotDimensionsSource>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<LotDimensionsSource>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [LotFeatures Lookups](https://ddwiki.reso.org/display/DDW17/LotFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum LotFeatures {
    /// "[Agricultural](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245501)": The lot has agricultural features.
    Agricultural,

    /// "[Back Yard](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245502)": The lot has a back yard.
    BackYard,

    /// "[Bluff](https://ddwiki.reso.org/display/DDW17/Bluff)": The lot is on or near a bluff.
    Bluff,

    /// "[City Lot](https://ddwiki.reso.org/display/DDW17/City+Lot)": The lot is in a city/urban setting.
    CityLot,

    /// "[Cleared](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245505)": The lot has been cleared.
    Cleared,

    /// "[Close to Clubhouse](https://ddwiki.reso.org/display/DDW17/Close+to+Clubhouse)": The lot is located close to the community clubhouse.
    ClosetoClubhouse,

    /// "[Corner Lot](https://ddwiki.reso.org/display/DDW17/Corner+Lot)": The lot is located on the corner of an intersection.
    CornerLot,

    /// "[Corners Marked](https://ddwiki.reso.org/display/DDW17/Corners+Marked)": The corners of the lot have been marked.
    CornersMarked,

    /// "[Cul-De-Sac](https://ddwiki.reso.org/display/DDW17/Cul-De-Sac)": The lot is located on street that is closed on one end in a circular shape.  Cul-de-sac translated literally from French is "the bottom of the bag", which helps explain the circular shape.
    CulDeSac,

    /// "[Desert Back](https://ddwiki.reso.org/display/DDW17/Desert+Back)": The back of the lot faces desert.
    DesertBack,

    /// "[Desert Front](https://ddwiki.reso.org/display/DDW17/Desert+Front)": The front of the lot faces desert.
    DesertFront,

    /// "[Farm](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245512)": The lot is, or has characteristics of a farm.
    Farm,

    /// "[Few Trees](https://ddwiki.reso.org/display/DDW17/Few+Trees)": The lot has a few trees.
    FewTrees,

    /// "[Flag Lot](https://ddwiki.reso.org/display/DDW17/Flag+Lot)": Named for the shape, a flag lot has a long driveway leading to the property, together may have the appearance of a pole and flag.  The driveway in a flag lot typically runs between two other properties.
    FlagLot,

    /// "[Front Yard](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245515)": The lot has a front yard.
    FrontYard,

    /// "[Garden](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245516)": The lot has a garden.
    Garden,

    /// "[Gentle Sloping](https://ddwiki.reso.org/display/DDW17/Gentle+Sloping)": The lot's slop is gentle.
    GentleSloping,

    /// "[Greenbelt](https://ddwiki.reso.org/display/DDW17/Greenbelt)": the lot is adjacent to a greenbelt.
    Greenbelt,

    /// "[Interior Lot](https://ddwiki.reso.org/display/DDW17/Interior+Lot)": Also referred to as an inside lot, an interior lot faces street on only one side.
    InteriorLot,

    /// "[Irregular Lot](https://ddwiki.reso.org/display/DDW17/Irregular+Lot)": The lot is not a rectangle.
    IrregularLot,

    /// "[Landscaped](https://ddwiki.reso.org/display/DDW17/Landscaped)": The lot has been fully or partially landscaped.
    Landscaped,

    /// "[Level](https://ddwiki.reso.org/display/DDW17/Level)": The lot is level/flat.
    Level,

    /// "[Many Trees](https://ddwiki.reso.org/display/DDW17/Many+Trees)": The lot has many trees.
    ManyTrees,

    /// "[Meadow](https://ddwiki.reso.org/display/DDW17/Meadow)": The lot has a meadow.
    Meadow,

    /// "[Native Plants](https://ddwiki.reso.org/display/DDW17/Native+Plants)": The lot's landscaping includes native plants.
    NativePlants,

    /// "[Near Golf Course](https://ddwiki.reso.org/display/DDW17/Near+Golf+Course)": The lot is near a golf course.
    NearGolfCourse,

    /// "[Near Public Transit](https://ddwiki.reso.org/display/DDW17/Near+Public+Transit)": The lot is near public transportation.
    NearPublicTransit,

    /// "[On Golf Course](https://ddwiki.reso.org/display/DDW17/On+Golf+Course)": The lot is directly adjacent to a golf course.
    OnGolfCourse,

    /// "[Open Lot](https://ddwiki.reso.org/display/DDW17/Open+Lot)": The lot is open.
    OpenLot,

    /// "[Orchard(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245530)": The lot includes one or more orchards.
    Orchards,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245531)": The lot has features other than those in this list.
    Other,

    /// "[Pasture](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245532)": The lot includes a pasture.
    Pasture,

    /// "[Paved](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245533)": The lot is partially or fully paved.
    Paved,

    /// "[Pie Shaped Lot](https://ddwiki.reso.org/display/DDW17/Pie+Shaped+Lot)": The lot is pie, or triangle shaped.  Typically narrow at the front and wide at the back, the reverse, a wide front, could be referred to as pie shaped or reverse pie shaped.
    PieShapedLot,

    /// "[Private](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245535)": The lot is private or features that provide privacy form adjacent areas such as neighbors or roads.
    Private,

    /// "[Rectangular Lot](https://ddwiki.reso.org/display/DDW17/Rectangular+Lot)": Also known as a regular shaped lot, the lot has is a rectangle or square.
    RectangularLot,

    /// "[Rock Outcropping](https://ddwiki.reso.org/display/DDW17/Rock+Outcropping)": Rock features or barriers that transition a grading in the landscape.
    RockOutcropping,

    /// "[Rolling Slope](https://ddwiki.reso.org/display/DDW17/Rolling+Slope)": The slope of the property varies in a rolling or wavy fashion.
    RollingSlope,

    /// "[Secluded](https://ddwiki.reso.org/display/DDW17/Secluded)": The lot is secluded.
    Secluded,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245540)": See the remarks fields for additional information about the lot's features.
    SeeRemarks,

    /// "[Sloped](https://ddwiki.reso.org/display/DDW17/Sloped)": The lot is sloped.
    Sloped,

    /// "[Sloped Down](https://ddwiki.reso.org/display/DDW17/Sloped+Down)": The lot is sloped down, typically from the perspective of looking at the property from the street.
    SlopedDown,

    /// "[Sloped Up](https://ddwiki.reso.org/display/DDW17/Sloped+Up)": The lot is sloped up, typically from the perspective of looking at the property from the street.
    SlopedUp,

    /// "[Split Possible](https://ddwiki.reso.org/display/DDW17/Split+Possible)": It may be possible that the lot could be split into two or more parcels.
    SplitPossible,

    /// "[Sprinklers In Front](https://ddwiki.reso.org/display/DDW17/Sprinklers+In+Front)": there are irrigation sprinklers on the front of the lot.
    SprinklersInFront,

    /// "[Sprinklers In Rear](https://ddwiki.reso.org/display/DDW17/Sprinklers+In+Rear)": there are irrigation sprinklers to the rear of the lot.
    SprinklersInRear,

    /// "[Steep Slope](https://ddwiki.reso.org/display/DDW17/Steep+Slope)": The lot is sloped steeply.
    SteepSlope,

    /// "[Subdivided](https://ddwiki.reso.org/display/DDW17/Subdivided)": The lot has been subdivided into two or more parcels.
    Subdivided,

    /// "[Views](https://ddwiki.reso.org/display/DDW17/Views)": There are views from the lot.
    Views,

    /// "[Waterfall](https://ddwiki.reso.org/display/DDW17/Waterfall)": The lot has a waterfall.
    Waterfall,

    /// "[Waterfront](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245551)": The lot is located on a waterfront.
    Waterfront,

    /// "[Wetlands](https://ddwiki.reso.org/display/DDW17/Wetlands)": The lot is located near or within wetlands.
    Wetlands,

    /// "[Wooded](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245553)": The lot is wooded.
    Wooded,

    /// "[Zero Lot Line](https://ddwiki.reso.org/display/DDW17/Zero+Lot+Line)": The structure comes up to, or very near the property line.  Attached single family residences, row homes, garden homes, patio homes all may be zero lot line homes.
    ZeroLotLine,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for LotFeatures {
    fn from(s: String) -> LotFeatures {
        match s.as_ref() {
            "Agricultural" => LotFeatures::Agricultural,

            "Back Yard" => LotFeatures::BackYard,

            "Bluff" => LotFeatures::Bluff,

            "City Lot" => LotFeatures::CityLot,

            "Cleared" => LotFeatures::Cleared,

            "Close to Clubhouse" => LotFeatures::ClosetoClubhouse,

            "Corner Lot" => LotFeatures::CornerLot,

            "Corners Marked" => LotFeatures::CornersMarked,

            "Cul-De-Sac" => LotFeatures::CulDeSac,

            "Desert Back" => LotFeatures::DesertBack,

            "Desert Front" => LotFeatures::DesertFront,

            "Farm" => LotFeatures::Farm,

            "Few Trees" => LotFeatures::FewTrees,

            "Flag Lot" => LotFeatures::FlagLot,

            "Front Yard" => LotFeatures::FrontYard,

            "Garden" => LotFeatures::Garden,

            "Gentle Sloping" => LotFeatures::GentleSloping,

            "Greenbelt" => LotFeatures::Greenbelt,

            "Interior Lot" => LotFeatures::InteriorLot,

            "Irregular Lot" => LotFeatures::IrregularLot,

            "Landscaped" => LotFeatures::Landscaped,

            "Level" => LotFeatures::Level,

            "Many Trees" => LotFeatures::ManyTrees,

            "Meadow" => LotFeatures::Meadow,

            "Native Plants" => LotFeatures::NativePlants,

            "Near Golf Course" => LotFeatures::NearGolfCourse,

            "Near Public Transit" => LotFeatures::NearPublicTransit,

            "On Golf Course" => LotFeatures::OnGolfCourse,

            "Open Lot" => LotFeatures::OpenLot,

            "Orchard(s)" => LotFeatures::Orchards,

            "Other" => LotFeatures::Other,

            "Pasture" => LotFeatures::Pasture,

            "Paved" => LotFeatures::Paved,

            "Pie Shaped Lot" => LotFeatures::PieShapedLot,

            "Private" => LotFeatures::Private,

            "Rectangular Lot" => LotFeatures::RectangularLot,

            "Rock Outcropping" => LotFeatures::RockOutcropping,

            "Rolling Slope" => LotFeatures::RollingSlope,

            "Secluded" => LotFeatures::Secluded,

            "See Remarks" => LotFeatures::SeeRemarks,

            "Sloped" => LotFeatures::Sloped,

            "Sloped Down" => LotFeatures::SlopedDown,

            "Sloped Up" => LotFeatures::SlopedUp,

            "Split Possible" => LotFeatures::SplitPossible,

            "Sprinklers In Front" => LotFeatures::SprinklersInFront,

            "Sprinklers In Rear" => LotFeatures::SprinklersInRear,

            "Steep Slope" => LotFeatures::SteepSlope,

            "Subdivided" => LotFeatures::Subdivided,

            "Views" => LotFeatures::Views,

            "Waterfall" => LotFeatures::Waterfall,

            "Waterfront" => LotFeatures::Waterfront,

            "Wetlands" => LotFeatures::Wetlands,

            "Wooded" => LotFeatures::Wooded,

            "Zero Lot Line" => LotFeatures::ZeroLotLine,

            _ => LotFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for LotFeatures {
    fn from(s: &str) -> LotFeatures {
        match s {
            "Agricultural" => LotFeatures::Agricultural,

            "Back Yard" => LotFeatures::BackYard,

            "Bluff" => LotFeatures::Bluff,

            "City Lot" => LotFeatures::CityLot,

            "Cleared" => LotFeatures::Cleared,

            "Close to Clubhouse" => LotFeatures::ClosetoClubhouse,

            "Corner Lot" => LotFeatures::CornerLot,

            "Corners Marked" => LotFeatures::CornersMarked,

            "Cul-De-Sac" => LotFeatures::CulDeSac,

            "Desert Back" => LotFeatures::DesertBack,

            "Desert Front" => LotFeatures::DesertFront,

            "Farm" => LotFeatures::Farm,

            "Few Trees" => LotFeatures::FewTrees,

            "Flag Lot" => LotFeatures::FlagLot,

            "Front Yard" => LotFeatures::FrontYard,

            "Garden" => LotFeatures::Garden,

            "Gentle Sloping" => LotFeatures::GentleSloping,

            "Greenbelt" => LotFeatures::Greenbelt,

            "Interior Lot" => LotFeatures::InteriorLot,

            "Irregular Lot" => LotFeatures::IrregularLot,

            "Landscaped" => LotFeatures::Landscaped,

            "Level" => LotFeatures::Level,

            "Many Trees" => LotFeatures::ManyTrees,

            "Meadow" => LotFeatures::Meadow,

            "Native Plants" => LotFeatures::NativePlants,

            "Near Golf Course" => LotFeatures::NearGolfCourse,

            "Near Public Transit" => LotFeatures::NearPublicTransit,

            "On Golf Course" => LotFeatures::OnGolfCourse,

            "Open Lot" => LotFeatures::OpenLot,

            "Orchard(s)" => LotFeatures::Orchards,

            "Other" => LotFeatures::Other,

            "Pasture" => LotFeatures::Pasture,

            "Paved" => LotFeatures::Paved,

            "Pie Shaped Lot" => LotFeatures::PieShapedLot,

            "Private" => LotFeatures::Private,

            "Rectangular Lot" => LotFeatures::RectangularLot,

            "Rock Outcropping" => LotFeatures::RockOutcropping,

            "Rolling Slope" => LotFeatures::RollingSlope,

            "Secluded" => LotFeatures::Secluded,

            "See Remarks" => LotFeatures::SeeRemarks,

            "Sloped" => LotFeatures::Sloped,

            "Sloped Down" => LotFeatures::SlopedDown,

            "Sloped Up" => LotFeatures::SlopedUp,

            "Split Possible" => LotFeatures::SplitPossible,

            "Sprinklers In Front" => LotFeatures::SprinklersInFront,

            "Sprinklers In Rear" => LotFeatures::SprinklersInRear,

            "Steep Slope" => LotFeatures::SteepSlope,

            "Subdivided" => LotFeatures::Subdivided,

            "Views" => LotFeatures::Views,

            "Waterfall" => LotFeatures::Waterfall,

            "Waterfront" => LotFeatures::Waterfront,

            "Wetlands" => LotFeatures::Wetlands,

            "Wooded" => LotFeatures::Wooded,

            "Zero Lot Line" => LotFeatures::ZeroLotLine,

            _ => LotFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a LotFeatures> for &'a str {
    fn from(s: &'a LotFeatures) -> &'a str {
        match s {
            LotFeatures::Agricultural => "Agricultural",

            LotFeatures::BackYard => "Back Yard",

            LotFeatures::Bluff => "Bluff",

            LotFeatures::CityLot => "City Lot",

            LotFeatures::Cleared => "Cleared",

            LotFeatures::ClosetoClubhouse => "Close to Clubhouse",

            LotFeatures::CornerLot => "Corner Lot",

            LotFeatures::CornersMarked => "Corners Marked",

            LotFeatures::CulDeSac => "Cul-De-Sac",

            LotFeatures::DesertBack => "Desert Back",

            LotFeatures::DesertFront => "Desert Front",

            LotFeatures::Farm => "Farm",

            LotFeatures::FewTrees => "Few Trees",

            LotFeatures::FlagLot => "Flag Lot",

            LotFeatures::FrontYard => "Front Yard",

            LotFeatures::Garden => "Garden",

            LotFeatures::GentleSloping => "Gentle Sloping",

            LotFeatures::Greenbelt => "Greenbelt",

            LotFeatures::InteriorLot => "Interior Lot",

            LotFeatures::IrregularLot => "Irregular Lot",

            LotFeatures::Landscaped => "Landscaped",

            LotFeatures::Level => "Level",

            LotFeatures::ManyTrees => "Many Trees",

            LotFeatures::Meadow => "Meadow",

            LotFeatures::NativePlants => "Native Plants",

            LotFeatures::NearGolfCourse => "Near Golf Course",

            LotFeatures::NearPublicTransit => "Near Public Transit",

            LotFeatures::OnGolfCourse => "On Golf Course",

            LotFeatures::OpenLot => "Open Lot",

            LotFeatures::Orchards => "Orchard(s)",

            LotFeatures::Other => "Other",

            LotFeatures::Pasture => "Pasture",

            LotFeatures::Paved => "Paved",

            LotFeatures::PieShapedLot => "Pie Shaped Lot",

            LotFeatures::Private => "Private",

            LotFeatures::RectangularLot => "Rectangular Lot",

            LotFeatures::RockOutcropping => "Rock Outcropping",

            LotFeatures::RollingSlope => "Rolling Slope",

            LotFeatures::Secluded => "Secluded",

            LotFeatures::SeeRemarks => "See Remarks",

            LotFeatures::Sloped => "Sloped",

            LotFeatures::SlopedDown => "Sloped Down",

            LotFeatures::SlopedUp => "Sloped Up",

            LotFeatures::SplitPossible => "Split Possible",

            LotFeatures::SprinklersInFront => "Sprinklers In Front",

            LotFeatures::SprinklersInRear => "Sprinklers In Rear",

            LotFeatures::SteepSlope => "Steep Slope",

            LotFeatures::Subdivided => "Subdivided",

            LotFeatures::Views => "Views",

            LotFeatures::Waterfall => "Waterfall",

            LotFeatures::Waterfront => "Waterfront",

            LotFeatures::Wetlands => "Wetlands",

            LotFeatures::Wooded => "Wooded",

            LotFeatures::ZeroLotLine => "Zero Lot Line",

            LotFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for LotFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for LotFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_lot_features_format {
    use super::LotFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<LotFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<LotFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [LotSizeSource Lookups](https://ddwiki.reso.org/display/DDW17/LotSizeSource+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum LotSizeSource {
    /// "[Appraiser](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245418)": An appraiser provided the measurement of the lot size.
    Appraiser,

    /// "[Assessor](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245419)": The assessor provided the measurement of the lot size.
    Assessor,

    /// "[Builder](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245420)": The builder provided the measurement of the lot size.
    Builder,

    /// "[Estimated](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245421)": The measurement of the lot size is an estimate.
    Estimated,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245422)": The measurement of the lot size was provided by another party not listed.
    Other,

    /// "[Owner](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245423)": The owner provided the measurement of the lot size.
    Owner,

    /// "[Plans](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245424)": The measurement of the lot size was taken from building plans.
    Plans,

    /// "[Public Records](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245425)": The measurement of the lot size was received from public records.
    PublicRecords,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245426)": See remarks for information about the source of the lot size measurement.
    SeeRemarks,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for LotSizeSource {
    fn from(s: String) -> LotSizeSource {
        match s.as_ref() {
            "Appraiser" => LotSizeSource::Appraiser,

            "Assessor" => LotSizeSource::Assessor,

            "Builder" => LotSizeSource::Builder,

            "Estimated" => LotSizeSource::Estimated,

            "Other" => LotSizeSource::Other,

            "Owner" => LotSizeSource::Owner,

            "Plans" => LotSizeSource::Plans,

            "Public Records" => LotSizeSource::PublicRecords,

            "See Remarks" => LotSizeSource::SeeRemarks,

            _ => LotSizeSource::OpenEnumeration(s),
        }
    }
}

impl From<&str> for LotSizeSource {
    fn from(s: &str) -> LotSizeSource {
        match s {
            "Appraiser" => LotSizeSource::Appraiser,

            "Assessor" => LotSizeSource::Assessor,

            "Builder" => LotSizeSource::Builder,

            "Estimated" => LotSizeSource::Estimated,

            "Other" => LotSizeSource::Other,

            "Owner" => LotSizeSource::Owner,

            "Plans" => LotSizeSource::Plans,

            "Public Records" => LotSizeSource::PublicRecords,

            "See Remarks" => LotSizeSource::SeeRemarks,

            _ => LotSizeSource::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a LotSizeSource> for &'a str {
    fn from(s: &'a LotSizeSource) -> &'a str {
        match s {
            LotSizeSource::Appraiser => "Appraiser",

            LotSizeSource::Assessor => "Assessor",

            LotSizeSource::Builder => "Builder",

            LotSizeSource::Estimated => "Estimated",

            LotSizeSource::Other => "Other",

            LotSizeSource::Owner => "Owner",

            LotSizeSource::Plans => "Plans",

            LotSizeSource::PublicRecords => "Public Records",

            LotSizeSource::SeeRemarks => "See Remarks",

            LotSizeSource::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for LotSizeSource {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for LotSizeSource {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_lot_size_source_format {
    use super::LotSizeSource;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<LotSizeSource>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<LotSizeSource>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [LotSizeUnits Lookups](https://ddwiki.reso.org/display/DDW17/LotSizeUnits+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum LotSizeUnits {
    /// "[Acres](https://ddwiki.reso.org/display/DDW17/Acres)": The value reported in the Lot Size Area field is in acres.
    Acres,

    /// "[Square Feet](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245429)": The value reported in the Lot Size Area field is in square feet.
    SquareFeet,

    /// "[Square Meters](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245430)": The value reported in the Lot Size Area field is in square meters.
    SquareMeters,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for LotSizeUnits {
    fn from(s: String) -> LotSizeUnits {
        match s.as_ref() {
            "Acres" => LotSizeUnits::Acres,

            "Square Feet" => LotSizeUnits::SquareFeet,

            "Square Meters" => LotSizeUnits::SquareMeters,

            _ => LotSizeUnits::OpenEnumeration(s),
        }
    }
}

impl From<&str> for LotSizeUnits {
    fn from(s: &str) -> LotSizeUnits {
        match s {
            "Acres" => LotSizeUnits::Acres,

            "Square Feet" => LotSizeUnits::SquareFeet,

            "Square Meters" => LotSizeUnits::SquareMeters,

            _ => LotSizeUnits::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a LotSizeUnits> for &'a str {
    fn from(s: &'a LotSizeUnits) -> &'a str {
        match s {
            LotSizeUnits::Acres => "Acres",

            LotSizeUnits::SquareFeet => "Square Feet",

            LotSizeUnits::SquareMeters => "Square Meters",

            LotSizeUnits::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for LotSizeUnits {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for LotSizeUnits {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_lot_size_units_format {
    use super::LotSizeUnits;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<LotSizeUnits>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<LotSizeUnits>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [MediaCategory Lookups](https://ddwiki.reso.org/display/DDW17/MediaCategory+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum MediaCategory {
    /// "[Agent Photo](https://ddwiki.reso.org/display/DDW17/Agent+Photo)": The media is an agent photo.
    AgentPhoto,

    /// "[Branded Virtual Tour](https://ddwiki.reso.org/display/DDW17/Branded+Virtual+Tour)": The media is a branded virtual tour.
    BrandedVirtualTour,

    /// "[Document](https://ddwiki.reso.org/display/DDW17/Document)": The media is a document.
    Document,

    /// "[Floor Plan](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245560)": The media is a floor plan.
    FloorPlan,

    /// "[Office Logo](https://ddwiki.reso.org/display/DDW17/Office+Logo)": The media is an office logo.
    OfficeLogo,

    /// "[Office Photo](https://ddwiki.reso.org/display/DDW17/Office+Photo)": The media is an office photo.
    OfficePhoto,

    /// "[Photo](https://ddwiki.reso.org/display/DDW17/Photo)": The media is a photo.
    Photo,

    /// "[Unbranded Virtual Tour](https://ddwiki.reso.org/display/DDW17/Unbranded+Virtual+Tour)": The media is an unbranded virtual tour.
    UnbrandedVirtualTour,

    /// "[Video](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245565)": The media is a video.
    Video,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for MediaCategory {
    fn from(s: String) -> MediaCategory {
        match s.as_ref() {
            "Agent Photo" => MediaCategory::AgentPhoto,

            "Branded Virtual Tour" => MediaCategory::BrandedVirtualTour,

            "Document" => MediaCategory::Document,

            "Floor Plan" => MediaCategory::FloorPlan,

            "Office Logo" => MediaCategory::OfficeLogo,

            "Office Photo" => MediaCategory::OfficePhoto,

            "Photo" => MediaCategory::Photo,

            "Unbranded Virtual Tour" => MediaCategory::UnbrandedVirtualTour,

            "Video" => MediaCategory::Video,

            _ => MediaCategory::OpenEnumeration(s),
        }
    }
}

impl From<&str> for MediaCategory {
    fn from(s: &str) -> MediaCategory {
        match s {
            "Agent Photo" => MediaCategory::AgentPhoto,

            "Branded Virtual Tour" => MediaCategory::BrandedVirtualTour,

            "Document" => MediaCategory::Document,

            "Floor Plan" => MediaCategory::FloorPlan,

            "Office Logo" => MediaCategory::OfficeLogo,

            "Office Photo" => MediaCategory::OfficePhoto,

            "Photo" => MediaCategory::Photo,

            "Unbranded Virtual Tour" => MediaCategory::UnbrandedVirtualTour,

            "Video" => MediaCategory::Video,

            _ => MediaCategory::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a MediaCategory> for &'a str {
    fn from(s: &'a MediaCategory) -> &'a str {
        match s {
            MediaCategory::AgentPhoto => "Agent Photo",

            MediaCategory::BrandedVirtualTour => "Branded Virtual Tour",

            MediaCategory::Document => "Document",

            MediaCategory::FloorPlan => "Floor Plan",

            MediaCategory::OfficeLogo => "Office Logo",

            MediaCategory::OfficePhoto => "Office Photo",

            MediaCategory::Photo => "Photo",

            MediaCategory::UnbrandedVirtualTour => "Unbranded Virtual Tour",

            MediaCategory::Video => "Video",

            MediaCategory::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for MediaCategory {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for MediaCategory {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_media_category_format {
    use super::MediaCategory;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<MediaCategory>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<MediaCategory>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [MediaType Lookups](https://ddwiki.reso.org/display/DDW17/MediaType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum MediaType {
    /// "[doc](https://ddwiki.reso.org/display/DDW17/doc)": The media is a doc file type.
    Doc,

    /// "[docx](https://ddwiki.reso.org/display/DDW17/docx)": The media is a docx file type.
    Docx,

    /// "[gif](https://ddwiki.reso.org/display/DDW17/gif)": The media is a gif file type.
    Gif,

    /// "[jpeg](https://ddwiki.reso.org/display/DDW17/jpeg)": The media is a jpeg file type.
    Jpeg,

    /// "[mov](https://ddwiki.reso.org/display/DDW17/mov)": The media is a mov file type.
    Mov,

    /// "[mp4](https://ddwiki.reso.org/display/DDW17/mp4)": The media is an mp4 file type.
    Mp4,

    /// "[mpeg](https://ddwiki.reso.org/display/DDW17/mpeg)": The media is an mpeg file type.
    Mpeg,

    /// "[pdf](https://ddwiki.reso.org/display/DDW17/pdf)": The media is a pdf file type.
    Pdf,

    /// "[png](https://ddwiki.reso.org/display/DDW17/png)": The media is a png file type.
    Png,

    /// "[quicktime](https://ddwiki.reso.org/display/DDW17/quicktime)": The media is a QuickTime file type.
    Quicktime,

    /// "[rtf](https://ddwiki.reso.org/display/DDW17/rtf)": The media is a rtf file type.
    Rtf,

    /// "[tiff](https://ddwiki.reso.org/display/DDW17/tiff)": The media is a tiff file type.
    Tiff,

    /// "[txt](https://ddwiki.reso.org/display/DDW17/txt)": The media is a txt file type.
    Txt,

    /// "[wmv](https://ddwiki.reso.org/display/DDW17/wmv)": The media is a wmv file type.
    Wmv,

    /// "[xls](https://ddwiki.reso.org/display/DDW17/xls)": The media is a xls file type.
    Xls,

    /// "[xlsx](https://ddwiki.reso.org/display/DDW17/xlsx)": The media is a xlsx file type.
    Xlsx,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for MediaType {
    fn from(s: String) -> MediaType {
        match s.as_ref() {
            "doc" => MediaType::Doc,

            "docx" => MediaType::Docx,

            "gif" => MediaType::Gif,

            "jpeg" => MediaType::Jpeg,

            "mov" => MediaType::Mov,

            "mp4" => MediaType::Mp4,

            "mpeg" => MediaType::Mpeg,

            "pdf" => MediaType::Pdf,

            "png" => MediaType::Png,

            "quicktime" => MediaType::Quicktime,

            "rtf" => MediaType::Rtf,

            "tiff" => MediaType::Tiff,

            "txt" => MediaType::Txt,

            "wmv" => MediaType::Wmv,

            "xls" => MediaType::Xls,

            "xlsx" => MediaType::Xlsx,

            _ => MediaType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for MediaType {
    fn from(s: &str) -> MediaType {
        match s {
            "doc" => MediaType::Doc,

            "docx" => MediaType::Docx,

            "gif" => MediaType::Gif,

            "jpeg" => MediaType::Jpeg,

            "mov" => MediaType::Mov,

            "mp4" => MediaType::Mp4,

            "mpeg" => MediaType::Mpeg,

            "pdf" => MediaType::Pdf,

            "png" => MediaType::Png,

            "quicktime" => MediaType::Quicktime,

            "rtf" => MediaType::Rtf,

            "tiff" => MediaType::Tiff,

            "txt" => MediaType::Txt,

            "wmv" => MediaType::Wmv,

            "xls" => MediaType::Xls,

            "xlsx" => MediaType::Xlsx,

            _ => MediaType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a MediaType> for &'a str {
    fn from(s: &'a MediaType) -> &'a str {
        match s {
            MediaType::Doc => "doc",

            MediaType::Docx => "docx",

            MediaType::Gif => "gif",

            MediaType::Jpeg => "jpeg",

            MediaType::Mov => "mov",

            MediaType::Mp4 => "mp4",

            MediaType::Mpeg => "mpeg",

            MediaType::Pdf => "pdf",

            MediaType::Png => "png",

            MediaType::Quicktime => "quicktime",

            MediaType::Rtf => "rtf",

            MediaType::Tiff => "tiff",

            MediaType::Txt => "txt",

            MediaType::Wmv => "wmv",

            MediaType::Xls => "xls",

            MediaType::Xlsx => "xlsx",

            MediaType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for MediaType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for MediaType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_media_type_format {
    use super::MediaType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<MediaType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<MediaType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [MemberDesignation Lookups](https://ddwiki.reso.org/display/DDW17/MemberDesignation+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum MemberDesignation {
    /// "[Accredited Buyer's Representative / ABR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245602)": The Accredited Buyer’s Representative (ABR®) designation is designed for real estate buyer agents who focus on working directly with buyer-clients.  http://www.rebac.net/abr
    AccreditedBuyersRepresentativeABR,

    /// "[Accredited Land Consultant / ALC](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245603)": Accredited Land Consultants (ALCs) are the most trusted, knowledgeable, experienced, and highest-producing experts in all segments of land. Conferred by the REALTORS® Land Institute, the designation requires successful completion of a rigorous LANDU education program, a specific, high-volume and experience level, and adherence to an honorable Code of Conduct. https://www.nar.realtor/designations-and-certifications/alc
    AccreditedLandConsultantALC,

    /// "[At Home With Diversity / AHWD](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245604)": Learn to work effectively with – and within – today’s diverse real estate market. The At Home With Diversity certification teaches you how to conduct your business with sensitivity to all client profiles and build a business plan to successfully serve them.  https://www.nar.realtor/designations-and-certifications/ahwd
    AtHomeWithDiversityAHWD,

    /// "[Certified Commercial Investment Member / CCIM](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245605)": The Certified Commercial Investment Member (CCIM) designation is commercial real estate’s global standard for professional achievement, earned through an extensive curriculum of 200 classroom hours and professional experiential requirements. https://www.nar.realtor/designations-and-certifications/ccim
    CertifiedCommercialInvestmentMemberCCIM,

    /// "[Certified Distressed Property Expert / CDPE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245606)": A Certified Distressed Property Expert® (CDPE) has a thorough understanding of complex issues in today’s turbulent real estate industry and knowledge of foreclosure avoidance options available to homeowners. CDPEs can provide solutions, specifically short sales, for homeowners facing market hardships.  http://www.cdpe.com/
    CertifiedDistressedPropertyExpertCDPE,

    /// "[Certified International Property Specialist / CIPS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245607)": The CIPS designation is for REALTORS® from the United States and abroad, as well as association staff and volunteer leaders who wish to develop or grow their international real estate business. It will provide you with the knowledge, research, network, and tools to globalize your business.                        https://www.nar.realtor/designations-and-certifications/cips-designation
    CertifiedInternationalPropertySpecialistCIPS,

    /// "[Certified Property Manager / CPM](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245608)": Certified Property Managers® (CPM®) are recognized as experts in real estate management, and they are at the top of the profession. 70% of those who hold the CPM® designation hold the highest management positions in their offices (owner/partner/officer/director). https://www.nar.realtor/designations-and-certifications/cpm
    CertifiedPropertyManagerCPM,

    /// "[Certified Real Estate Brokerage Manager / CRB](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245609)": The Certified Real Estate Brokerage Manager (CRB) Designation raises professional standards, strengthens individual and office performance, and indicates expertise in brokerage management. This designation represents the highest level of professional achievement in real estate brokerage management. You do not need a broker's license to earn the CRB Designation.  https://www.nar.realtor/designations-and-certifications/crb
    CertifiedRealEstateBrokerageManagerCRB,

    /// "[Certified Real Estate Team Specialist / C-RETS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245610)": The Certified Real Estate Team Specialist certification is designed to improve team development, individual leadership skills, and financial performance. The courses provide the tools, strategies, and knowledge that are required of today’s real estate professionals who are either considering or currently operating in a team environment. It is for team leaders, team members, those looking to start a team, and those who simply want to sharpen their management skills.  https://www.nar.realtor/designations-and-certifications/c-rets
    CertifiedRealEstateTeamSpecialistCRETS,

    /// "[Certified Residential Specialist / CRS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245611)": Certified Residential Specialist (CRS) is the highest credential awarded to residential sales agents, managers and brokers.  https://www.nar.realtor/designations-and-certifications/crs
    CertifiedResidentialSpecialistCRS,

    /// "[Counselor of Real Estate / CRE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245612)": The Counselors of Real Estate®  is an international group of recognized professionals who provide seasoned, expert, objective advice on real property and land-related matters. Only 1,100 practitioners throughout the world carry the CRE® designation. Membership is by invitation only.  https://www.nar.realtor/designations-and-certifications/cre
    CounselorofRealEstateCRE,

    /// "[e-PRO](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245613)": NAR's e-PRO® certification  teaches you to use cutting-edge technologies and digital initiatives to link up with today's savvy real estate consumer.  https://www.nar.realtor/designations-and-certifications/e-pro
    EPRO,

    /// "[General Accredited Appraiser / GAA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245614)": For general appraisers, this designation is awarded to those whose education and experience exceed state appraisal certification requirements and is supported by the National Association of REALTORS®. https://www.nar.realtor/designations-and-certifications/gaa
    GeneralAccreditedAppraiserGAA,

    /// "[Graduate, REALTOR Institute / GRI](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245615)": REALTORS® with the GRI designation have in-depth training in legal and regulatory issues, technology, professional standards, and the sales process. Earning the designation is a way to stand out to prospective buyers and sellers as a professional with expertise in these areas.  https://www.nar.realtor/designations-and-certifications/gri
    GraduateREALTORInstituteGRI,

    /// "[Military Relocation Professional / MRP](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245616)": NAR's Military Relocation Professional certification focuses on educating real estate professionals about working with current and former military service members to find housing solutions that best suit their needs and take full advantage of military benefits and support.  https://www.nar.realtor/designations-and-certifications/mrp
    MilitaryRelocationProfessionalMRP,

    /// "[NAR's Green Designation / GREEN](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245617)": Through NAR's Green Designation, the Green Resource Council provides ongoing education, resources and tools to help real estate practitioners find, understand, and market properties with green features.  https://www.nar.realtor/designations-and-certifications/green
    NARsGreenDesignationGREEN,

    /// "[Performance Management Network / PMN](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245618)": This designation is unique to the REALTOR® family designations, emphasizing that in order to enhance your business, you must enhance yourself. It focuses on negotiating strategies and tactics, networking and referrals, business planning and systems, personal performance management and  leadership development.  https://www.nar.realtor/designations-and-certifications/pmn
    PerformanceManagementNetworkPMN,

    /// "[Pricing Strategy Advisor / PSA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245619)": Enhance your skills in pricing properties, creating CMAs, working with appraisers, and guiding clients through the anxieties and misperceptions they often have about home values with NAR’s PSA (Pricing Strategy Advisor) certification. https://www.nar.realtor/designations-and-certifications/psa
    PricingStrategyAdvisorPSA,

    /// "[Real Estate Negotiation Expert / RENE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245620)": This certification is for real estate professionals who want to sharpen their negotiation skills. The RENE certification program gives REALTORS® the tips and tools they need to be skillful advocates for their clients.  https://www.nar.realtor/designations-and-certifications/rene
    RealEstateNegotiationExpertRENE,

    /// "[REALTOR Association Certified Executive / RCE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245621)": RCE is the only professional designation designed specifically for REALTOR® association executives. RCE designees exemplify goal-oriented AEs with drive, experience and commitment to professional growth.  https://www.nar.realtor/designations-and-certifications/rce
    REALTORAssociationCertifiedExecutiveRCE,

    /// "[Residential Accredited Appraiser / RAA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245622)": For residential appraisers, this designation is awarded to those whose education and experience exceed state appraisal certification requirements and is supported by the National Association of REALTORS®.  https://www.nar.realtor/designations-and-certifications/raa
    ResidentialAccreditedAppraiserRAA,

    /// "[Resort & Second-Home Property Specialist / RSPS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245623)": This certification is designed for REALTORS® who facilitate the buying, selling, or management of properties for investment, development, retirement, or second homes in a resort, recreational and/or vacation destination are involved in this market niche.  https://www.nar.realtor/designations-and-certifications/rsps
    ResortSecondHomePropertySpecialistRSPS,

    /// "[Seller Representative Specialist / SRS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245624)": The Seller Representative Specialist (SRS) designation is the premier credential in seller representation. It is designed to elevate professional standards and enhance personal performance. The designation is awarded to real estate practitioners by the Real Estate Business Institute (REBI) who meet specific educational and practical experience criteria.  https://www.nar.realtor/designations-and-certifications/seller-representative-specialist-srs
    SellerRepresentativeSpecialistSRS,

    /// "[Seniors Real Estate Specialist / SRES](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245625)": The SRES® Designation program educates REALTORS® on how to profitably and ethically serve the real estate needs of the fastest growing market in real estate, clients age 50+. By earning the SRES® designation, you gain access to valuable member benefits, useful resources, and networking opportunities across the U.S. and Canada to help you in your business.  https://www.nar.realtor/designations-and-certifications/sres
    SeniorsRealEstateSpecialistSRES,

    /// "[Short Sales & Foreclosure Resource / SFR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245626)": The SFR® certification  teaches real estate professionals to work with distressed sellers and the finance, tax, and legal professionals who can help them, qualify sellers for short sales, develop a short sale package, negotiate with lenders, safeguard your commission, limit risk, and protect buyers.  https://www.nar.realtor/designations-and-certifications/sfr
    ShortSalesForeclosureResourceSFR,

    /// "[Society of Industrial and Office REALTORS / SIOR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245627)": The SIOR designation is held by only the most knowledgeable, experienced, and successful commercial real estate brokerage specialists. To earn it, designees must meet standards of experience, production, education, ethics, and provide recommendations.  https://www.nar.realtor/designations-and-certifications/sior
    SocietyofIndustrialandOfficeREALTORSSIOR,

    /// "[Transnational Referral Certification / TRC](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245628)": Real estate professionals who have taken the Transnational Referral Certified (TRC) training, have completed special training on  making and receiving client referrals from professionals in other countries. https://worldproperties.com/about-us/international-referrals-and-trc/
    TransnationalReferralCertificationTRC,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for MemberDesignation {
    fn from(s: String) -> MemberDesignation {
        match s.as_ref() {
            "Accredited Buyer's Representative / ABR" => {
                MemberDesignation::AccreditedBuyersRepresentativeABR
            }

            "Accredited Land Consultant / ALC" => MemberDesignation::AccreditedLandConsultantALC,

            "At Home With Diversity / AHWD" => MemberDesignation::AtHomeWithDiversityAHWD,

            "Certified Commercial Investment Member / CCIM" => {
                MemberDesignation::CertifiedCommercialInvestmentMemberCCIM
            }

            "Certified Distressed Property Expert / CDPE" => {
                MemberDesignation::CertifiedDistressedPropertyExpertCDPE
            }

            "Certified International Property Specialist / CIPS" => {
                MemberDesignation::CertifiedInternationalPropertySpecialistCIPS
            }

            "Certified Property Manager / CPM" => MemberDesignation::CertifiedPropertyManagerCPM,

            "Certified Real Estate Brokerage Manager / CRB" => {
                MemberDesignation::CertifiedRealEstateBrokerageManagerCRB
            }

            "Certified Real Estate Team Specialist / C-RETS" => {
                MemberDesignation::CertifiedRealEstateTeamSpecialistCRETS
            }

            "Certified Residential Specialist / CRS" => {
                MemberDesignation::CertifiedResidentialSpecialistCRS
            }

            "Counselor of Real Estate / CRE" => MemberDesignation::CounselorofRealEstateCRE,

            "e-PRO" => MemberDesignation::EPRO,

            "General Accredited Appraiser / GAA" => {
                MemberDesignation::GeneralAccreditedAppraiserGAA
            }

            "Graduate, REALTOR Institute / GRI" => MemberDesignation::GraduateREALTORInstituteGRI,

            "Military Relocation Professional / MRP" => {
                MemberDesignation::MilitaryRelocationProfessionalMRP
            }

            "NAR's Green Designation / GREEN" => MemberDesignation::NARsGreenDesignationGREEN,

            "Performance Management Network / PMN" => {
                MemberDesignation::PerformanceManagementNetworkPMN
            }

            "Pricing Strategy Advisor / PSA" => MemberDesignation::PricingStrategyAdvisorPSA,

            "Real Estate Negotiation Expert / RENE" => {
                MemberDesignation::RealEstateNegotiationExpertRENE
            }

            "REALTOR Association Certified Executive / RCE" => {
                MemberDesignation::REALTORAssociationCertifiedExecutiveRCE
            }

            "Residential Accredited Appraiser / RAA" => {
                MemberDesignation::ResidentialAccreditedAppraiserRAA
            }

            "Resort & Second-Home Property Specialist / RSPS" => {
                MemberDesignation::ResortSecondHomePropertySpecialistRSPS
            }

            "Seller Representative Specialist / SRS" => {
                MemberDesignation::SellerRepresentativeSpecialistSRS
            }

            "Seniors Real Estate Specialist / SRES" => {
                MemberDesignation::SeniorsRealEstateSpecialistSRES
            }

            "Short Sales & Foreclosure Resource / SFR" => {
                MemberDesignation::ShortSalesForeclosureResourceSFR
            }

            "Society of Industrial and Office REALTORS / SIOR" => {
                MemberDesignation::SocietyofIndustrialandOfficeREALTORSSIOR
            }

            "Transnational Referral Certification / TRC" => {
                MemberDesignation::TransnationalReferralCertificationTRC
            }

            _ => MemberDesignation::OpenEnumeration(s),
        }
    }
}

impl From<&str> for MemberDesignation {
    fn from(s: &str) -> MemberDesignation {
        match s {
            "Accredited Buyer's Representative / ABR" => {
                MemberDesignation::AccreditedBuyersRepresentativeABR
            }

            "Accredited Land Consultant / ALC" => MemberDesignation::AccreditedLandConsultantALC,

            "At Home With Diversity / AHWD" => MemberDesignation::AtHomeWithDiversityAHWD,

            "Certified Commercial Investment Member / CCIM" => {
                MemberDesignation::CertifiedCommercialInvestmentMemberCCIM
            }

            "Certified Distressed Property Expert / CDPE" => {
                MemberDesignation::CertifiedDistressedPropertyExpertCDPE
            }

            "Certified International Property Specialist / CIPS" => {
                MemberDesignation::CertifiedInternationalPropertySpecialistCIPS
            }

            "Certified Property Manager / CPM" => MemberDesignation::CertifiedPropertyManagerCPM,

            "Certified Real Estate Brokerage Manager / CRB" => {
                MemberDesignation::CertifiedRealEstateBrokerageManagerCRB
            }

            "Certified Real Estate Team Specialist / C-RETS" => {
                MemberDesignation::CertifiedRealEstateTeamSpecialistCRETS
            }

            "Certified Residential Specialist / CRS" => {
                MemberDesignation::CertifiedResidentialSpecialistCRS
            }

            "Counselor of Real Estate / CRE" => MemberDesignation::CounselorofRealEstateCRE,

            "e-PRO" => MemberDesignation::EPRO,

            "General Accredited Appraiser / GAA" => {
                MemberDesignation::GeneralAccreditedAppraiserGAA
            }

            "Graduate, REALTOR Institute / GRI" => MemberDesignation::GraduateREALTORInstituteGRI,

            "Military Relocation Professional / MRP" => {
                MemberDesignation::MilitaryRelocationProfessionalMRP
            }

            "NAR's Green Designation / GREEN" => MemberDesignation::NARsGreenDesignationGREEN,

            "Performance Management Network / PMN" => {
                MemberDesignation::PerformanceManagementNetworkPMN
            }

            "Pricing Strategy Advisor / PSA" => MemberDesignation::PricingStrategyAdvisorPSA,

            "Real Estate Negotiation Expert / RENE" => {
                MemberDesignation::RealEstateNegotiationExpertRENE
            }

            "REALTOR Association Certified Executive / RCE" => {
                MemberDesignation::REALTORAssociationCertifiedExecutiveRCE
            }

            "Residential Accredited Appraiser / RAA" => {
                MemberDesignation::ResidentialAccreditedAppraiserRAA
            }

            "Resort & Second-Home Property Specialist / RSPS" => {
                MemberDesignation::ResortSecondHomePropertySpecialistRSPS
            }

            "Seller Representative Specialist / SRS" => {
                MemberDesignation::SellerRepresentativeSpecialistSRS
            }

            "Seniors Real Estate Specialist / SRES" => {
                MemberDesignation::SeniorsRealEstateSpecialistSRES
            }

            "Short Sales & Foreclosure Resource / SFR" => {
                MemberDesignation::ShortSalesForeclosureResourceSFR
            }

            "Society of Industrial and Office REALTORS / SIOR" => {
                MemberDesignation::SocietyofIndustrialandOfficeREALTORSSIOR
            }

            "Transnational Referral Certification / TRC" => {
                MemberDesignation::TransnationalReferralCertificationTRC
            }

            _ => MemberDesignation::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a MemberDesignation> for &'a str {
    fn from(s: &'a MemberDesignation) -> &'a str {
        match s {
            MemberDesignation::AccreditedBuyersRepresentativeABR => {
                "Accredited Buyer's Representative / ABR"
            }

            MemberDesignation::AccreditedLandConsultantALC => "Accredited Land Consultant / ALC",

            MemberDesignation::AtHomeWithDiversityAHWD => "At Home With Diversity / AHWD",

            MemberDesignation::CertifiedCommercialInvestmentMemberCCIM => {
                "Certified Commercial Investment Member / CCIM"
            }

            MemberDesignation::CertifiedDistressedPropertyExpertCDPE => {
                "Certified Distressed Property Expert / CDPE"
            }

            MemberDesignation::CertifiedInternationalPropertySpecialistCIPS => {
                "Certified International Property Specialist / CIPS"
            }

            MemberDesignation::CertifiedPropertyManagerCPM => "Certified Property Manager / CPM",

            MemberDesignation::CertifiedRealEstateBrokerageManagerCRB => {
                "Certified Real Estate Brokerage Manager / CRB"
            }

            MemberDesignation::CertifiedRealEstateTeamSpecialistCRETS => {
                "Certified Real Estate Team Specialist / C-RETS"
            }

            MemberDesignation::CertifiedResidentialSpecialistCRS => {
                "Certified Residential Specialist / CRS"
            }

            MemberDesignation::CounselorofRealEstateCRE => "Counselor of Real Estate / CRE",

            MemberDesignation::EPRO => "e-PRO",

            MemberDesignation::GeneralAccreditedAppraiserGAA => {
                "General Accredited Appraiser / GAA"
            }

            MemberDesignation::GraduateREALTORInstituteGRI => "Graduate, REALTOR Institute / GRI",

            MemberDesignation::MilitaryRelocationProfessionalMRP => {
                "Military Relocation Professional / MRP"
            }

            MemberDesignation::NARsGreenDesignationGREEN => "NAR's Green Designation / GREEN",

            MemberDesignation::PerformanceManagementNetworkPMN => {
                "Performance Management Network / PMN"
            }

            MemberDesignation::PricingStrategyAdvisorPSA => "Pricing Strategy Advisor / PSA",

            MemberDesignation::RealEstateNegotiationExpertRENE => {
                "Real Estate Negotiation Expert / RENE"
            }

            MemberDesignation::REALTORAssociationCertifiedExecutiveRCE => {
                "REALTOR Association Certified Executive / RCE"
            }

            MemberDesignation::ResidentialAccreditedAppraiserRAA => {
                "Residential Accredited Appraiser / RAA"
            }

            MemberDesignation::ResortSecondHomePropertySpecialistRSPS => {
                "Resort & Second-Home Property Specialist / RSPS"
            }

            MemberDesignation::SellerRepresentativeSpecialistSRS => {
                "Seller Representative Specialist / SRS"
            }

            MemberDesignation::SeniorsRealEstateSpecialistSRES => {
                "Seniors Real Estate Specialist / SRES"
            }

            MemberDesignation::ShortSalesForeclosureResourceSFR => {
                "Short Sales & Foreclosure Resource / SFR"
            }

            MemberDesignation::SocietyofIndustrialandOfficeREALTORSSIOR => {
                "Society of Industrial and Office REALTORS / SIOR"
            }

            MemberDesignation::TransnationalReferralCertificationTRC => {
                "Transnational Referral Certification / TRC"
            }

            MemberDesignation::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for MemberDesignation {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for MemberDesignation {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_member_designation_format {
    use super::MemberDesignation;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<MemberDesignation>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<MemberDesignation>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [MemberOtherPhoneType Lookups](https://ddwiki.reso.org/display/DDW17/MemberOtherPhoneType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum MemberOtherPhoneType {
    /// "[Direct](https://ddwiki.reso.org/display/DDW17/Direct)": This is the member's direct number.
    Direct,

    /// "[Fax](https://ddwiki.reso.org/display/DDW17/Fax)": This is the member's fax.
    Fax,

    /// "[First](https://ddwiki.reso.org/display/DDW17/First)": This is the member's first preferred phone.
    First,

    /// "[Home](https://ddwiki.reso.org/display/DDW17/Home)": This is the member's home phone.
    Home,

    /// "[Mobile](https://ddwiki.reso.org/display/DDW17/Mobile)": This is the member's mobile phone.
    Mobile,

    /// "[Modem](https://ddwiki.reso.org/display/DDW17/Modem)": This is the member's modem.
    Modem,

    /// "[Office](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245636)": This is the member's office phone.
    Office,

    /// "[Pager](https://ddwiki.reso.org/display/DDW17/Pager)": This is the member's pager.
    Pager,

    /// "[Preferred](https://ddwiki.reso.org/display/DDW17/Preferred)": This is the member's preferred phone.
    Preferred,

    /// "[Second](https://ddwiki.reso.org/display/DDW17/Second)": This is the member's second preferred phone.
    Second,

    /// "[SMS](https://ddwiki.reso.org/display/DDW17/SMS)": This is the member's SMS/text number.
    SMS,

    /// "[Third](https://ddwiki.reso.org/display/DDW17/Third)": This is the member's third preferred phone.
    Third,

    /// "[Toll Free](https://ddwiki.reso.org/display/DDW17/Toll+Free)": This is the member's toll free number.
    TollFree,

    /// "[Voicemail](https://ddwiki.reso.org/display/DDW17/Voicemail)": This is the member's voicemail.
    Voicemail,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for MemberOtherPhoneType {
    fn from(s: String) -> MemberOtherPhoneType {
        match s.as_ref() {
            "Direct" => MemberOtherPhoneType::Direct,

            "Fax" => MemberOtherPhoneType::Fax,

            "First" => MemberOtherPhoneType::First,

            "Home" => MemberOtherPhoneType::Home,

            "Mobile" => MemberOtherPhoneType::Mobile,

            "Modem" => MemberOtherPhoneType::Modem,

            "Office" => MemberOtherPhoneType::Office,

            "Pager" => MemberOtherPhoneType::Pager,

            "Preferred" => MemberOtherPhoneType::Preferred,

            "Second" => MemberOtherPhoneType::Second,

            "SMS" => MemberOtherPhoneType::SMS,

            "Third" => MemberOtherPhoneType::Third,

            "Toll Free" => MemberOtherPhoneType::TollFree,

            "Voicemail" => MemberOtherPhoneType::Voicemail,

            _ => MemberOtherPhoneType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for MemberOtherPhoneType {
    fn from(s: &str) -> MemberOtherPhoneType {
        match s {
            "Direct" => MemberOtherPhoneType::Direct,

            "Fax" => MemberOtherPhoneType::Fax,

            "First" => MemberOtherPhoneType::First,

            "Home" => MemberOtherPhoneType::Home,

            "Mobile" => MemberOtherPhoneType::Mobile,

            "Modem" => MemberOtherPhoneType::Modem,

            "Office" => MemberOtherPhoneType::Office,

            "Pager" => MemberOtherPhoneType::Pager,

            "Preferred" => MemberOtherPhoneType::Preferred,

            "Second" => MemberOtherPhoneType::Second,

            "SMS" => MemberOtherPhoneType::SMS,

            "Third" => MemberOtherPhoneType::Third,

            "Toll Free" => MemberOtherPhoneType::TollFree,

            "Voicemail" => MemberOtherPhoneType::Voicemail,

            _ => MemberOtherPhoneType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a MemberOtherPhoneType> for &'a str {
    fn from(s: &'a MemberOtherPhoneType) -> &'a str {
        match s {
            MemberOtherPhoneType::Direct => "Direct",

            MemberOtherPhoneType::Fax => "Fax",

            MemberOtherPhoneType::First => "First",

            MemberOtherPhoneType::Home => "Home",

            MemberOtherPhoneType::Mobile => "Mobile",

            MemberOtherPhoneType::Modem => "Modem",

            MemberOtherPhoneType::Office => "Office",

            MemberOtherPhoneType::Pager => "Pager",

            MemberOtherPhoneType::Preferred => "Preferred",

            MemberOtherPhoneType::Second => "Second",

            MemberOtherPhoneType::SMS => "SMS",

            MemberOtherPhoneType::Third => "Third",

            MemberOtherPhoneType::TollFree => "Toll Free",

            MemberOtherPhoneType::Voicemail => "Voicemail",

            MemberOtherPhoneType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for MemberOtherPhoneType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for MemberOtherPhoneType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_member_other_phone_type_format {
    use super::MemberOtherPhoneType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<MemberOtherPhoneType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<MemberOtherPhoneType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [MemberStatus Lookups](https://ddwiki.reso.org/display/DDW17/MemberStatus+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum MemberStatus {
    /// "[Active](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245584)": The member's account is active.
    Active,

    /// "[Inactive](https://ddwiki.reso.org/display/DDW17/Inactive)": the member's account is not active.
    Inactive,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for MemberStatus {
    fn from(s: String) -> MemberStatus {
        match s.as_ref() {
            "Active" => MemberStatus::Active,

            "Inactive" => MemberStatus::Inactive,

            _ => MemberStatus::OpenEnumeration(s),
        }
    }
}

impl From<&str> for MemberStatus {
    fn from(s: &str) -> MemberStatus {
        match s {
            "Active" => MemberStatus::Active,

            "Inactive" => MemberStatus::Inactive,

            _ => MemberStatus::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a MemberStatus> for &'a str {
    fn from(s: &'a MemberStatus) -> &'a str {
        match s {
            MemberStatus::Active => "Active",

            MemberStatus::Inactive => "Inactive",

            MemberStatus::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for MemberStatus {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for MemberStatus {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_member_status_format {
    use super::MemberStatus;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<MemberStatus>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<MemberStatus>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [MemberType Lookups](https://ddwiki.reso.org/display/DDW17/MemberType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum MemberType {
    /// "[Assistant](https://ddwiki.reso.org/display/DDW17/Assistant)": The member is an assistant. The status of the assistant being licensed is not known or possibly not required.
    Assistant,

    /// "[Association Staff](https://ddwiki.reso.org/display/DDW17/Association+Staff)": The member is a member of the association's staff.
    AssociationStaff,

    /// "[Designated REALTOR Appraiser](https://ddwiki.reso.org/display/DDW17/Designated+REALTOR+Appraiser)": The member is a designated appraiser and a member of NAR.
    DesignatedREALTORAppraiser,

    /// "[Designated REALTOR Participant](https://ddwiki.reso.org/display/DDW17/Designated+REALTOR+Participant)": The member is a designated broker and a member of NAR.
    DesignatedREALTORParticipant,

    /// "[Licensed Assistant](https://ddwiki.reso.org/display/DDW17/Licensed+Assistant)": The member is an assistant. The status of the assistant being licensed is not known or possibly not required.
    LicensedAssistant,

    /// "[MLS Only Appraiser](https://ddwiki.reso.org/display/DDW17/MLS+Only+Appraiser)": The member is an appraiser and not a member of NAR, receiving MLS services only.
    MLSOnlyAppraiser,

    /// "[MLS Only Broker](https://ddwiki.reso.org/display/DDW17/MLS+Only+Broker)": The member is a broker and not a member of NAR, receiving MLS services only.
    MLSOnlyBroker,

    /// "[MLS Only Salesperson](https://ddwiki.reso.org/display/DDW17/MLS+Only+Salesperson)": The member is a sales person and not a member of NAR, receiving MLS services only.
    MLSOnlySalesperson,

    /// "[MLS Staff](https://ddwiki.reso.org/display/DDW17/MLS+Staff)": The individual is a member of MLS staff.
    MLSStaff,

    /// "[Non Member/Vendor](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245594)": The individual is not a member or is a vendor.
    NonMemberVendor,

    /// "[Office Manager](https://ddwiki.reso.org/display/DDW17/Office+Manager)": The member is a license office manager.
    OfficeManager,

    /// "[REALTOR Appraiser](https://ddwiki.reso.org/display/DDW17/REALTOR+Appraiser)": The member is an appraiser and a member of NAR.
    REALTORAppraiser,

    /// "[REALTOR Salesperson](https://ddwiki.reso.org/display/DDW17/REALTOR+Salesperson)": The member is a sales person and a member of NAR.
    REALTORSalesperson,

    /// "[Unlicensed Assistant](https://ddwiki.reso.org/display/DDW17/Unlicensed+Assistant)": The member is an unlicensed assistant.
    UnlicensedAssistant,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for MemberType {
    fn from(s: String) -> MemberType {
        match s.as_ref() {
            "Assistant" => MemberType::Assistant,

            "Association Staff" => MemberType::AssociationStaff,

            "Designated REALTOR Appraiser" => MemberType::DesignatedREALTORAppraiser,

            "Designated REALTOR Participant" => MemberType::DesignatedREALTORParticipant,

            "Licensed Assistant" => MemberType::LicensedAssistant,

            "MLS Only Appraiser" => MemberType::MLSOnlyAppraiser,

            "MLS Only Broker" => MemberType::MLSOnlyBroker,

            "MLS Only Salesperson" => MemberType::MLSOnlySalesperson,

            "MLS Staff" => MemberType::MLSStaff,

            "Non Member/Vendor" => MemberType::NonMemberVendor,

            "Office Manager" => MemberType::OfficeManager,

            "REALTOR Appraiser" => MemberType::REALTORAppraiser,

            "REALTOR Salesperson" => MemberType::REALTORSalesperson,

            "Unlicensed Assistant" => MemberType::UnlicensedAssistant,

            _ => MemberType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for MemberType {
    fn from(s: &str) -> MemberType {
        match s {
            "Assistant" => MemberType::Assistant,

            "Association Staff" => MemberType::AssociationStaff,

            "Designated REALTOR Appraiser" => MemberType::DesignatedREALTORAppraiser,

            "Designated REALTOR Participant" => MemberType::DesignatedREALTORParticipant,

            "Licensed Assistant" => MemberType::LicensedAssistant,

            "MLS Only Appraiser" => MemberType::MLSOnlyAppraiser,

            "MLS Only Broker" => MemberType::MLSOnlyBroker,

            "MLS Only Salesperson" => MemberType::MLSOnlySalesperson,

            "MLS Staff" => MemberType::MLSStaff,

            "Non Member/Vendor" => MemberType::NonMemberVendor,

            "Office Manager" => MemberType::OfficeManager,

            "REALTOR Appraiser" => MemberType::REALTORAppraiser,

            "REALTOR Salesperson" => MemberType::REALTORSalesperson,

            "Unlicensed Assistant" => MemberType::UnlicensedAssistant,

            _ => MemberType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a MemberType> for &'a str {
    fn from(s: &'a MemberType) -> &'a str {
        match s {
            MemberType::Assistant => "Assistant",

            MemberType::AssociationStaff => "Association Staff",

            MemberType::DesignatedREALTORAppraiser => "Designated REALTOR Appraiser",

            MemberType::DesignatedREALTORParticipant => "Designated REALTOR Participant",

            MemberType::LicensedAssistant => "Licensed Assistant",

            MemberType::MLSOnlyAppraiser => "MLS Only Appraiser",

            MemberType::MLSOnlyBroker => "MLS Only Broker",

            MemberType::MLSOnlySalesperson => "MLS Only Salesperson",

            MemberType::MLSStaff => "MLS Staff",

            MemberType::NonMemberVendor => "Non Member/Vendor",

            MemberType::OfficeManager => "Office Manager",

            MemberType::REALTORAppraiser => "REALTOR Appraiser",

            MemberType::REALTORSalesperson => "REALTOR Salesperson",

            MemberType::UnlicensedAssistant => "Unlicensed Assistant",

            MemberType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for MemberType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for MemberType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_member_type_format {
    use super::MemberType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<MemberType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<MemberType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [NotedBy Lookups](https://ddwiki.reso.org/display/DDW17/NotedBy+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum NotedBy {
    /// "[Agent](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246727)": The agent has written the given note about the given listing.
    Agent,

    /// "[Contact](https://ddwiki.reso.org/display/DDW17/Contact)": The contact has written the given note about the given listing.
    Contact,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for NotedBy {
    fn from(s: String) -> NotedBy {
        match s.as_ref() {
            "Agent" => NotedBy::Agent,

            "Contact" => NotedBy::Contact,

            _ => NotedBy::OpenEnumeration(s),
        }
    }
}

impl From<&str> for NotedBy {
    fn from(s: &str) -> NotedBy {
        match s {
            "Agent" => NotedBy::Agent,

            "Contact" => NotedBy::Contact,

            _ => NotedBy::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a NotedBy> for &'a str {
    fn from(s: &'a NotedBy) -> &'a str {
        match s {
            NotedBy::Agent => "Agent",

            NotedBy::Contact => "Contact",

            NotedBy::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for NotedBy {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for NotedBy {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_noted_by_format {
    use super::NotedBy;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<NotedBy>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<NotedBy>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ObjectIdType Lookups](https://ddwiki.reso.org/display/DDW17/ObjectIdType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ObjectIdType {
    /// "[ListingId](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245795)": The ObjectID is the MLS listing number
    ListingId,

    /// "[ListingKey](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245796)": The Object is a key field from an MLS system.
    ListingKey,

    /// "[ListingKeyNumeric](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245797)": The Object is a numeric key field from an MLS system.
    ListingKeyNumeric,

    /// "[OpenHouseId](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245798)": The ObjectID is an Open House ID
    OpenHouseId,

    /// "[OpenHouseKey](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245799)": The ObjectID is the key of an Open House record.
    OpenHouseKey,

    /// "[OpenHouseKeyNumeric](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245800)": The ObjectID is the numeric only key of an Open House record.
    OpenHouseKeyNumeric,

    /// "[ParcelNumber](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245801)": When no listing exists or the tracking is property centric, the ObjectIdType of the property's Parcel Number is used.
    ParcelNumber,

    /// "[PUID](https://ddwiki.reso.org/display/DDW17/PUID)": When no listing exists and the tracking property centric, the RESO PUID is being used.
    PUID,

    /// "[SavedSearchKey](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245803)": When the event is the execution of a saved search, the ObjectID will be the SavedSearchKey or SavedSearchKeyNumeric from the system that executed the search. Individual listings from the result set or being viewed would be separate events for each record.
    SavedSearchKey,

    /// "[SavedSearchKeyNumeric](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245804)": When the event is the execution of a saved search, the ObjectID will be the SavedSearchKey or SavedSearchKeyNumeric from the system that executed the search. Individual listings from the result set or being viewed would be separate events for each record.
    SavedSearchKeyNumeric,

    /// "[Unique](https://ddwiki.reso.org/display/DDW17/Unique)": The ObjectID is a unique ID supplied by the source and is not one of the other types…
    Unique,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ObjectIdType {
    fn from(s: String) -> ObjectIdType {
        match s.as_ref() {
            "ListingId" => ObjectIdType::ListingId,

            "ListingKey" => ObjectIdType::ListingKey,

            "ListingKeyNumeric" => ObjectIdType::ListingKeyNumeric,

            "OpenHouseId" => ObjectIdType::OpenHouseId,

            "OpenHouseKey" => ObjectIdType::OpenHouseKey,

            "OpenHouseKeyNumeric" => ObjectIdType::OpenHouseKeyNumeric,

            "ParcelNumber" => ObjectIdType::ParcelNumber,

            "PUID" => ObjectIdType::PUID,

            "SavedSearchKey" => ObjectIdType::SavedSearchKey,

            "SavedSearchKeyNumeric" => ObjectIdType::SavedSearchKeyNumeric,

            "Unique" => ObjectIdType::Unique,

            _ => ObjectIdType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ObjectIdType {
    fn from(s: &str) -> ObjectIdType {
        match s {
            "ListingId" => ObjectIdType::ListingId,

            "ListingKey" => ObjectIdType::ListingKey,

            "ListingKeyNumeric" => ObjectIdType::ListingKeyNumeric,

            "OpenHouseId" => ObjectIdType::OpenHouseId,

            "OpenHouseKey" => ObjectIdType::OpenHouseKey,

            "OpenHouseKeyNumeric" => ObjectIdType::OpenHouseKeyNumeric,

            "ParcelNumber" => ObjectIdType::ParcelNumber,

            "PUID" => ObjectIdType::PUID,

            "SavedSearchKey" => ObjectIdType::SavedSearchKey,

            "SavedSearchKeyNumeric" => ObjectIdType::SavedSearchKeyNumeric,

            "Unique" => ObjectIdType::Unique,

            _ => ObjectIdType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ObjectIdType> for &'a str {
    fn from(s: &'a ObjectIdType) -> &'a str {
        match s {
            ObjectIdType::ListingId => "ListingId",

            ObjectIdType::ListingKey => "ListingKey",

            ObjectIdType::ListingKeyNumeric => "ListingKeyNumeric",

            ObjectIdType::OpenHouseId => "OpenHouseId",

            ObjectIdType::OpenHouseKey => "OpenHouseKey",

            ObjectIdType::OpenHouseKeyNumeric => "OpenHouseKeyNumeric",

            ObjectIdType::ParcelNumber => "ParcelNumber",

            ObjectIdType::PUID => "PUID",

            ObjectIdType::SavedSearchKey => "SavedSearchKey",

            ObjectIdType::SavedSearchKeyNumeric => "SavedSearchKeyNumeric",

            ObjectIdType::Unique => "Unique",

            ObjectIdType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ObjectIdType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ObjectIdType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_object_id_type_format {
    use super::ObjectIdType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ObjectIdType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ObjectIdType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ObjectType Lookups](https://ddwiki.reso.org/display/DDW17/ObjectType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ObjectType {
    /// "[Document](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245812)": The Object of the tracking event is a Document.
    Document,

    /// "[Listing](https://ddwiki.reso.org/display/DDW17/Listing)": The object of the tracking event is a real estate listing
    Listing,

    /// "[Open House](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245808)": The object of the tracking event is an Open House event
    OpenHouse,

    /// "[Photo](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245811)": The Object of the tracking event is a Photo.
    Photo,

    /// "[Property](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245809)": When no listing exists or the tracking is property centric, the ObjectType of Property is used.
    Property,

    /// "[Saved Search](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245810)": When the event is the execution of a saved search, the Object will be a Saved Search from the system that executed the search. If tracked, individual listings from the result set or being viewed would be separate events for each record.
    SavedSearch,

    /// "[Virtual Tour](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245813)": The Object of the tracking event is considered a Virtual Tour.
    VirtualTour,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ObjectType {
    fn from(s: String) -> ObjectType {
        match s.as_ref() {
            "Document" => ObjectType::Document,

            "Listing" => ObjectType::Listing,

            "Open House" => ObjectType::OpenHouse,

            "Photo" => ObjectType::Photo,

            "Property" => ObjectType::Property,

            "Saved Search" => ObjectType::SavedSearch,

            "Virtual Tour" => ObjectType::VirtualTour,

            _ => ObjectType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ObjectType {
    fn from(s: &str) -> ObjectType {
        match s {
            "Document" => ObjectType::Document,

            "Listing" => ObjectType::Listing,

            "Open House" => ObjectType::OpenHouse,

            "Photo" => ObjectType::Photo,

            "Property" => ObjectType::Property,

            "Saved Search" => ObjectType::SavedSearch,

            "Virtual Tour" => ObjectType::VirtualTour,

            _ => ObjectType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ObjectType> for &'a str {
    fn from(s: &'a ObjectType) -> &'a str {
        match s {
            ObjectType::Document => "Document",

            ObjectType::Listing => "Listing",

            ObjectType::OpenHouse => "Open House",

            ObjectType::Photo => "Photo",

            ObjectType::Property => "Property",

            ObjectType::SavedSearch => "Saved Search",

            ObjectType::VirtualTour => "Virtual Tour",

            ObjectType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ObjectType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ObjectType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_object_type_format {
    use super::ObjectType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ObjectType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<ObjectType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [OccupantType Lookups](https://ddwiki.reso.org/display/DDW17/OccupantType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum OccupantType {
    /// "[Owner](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245646)": The occupant is the owner.
    Owner,

    /// "[Tenant](https://ddwiki.reso.org/display/DDW17/Tenant)": The occupant is a tenant.
    Tenant,

    /// "[Vacant](https://ddwiki.reso.org/display/DDW17/Vacant)": The property is vacant.
    Vacant,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for OccupantType {
    fn from(s: String) -> OccupantType {
        match s.as_ref() {
            "Owner" => OccupantType::Owner,

            "Tenant" => OccupantType::Tenant,

            "Vacant" => OccupantType::Vacant,

            _ => OccupantType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for OccupantType {
    fn from(s: &str) -> OccupantType {
        match s {
            "Owner" => OccupantType::Owner,

            "Tenant" => OccupantType::Tenant,

            "Vacant" => OccupantType::Vacant,

            _ => OccupantType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a OccupantType> for &'a str {
    fn from(s: &'a OccupantType) -> &'a str {
        match s {
            OccupantType::Owner => "Owner",

            OccupantType::Tenant => "Tenant",

            OccupantType::Vacant => "Vacant",

            OccupantType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for OccupantType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for OccupantType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_occupant_type_format {
    use super::OccupantType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<OccupantType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<OccupantType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [OfficeBranchType Lookups](https://ddwiki.reso.org/display/DDW17/OfficeBranchType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum OfficeBranchType {
    /// "[Branch](https://ddwiki.reso.org/display/DDW17/Branch)": This office is a branch office.
    Branch,

    /// "[Main](https://ddwiki.reso.org/display/DDW17/Main)": This office is the broker's main office.
    Main,

    /// "[Stand Alone](https://ddwiki.reso.org/display/DDW17/Stand+Alone)": This office is a stand alone, or single office brokerage.
    StandAlone,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for OfficeBranchType {
    fn from(s: String) -> OfficeBranchType {
        match s.as_ref() {
            "Branch" => OfficeBranchType::Branch,

            "Main" => OfficeBranchType::Main,

            "Stand Alone" => OfficeBranchType::StandAlone,

            _ => OfficeBranchType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for OfficeBranchType {
    fn from(s: &str) -> OfficeBranchType {
        match s {
            "Branch" => OfficeBranchType::Branch,

            "Main" => OfficeBranchType::Main,

            "Stand Alone" => OfficeBranchType::StandAlone,

            _ => OfficeBranchType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a OfficeBranchType> for &'a str {
    fn from(s: &'a OfficeBranchType) -> &'a str {
        match s {
            OfficeBranchType::Branch => "Branch",

            OfficeBranchType::Main => "Main",

            OfficeBranchType::StandAlone => "Stand Alone",

            OfficeBranchType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for OfficeBranchType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for OfficeBranchType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_office_branch_type_format {
    use super::OfficeBranchType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<OfficeBranchType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<OfficeBranchType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [OfficeStatus Lookups](https://ddwiki.reso.org/display/DDW17/OfficeStatus+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum OfficeStatus {
    /// "[Active](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245650)": The member office's account is active.
    Active,

    /// "[Inactive](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245651)": The member office's account is not active.
    Inactive,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for OfficeStatus {
    fn from(s: String) -> OfficeStatus {
        match s.as_ref() {
            "Active" => OfficeStatus::Active,

            "Inactive" => OfficeStatus::Inactive,

            _ => OfficeStatus::OpenEnumeration(s),
        }
    }
}

impl From<&str> for OfficeStatus {
    fn from(s: &str) -> OfficeStatus {
        match s {
            "Active" => OfficeStatus::Active,

            "Inactive" => OfficeStatus::Inactive,

            _ => OfficeStatus::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a OfficeStatus> for &'a str {
    fn from(s: &'a OfficeStatus) -> &'a str {
        match s {
            OfficeStatus::Active => "Active",

            OfficeStatus::Inactive => "Inactive",

            OfficeStatus::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for OfficeStatus {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for OfficeStatus {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_office_status_format {
    use super::OfficeStatus;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<OfficeStatus>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<OfficeStatus>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [OfficeType Lookups](https://ddwiki.reso.org/display/DDW17/OfficeType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum OfficeType {
    /// "[Affiliate](https://ddwiki.reso.org/display/DDW17/Affiliate)": The record in the office roster is an affiliate office.
    Affiliate,

    /// "[Appraiser](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245654)": The record in the office roster is an appraiser office.
    Appraiser,

    /// "[Association](https://ddwiki.reso.org/display/DDW17/Association)": The record in the office roster is an association office.
    Association,

    /// "[MLS](https://ddwiki.reso.org/display/DDW17/MLS)": The record in the office roster is an MLS office.
    MLS,

    /// "[MLS Only Branch](https://ddwiki.reso.org/display/DDW17/MLS+Only+Branch)": The record in the office roster is a broker branch office who receives only MLS service.
    MLSOnlyBranch,

    /// "[MLS Only Firm](https://ddwiki.reso.org/display/DDW17/MLS+Only+Firm)": The record in the office roster is a broker Firm office who receives only MLS service.
    MLSOnlyFirm,

    /// "[MLS Only Office](https://ddwiki.reso.org/display/DDW17/MLS+Only+Office)": The record in the office roster is a broker office who receives only MLS service.
    MLSOnlyOffice,

    /// "[Non Member/Vendor](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245660)": The record in the office roster is an non member/vendor office.
    NonMemberVendor,

    /// "[Realtor Branch Office](https://ddwiki.reso.org/display/DDW17/Realtor+Branch+Office)": The record in the office roster is an realtor branch office .
    RealtorBranchOffice,

    /// "[Realtor Firm](https://ddwiki.reso.org/display/DDW17/Realtor+Firm)": The record in the office roster is an realtor firm office.
    RealtorFirm,

    /// "[Realtor Office](https://ddwiki.reso.org/display/DDW17/Realtor+Office)": The record in the office roster is an realtor office.
    RealtorOffice,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for OfficeType {
    fn from(s: String) -> OfficeType {
        match s.as_ref() {
            "Affiliate" => OfficeType::Affiliate,

            "Appraiser" => OfficeType::Appraiser,

            "Association" => OfficeType::Association,

            "MLS" => OfficeType::MLS,

            "MLS Only Branch" => OfficeType::MLSOnlyBranch,

            "MLS Only Firm" => OfficeType::MLSOnlyFirm,

            "MLS Only Office" => OfficeType::MLSOnlyOffice,

            "Non Member/Vendor" => OfficeType::NonMemberVendor,

            "Realtor Branch Office" => OfficeType::RealtorBranchOffice,

            "Realtor Firm" => OfficeType::RealtorFirm,

            "Realtor Office" => OfficeType::RealtorOffice,

            _ => OfficeType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for OfficeType {
    fn from(s: &str) -> OfficeType {
        match s {
            "Affiliate" => OfficeType::Affiliate,

            "Appraiser" => OfficeType::Appraiser,

            "Association" => OfficeType::Association,

            "MLS" => OfficeType::MLS,

            "MLS Only Branch" => OfficeType::MLSOnlyBranch,

            "MLS Only Firm" => OfficeType::MLSOnlyFirm,

            "MLS Only Office" => OfficeType::MLSOnlyOffice,

            "Non Member/Vendor" => OfficeType::NonMemberVendor,

            "Realtor Branch Office" => OfficeType::RealtorBranchOffice,

            "Realtor Firm" => OfficeType::RealtorFirm,

            "Realtor Office" => OfficeType::RealtorOffice,

            _ => OfficeType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a OfficeType> for &'a str {
    fn from(s: &'a OfficeType) -> &'a str {
        match s {
            OfficeType::Affiliate => "Affiliate",

            OfficeType::Appraiser => "Appraiser",

            OfficeType::Association => "Association",

            OfficeType::MLS => "MLS",

            OfficeType::MLSOnlyBranch => "MLS Only Branch",

            OfficeType::MLSOnlyFirm => "MLS Only Firm",

            OfficeType::MLSOnlyOffice => "MLS Only Office",

            OfficeType::NonMemberVendor => "Non Member/Vendor",

            OfficeType::RealtorBranchOffice => "Realtor Branch Office",

            OfficeType::RealtorFirm => "Realtor Firm",

            OfficeType::RealtorOffice => "Realtor Office",

            OfficeType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for OfficeType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for OfficeType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_office_type_format {
    use super::OfficeType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<OfficeType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<OfficeType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [OpenHouseStatus Lookups](https://ddwiki.reso.org/display/DDW17/OpenHouseStatus+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum OpenHouseStatus {
    /// "[Active](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245665)": The open house is active and continuing as scheduled.
    Active,

    /// "[Canceled](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245666)": The open house has been canceled.
    Canceled,

    /// "[Ended](https://ddwiki.reso.org/display/DDW17/Ended)": The open house has ended and is past the scheduled open house date and time.
    Ended,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for OpenHouseStatus {
    fn from(s: String) -> OpenHouseStatus {
        match s.as_ref() {
            "Active" => OpenHouseStatus::Active,

            "Canceled" => OpenHouseStatus::Canceled,

            "Ended" => OpenHouseStatus::Ended,

            _ => OpenHouseStatus::OpenEnumeration(s),
        }
    }
}

impl From<&str> for OpenHouseStatus {
    fn from(s: &str) -> OpenHouseStatus {
        match s {
            "Active" => OpenHouseStatus::Active,

            "Canceled" => OpenHouseStatus::Canceled,

            "Ended" => OpenHouseStatus::Ended,

            _ => OpenHouseStatus::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a OpenHouseStatus> for &'a str {
    fn from(s: &'a OpenHouseStatus) -> &'a str {
        match s {
            OpenHouseStatus::Active => "Active",

            OpenHouseStatus::Canceled => "Canceled",

            OpenHouseStatus::Ended => "Ended",

            OpenHouseStatus::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for OpenHouseStatus {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for OpenHouseStatus {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_open_house_status_format {
    use super::OpenHouseStatus;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<OpenHouseStatus>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<OpenHouseStatus>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [OpenHouseType Lookups](https://ddwiki.reso.org/display/DDW17/OpenHouseType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum OpenHouseType {
    /// "[Broker](https://ddwiki.reso.org/display/DDW17/Broker)": The open house is only open to brokers, and at times agents.
    Broker,

    /// "[Office](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245670)": The open house is only open to the members of a particular office(s).
    Office,

    /// "[Public](https://ddwiki.reso.org/display/DDW17/Public)": The open house is open to the general public.
    Public,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for OpenHouseType {
    fn from(s: String) -> OpenHouseType {
        match s.as_ref() {
            "Broker" => OpenHouseType::Broker,

            "Office" => OpenHouseType::Office,

            "Public" => OpenHouseType::Public,

            _ => OpenHouseType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for OpenHouseType {
    fn from(s: &str) -> OpenHouseType {
        match s {
            "Broker" => OpenHouseType::Broker,

            "Office" => OpenHouseType::Office,

            "Public" => OpenHouseType::Public,

            _ => OpenHouseType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a OpenHouseType> for &'a str {
    fn from(s: &'a OpenHouseType) -> &'a str {
        match s {
            OpenHouseType::Broker => "Broker",

            OpenHouseType::Office => "Office",

            OpenHouseType::Public => "Public",

            OpenHouseType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for OpenHouseType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for OpenHouseType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_open_house_type_format {
    use super::OpenHouseType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<OpenHouseType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<OpenHouseType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [OperatingExpenseIncludes Lookups](https://ddwiki.reso.org/display/DDW17/OperatingExpenseIncludes+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum OperatingExpenseIncludes {
    /// "[Accounting](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245673)": The operating expense amount includes accounting costs.
    Accounting,

    /// "[Advertising](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245674)": The operating expense amount includes advertising costs.
    Advertising,

    /// "[Association](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245675)": The operating expense amount includes association costs.
    Association,

    /// "[Cable TV](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245676)": The operating expense amount includes cable TV costs.
    CableTV,

    /// "[Capital Improvements](https://ddwiki.reso.org/display/DDW17/Capital+Improvements)": The operating expense amount includes capital improvements costs.
    CapitalImprovements,

    /// "[Depreciation](https://ddwiki.reso.org/display/DDW17/Depreciation)": The operating expense amount includes depreciation costs.
    Depreciation,

    /// "[Equipment Rental](https://ddwiki.reso.org/display/DDW17/Equipment+Rental)": The operating expense amount includes equipment rental costs.
    EquipmentRental,

    /// "[Fuel](https://ddwiki.reso.org/display/DDW17/Fuel)": The operating expense amount includes fuel costs.
    Fuel,

    /// "[Furniture Replacement](https://ddwiki.reso.org/display/DDW17/Furniture+Replacement)": The operating expense amount includes furniture replacement costs.
    FurnitureReplacement,

    /// "[Gardener](https://ddwiki.reso.org/display/DDW17/Gardener)": The operating expense amount includes gardener costs.
    Gardener,

    /// "[Insurance](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245683)": The operating expense amount includes insurance costs.
    Insurance,

    /// "[Legal](https://ddwiki.reso.org/display/DDW17/Legal)": The operating expense amount includes legal costs.
    Legal,

    /// "[Licenses](https://ddwiki.reso.org/display/DDW17/Licenses)": The operating expense amount includes licenses costs.
    Licenses,

    /// "[Maintenance](https://ddwiki.reso.org/display/DDW17/Maintenance)": The operating expense amount includes maintenance costs.
    Maintenance,

    /// "[Maintenance Grounds](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245687)": The operating expense amount includes maintenance grounds costs.
    MaintenanceGrounds,

    /// "[Maintenance Structure](https://ddwiki.reso.org/display/DDW17/Maintenance+Structure)": The operating expense amount includes maintenance structure costs.
    MaintenanceStructure,

    /// "[Manager](https://ddwiki.reso.org/display/DDW17/Manager)": The operating expense amount includes manager costs.
    Manager,

    /// "[Mortgage/Loans](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245690)": The operating expense amount includes mortgage/loans costs.
    MortgageLoans,

    /// "[New Tax](https://ddwiki.reso.org/display/DDW17/New+Tax)": The operating expense amount includes new tax costs.
    NewTax,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245692)": The operating expense amount includes other costs.
    Other,

    /// "[Parking](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245693)": The operating expense amount includes parking costs.
    Parking,

    /// "[Pest Control](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245694)": The operating expense amount includes pest control costs.
    PestControl,

    /// "[Pool/Spa](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245695)": The operating expense amount includes pool/spa costs.
    PoolSpa,

    /// "[Professional Management](https://ddwiki.reso.org/display/DDW17/Professional+Management)": The operating expense amount includes professional management costs.
    ProfessionalManagement,

    /// "[Security](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245697)": The operating expense amount includes security costs.
    Security,

    /// "[Snow Removal](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245698)": The operating expense amount includes snow removal costs.
    SnowRemoval,

    /// "[Staff](https://ddwiki.reso.org/display/DDW17/Staff)": The operating expense amount includes staff costs.
    Staff,

    /// "[Supplies](https://ddwiki.reso.org/display/DDW17/Supplies)": The operating expense amount includes supplies costs.
    Supplies,

    /// "[Trash](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245701)": The operating expense amount includes trash costs.
    Trash,

    /// "[Utilities](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245702)": The operating expense amount includes utilities costs.
    Utilities,

    /// "[Vacancy Allowance](https://ddwiki.reso.org/display/DDW17/Vacancy+Allowance)": The operating expense amount includes vacancy allowance costs.
    VacancyAllowance,

    /// "[Water/Sewer](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245704)": The operating expense amount includes water/sewer costs.
    WaterSewer,

    /// "[Workmans Compensation](https://ddwiki.reso.org/display/DDW17/Workmans+Compensation)": The operating expense amount includes workman's compensation costs.
    WorkmansCompensation,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for OperatingExpenseIncludes {
    fn from(s: String) -> OperatingExpenseIncludes {
        match s.as_ref() {
            "Accounting" => OperatingExpenseIncludes::Accounting,

            "Advertising" => OperatingExpenseIncludes::Advertising,

            "Association" => OperatingExpenseIncludes::Association,

            "Cable TV" => OperatingExpenseIncludes::CableTV,

            "Capital Improvements" => OperatingExpenseIncludes::CapitalImprovements,

            "Depreciation" => OperatingExpenseIncludes::Depreciation,

            "Equipment Rental" => OperatingExpenseIncludes::EquipmentRental,

            "Fuel" => OperatingExpenseIncludes::Fuel,

            "Furniture Replacement" => OperatingExpenseIncludes::FurnitureReplacement,

            "Gardener" => OperatingExpenseIncludes::Gardener,

            "Insurance" => OperatingExpenseIncludes::Insurance,

            "Legal" => OperatingExpenseIncludes::Legal,

            "Licenses" => OperatingExpenseIncludes::Licenses,

            "Maintenance" => OperatingExpenseIncludes::Maintenance,

            "Maintenance Grounds" => OperatingExpenseIncludes::MaintenanceGrounds,

            "Maintenance Structure" => OperatingExpenseIncludes::MaintenanceStructure,

            "Manager" => OperatingExpenseIncludes::Manager,

            "Mortgage/Loans" => OperatingExpenseIncludes::MortgageLoans,

            "New Tax" => OperatingExpenseIncludes::NewTax,

            "Other" => OperatingExpenseIncludes::Other,

            "Parking" => OperatingExpenseIncludes::Parking,

            "Pest Control" => OperatingExpenseIncludes::PestControl,

            "Pool/Spa" => OperatingExpenseIncludes::PoolSpa,

            "Professional Management" => OperatingExpenseIncludes::ProfessionalManagement,

            "Security" => OperatingExpenseIncludes::Security,

            "Snow Removal" => OperatingExpenseIncludes::SnowRemoval,

            "Staff" => OperatingExpenseIncludes::Staff,

            "Supplies" => OperatingExpenseIncludes::Supplies,

            "Trash" => OperatingExpenseIncludes::Trash,

            "Utilities" => OperatingExpenseIncludes::Utilities,

            "Vacancy Allowance" => OperatingExpenseIncludes::VacancyAllowance,

            "Water/Sewer" => OperatingExpenseIncludes::WaterSewer,

            "Workmans Compensation" => OperatingExpenseIncludes::WorkmansCompensation,

            _ => OperatingExpenseIncludes::OpenEnumeration(s),
        }
    }
}

impl From<&str> for OperatingExpenseIncludes {
    fn from(s: &str) -> OperatingExpenseIncludes {
        match s {
            "Accounting" => OperatingExpenseIncludes::Accounting,

            "Advertising" => OperatingExpenseIncludes::Advertising,

            "Association" => OperatingExpenseIncludes::Association,

            "Cable TV" => OperatingExpenseIncludes::CableTV,

            "Capital Improvements" => OperatingExpenseIncludes::CapitalImprovements,

            "Depreciation" => OperatingExpenseIncludes::Depreciation,

            "Equipment Rental" => OperatingExpenseIncludes::EquipmentRental,

            "Fuel" => OperatingExpenseIncludes::Fuel,

            "Furniture Replacement" => OperatingExpenseIncludes::FurnitureReplacement,

            "Gardener" => OperatingExpenseIncludes::Gardener,

            "Insurance" => OperatingExpenseIncludes::Insurance,

            "Legal" => OperatingExpenseIncludes::Legal,

            "Licenses" => OperatingExpenseIncludes::Licenses,

            "Maintenance" => OperatingExpenseIncludes::Maintenance,

            "Maintenance Grounds" => OperatingExpenseIncludes::MaintenanceGrounds,

            "Maintenance Structure" => OperatingExpenseIncludes::MaintenanceStructure,

            "Manager" => OperatingExpenseIncludes::Manager,

            "Mortgage/Loans" => OperatingExpenseIncludes::MortgageLoans,

            "New Tax" => OperatingExpenseIncludes::NewTax,

            "Other" => OperatingExpenseIncludes::Other,

            "Parking" => OperatingExpenseIncludes::Parking,

            "Pest Control" => OperatingExpenseIncludes::PestControl,

            "Pool/Spa" => OperatingExpenseIncludes::PoolSpa,

            "Professional Management" => OperatingExpenseIncludes::ProfessionalManagement,

            "Security" => OperatingExpenseIncludes::Security,

            "Snow Removal" => OperatingExpenseIncludes::SnowRemoval,

            "Staff" => OperatingExpenseIncludes::Staff,

            "Supplies" => OperatingExpenseIncludes::Supplies,

            "Trash" => OperatingExpenseIncludes::Trash,

            "Utilities" => OperatingExpenseIncludes::Utilities,

            "Vacancy Allowance" => OperatingExpenseIncludes::VacancyAllowance,

            "Water/Sewer" => OperatingExpenseIncludes::WaterSewer,

            "Workmans Compensation" => OperatingExpenseIncludes::WorkmansCompensation,

            _ => OperatingExpenseIncludes::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a OperatingExpenseIncludes> for &'a str {
    fn from(s: &'a OperatingExpenseIncludes) -> &'a str {
        match s {
            OperatingExpenseIncludes::Accounting => "Accounting",

            OperatingExpenseIncludes::Advertising => "Advertising",

            OperatingExpenseIncludes::Association => "Association",

            OperatingExpenseIncludes::CableTV => "Cable TV",

            OperatingExpenseIncludes::CapitalImprovements => "Capital Improvements",

            OperatingExpenseIncludes::Depreciation => "Depreciation",

            OperatingExpenseIncludes::EquipmentRental => "Equipment Rental",

            OperatingExpenseIncludes::Fuel => "Fuel",

            OperatingExpenseIncludes::FurnitureReplacement => "Furniture Replacement",

            OperatingExpenseIncludes::Gardener => "Gardener",

            OperatingExpenseIncludes::Insurance => "Insurance",

            OperatingExpenseIncludes::Legal => "Legal",

            OperatingExpenseIncludes::Licenses => "Licenses",

            OperatingExpenseIncludes::Maintenance => "Maintenance",

            OperatingExpenseIncludes::MaintenanceGrounds => "Maintenance Grounds",

            OperatingExpenseIncludes::MaintenanceStructure => "Maintenance Structure",

            OperatingExpenseIncludes::Manager => "Manager",

            OperatingExpenseIncludes::MortgageLoans => "Mortgage/Loans",

            OperatingExpenseIncludes::NewTax => "New Tax",

            OperatingExpenseIncludes::Other => "Other",

            OperatingExpenseIncludes::Parking => "Parking",

            OperatingExpenseIncludes::PestControl => "Pest Control",

            OperatingExpenseIncludes::PoolSpa => "Pool/Spa",

            OperatingExpenseIncludes::ProfessionalManagement => "Professional Management",

            OperatingExpenseIncludes::Security => "Security",

            OperatingExpenseIncludes::SnowRemoval => "Snow Removal",

            OperatingExpenseIncludes::Staff => "Staff",

            OperatingExpenseIncludes::Supplies => "Supplies",

            OperatingExpenseIncludes::Trash => "Trash",

            OperatingExpenseIncludes::Utilities => "Utilities",

            OperatingExpenseIncludes::VacancyAllowance => "Vacancy Allowance",

            OperatingExpenseIncludes::WaterSewer => "Water/Sewer",

            OperatingExpenseIncludes::WorkmansCompensation => "Workmans Compensation",

            OperatingExpenseIncludes::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for OperatingExpenseIncludes {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for OperatingExpenseIncludes {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_operating_expense_includes_format {
    use super::OperatingExpenseIncludes;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<OperatingExpenseIncludes>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<OperatingExpenseIncludes>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [OtherEquipment Lookups](https://ddwiki.reso.org/display/DDW17/OtherEquipment+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum OtherEquipment {
    /// "[Air Purifier](https://ddwiki.reso.org/display/DDW17/Air+Purifier)": The property includes an air purifier.
    AirPurifier,

    /// "[Call Listing Agent](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245816)": Call the listing agent for more information about other equipment included with the property.
    CallListingAgent,

    /// "[Compressor](https://ddwiki.reso.org/display/DDW17/Compressor)": The property includes a compressor.
    Compressor,

    /// "[DC Well Pump](https://ddwiki.reso.org/display/DDW17/DC+Well+Pump)": The property includes a DC well pump.
    DCWellPump,

    /// "[Dehumidifier](https://ddwiki.reso.org/display/DDW17/Dehumidifier)": The property includes a dehumidifier.
    Dehumidifier,

    /// "[Farm Equipment](https://ddwiki.reso.org/display/DDW17/Farm+Equipment)": The property includes farm equipment.
    FarmEquipment,

    /// "[Fuel Tank(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245821)": The property includes a fuel tank(s).
    FuelTanks,

    /// "[Generator](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245822)": The property includes a generator.
    Generator,

    /// "[Home Theater](https://ddwiki.reso.org/display/DDW17/Home+Theater)": The property includes a home theater.
    HomeTheater,

    /// "[Intercom](https://ddwiki.reso.org/display/DDW17/Intercom)": The property includes an intercom.
    Intercom,

    /// "[Irrigation Equipment](https://ddwiki.reso.org/display/DDW17/Irrigation+Equipment)": The property includes irrigation equipment.
    IrrigationEquipment,

    /// "[List Available](https://ddwiki.reso.org/display/DDW17/List+Available)": A list of other equipment included with the property is available upon request.
    ListAvailable,

    /// "[Livestock Equipment](https://ddwiki.reso.org/display/DDW17/Livestock+Equipment)": The property includes livestock equipment.
    LivestockEquipment,

    /// "[Negotiable](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245828)": The other equipment included with the property is negotiable.
    Negotiable,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245829)": There is no other equipment included with the property.
    None,

    /// "[Orchard Equipment](https://ddwiki.reso.org/display/DDW17/Orchard+Equipment)": The property includes orchard equipment.
    OrchardEquipment,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245831)": The property includes equipment other than what's included in this list.
    Other,

    /// "[Rotary Antenna](https://ddwiki.reso.org/display/DDW17/Rotary+Antenna)": The property includes a rotary antenna.
    RotaryAntenna,

    /// "[Satellite Dish](https://ddwiki.reso.org/display/DDW17/Satellite+Dish)": The property includes a satellite dish.
    SatelliteDish,

    /// "[TV Antenna](https://ddwiki.reso.org/display/DDW17/TV+Antenna)": The property includes a TV antenna.
    TVAntenna,

    /// "[Varies by Unit](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245835)": The equipment included with the property varies from unit to unit.
    VariesbyUnit,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for OtherEquipment {
    fn from(s: String) -> OtherEquipment {
        match s.as_ref() {
            "Air Purifier" => OtherEquipment::AirPurifier,

            "Call Listing Agent" => OtherEquipment::CallListingAgent,

            "Compressor" => OtherEquipment::Compressor,

            "DC Well Pump" => OtherEquipment::DCWellPump,

            "Dehumidifier" => OtherEquipment::Dehumidifier,

            "Farm Equipment" => OtherEquipment::FarmEquipment,

            "Fuel Tank(s)" => OtherEquipment::FuelTanks,

            "Generator" => OtherEquipment::Generator,

            "Home Theater" => OtherEquipment::HomeTheater,

            "Intercom" => OtherEquipment::Intercom,

            "Irrigation Equipment" => OtherEquipment::IrrigationEquipment,

            "List Available" => OtherEquipment::ListAvailable,

            "Livestock Equipment" => OtherEquipment::LivestockEquipment,

            "Negotiable" => OtherEquipment::Negotiable,

            "None" => OtherEquipment::None,

            "Orchard Equipment" => OtherEquipment::OrchardEquipment,

            "Other" => OtherEquipment::Other,

            "Rotary Antenna" => OtherEquipment::RotaryAntenna,

            "Satellite Dish" => OtherEquipment::SatelliteDish,

            "TV Antenna" => OtherEquipment::TVAntenna,

            "Varies by Unit" => OtherEquipment::VariesbyUnit,

            _ => OtherEquipment::OpenEnumeration(s),
        }
    }
}

impl From<&str> for OtherEquipment {
    fn from(s: &str) -> OtherEquipment {
        match s {
            "Air Purifier" => OtherEquipment::AirPurifier,

            "Call Listing Agent" => OtherEquipment::CallListingAgent,

            "Compressor" => OtherEquipment::Compressor,

            "DC Well Pump" => OtherEquipment::DCWellPump,

            "Dehumidifier" => OtherEquipment::Dehumidifier,

            "Farm Equipment" => OtherEquipment::FarmEquipment,

            "Fuel Tank(s)" => OtherEquipment::FuelTanks,

            "Generator" => OtherEquipment::Generator,

            "Home Theater" => OtherEquipment::HomeTheater,

            "Intercom" => OtherEquipment::Intercom,

            "Irrigation Equipment" => OtherEquipment::IrrigationEquipment,

            "List Available" => OtherEquipment::ListAvailable,

            "Livestock Equipment" => OtherEquipment::LivestockEquipment,

            "Negotiable" => OtherEquipment::Negotiable,

            "None" => OtherEquipment::None,

            "Orchard Equipment" => OtherEquipment::OrchardEquipment,

            "Other" => OtherEquipment::Other,

            "Rotary Antenna" => OtherEquipment::RotaryAntenna,

            "Satellite Dish" => OtherEquipment::SatelliteDish,

            "TV Antenna" => OtherEquipment::TVAntenna,

            "Varies by Unit" => OtherEquipment::VariesbyUnit,

            _ => OtherEquipment::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a OtherEquipment> for &'a str {
    fn from(s: &'a OtherEquipment) -> &'a str {
        match s {
            OtherEquipment::AirPurifier => "Air Purifier",

            OtherEquipment::CallListingAgent => "Call Listing Agent",

            OtherEquipment::Compressor => "Compressor",

            OtherEquipment::DCWellPump => "DC Well Pump",

            OtherEquipment::Dehumidifier => "Dehumidifier",

            OtherEquipment::FarmEquipment => "Farm Equipment",

            OtherEquipment::FuelTanks => "Fuel Tank(s)",

            OtherEquipment::Generator => "Generator",

            OtherEquipment::HomeTheater => "Home Theater",

            OtherEquipment::Intercom => "Intercom",

            OtherEquipment::IrrigationEquipment => "Irrigation Equipment",

            OtherEquipment::ListAvailable => "List Available",

            OtherEquipment::LivestockEquipment => "Livestock Equipment",

            OtherEquipment::Negotiable => "Negotiable",

            OtherEquipment::None => "None",

            OtherEquipment::OrchardEquipment => "Orchard Equipment",

            OtherEquipment::Other => "Other",

            OtherEquipment::RotaryAntenna => "Rotary Antenna",

            OtherEquipment::SatelliteDish => "Satellite Dish",

            OtherEquipment::TVAntenna => "TV Antenna",

            OtherEquipment::VariesbyUnit => "Varies by Unit",

            OtherEquipment::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for OtherEquipment {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for OtherEquipment {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_other_equipment_format {
    use super::OtherEquipment;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<OtherEquipment>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<OtherEquipment>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [OtherPhoneType Lookups](https://ddwiki.reso.org/display/DDW17/OtherPhoneType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum OtherPhoneType {
    /// "[Direct](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245746)": This is the contact's direct number.
    Direct,

    /// "[Fax](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245747)": This is the contact's fax.
    Fax,

    /// "[First](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245748)": This is the contact's first preferred phone.
    First,

    /// "[Home](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245749)": This is the contact's home phone.
    Home,

    /// "[Mobile](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245750)": This is the contact's mobile phone.
    Mobile,

    /// "[Modem](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245751)": This is the contact's modem.
    Modem,

    /// "[Office](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245752)": This is the contact's office phone.
    Office,

    /// "[Pager](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245753)": This is the contact's pager.
    Pager,

    /// "[Preferred](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245754)": This is the contact's preferred phone.
    Preferred,

    /// "[Second](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245755)": This is the contact's second preferred phone.
    Second,

    /// "[SMS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245756)": This is the contact's SMS/text number.
    SMS,

    /// "[Third](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245757)": This is the contact's third preferred phone.
    Third,

    /// "[Toll Free](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245758)": This is the contact's toll free number.
    TollFree,

    /// "[Voicemail](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245759)": This is the contact's voicemail.
    Voicemail,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for OtherPhoneType {
    fn from(s: String) -> OtherPhoneType {
        match s.as_ref() {
            "Direct" => OtherPhoneType::Direct,

            "Fax" => OtherPhoneType::Fax,

            "First" => OtherPhoneType::First,

            "Home" => OtherPhoneType::Home,

            "Mobile" => OtherPhoneType::Mobile,

            "Modem" => OtherPhoneType::Modem,

            "Office" => OtherPhoneType::Office,

            "Pager" => OtherPhoneType::Pager,

            "Preferred" => OtherPhoneType::Preferred,

            "Second" => OtherPhoneType::Second,

            "SMS" => OtherPhoneType::SMS,

            "Third" => OtherPhoneType::Third,

            "Toll Free" => OtherPhoneType::TollFree,

            "Voicemail" => OtherPhoneType::Voicemail,

            _ => OtherPhoneType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for OtherPhoneType {
    fn from(s: &str) -> OtherPhoneType {
        match s {
            "Direct" => OtherPhoneType::Direct,

            "Fax" => OtherPhoneType::Fax,

            "First" => OtherPhoneType::First,

            "Home" => OtherPhoneType::Home,

            "Mobile" => OtherPhoneType::Mobile,

            "Modem" => OtherPhoneType::Modem,

            "Office" => OtherPhoneType::Office,

            "Pager" => OtherPhoneType::Pager,

            "Preferred" => OtherPhoneType::Preferred,

            "Second" => OtherPhoneType::Second,

            "SMS" => OtherPhoneType::SMS,

            "Third" => OtherPhoneType::Third,

            "Toll Free" => OtherPhoneType::TollFree,

            "Voicemail" => OtherPhoneType::Voicemail,

            _ => OtherPhoneType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a OtherPhoneType> for &'a str {
    fn from(s: &'a OtherPhoneType) -> &'a str {
        match s {
            OtherPhoneType::Direct => "Direct",

            OtherPhoneType::Fax => "Fax",

            OtherPhoneType::First => "First",

            OtherPhoneType::Home => "Home",

            OtherPhoneType::Mobile => "Mobile",

            OtherPhoneType::Modem => "Modem",

            OtherPhoneType::Office => "Office",

            OtherPhoneType::Pager => "Pager",

            OtherPhoneType::Preferred => "Preferred",

            OtherPhoneType::Second => "Second",

            OtherPhoneType::SMS => "SMS",

            OtherPhoneType::Third => "Third",

            OtherPhoneType::TollFree => "Toll Free",

            OtherPhoneType::Voicemail => "Voicemail",

            OtherPhoneType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for OtherPhoneType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for OtherPhoneType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_other_phone_type_format {
    use super::OtherPhoneType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<OtherPhoneType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<OtherPhoneType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [OtherStructures Lookups](https://ddwiki.reso.org/display/DDW17/OtherStructures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum OtherStructures {
    /// "[Airplane Hangar](https://ddwiki.reso.org/display/DDW17/Airplane+Hangar)": The property includes an airplane hangar.
    AirplaneHangar,

    /// "[Arena](https://ddwiki.reso.org/display/DDW17/Arena)": The property includes an arena.
    Arena,

    /// "[Barn(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245763)": The property includes a barn(s).
    Barns,

    /// "[Boat House](https://ddwiki.reso.org/display/DDW17/Boat+House)": The property includes a boat house.
    BoatHouse,

    /// "[Cabana](https://ddwiki.reso.org/display/DDW17/Cabana)": The property includes a cabana.
    Cabana,

    /// "[Cave(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245766)": The property includes a cave(s).
    Caves,

    /// "[Corral(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245767)": The property includes a corral(s).
    Corrals,

    /// "[Covered Arena](https://ddwiki.reso.org/display/DDW17/Covered+Arena)": The property includes a covered arena.
    CoveredArena,

    /// "[Garage(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245769)": The property includes a garage(s).
    Garages,

    /// "[Gazebo](https://ddwiki.reso.org/display/DDW17/Gazebo)": The property includes a gazebo.
    Gazebo,

    /// "[Grain Storage](https://ddwiki.reso.org/display/DDW17/Grain+Storage)": The property includes grain storage.
    GrainStorage,

    /// "[Greenhouse](https://ddwiki.reso.org/display/DDW17/Greenhouse)": The property includes a greenhouse.
    Greenhouse,

    /// "[Guest House](https://ddwiki.reso.org/display/DDW17/Guest+House)": The property includes a guest house.
    GuestHouse,

    /// "[Kennel/Dog Run](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245774)": The property includes a kennel or dog run.
    KennelDogRun,

    /// "[Mobile Home](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245775)": The property includes a mobile home.
    MobileHome,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245776)": The property has no other structures.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245777)": The property includes a structure other than those included in this list.
    Other,

    /// "[Outbuilding](https://ddwiki.reso.org/display/DDW17/Outbuilding)": The property includes an outbuilding.
    Outbuilding,

    /// "[Outdoor Kitchen](https://ddwiki.reso.org/display/DDW17/Outdoor+Kitchen)": The property includes an outdoor kitchen.
    OutdoorKitchen,

    /// "[Packing Shed](https://ddwiki.reso.org/display/DDW17/Packing+Shed)": The property includes a packing shed.
    PackingShed,

    /// "[Pergola](https://ddwiki.reso.org/display/DDW17/Pergola)": The property includes a pergola.
    Pergola,

    /// "[Pool House](https://ddwiki.reso.org/display/DDW17/Pool+House)": The property includes a pool house.
    PoolHouse,

    /// "[Poultry Coop](https://ddwiki.reso.org/display/DDW17/Poultry+Coop)": The property includes a poultry coop.
    PoultryCoop,

    /// "[Residence](https://ddwiki.reso.org/display/DDW17/Residence)": The property includes a residence structure.
    Residence,

    /// "[RV/Boat Storage](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245785)": The property includes RV or boat storage.
    RVBoatStorage,

    /// "[Second Garage](https://ddwiki.reso.org/display/DDW17/Second+Garage)": The property includes a second garage.
    SecondGarage,

    /// "[Second Residence](https://ddwiki.reso.org/display/DDW17/Second+Residence)": The property includes a second residence.
    SecondResidence,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245788)": See the Public or Private Remarks for information about other structures on the property.
    SeeRemarks,

    /// "[Shed(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245789)": The property includes a shed(s).
    Sheds,

    /// "[Stable(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245790)": The property includes stable(s).
    Stables,

    /// "[Storage](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245791)": The property includes storage.
    Storage,

    /// "[Tennis Court(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245792)": The property includes a tennis court(s).
    TennisCourts,

    /// "[Workshop](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245793)": The property includes a workshop.
    Workshop,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for OtherStructures {
    fn from(s: String) -> OtherStructures {
        match s.as_ref() {
            "Airplane Hangar" => OtherStructures::AirplaneHangar,

            "Arena" => OtherStructures::Arena,

            "Barn(s)" => OtherStructures::Barns,

            "Boat House" => OtherStructures::BoatHouse,

            "Cabana" => OtherStructures::Cabana,

            "Cave(s)" => OtherStructures::Caves,

            "Corral(s)" => OtherStructures::Corrals,

            "Covered Arena" => OtherStructures::CoveredArena,

            "Garage(s)" => OtherStructures::Garages,

            "Gazebo" => OtherStructures::Gazebo,

            "Grain Storage" => OtherStructures::GrainStorage,

            "Greenhouse" => OtherStructures::Greenhouse,

            "Guest House" => OtherStructures::GuestHouse,

            "Kennel/Dog Run" => OtherStructures::KennelDogRun,

            "Mobile Home" => OtherStructures::MobileHome,

            "None" => OtherStructures::None,

            "Other" => OtherStructures::Other,

            "Outbuilding" => OtherStructures::Outbuilding,

            "Outdoor Kitchen" => OtherStructures::OutdoorKitchen,

            "Packing Shed" => OtherStructures::PackingShed,

            "Pergola" => OtherStructures::Pergola,

            "Pool House" => OtherStructures::PoolHouse,

            "Poultry Coop" => OtherStructures::PoultryCoop,

            "Residence" => OtherStructures::Residence,

            "RV/Boat Storage" => OtherStructures::RVBoatStorage,

            "Second Garage" => OtherStructures::SecondGarage,

            "Second Residence" => OtherStructures::SecondResidence,

            "See Remarks" => OtherStructures::SeeRemarks,

            "Shed(s)" => OtherStructures::Sheds,

            "Stable(s)" => OtherStructures::Stables,

            "Storage" => OtherStructures::Storage,

            "Tennis Court(s)" => OtherStructures::TennisCourts,

            "Workshop" => OtherStructures::Workshop,

            _ => OtherStructures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for OtherStructures {
    fn from(s: &str) -> OtherStructures {
        match s {
            "Airplane Hangar" => OtherStructures::AirplaneHangar,

            "Arena" => OtherStructures::Arena,

            "Barn(s)" => OtherStructures::Barns,

            "Boat House" => OtherStructures::BoatHouse,

            "Cabana" => OtherStructures::Cabana,

            "Cave(s)" => OtherStructures::Caves,

            "Corral(s)" => OtherStructures::Corrals,

            "Covered Arena" => OtherStructures::CoveredArena,

            "Garage(s)" => OtherStructures::Garages,

            "Gazebo" => OtherStructures::Gazebo,

            "Grain Storage" => OtherStructures::GrainStorage,

            "Greenhouse" => OtherStructures::Greenhouse,

            "Guest House" => OtherStructures::GuestHouse,

            "Kennel/Dog Run" => OtherStructures::KennelDogRun,

            "Mobile Home" => OtherStructures::MobileHome,

            "None" => OtherStructures::None,

            "Other" => OtherStructures::Other,

            "Outbuilding" => OtherStructures::Outbuilding,

            "Outdoor Kitchen" => OtherStructures::OutdoorKitchen,

            "Packing Shed" => OtherStructures::PackingShed,

            "Pergola" => OtherStructures::Pergola,

            "Pool House" => OtherStructures::PoolHouse,

            "Poultry Coop" => OtherStructures::PoultryCoop,

            "Residence" => OtherStructures::Residence,

            "RV/Boat Storage" => OtherStructures::RVBoatStorage,

            "Second Garage" => OtherStructures::SecondGarage,

            "Second Residence" => OtherStructures::SecondResidence,

            "See Remarks" => OtherStructures::SeeRemarks,

            "Shed(s)" => OtherStructures::Sheds,

            "Stable(s)" => OtherStructures::Stables,

            "Storage" => OtherStructures::Storage,

            "Tennis Court(s)" => OtherStructures::TennisCourts,

            "Workshop" => OtherStructures::Workshop,

            _ => OtherStructures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a OtherStructures> for &'a str {
    fn from(s: &'a OtherStructures) -> &'a str {
        match s {
            OtherStructures::AirplaneHangar => "Airplane Hangar",

            OtherStructures::Arena => "Arena",

            OtherStructures::Barns => "Barn(s)",

            OtherStructures::BoatHouse => "Boat House",

            OtherStructures::Cabana => "Cabana",

            OtherStructures::Caves => "Cave(s)",

            OtherStructures::Corrals => "Corral(s)",

            OtherStructures::CoveredArena => "Covered Arena",

            OtherStructures::Garages => "Garage(s)",

            OtherStructures::Gazebo => "Gazebo",

            OtherStructures::GrainStorage => "Grain Storage",

            OtherStructures::Greenhouse => "Greenhouse",

            OtherStructures::GuestHouse => "Guest House",

            OtherStructures::KennelDogRun => "Kennel/Dog Run",

            OtherStructures::MobileHome => "Mobile Home",

            OtherStructures::None => "None",

            OtherStructures::Other => "Other",

            OtherStructures::Outbuilding => "Outbuilding",

            OtherStructures::OutdoorKitchen => "Outdoor Kitchen",

            OtherStructures::PackingShed => "Packing Shed",

            OtherStructures::Pergola => "Pergola",

            OtherStructures::PoolHouse => "Pool House",

            OtherStructures::PoultryCoop => "Poultry Coop",

            OtherStructures::Residence => "Residence",

            OtherStructures::RVBoatStorage => "RV/Boat Storage",

            OtherStructures::SecondGarage => "Second Garage",

            OtherStructures::SecondResidence => "Second Residence",

            OtherStructures::SeeRemarks => "See Remarks",

            OtherStructures::Sheds => "Shed(s)",

            OtherStructures::Stables => "Stable(s)",

            OtherStructures::Storage => "Storage",

            OtherStructures::TennisCourts => "Tennis Court(s)",

            OtherStructures::Workshop => "Workshop",

            OtherStructures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for OtherStructures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for OtherStructures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_other_structures_format {
    use super::OtherStructures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<OtherStructures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<OtherStructures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [OwnerPays Lookups](https://ddwiki.reso.org/display/DDW17/OwnerPays+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum OwnerPays {
    /// "[All Utilities](https://ddwiki.reso.org/display/DDW17/All+Utilities)": The owner/lessor pays for all utilities.
    AllUtilities,

    /// "[Association Fees](https://ddwiki.reso.org/display/DDW17/Association+Fees)": The owner/lessor pays for association fees.
    AssociationFees,

    /// "[Cable TV](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245709)": The owner/lessor pays for cable television.
    CableTV,

    /// "[Common Area Maintenance](https://ddwiki.reso.org/display/DDW17/Common+Area+Maintenance)": The owner/lessor pays for common area maintenance.
    CommonAreaMaintenance,

    /// "[Electricity](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245711)": The owner/lessor pays for electricity.
    Electricity,

    /// "[Exterior Maintenance](https://ddwiki.reso.org/display/DDW17/Exterior+Maintenance)": The owner/lessor pays for exterior maintenance.
    ExteriorMaintenance,

    /// "[Gas](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245713)": The owner/lessor pays for gas.
    Gas,

    /// "[Grounds Care](https://ddwiki.reso.org/display/DDW17/Grounds+Care)": The owner/lessor pays for grounds care.
    GroundsCare,

    /// "[Hot Water](https://ddwiki.reso.org/display/DDW17/Hot+Water)": The owner/lessor pays for hot water.
    HotWater,

    /// "[HVAC Maintenance](https://ddwiki.reso.org/display/DDW17/HVAC+Maintenance)": The owner/lessor pays for HVAC maintenance.
    HVACMaintenance,

    /// "[Insurance](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245717)": The owner/lessor pays for insurance.
    Insurance,

    /// "[Janitorial Service](https://ddwiki.reso.org/display/DDW17/Janitorial+Service)": The owner/lessor pays for janitorial service .
    JanitorialService,

    /// "[Management](https://ddwiki.reso.org/display/DDW17/Management)": The owner/lessor pays for management.
    Management,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245720)": The owner/lessor pays for no utilities, services, etc.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245721)": The owner/lessor pays for items that are not included in this list.
    Other,

    /// "[Other Tax](https://ddwiki.reso.org/display/DDW17/Other+Tax)": The owner/lessor pays for other taxes.
    OtherTax,

    /// "[Parking Fee](https://ddwiki.reso.org/display/DDW17/Parking+Fee)": The owner/lessor pays for parking fees.
    ParkingFee,

    /// "[Pest Control](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245724)": The owner/lessor pays for pest control.
    PestControl,

    /// "[Pool Maintenance](https://ddwiki.reso.org/display/DDW17/Pool+Maintenance)": The owner/lessor pays for pool maintenance.
    PoolMaintenance,

    /// "[Repairs](https://ddwiki.reso.org/display/DDW17/Repairs)": The owner/lessor pays for repairs.
    Repairs,

    /// "[Roof Maintenance](https://ddwiki.reso.org/display/DDW17/Roof+Maintenance)": The owner/lessor pays for roof maintenance.
    RoofMaintenance,

    /// "[Security](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245728)": The owner/lessor pays for security.
    Security,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245729)": See the listing's remarks for details on what the owner/lessor pays for.
    SeeRemarks,

    /// "[Sewer](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245730)": The owner/lessor pays for sewer.
    Sewer,

    /// "[Snow Removal](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245731)": The owner/lessor pays for snow removal.
    SnowRemoval,

    /// "[Taxes](https://ddwiki.reso.org/display/DDW17/Taxes)": The owner/lessor pays for taxes.
    Taxes,

    /// "[Telephone](https://ddwiki.reso.org/display/DDW17/Telephone)": The owner/lessor pays for telephone.
    Telephone,

    /// "[Trash Collection](https://ddwiki.reso.org/display/DDW17/Trash+Collection)": The owner/lessor pays for trash collection.
    TrashCollection,

    /// "[Water](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245735)": The owner/lessor pays for water.
    Water,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for OwnerPays {
    fn from(s: String) -> OwnerPays {
        match s.as_ref() {
            "All Utilities" => OwnerPays::AllUtilities,

            "Association Fees" => OwnerPays::AssociationFees,

            "Cable TV" => OwnerPays::CableTV,

            "Common Area Maintenance" => OwnerPays::CommonAreaMaintenance,

            "Electricity" => OwnerPays::Electricity,

            "Exterior Maintenance" => OwnerPays::ExteriorMaintenance,

            "Gas" => OwnerPays::Gas,

            "Grounds Care" => OwnerPays::GroundsCare,

            "Hot Water" => OwnerPays::HotWater,

            "HVAC Maintenance" => OwnerPays::HVACMaintenance,

            "Insurance" => OwnerPays::Insurance,

            "Janitorial Service" => OwnerPays::JanitorialService,

            "Management" => OwnerPays::Management,

            "None" => OwnerPays::None,

            "Other" => OwnerPays::Other,

            "Other Tax" => OwnerPays::OtherTax,

            "Parking Fee" => OwnerPays::ParkingFee,

            "Pest Control" => OwnerPays::PestControl,

            "Pool Maintenance" => OwnerPays::PoolMaintenance,

            "Repairs" => OwnerPays::Repairs,

            "Roof Maintenance" => OwnerPays::RoofMaintenance,

            "Security" => OwnerPays::Security,

            "See Remarks" => OwnerPays::SeeRemarks,

            "Sewer" => OwnerPays::Sewer,

            "Snow Removal" => OwnerPays::SnowRemoval,

            "Taxes" => OwnerPays::Taxes,

            "Telephone" => OwnerPays::Telephone,

            "Trash Collection" => OwnerPays::TrashCollection,

            "Water" => OwnerPays::Water,

            _ => OwnerPays::OpenEnumeration(s),
        }
    }
}

impl From<&str> for OwnerPays {
    fn from(s: &str) -> OwnerPays {
        match s {
            "All Utilities" => OwnerPays::AllUtilities,

            "Association Fees" => OwnerPays::AssociationFees,

            "Cable TV" => OwnerPays::CableTV,

            "Common Area Maintenance" => OwnerPays::CommonAreaMaintenance,

            "Electricity" => OwnerPays::Electricity,

            "Exterior Maintenance" => OwnerPays::ExteriorMaintenance,

            "Gas" => OwnerPays::Gas,

            "Grounds Care" => OwnerPays::GroundsCare,

            "Hot Water" => OwnerPays::HotWater,

            "HVAC Maintenance" => OwnerPays::HVACMaintenance,

            "Insurance" => OwnerPays::Insurance,

            "Janitorial Service" => OwnerPays::JanitorialService,

            "Management" => OwnerPays::Management,

            "None" => OwnerPays::None,

            "Other" => OwnerPays::Other,

            "Other Tax" => OwnerPays::OtherTax,

            "Parking Fee" => OwnerPays::ParkingFee,

            "Pest Control" => OwnerPays::PestControl,

            "Pool Maintenance" => OwnerPays::PoolMaintenance,

            "Repairs" => OwnerPays::Repairs,

            "Roof Maintenance" => OwnerPays::RoofMaintenance,

            "Security" => OwnerPays::Security,

            "See Remarks" => OwnerPays::SeeRemarks,

            "Sewer" => OwnerPays::Sewer,

            "Snow Removal" => OwnerPays::SnowRemoval,

            "Taxes" => OwnerPays::Taxes,

            "Telephone" => OwnerPays::Telephone,

            "Trash Collection" => OwnerPays::TrashCollection,

            "Water" => OwnerPays::Water,

            _ => OwnerPays::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a OwnerPays> for &'a str {
    fn from(s: &'a OwnerPays) -> &'a str {
        match s {
            OwnerPays::AllUtilities => "All Utilities",

            OwnerPays::AssociationFees => "Association Fees",

            OwnerPays::CableTV => "Cable TV",

            OwnerPays::CommonAreaMaintenance => "Common Area Maintenance",

            OwnerPays::Electricity => "Electricity",

            OwnerPays::ExteriorMaintenance => "Exterior Maintenance",

            OwnerPays::Gas => "Gas",

            OwnerPays::GroundsCare => "Grounds Care",

            OwnerPays::HotWater => "Hot Water",

            OwnerPays::HVACMaintenance => "HVAC Maintenance",

            OwnerPays::Insurance => "Insurance",

            OwnerPays::JanitorialService => "Janitorial Service",

            OwnerPays::Management => "Management",

            OwnerPays::None => "None",

            OwnerPays::Other => "Other",

            OwnerPays::OtherTax => "Other Tax",

            OwnerPays::ParkingFee => "Parking Fee",

            OwnerPays::PestControl => "Pest Control",

            OwnerPays::PoolMaintenance => "Pool Maintenance",

            OwnerPays::Repairs => "Repairs",

            OwnerPays::RoofMaintenance => "Roof Maintenance",

            OwnerPays::Security => "Security",

            OwnerPays::SeeRemarks => "See Remarks",

            OwnerPays::Sewer => "Sewer",

            OwnerPays::SnowRemoval => "Snow Removal",

            OwnerPays::Taxes => "Taxes",

            OwnerPays::Telephone => "Telephone",

            OwnerPays::TrashCollection => "Trash Collection",

            OwnerPays::Water => "Water",

            OwnerPays::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for OwnerPays {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for OwnerPays {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_owner_pays_format {
    use super::OwnerPays;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<OwnerPays>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<OwnerPays>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [OwnershipType Lookups](https://ddwiki.reso.org/display/DDW17/OwnershipType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum OwnershipType {
    /// "[Corporation](https://ddwiki.reso.org/display/DDW17/Corporation)": The ownership type of the business being sold is a corporation.
    Corporation,

    /// "[LLC](https://ddwiki.reso.org/display/DDW17/LLC)": The ownership type of the business being sold is a limited liability corporation.
    LLC,

    /// "[Partnership](https://ddwiki.reso.org/display/DDW17/Partnership)": The ownership type of the business being sold is a partnership.
    Partnership,

    /// "[Sole Proprietor](https://ddwiki.reso.org/display/DDW17/Sole+Proprietor)": The ownership type of the business being sold is a sole proprietor.
    SoleProprietor,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for OwnershipType {
    fn from(s: String) -> OwnershipType {
        match s.as_ref() {
            "Corporation" => OwnershipType::Corporation,

            "LLC" => OwnershipType::LLC,

            "Partnership" => OwnershipType::Partnership,

            "Sole Proprietor" => OwnershipType::SoleProprietor,

            _ => OwnershipType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for OwnershipType {
    fn from(s: &str) -> OwnershipType {
        match s {
            "Corporation" => OwnershipType::Corporation,

            "LLC" => OwnershipType::LLC,

            "Partnership" => OwnershipType::Partnership,

            "Sole Proprietor" => OwnershipType::SoleProprietor,

            _ => OwnershipType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a OwnershipType> for &'a str {
    fn from(s: &'a OwnershipType) -> &'a str {
        match s {
            OwnershipType::Corporation => "Corporation",

            OwnershipType::LLC => "LLC",

            OwnershipType::Partnership => "Partnership",

            OwnershipType::SoleProprietor => "Sole Proprietor",

            OwnershipType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for OwnershipType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for OwnershipType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_ownership_type_format {
    use super::OwnershipType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<OwnershipType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<OwnershipType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ParkingFeatures Lookups](https://ddwiki.reso.org/display/DDW17/ParkingFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ParkingFeatures {
    /// "[Additional Parking](https://ddwiki.reso.org/display/DDW17/Additional+Parking)": The property has additional parking.
    AdditionalParking,

    /// "[Aggregate](https://ddwiki.reso.org/display/DDW17/Aggregate)": While aggregate is a type of concrete, it is different in application, maintenance and durability.  Aggregate, aka exposed aggregate concrete, is a mixture poured much in the same way as concrete, but which later has its top surface removed in order to expose the aggregate underneath.
    Aggregate,

    /// "[Alley Access](https://ddwiki.reso.org/display/DDW17/Alley+Access)": The property has alley access.
    AlleyAccess,

    /// "[Asphalt](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245967)": The property has asphalt parking.
    Asphalt,

    /// "[Assigned](https://ddwiki.reso.org/display/DDW17/Assigned)": The property has assigned parking spaces.
    Assigned,

    /// "[Attached](https://ddwiki.reso.org/display/DDW17/Attached)": The property has attached parking.
    Attached,

    /// "[Attached Carport](https://ddwiki.reso.org/display/DDW17/Attached+Carport)": The property has an attached carport.
    AttachedCarport,

    /// "[Basement](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246035)": A basement garage is partially or mostly below grade, with its entrance level with the basement floor.
    Basement,

    /// "[Boat](https://ddwiki.reso.org/display/DDW17/Boat)": The property has a space to park/store a boat.
    Boat,

    /// "[Carport](https://ddwiki.reso.org/display/DDW17/Carport)": The property has a carport.
    Carport,

    /// "[Circular Driveway](https://ddwiki.reso.org/display/DDW17/Circular+Driveway)": The property has a circular driveway.
    CircularDriveway,

    /// "[Common](https://ddwiki.reso.org/display/DDW17/Common)": The property has common/shared parking.
    Common,

    /// "[Community Structure](https://ddwiki.reso.org/display/DDW17/Community+Structure)": The property has a community parking structure.
    CommunityStructure,

    /// "[Concrete](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245976)": The property has concrete paved parking.
    Concrete,

    /// "[Converted Garage](https://ddwiki.reso.org/display/DDW17/Converted+Garage)": The property has a converted garage.
    ConvertedGarage,

    /// "[Covered](https://ddwiki.reso.org/display/DDW17/Covered)": The property has covered parking.
    Covered,

    /// "[Deck](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245979)": The property has deck for parking.
    Deck,

    /// "[Deeded](https://ddwiki.reso.org/display/DDW17/Deeded)": The property has deeded parking.
    Deeded,

    /// "[Detached](https://ddwiki.reso.org/display/DDW17/Detached)": The property has detached parking.
    Detached,

    /// "[Detached Carport](https://ddwiki.reso.org/display/DDW17/Detached+Carport)": The property has a detached carport.
    DetachedCarport,

    /// "[Direct Access](https://ddwiki.reso.org/display/DDW17/Direct+Access)": The parking has direct access to the property or structure.
    DirectAccess,

    /// "[Drive Through](https://ddwiki.reso.org/display/DDW17/Drive+Through)": The property has drive through parking.
    DriveThrough,

    /// "[Driveway](https://ddwiki.reso.org/display/DDW17/Driveway)": The property has a driveway.
    Driveway,

    /// "[Electric Gate](https://ddwiki.reso.org/display/DDW17/Electric+Gate)": The property has an electric gate.
    ElectricGate,

    /// "[Electric Vehicle Charging Station(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245987)": The property has one or more electric vehicle charging station.
    ElectricVehicleChargingStations,

    /// "[Enclosed](https://ddwiki.reso.org/display/DDW17/Enclosed)": The property has enclosed parking.
    Enclosed,

    /// "[Garage](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245989)": The property has a garage.
    Garage,

    /// "[Garage Door Opener](https://ddwiki.reso.org/display/DDW17/Garage+Door+Opener)": The garage has an automatic garage door opener.
    GarageDoorOpener,

    /// "[Garage Faces Front](https://ddwiki.reso.org/display/DDW17/Garage+Faces+Front)": The property has garage that faces the front of the property.
    GarageFacesFront,

    /// "[Garage Faces Rear](https://ddwiki.reso.org/display/DDW17/Garage+Faces+Rear)": The property has garage that faces the rear of the property.
    GarageFacesRear,

    /// "[Garage Faces Side](https://ddwiki.reso.org/display/DDW17/Garage+Faces+Side)": The property has garage that faces the side of the property.
    GarageFacesSide,

    /// "[Gated](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245994)": The property has gated parking.
    Gated,

    /// "[Golf Cart Garage](https://ddwiki.reso.org/display/DDW17/Golf+Cart+Garage)": The property has a golf cart garage.
    GolfCartGarage,

    /// "[Gravel](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245996)": The property has parking on gravel.
    Gravel,

    /// "[Guest](https://ddwiki.reso.org/display/DDW17/Guest)": The property has guest parking.
    Guest,

    /// "[Heated Garage](https://ddwiki.reso.org/display/DDW17/Heated+Garage)": The property has a heated garage.
    HeatedGarage,

    /// "[Inside Entrance](https://ddwiki.reso.org/display/DDW17/Inside+Entrance)": The property has parking with an inside entrance.
    InsideEntrance,

    /// "[Kitchen Level](https://ddwiki.reso.org/display/DDW17/Kitchen+Level)": The property has parking at the kitchen level.
    KitchenLevel,

    /// "[Leased](https://ddwiki.reso.org/display/DDW17/Leased)": The property has leased parking.
    Leased,

    /// "[Lighted](https://ddwiki.reso.org/display/DDW17/Lighted)": The property has lighted parking.
    Lighted,

    /// "[No Garage](https://ddwiki.reso.org/display/DDW17/No+Garage)": The property has no garage.
    NoGarage,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246004)": The property does not include parking or no parking is available.
    None,

    /// "[Off Site](https://ddwiki.reso.org/display/DDW17/Off+Site)": The property has off site parking.
    OffSite,

    /// "[Off Street](https://ddwiki.reso.org/display/DDW17/Off+Street)": The property has off street parking.
    OffStreet,

    /// "[On Site](https://ddwiki.reso.org/display/DDW17/On+Site)": The property has on site parking.
    OnSite,

    /// "[On Street](https://ddwiki.reso.org/display/DDW17/On+Street)": The property has on street parking only.
    OnStreet,

    /// "[Open](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246009)": The property has open or unassigned parking.
    Open,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246010)": The property has parking features other than those included in this list.
    Other,

    /// "[Outside](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246011)": The property has outside parking which is not enclosed.
    Outside,

    /// "[Oversized](https://ddwiki.reso.org/display/DDW17/Oversized)": The property has parking for oversized vehicles.
    Oversized,

    /// "[Parking Lot](https://ddwiki.reso.org/display/DDW17/Parking+Lot)": The property has access to a parking lot.
    ParkingLot,

    /// "[Parking Pad](https://ddwiki.reso.org/display/DDW17/Parking+Pad)": The property has a parking pad.
    ParkingPad,

    /// "[Paved](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246015)": The property has paved parking.
    Paved,

    /// "[Paver Block](https://ddwiki.reso.org/display/DDW17/Paver+Block)": The property has parking on paver blocks.
    PaverBlock,

    /// "[Permit Required](https://ddwiki.reso.org/display/DDW17/Permit+Required)": Parking at the property or on the street requires a permit.
    PermitRequired,

    /// "[Private](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246018)": The property has private parking.
    Private,

    /// "[RV Access/Parking](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246019)": The property has access/parking for recreational vehicles.
    RVAccessParking,

    /// "[RV Carport](https://ddwiki.reso.org/display/DDW17/RV+Carport)": The property has a carport for recreational vehicles.
    RVCarport,

    /// "[RV Garage](https://ddwiki.reso.org/display/DDW17/RV+Garage)": The property has a garage for recreational vehicles.
    RVGarage,

    /// "[RV Gated](https://ddwiki.reso.org/display/DDW17/RV+Gated)": The property has gated parking for recreational vehicles.
    RVGated,

    /// "[Secured](https://ddwiki.reso.org/display/DDW17/Secured)": The property has secure parking.
    Secured,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246024)": See remarks for additional information about parking.
    SeeRemarks,

    /// "[Shared Driveway](https://ddwiki.reso.org/display/DDW17/Shared+Driveway)": The property has a shared driveway.
    SharedDriveway,

    /// "[Side By Side](https://ddwiki.reso.org/display/DDW17/Side+By+Side)": The property has side by side parking spaces.
    SideBySide,

    /// "[Storage](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246027)": The property has storage in the parking area.
    Storage,

    /// "[Tandem](https://ddwiki.reso.org/display/DDW17/Tandem)": The property has tandem parking.
    Tandem,

    /// "[Unassigned](https://ddwiki.reso.org/display/DDW17/Unassigned)": The property has unassigned or open parking.
    Unassigned,

    /// "[Underground](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246030)": The property has underground parking.
    Underground,

    /// "[Unpaved](https://ddwiki.reso.org/display/DDW17/Unpaved)": The property has parking on an unpaved surface.
    Unpaved,

    /// "[Valet](https://ddwiki.reso.org/display/DDW17/Valet)": The property has valet parking available.
    Valet,

    /// "[Varies by Unit](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246033)": The parking varies from unit to unit.
    VariesbyUnit,

    /// "[Workshop in Garage](https://ddwiki.reso.org/display/DDW17/Workshop+in+Garage)": The property has workshop in the garage.
    WorkshopinGarage,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ParkingFeatures {
    fn from(s: String) -> ParkingFeatures {
        match s.as_ref() {
            "Additional Parking" => ParkingFeatures::AdditionalParking,

            "Aggregate" => ParkingFeatures::Aggregate,

            "Alley Access" => ParkingFeatures::AlleyAccess,

            "Asphalt" => ParkingFeatures::Asphalt,

            "Assigned" => ParkingFeatures::Assigned,

            "Attached" => ParkingFeatures::Attached,

            "Attached Carport" => ParkingFeatures::AttachedCarport,

            "Basement" => ParkingFeatures::Basement,

            "Boat" => ParkingFeatures::Boat,

            "Carport" => ParkingFeatures::Carport,

            "Circular Driveway" => ParkingFeatures::CircularDriveway,

            "Common" => ParkingFeatures::Common,

            "Community Structure" => ParkingFeatures::CommunityStructure,

            "Concrete" => ParkingFeatures::Concrete,

            "Converted Garage" => ParkingFeatures::ConvertedGarage,

            "Covered" => ParkingFeatures::Covered,

            "Deck" => ParkingFeatures::Deck,

            "Deeded" => ParkingFeatures::Deeded,

            "Detached" => ParkingFeatures::Detached,

            "Detached Carport" => ParkingFeatures::DetachedCarport,

            "Direct Access" => ParkingFeatures::DirectAccess,

            "Drive Through" => ParkingFeatures::DriveThrough,

            "Driveway" => ParkingFeatures::Driveway,

            "Electric Gate" => ParkingFeatures::ElectricGate,

            "Electric Vehicle Charging Station(s)" => {
                ParkingFeatures::ElectricVehicleChargingStations
            }

            "Enclosed" => ParkingFeatures::Enclosed,

            "Garage" => ParkingFeatures::Garage,

            "Garage Door Opener" => ParkingFeatures::GarageDoorOpener,

            "Garage Faces Front" => ParkingFeatures::GarageFacesFront,

            "Garage Faces Rear" => ParkingFeatures::GarageFacesRear,

            "Garage Faces Side" => ParkingFeatures::GarageFacesSide,

            "Gated" => ParkingFeatures::Gated,

            "Golf Cart Garage" => ParkingFeatures::GolfCartGarage,

            "Gravel" => ParkingFeatures::Gravel,

            "Guest" => ParkingFeatures::Guest,

            "Heated Garage" => ParkingFeatures::HeatedGarage,

            "Inside Entrance" => ParkingFeatures::InsideEntrance,

            "Kitchen Level" => ParkingFeatures::KitchenLevel,

            "Leased" => ParkingFeatures::Leased,

            "Lighted" => ParkingFeatures::Lighted,

            "No Garage" => ParkingFeatures::NoGarage,

            "None" => ParkingFeatures::None,

            "Off Site" => ParkingFeatures::OffSite,

            "Off Street" => ParkingFeatures::OffStreet,

            "On Site" => ParkingFeatures::OnSite,

            "On Street" => ParkingFeatures::OnStreet,

            "Open" => ParkingFeatures::Open,

            "Other" => ParkingFeatures::Other,

            "Outside" => ParkingFeatures::Outside,

            "Oversized" => ParkingFeatures::Oversized,

            "Parking Lot" => ParkingFeatures::ParkingLot,

            "Parking Pad" => ParkingFeatures::ParkingPad,

            "Paved" => ParkingFeatures::Paved,

            "Paver Block" => ParkingFeatures::PaverBlock,

            "Permit Required" => ParkingFeatures::PermitRequired,

            "Private" => ParkingFeatures::Private,

            "RV Access/Parking" => ParkingFeatures::RVAccessParking,

            "RV Carport" => ParkingFeatures::RVCarport,

            "RV Garage" => ParkingFeatures::RVGarage,

            "RV Gated" => ParkingFeatures::RVGated,

            "Secured" => ParkingFeatures::Secured,

            "See Remarks" => ParkingFeatures::SeeRemarks,

            "Shared Driveway" => ParkingFeatures::SharedDriveway,

            "Side By Side" => ParkingFeatures::SideBySide,

            "Storage" => ParkingFeatures::Storage,

            "Tandem" => ParkingFeatures::Tandem,

            "Unassigned" => ParkingFeatures::Unassigned,

            "Underground" => ParkingFeatures::Underground,

            "Unpaved" => ParkingFeatures::Unpaved,

            "Valet" => ParkingFeatures::Valet,

            "Varies by Unit" => ParkingFeatures::VariesbyUnit,

            "Workshop in Garage" => ParkingFeatures::WorkshopinGarage,

            _ => ParkingFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ParkingFeatures {
    fn from(s: &str) -> ParkingFeatures {
        match s {
            "Additional Parking" => ParkingFeatures::AdditionalParking,

            "Aggregate" => ParkingFeatures::Aggregate,

            "Alley Access" => ParkingFeatures::AlleyAccess,

            "Asphalt" => ParkingFeatures::Asphalt,

            "Assigned" => ParkingFeatures::Assigned,

            "Attached" => ParkingFeatures::Attached,

            "Attached Carport" => ParkingFeatures::AttachedCarport,

            "Basement" => ParkingFeatures::Basement,

            "Boat" => ParkingFeatures::Boat,

            "Carport" => ParkingFeatures::Carport,

            "Circular Driveway" => ParkingFeatures::CircularDriveway,

            "Common" => ParkingFeatures::Common,

            "Community Structure" => ParkingFeatures::CommunityStructure,

            "Concrete" => ParkingFeatures::Concrete,

            "Converted Garage" => ParkingFeatures::ConvertedGarage,

            "Covered" => ParkingFeatures::Covered,

            "Deck" => ParkingFeatures::Deck,

            "Deeded" => ParkingFeatures::Deeded,

            "Detached" => ParkingFeatures::Detached,

            "Detached Carport" => ParkingFeatures::DetachedCarport,

            "Direct Access" => ParkingFeatures::DirectAccess,

            "Drive Through" => ParkingFeatures::DriveThrough,

            "Driveway" => ParkingFeatures::Driveway,

            "Electric Gate" => ParkingFeatures::ElectricGate,

            "Electric Vehicle Charging Station(s)" => {
                ParkingFeatures::ElectricVehicleChargingStations
            }

            "Enclosed" => ParkingFeatures::Enclosed,

            "Garage" => ParkingFeatures::Garage,

            "Garage Door Opener" => ParkingFeatures::GarageDoorOpener,

            "Garage Faces Front" => ParkingFeatures::GarageFacesFront,

            "Garage Faces Rear" => ParkingFeatures::GarageFacesRear,

            "Garage Faces Side" => ParkingFeatures::GarageFacesSide,

            "Gated" => ParkingFeatures::Gated,

            "Golf Cart Garage" => ParkingFeatures::GolfCartGarage,

            "Gravel" => ParkingFeatures::Gravel,

            "Guest" => ParkingFeatures::Guest,

            "Heated Garage" => ParkingFeatures::HeatedGarage,

            "Inside Entrance" => ParkingFeatures::InsideEntrance,

            "Kitchen Level" => ParkingFeatures::KitchenLevel,

            "Leased" => ParkingFeatures::Leased,

            "Lighted" => ParkingFeatures::Lighted,

            "No Garage" => ParkingFeatures::NoGarage,

            "None" => ParkingFeatures::None,

            "Off Site" => ParkingFeatures::OffSite,

            "Off Street" => ParkingFeatures::OffStreet,

            "On Site" => ParkingFeatures::OnSite,

            "On Street" => ParkingFeatures::OnStreet,

            "Open" => ParkingFeatures::Open,

            "Other" => ParkingFeatures::Other,

            "Outside" => ParkingFeatures::Outside,

            "Oversized" => ParkingFeatures::Oversized,

            "Parking Lot" => ParkingFeatures::ParkingLot,

            "Parking Pad" => ParkingFeatures::ParkingPad,

            "Paved" => ParkingFeatures::Paved,

            "Paver Block" => ParkingFeatures::PaverBlock,

            "Permit Required" => ParkingFeatures::PermitRequired,

            "Private" => ParkingFeatures::Private,

            "RV Access/Parking" => ParkingFeatures::RVAccessParking,

            "RV Carport" => ParkingFeatures::RVCarport,

            "RV Garage" => ParkingFeatures::RVGarage,

            "RV Gated" => ParkingFeatures::RVGated,

            "Secured" => ParkingFeatures::Secured,

            "See Remarks" => ParkingFeatures::SeeRemarks,

            "Shared Driveway" => ParkingFeatures::SharedDriveway,

            "Side By Side" => ParkingFeatures::SideBySide,

            "Storage" => ParkingFeatures::Storage,

            "Tandem" => ParkingFeatures::Tandem,

            "Unassigned" => ParkingFeatures::Unassigned,

            "Underground" => ParkingFeatures::Underground,

            "Unpaved" => ParkingFeatures::Unpaved,

            "Valet" => ParkingFeatures::Valet,

            "Varies by Unit" => ParkingFeatures::VariesbyUnit,

            "Workshop in Garage" => ParkingFeatures::WorkshopinGarage,

            _ => ParkingFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ParkingFeatures> for &'a str {
    fn from(s: &'a ParkingFeatures) -> &'a str {
        match s {
            ParkingFeatures::AdditionalParking => "Additional Parking",

            ParkingFeatures::Aggregate => "Aggregate",

            ParkingFeatures::AlleyAccess => "Alley Access",

            ParkingFeatures::Asphalt => "Asphalt",

            ParkingFeatures::Assigned => "Assigned",

            ParkingFeatures::Attached => "Attached",

            ParkingFeatures::AttachedCarport => "Attached Carport",

            ParkingFeatures::Basement => "Basement",

            ParkingFeatures::Boat => "Boat",

            ParkingFeatures::Carport => "Carport",

            ParkingFeatures::CircularDriveway => "Circular Driveway",

            ParkingFeatures::Common => "Common",

            ParkingFeatures::CommunityStructure => "Community Structure",

            ParkingFeatures::Concrete => "Concrete",

            ParkingFeatures::ConvertedGarage => "Converted Garage",

            ParkingFeatures::Covered => "Covered",

            ParkingFeatures::Deck => "Deck",

            ParkingFeatures::Deeded => "Deeded",

            ParkingFeatures::Detached => "Detached",

            ParkingFeatures::DetachedCarport => "Detached Carport",

            ParkingFeatures::DirectAccess => "Direct Access",

            ParkingFeatures::DriveThrough => "Drive Through",

            ParkingFeatures::Driveway => "Driveway",

            ParkingFeatures::ElectricGate => "Electric Gate",

            ParkingFeatures::ElectricVehicleChargingStations => {
                "Electric Vehicle Charging Station(s)"
            }

            ParkingFeatures::Enclosed => "Enclosed",

            ParkingFeatures::Garage => "Garage",

            ParkingFeatures::GarageDoorOpener => "Garage Door Opener",

            ParkingFeatures::GarageFacesFront => "Garage Faces Front",

            ParkingFeatures::GarageFacesRear => "Garage Faces Rear",

            ParkingFeatures::GarageFacesSide => "Garage Faces Side",

            ParkingFeatures::Gated => "Gated",

            ParkingFeatures::GolfCartGarage => "Golf Cart Garage",

            ParkingFeatures::Gravel => "Gravel",

            ParkingFeatures::Guest => "Guest",

            ParkingFeatures::HeatedGarage => "Heated Garage",

            ParkingFeatures::InsideEntrance => "Inside Entrance",

            ParkingFeatures::KitchenLevel => "Kitchen Level",

            ParkingFeatures::Leased => "Leased",

            ParkingFeatures::Lighted => "Lighted",

            ParkingFeatures::NoGarage => "No Garage",

            ParkingFeatures::None => "None",

            ParkingFeatures::OffSite => "Off Site",

            ParkingFeatures::OffStreet => "Off Street",

            ParkingFeatures::OnSite => "On Site",

            ParkingFeatures::OnStreet => "On Street",

            ParkingFeatures::Open => "Open",

            ParkingFeatures::Other => "Other",

            ParkingFeatures::Outside => "Outside",

            ParkingFeatures::Oversized => "Oversized",

            ParkingFeatures::ParkingLot => "Parking Lot",

            ParkingFeatures::ParkingPad => "Parking Pad",

            ParkingFeatures::Paved => "Paved",

            ParkingFeatures::PaverBlock => "Paver Block",

            ParkingFeatures::PermitRequired => "Permit Required",

            ParkingFeatures::Private => "Private",

            ParkingFeatures::RVAccessParking => "RV Access/Parking",

            ParkingFeatures::RVCarport => "RV Carport",

            ParkingFeatures::RVGarage => "RV Garage",

            ParkingFeatures::RVGated => "RV Gated",

            ParkingFeatures::Secured => "Secured",

            ParkingFeatures::SeeRemarks => "See Remarks",

            ParkingFeatures::SharedDriveway => "Shared Driveway",

            ParkingFeatures::SideBySide => "Side By Side",

            ParkingFeatures::Storage => "Storage",

            ParkingFeatures::Tandem => "Tandem",

            ParkingFeatures::Unassigned => "Unassigned",

            ParkingFeatures::Underground => "Underground",

            ParkingFeatures::Unpaved => "Unpaved",

            ParkingFeatures::Valet => "Valet",

            ParkingFeatures::VariesbyUnit => "Varies by Unit",

            ParkingFeatures::WorkshopinGarage => "Workshop in Garage",

            ParkingFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ParkingFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ParkingFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_parking_features_format {
    use super::ParkingFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ParkingFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ParkingFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [PatioAndPorchFeatures Lookups](https://ddwiki.reso.org/display/DDW17/PatioAndPorchFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum PatioAndPorchFeatures {
    /// "[Awning(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246038)": The property has awning(s).
    Awnings,

    /// "[Covered](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246039)": The property has a covered patio or porch.
    Covered,

    /// "[Deck](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246040)": The property has a deck.
    Deck,

    /// "[Enclosed](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246041)": The property has an enclosed patio or porch.
    Enclosed,

    /// "[Front Porch](https://ddwiki.reso.org/display/DDW17/Front+Porch)": The property has a front porch.
    FrontPorch,

    /// "[Glass Enclosed](https://ddwiki.reso.org/display/DDW17/Glass+Enclosed)": The property has a glass enclosed patio or porch.
    GlassEnclosed,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246044)": The property has no patio or porch.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246045)": The property has a patio or porch feature other than what's included in this list.
    Other,

    /// "[Patio](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246046)": The property has a patio.
    Patio,

    /// "[Porch](https://ddwiki.reso.org/display/DDW17/Porch)": The property has a porch.
    Porch,

    /// "[Rear Porch](https://ddwiki.reso.org/display/DDW17/Rear+Porch)": The property has a rear porch.
    RearPorch,

    /// "[Screened](https://ddwiki.reso.org/display/DDW17/Screened)": The property has screened patio or porch.
    Screened,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246050)": See the remarks fields for more information on the patio or porch features of the property.
    SeeRemarks,

    /// "[Side Porch](https://ddwiki.reso.org/display/DDW17/Side+Porch)": The property has a side porch.
    SidePorch,

    /// "[Terrace](https://ddwiki.reso.org/display/DDW17/Terrace)": The property has a terrace.
    Terrace,

    /// "[Wrap Around](https://ddwiki.reso.org/display/DDW17/Wrap+Around)": The property has wrap around patio or porch.
    WrapAround,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for PatioAndPorchFeatures {
    fn from(s: String) -> PatioAndPorchFeatures {
        match s.as_ref() {
            "Awning(s)" => PatioAndPorchFeatures::Awnings,

            "Covered" => PatioAndPorchFeatures::Covered,

            "Deck" => PatioAndPorchFeatures::Deck,

            "Enclosed" => PatioAndPorchFeatures::Enclosed,

            "Front Porch" => PatioAndPorchFeatures::FrontPorch,

            "Glass Enclosed" => PatioAndPorchFeatures::GlassEnclosed,

            "None" => PatioAndPorchFeatures::None,

            "Other" => PatioAndPorchFeatures::Other,

            "Patio" => PatioAndPorchFeatures::Patio,

            "Porch" => PatioAndPorchFeatures::Porch,

            "Rear Porch" => PatioAndPorchFeatures::RearPorch,

            "Screened" => PatioAndPorchFeatures::Screened,

            "See Remarks" => PatioAndPorchFeatures::SeeRemarks,

            "Side Porch" => PatioAndPorchFeatures::SidePorch,

            "Terrace" => PatioAndPorchFeatures::Terrace,

            "Wrap Around" => PatioAndPorchFeatures::WrapAround,

            _ => PatioAndPorchFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for PatioAndPorchFeatures {
    fn from(s: &str) -> PatioAndPorchFeatures {
        match s {
            "Awning(s)" => PatioAndPorchFeatures::Awnings,

            "Covered" => PatioAndPorchFeatures::Covered,

            "Deck" => PatioAndPorchFeatures::Deck,

            "Enclosed" => PatioAndPorchFeatures::Enclosed,

            "Front Porch" => PatioAndPorchFeatures::FrontPorch,

            "Glass Enclosed" => PatioAndPorchFeatures::GlassEnclosed,

            "None" => PatioAndPorchFeatures::None,

            "Other" => PatioAndPorchFeatures::Other,

            "Patio" => PatioAndPorchFeatures::Patio,

            "Porch" => PatioAndPorchFeatures::Porch,

            "Rear Porch" => PatioAndPorchFeatures::RearPorch,

            "Screened" => PatioAndPorchFeatures::Screened,

            "See Remarks" => PatioAndPorchFeatures::SeeRemarks,

            "Side Porch" => PatioAndPorchFeatures::SidePorch,

            "Terrace" => PatioAndPorchFeatures::Terrace,

            "Wrap Around" => PatioAndPorchFeatures::WrapAround,

            _ => PatioAndPorchFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a PatioAndPorchFeatures> for &'a str {
    fn from(s: &'a PatioAndPorchFeatures) -> &'a str {
        match s {
            PatioAndPorchFeatures::Awnings => "Awning(s)",

            PatioAndPorchFeatures::Covered => "Covered",

            PatioAndPorchFeatures::Deck => "Deck",

            PatioAndPorchFeatures::Enclosed => "Enclosed",

            PatioAndPorchFeatures::FrontPorch => "Front Porch",

            PatioAndPorchFeatures::GlassEnclosed => "Glass Enclosed",

            PatioAndPorchFeatures::None => "None",

            PatioAndPorchFeatures::Other => "Other",

            PatioAndPorchFeatures::Patio => "Patio",

            PatioAndPorchFeatures::Porch => "Porch",

            PatioAndPorchFeatures::RearPorch => "Rear Porch",

            PatioAndPorchFeatures::Screened => "Screened",

            PatioAndPorchFeatures::SeeRemarks => "See Remarks",

            PatioAndPorchFeatures::SidePorch => "Side Porch",

            PatioAndPorchFeatures::Terrace => "Terrace",

            PatioAndPorchFeatures::WrapAround => "Wrap Around",

            PatioAndPorchFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for PatioAndPorchFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for PatioAndPorchFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_patio_and_porch_features_format {
    use super::PatioAndPorchFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<PatioAndPorchFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<PatioAndPorchFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Permission Lookups](https://ddwiki.reso.org/display/DDW17/Permission+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Permission {
    /// "[Agent Only](https://ddwiki.reso.org/display/DDW17/Agent+Only)": The image or document is for agent use only.
    AgentOnly,

    /// "[Firm Only](https://ddwiki.reso.org/display/DDW17/Firm+Only)": The image or document is for firm use only.
    FirmOnly,

    /// "[IDX](https://ddwiki.reso.org/display/DDW17/IDX)": The image or document is okay for IDX use.
    IDX,

    /// "[Office Only](https://ddwiki.reso.org/display/DDW17/Office+Only)": The image or document is for office use only.
    OfficeOnly,

    /// "[Private](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245915)": The image or document is private and should have limited distribution.
    Private,

    /// "[Public](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245916)": The image or document may be viewed by the public.
    Public,

    /// "[VOW](https://ddwiki.reso.org/display/DDW17/VOW)": The image or document is okay for VOW use.
    VOW,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Permission {
    fn from(s: String) -> Permission {
        match s.as_ref() {
            "Agent Only" => Permission::AgentOnly,

            "Firm Only" => Permission::FirmOnly,

            "IDX" => Permission::IDX,

            "Office Only" => Permission::OfficeOnly,

            "Private" => Permission::Private,

            "Public" => Permission::Public,

            "VOW" => Permission::VOW,

            _ => Permission::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Permission {
    fn from(s: &str) -> Permission {
        match s {
            "Agent Only" => Permission::AgentOnly,

            "Firm Only" => Permission::FirmOnly,

            "IDX" => Permission::IDX,

            "Office Only" => Permission::OfficeOnly,

            "Private" => Permission::Private,

            "Public" => Permission::Public,

            "VOW" => Permission::VOW,

            _ => Permission::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Permission> for &'a str {
    fn from(s: &'a Permission) -> &'a str {
        match s {
            Permission::AgentOnly => "Agent Only",

            Permission::FirmOnly => "Firm Only",

            Permission::IDX => "IDX",

            Permission::OfficeOnly => "Office Only",

            Permission::Private => "Private",

            Permission::Public => "Public",

            Permission::VOW => "VOW",

            Permission::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Permission {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Permission {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_permission_format {
    use super::Permission;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Permission>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Permission>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [PetsAllowed Lookups](https://ddwiki.reso.org/display/DDW17/PetsAllowed+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum PetsAllowed {
    /// "[Breed Restrictions](https://ddwiki.reso.org/display/DDW17/Breed+Restrictions)": There are breed restrictions on allowed pets.
    BreedRestrictions,

    /// "[Call](https://ddwiki.reso.org/display/DDW17/Call)": Call to inquire about pet restrictions.
    Call,

    /// "[Cats OK](https://ddwiki.reso.org/display/DDW17/Cats+OK)": Cats are allowed.
    CatsOK,

    /// "[Dogs OK](https://ddwiki.reso.org/display/DDW17/Dogs+OK)": Dogs are allowed.
    DogsOK,

    /// "[No](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245842)": No pets are allowed.
    No,

    /// "[Number Limit](https://ddwiki.reso.org/display/DDW17/Number+Limit)": There is a limit on the number of pets allowed.
    NumberLimit,

    /// "[Size Limit](https://ddwiki.reso.org/display/DDW17/Size+Limit)": There are size restrictions on allowed pets.
    SizeLimit,

    /// "[Yes](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245845)": All pets are allowed.
    Yes,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for PetsAllowed {
    fn from(s: String) -> PetsAllowed {
        match s.as_ref() {
            "Breed Restrictions" => PetsAllowed::BreedRestrictions,

            "Call" => PetsAllowed::Call,

            "Cats OK" => PetsAllowed::CatsOK,

            "Dogs OK" => PetsAllowed::DogsOK,

            "No" => PetsAllowed::No,

            "Number Limit" => PetsAllowed::NumberLimit,

            "Size Limit" => PetsAllowed::SizeLimit,

            "Yes" => PetsAllowed::Yes,

            _ => PetsAllowed::OpenEnumeration(s),
        }
    }
}

impl From<&str> for PetsAllowed {
    fn from(s: &str) -> PetsAllowed {
        match s {
            "Breed Restrictions" => PetsAllowed::BreedRestrictions,

            "Call" => PetsAllowed::Call,

            "Cats OK" => PetsAllowed::CatsOK,

            "Dogs OK" => PetsAllowed::DogsOK,

            "No" => PetsAllowed::No,

            "Number Limit" => PetsAllowed::NumberLimit,

            "Size Limit" => PetsAllowed::SizeLimit,

            "Yes" => PetsAllowed::Yes,

            _ => PetsAllowed::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a PetsAllowed> for &'a str {
    fn from(s: &'a PetsAllowed) -> &'a str {
        match s {
            PetsAllowed::BreedRestrictions => "Breed Restrictions",

            PetsAllowed::Call => "Call",

            PetsAllowed::CatsOK => "Cats OK",

            PetsAllowed::DogsOK => "Dogs OK",

            PetsAllowed::No => "No",

            PetsAllowed::NumberLimit => "Number Limit",

            PetsAllowed::SizeLimit => "Size Limit",

            PetsAllowed::Yes => "Yes",

            PetsAllowed::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for PetsAllowed {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for PetsAllowed {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_pets_allowed_format {
    use super::PetsAllowed;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<PetsAllowed>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<PetsAllowed>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [PoolFeatures Lookups](https://ddwiki.reso.org/display/DDW17/PoolFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum PoolFeatures {
    /// "[Above Ground](https://ddwiki.reso.org/display/DDW17/Above+Ground)": The pool is above ground.
    AboveGround,

    /// "[Association](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246056)": The pool is an association pool.
    Association,

    /// "[Black Bottom](https://ddwiki.reso.org/display/DDW17/Black+Bottom)": The pool has a black bottom.
    BlackBottom,

    /// "[Cabana](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246058)": The pool has a cabana.
    Cabana,

    /// "[Community](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246059)": The pool is a community/shared pool.
    Community,

    /// "[Diving Board](https://ddwiki.reso.org/display/DDW17/Diving+Board)": The pool has a diving board.
    DivingBoard,

    /// "[Electric Heat](https://ddwiki.reso.org/display/DDW17/Electric+Heat)": The pool is heated by electricity.
    ElectricHeat,

    /// "[ENERGY STAR Qualified pool pump](https://ddwiki.reso.org/display/DDW17/ENERGY+STAR+Qualified+pool+pump)": The pool has an ENERGY STAR Qualified pool pump.
    ENERGYSTARQualifiedpoolpump,

    /// "[Fenced](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246063)": The pool is fenced.
    Fenced,

    /// "[Fiberglass](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246064)": The pool is made of or lined with fiberglass.
    Fiberglass,

    /// "[Filtered](https://ddwiki.reso.org/display/DDW17/Filtered)": The pool has a filtration system.
    Filtered,

    /// "[Gas Heat](https://ddwiki.reso.org/display/DDW17/Gas+Heat)": The pool is heated by gas.
    GasHeat,

    /// "[Gunite](https://ddwiki.reso.org/display/DDW17/Gunite)": The pool has a gunite surface.
    Gunite,

    /// "[Heated](https://ddwiki.reso.org/display/DDW17/Heated)": The pool is heated.
    Heated,

    /// "[In Ground](https://ddwiki.reso.org/display/DDW17/In+Ground)": The pool is built into the ground.
    InGround,

    /// "[Indoor](https://ddwiki.reso.org/display/DDW17/Indoor)": The pool is indoors or within a structure.
    Indoor,

    /// "[Infinity](https://ddwiki.reso.org/display/DDW17/Infinity)": Also named a negative edge, zero edge or infinity edge, an infinity pool has one or more edges where water flows over the edge creating a visual effect of water with no boundary.
    Infinity,

    /// "[Lap](https://ddwiki.reso.org/display/DDW17/Lap)": The pool is specifically designed for swimming laps.
    Lap,

    /// "[Liner](https://ddwiki.reso.org/display/DDW17/Liner)": The pool has a liner.
    Liner,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246074)": There is no pool included with the property.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246075)": There are pool features other than those included in this list.
    Other,

    /// "[Outdoor Pool](https://ddwiki.reso.org/display/DDW17/Outdoor+Pool)": The pool is outdoors.
    OutdoorPool,

    /// "[Pool Cover](https://ddwiki.reso.org/display/DDW17/Pool+Cover)": The pool has a cover.
    PoolCover,

    /// "[Pool Sweep](https://ddwiki.reso.org/display/DDW17/Pool+Sweep)": The pool has an automatic sweep or cleaner.
    PoolSweep,

    /// "[Pool/Spa Combo](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246077)": The pool includes a spa.
    PoolSpaCombo,

    /// "[Private](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246080)": The pool is privately owned and/or secluded.
    Private,

    /// "[Salt Water](https://ddwiki.reso.org/display/DDW17/Salt+Water)": The pool has a salt water system.
    SaltWater,

    /// "[Screen Enclosure](https://ddwiki.reso.org/display/DDW17/Screen+Enclosure)": The pool has a screened enclosure.
    ScreenEnclosure,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246084)": See the remarks fields for more information about the pool.
    SeeRemarks,

    /// "[Solar Cover](https://ddwiki.reso.org/display/DDW17/Solar+Cover)": The pool has a solar cover.
    SolarCover,

    /// "[Solar Heat](https://ddwiki.reso.org/display/DDW17/Solar+Heat)": The pool has some form of solar heating.
    SolarHeat,

    /// "[Sport](https://ddwiki.reso.org/display/DDW17/Sport)": The pool has two shallow ends on opposite sides of the pool with a deeper center.
    Sport,

    /// "[Tile](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246088)": The pool is tiled.
    Tile,

    /// "[Vinyl](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246089)": The pool has a vinyl surface.
    Vinyl,

    /// "[Waterfall](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246090)": The pool has a waterfall.
    Waterfall,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for PoolFeatures {
    fn from(s: String) -> PoolFeatures {
        match s.as_ref() {
            "Above Ground" => PoolFeatures::AboveGround,

            "Association" => PoolFeatures::Association,

            "Black Bottom" => PoolFeatures::BlackBottom,

            "Cabana" => PoolFeatures::Cabana,

            "Community" => PoolFeatures::Community,

            "Diving Board" => PoolFeatures::DivingBoard,

            "Electric Heat" => PoolFeatures::ElectricHeat,

            "ENERGY STAR Qualified pool pump" => PoolFeatures::ENERGYSTARQualifiedpoolpump,

            "Fenced" => PoolFeatures::Fenced,

            "Fiberglass" => PoolFeatures::Fiberglass,

            "Filtered" => PoolFeatures::Filtered,

            "Gas Heat" => PoolFeatures::GasHeat,

            "Gunite" => PoolFeatures::Gunite,

            "Heated" => PoolFeatures::Heated,

            "In Ground" => PoolFeatures::InGround,

            "Indoor" => PoolFeatures::Indoor,

            "Infinity" => PoolFeatures::Infinity,

            "Lap" => PoolFeatures::Lap,

            "Liner" => PoolFeatures::Liner,

            "None" => PoolFeatures::None,

            "Other" => PoolFeatures::Other,

            "Outdoor Pool" => PoolFeatures::OutdoorPool,

            "Pool Cover" => PoolFeatures::PoolCover,

            "Pool Sweep" => PoolFeatures::PoolSweep,

            "Pool/Spa Combo" => PoolFeatures::PoolSpaCombo,

            "Private" => PoolFeatures::Private,

            "Salt Water" => PoolFeatures::SaltWater,

            "Screen Enclosure" => PoolFeatures::ScreenEnclosure,

            "See Remarks" => PoolFeatures::SeeRemarks,

            "Solar Cover" => PoolFeatures::SolarCover,

            "Solar Heat" => PoolFeatures::SolarHeat,

            "Sport" => PoolFeatures::Sport,

            "Tile" => PoolFeatures::Tile,

            "Vinyl" => PoolFeatures::Vinyl,

            "Waterfall" => PoolFeatures::Waterfall,

            _ => PoolFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for PoolFeatures {
    fn from(s: &str) -> PoolFeatures {
        match s {
            "Above Ground" => PoolFeatures::AboveGround,

            "Association" => PoolFeatures::Association,

            "Black Bottom" => PoolFeatures::BlackBottom,

            "Cabana" => PoolFeatures::Cabana,

            "Community" => PoolFeatures::Community,

            "Diving Board" => PoolFeatures::DivingBoard,

            "Electric Heat" => PoolFeatures::ElectricHeat,

            "ENERGY STAR Qualified pool pump" => PoolFeatures::ENERGYSTARQualifiedpoolpump,

            "Fenced" => PoolFeatures::Fenced,

            "Fiberglass" => PoolFeatures::Fiberglass,

            "Filtered" => PoolFeatures::Filtered,

            "Gas Heat" => PoolFeatures::GasHeat,

            "Gunite" => PoolFeatures::Gunite,

            "Heated" => PoolFeatures::Heated,

            "In Ground" => PoolFeatures::InGround,

            "Indoor" => PoolFeatures::Indoor,

            "Infinity" => PoolFeatures::Infinity,

            "Lap" => PoolFeatures::Lap,

            "Liner" => PoolFeatures::Liner,

            "None" => PoolFeatures::None,

            "Other" => PoolFeatures::Other,

            "Outdoor Pool" => PoolFeatures::OutdoorPool,

            "Pool Cover" => PoolFeatures::PoolCover,

            "Pool Sweep" => PoolFeatures::PoolSweep,

            "Pool/Spa Combo" => PoolFeatures::PoolSpaCombo,

            "Private" => PoolFeatures::Private,

            "Salt Water" => PoolFeatures::SaltWater,

            "Screen Enclosure" => PoolFeatures::ScreenEnclosure,

            "See Remarks" => PoolFeatures::SeeRemarks,

            "Solar Cover" => PoolFeatures::SolarCover,

            "Solar Heat" => PoolFeatures::SolarHeat,

            "Sport" => PoolFeatures::Sport,

            "Tile" => PoolFeatures::Tile,

            "Vinyl" => PoolFeatures::Vinyl,

            "Waterfall" => PoolFeatures::Waterfall,

            _ => PoolFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a PoolFeatures> for &'a str {
    fn from(s: &'a PoolFeatures) -> &'a str {
        match s {
            PoolFeatures::AboveGround => "Above Ground",

            PoolFeatures::Association => "Association",

            PoolFeatures::BlackBottom => "Black Bottom",

            PoolFeatures::Cabana => "Cabana",

            PoolFeatures::Community => "Community",

            PoolFeatures::DivingBoard => "Diving Board",

            PoolFeatures::ElectricHeat => "Electric Heat",

            PoolFeatures::ENERGYSTARQualifiedpoolpump => "ENERGY STAR Qualified pool pump",

            PoolFeatures::Fenced => "Fenced",

            PoolFeatures::Fiberglass => "Fiberglass",

            PoolFeatures::Filtered => "Filtered",

            PoolFeatures::GasHeat => "Gas Heat",

            PoolFeatures::Gunite => "Gunite",

            PoolFeatures::Heated => "Heated",

            PoolFeatures::InGround => "In Ground",

            PoolFeatures::Indoor => "Indoor",

            PoolFeatures::Infinity => "Infinity",

            PoolFeatures::Lap => "Lap",

            PoolFeatures::Liner => "Liner",

            PoolFeatures::None => "None",

            PoolFeatures::Other => "Other",

            PoolFeatures::OutdoorPool => "Outdoor Pool",

            PoolFeatures::PoolCover => "Pool Cover",

            PoolFeatures::PoolSweep => "Pool Sweep",

            PoolFeatures::PoolSpaCombo => "Pool/Spa Combo",

            PoolFeatures::Private => "Private",

            PoolFeatures::SaltWater => "Salt Water",

            PoolFeatures::ScreenEnclosure => "Screen Enclosure",

            PoolFeatures::SeeRemarks => "See Remarks",

            PoolFeatures::SolarCover => "Solar Cover",

            PoolFeatures::SolarHeat => "Solar Heat",

            PoolFeatures::Sport => "Sport",

            PoolFeatures::Tile => "Tile",

            PoolFeatures::Vinyl => "Vinyl",

            PoolFeatures::Waterfall => "Waterfall",

            PoolFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for PoolFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for PoolFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_pool_features_format {
    use super::PoolFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<PoolFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<PoolFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Possession Lookups](https://ddwiki.reso.org/display/DDW17/Possession+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Possession {
    /// "[Close Of Escrow](https://ddwiki.reso.org/display/DDW17/Close+Of+Escrow)": Possession is passed to the buyer at the close of escrow.
    CloseOfEscrow,

    /// "[Close Plus 1 Day](https://ddwiki.reso.org/display/DDW17/Close+Plus+1+Day)": Possession is passed to the buyer one day after the close of escrow.
    ClosePlus1Day,

    /// "[Close Plus 2 Days](https://ddwiki.reso.org/display/DDW17/Close+Plus+2+Days)": Possession is passed to the buyer two days after the close of escrow.
    ClosePlus2Days,

    /// "[Close Plus 3 Days](https://ddwiki.reso.org/display/DDW17/Close+Plus+3+Days)": Possession is passed to the buyer 3 days after the close of escrow.
    ClosePlus3Days,

    /// "[Close Plus 3 to 5 Days](https://ddwiki.reso.org/display/DDW17/Close+Plus+3+to+5+Days)": Possession is passed to the buyer 3 to 5 days after the close of escrow.
    ClosePlus3to5Days,

    /// "[Close Plus 30 Days](https://ddwiki.reso.org/display/DDW17/Close+Plus+30+Days)": Possession is passed to the buyer 30 days after the close of escrow.
    ClosePlus30Days,

    /// "[Negotiable](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245853)": Timing of the passing of possession to the buyer is negotiable.
    Negotiable,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245858)": A type of possession not included in this list.
    Other,

    /// "[Rental Agreement](https://ddwiki.reso.org/display/DDW17/Rental+Agreement)": Possession is stipulated in the rental agreement.
    RentalAgreement,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245855)": See the listing/agent remarks for more information on possession.
    SeeRemarks,

    /// "[Seller Rent Back](https://ddwiki.reso.org/display/DDW17/Seller+Rent+Back)": Possession is determined by the details of the seller rent back agreement, which is in most cases the seller will remain resident.
    SellerRentBack,

    /// "[Subject To Tenant Rights](https://ddwiki.reso.org/display/DDW17/Subject+To+Tenant+Rights)": The terms of the transfer of possession are subject to the rights of the current tenant.
    SubjectToTenantRights,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Possession {
    fn from(s: String) -> Possession {
        match s.as_ref() {
            "Close Of Escrow" => Possession::CloseOfEscrow,

            "Close Plus 1 Day" => Possession::ClosePlus1Day,

            "Close Plus 2 Days" => Possession::ClosePlus2Days,

            "Close Plus 3 Days" => Possession::ClosePlus3Days,

            "Close Plus 3 to 5 Days" => Possession::ClosePlus3to5Days,

            "Close Plus 30 Days" => Possession::ClosePlus30Days,

            "Negotiable" => Possession::Negotiable,

            "Other" => Possession::Other,

            "Rental Agreement" => Possession::RentalAgreement,

            "See Remarks" => Possession::SeeRemarks,

            "Seller Rent Back" => Possession::SellerRentBack,

            "Subject To Tenant Rights" => Possession::SubjectToTenantRights,

            _ => Possession::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Possession {
    fn from(s: &str) -> Possession {
        match s {
            "Close Of Escrow" => Possession::CloseOfEscrow,

            "Close Plus 1 Day" => Possession::ClosePlus1Day,

            "Close Plus 2 Days" => Possession::ClosePlus2Days,

            "Close Plus 3 Days" => Possession::ClosePlus3Days,

            "Close Plus 3 to 5 Days" => Possession::ClosePlus3to5Days,

            "Close Plus 30 Days" => Possession::ClosePlus30Days,

            "Negotiable" => Possession::Negotiable,

            "Other" => Possession::Other,

            "Rental Agreement" => Possession::RentalAgreement,

            "See Remarks" => Possession::SeeRemarks,

            "Seller Rent Back" => Possession::SellerRentBack,

            "Subject To Tenant Rights" => Possession::SubjectToTenantRights,

            _ => Possession::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Possession> for &'a str {
    fn from(s: &'a Possession) -> &'a str {
        match s {
            Possession::CloseOfEscrow => "Close Of Escrow",

            Possession::ClosePlus1Day => "Close Plus 1 Day",

            Possession::ClosePlus2Days => "Close Plus 2 Days",

            Possession::ClosePlus3Days => "Close Plus 3 Days",

            Possession::ClosePlus3to5Days => "Close Plus 3 to 5 Days",

            Possession::ClosePlus30Days => "Close Plus 30 Days",

            Possession::Negotiable => "Negotiable",

            Possession::Other => "Other",

            Possession::RentalAgreement => "Rental Agreement",

            Possession::SeeRemarks => "See Remarks",

            Possession::SellerRentBack => "Seller Rent Back",

            Possession::SubjectToTenantRights => "Subject To Tenant Rights",

            Possession::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Possession {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Possession {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_possession_format {
    use super::Possession;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Possession>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Possession>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [PossibleUse Lookups](https://ddwiki.reso.org/display/DDW17/PossibleUse+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum PossibleUse {
    /// "[Agricultural](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245919)": The land could be used for agriculture.
    Agricultural,

    /// "[Cattle](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245920)": The land could be used for cattle.
    Cattle,

    /// "[Commercial](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245921)": The land could be used for commercial purposes.
    Commercial,

    /// "[Dairy](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245922)": The land could be used for a dairy farm.
    Dairy,

    /// "[Development](https://ddwiki.reso.org/display/DDW17/Development)": The land could be used for new development.
    Development,

    /// "[Farm](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245924)": The land could be used for a farm.
    Farm,

    /// "[Fishery](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245925)": The land could be used for a fishery.
    Fishery,

    /// "[Grazing](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245926)": The land could be used for livestock grazing.
    Grazing,

    /// "[Highway/Tourist Service](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245927)": The land could be used for a highway/tourist service.
    HighwayTouristService,

    /// "[Horses](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245928)": The land could be used for horses.
    Horses,

    /// "[Hunting](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245929)": The land could be used for hunting.
    Hunting,

    /// "[Industrial](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245930)": The land could be used for industrial purposes.
    Industrial,

    /// "[Investment](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245931)": The land could be used as an investment land.
    Investment,

    /// "[Livestock](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245932)": The land could be used for livestock.
    Livestock,

    /// "[Manufactured Home](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245933)": The land could be used for manufactured home(s).
    ManufacturedHome,

    /// "[Mini-Storage](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245934)": The land could be used for mini-storage.
    MiniStorage,

    /// "[Multi-Family](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245935)": The land could be used for multi-family home(s).
    MultiFamily,

    /// "[Orchard](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245936)": The land could be used for an orchard.
    Orchard,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245937)": The land could be used for a purpose other than those in this list.
    Other,

    /// "[Pasture](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245938)": The land could be used as a pasture.
    Pasture,

    /// "[Place of Worship](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245939)": The land could be used for place of worship.
    PlaceofWorship,

    /// "[Poultry](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245940)": The land could be used for poultry.
    Poultry,

    /// "[Ranch](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245941)": The land could be used as a ranch.
    Ranch,

    /// "[Recreational](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245942)": The land could be used for recreational purposes.
    Recreational,

    /// "[Residential](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245943)": The land could be used for residential purposes.
    Residential,

    /// "[Retail](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245944)": The land could be used for retail business.
    Retail,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245945)": See the Public or Private remarks for details on possible uses for the land.
    SeeRemarks,

    /// "[Single Family](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245946)": The land could be used for single family residence(s).
    SingleFamily,

    /// "[Subdevelopment](https://ddwiki.reso.org/display/DDW17/Subdevelopment)": The land could be used for subdevelopment(s).
    Subdevelopment,

    /// "[Timber](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245948)": The land could be used for timber.
    Timber,

    /// "[Unimproved](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245949)": The land could be kept undeveloped.
    Unimproved,

    /// "[Vacant](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245950)": The land could be kept vacant.
    Vacant,

    /// "[Warehouse](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245951)": The land could be used for warehousing.
    Warehouse,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for PossibleUse {
    fn from(s: String) -> PossibleUse {
        match s.as_ref() {
            "Agricultural" => PossibleUse::Agricultural,

            "Cattle" => PossibleUse::Cattle,

            "Commercial" => PossibleUse::Commercial,

            "Dairy" => PossibleUse::Dairy,

            "Development" => PossibleUse::Development,

            "Farm" => PossibleUse::Farm,

            "Fishery" => PossibleUse::Fishery,

            "Grazing" => PossibleUse::Grazing,

            "Highway/Tourist Service" => PossibleUse::HighwayTouristService,

            "Horses" => PossibleUse::Horses,

            "Hunting" => PossibleUse::Hunting,

            "Industrial" => PossibleUse::Industrial,

            "Investment" => PossibleUse::Investment,

            "Livestock" => PossibleUse::Livestock,

            "Manufactured Home" => PossibleUse::ManufacturedHome,

            "Mini-Storage" => PossibleUse::MiniStorage,

            "Multi-Family" => PossibleUse::MultiFamily,

            "Orchard" => PossibleUse::Orchard,

            "Other" => PossibleUse::Other,

            "Pasture" => PossibleUse::Pasture,

            "Place of Worship" => PossibleUse::PlaceofWorship,

            "Poultry" => PossibleUse::Poultry,

            "Ranch" => PossibleUse::Ranch,

            "Recreational" => PossibleUse::Recreational,

            "Residential" => PossibleUse::Residential,

            "Retail" => PossibleUse::Retail,

            "See Remarks" => PossibleUse::SeeRemarks,

            "Single Family" => PossibleUse::SingleFamily,

            "Subdevelopment" => PossibleUse::Subdevelopment,

            "Timber" => PossibleUse::Timber,

            "Unimproved" => PossibleUse::Unimproved,

            "Vacant" => PossibleUse::Vacant,

            "Warehouse" => PossibleUse::Warehouse,

            _ => PossibleUse::OpenEnumeration(s),
        }
    }
}

impl From<&str> for PossibleUse {
    fn from(s: &str) -> PossibleUse {
        match s {
            "Agricultural" => PossibleUse::Agricultural,

            "Cattle" => PossibleUse::Cattle,

            "Commercial" => PossibleUse::Commercial,

            "Dairy" => PossibleUse::Dairy,

            "Development" => PossibleUse::Development,

            "Farm" => PossibleUse::Farm,

            "Fishery" => PossibleUse::Fishery,

            "Grazing" => PossibleUse::Grazing,

            "Highway/Tourist Service" => PossibleUse::HighwayTouristService,

            "Horses" => PossibleUse::Horses,

            "Hunting" => PossibleUse::Hunting,

            "Industrial" => PossibleUse::Industrial,

            "Investment" => PossibleUse::Investment,

            "Livestock" => PossibleUse::Livestock,

            "Manufactured Home" => PossibleUse::ManufacturedHome,

            "Mini-Storage" => PossibleUse::MiniStorage,

            "Multi-Family" => PossibleUse::MultiFamily,

            "Orchard" => PossibleUse::Orchard,

            "Other" => PossibleUse::Other,

            "Pasture" => PossibleUse::Pasture,

            "Place of Worship" => PossibleUse::PlaceofWorship,

            "Poultry" => PossibleUse::Poultry,

            "Ranch" => PossibleUse::Ranch,

            "Recreational" => PossibleUse::Recreational,

            "Residential" => PossibleUse::Residential,

            "Retail" => PossibleUse::Retail,

            "See Remarks" => PossibleUse::SeeRemarks,

            "Single Family" => PossibleUse::SingleFamily,

            "Subdevelopment" => PossibleUse::Subdevelopment,

            "Timber" => PossibleUse::Timber,

            "Unimproved" => PossibleUse::Unimproved,

            "Vacant" => PossibleUse::Vacant,

            "Warehouse" => PossibleUse::Warehouse,

            _ => PossibleUse::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a PossibleUse> for &'a str {
    fn from(s: &'a PossibleUse) -> &'a str {
        match s {
            PossibleUse::Agricultural => "Agricultural",

            PossibleUse::Cattle => "Cattle",

            PossibleUse::Commercial => "Commercial",

            PossibleUse::Dairy => "Dairy",

            PossibleUse::Development => "Development",

            PossibleUse::Farm => "Farm",

            PossibleUse::Fishery => "Fishery",

            PossibleUse::Grazing => "Grazing",

            PossibleUse::HighwayTouristService => "Highway/Tourist Service",

            PossibleUse::Horses => "Horses",

            PossibleUse::Hunting => "Hunting",

            PossibleUse::Industrial => "Industrial",

            PossibleUse::Investment => "Investment",

            PossibleUse::Livestock => "Livestock",

            PossibleUse::ManufacturedHome => "Manufactured Home",

            PossibleUse::MiniStorage => "Mini-Storage",

            PossibleUse::MultiFamily => "Multi-Family",

            PossibleUse::Orchard => "Orchard",

            PossibleUse::Other => "Other",

            PossibleUse::Pasture => "Pasture",

            PossibleUse::PlaceofWorship => "Place of Worship",

            PossibleUse::Poultry => "Poultry",

            PossibleUse::Ranch => "Ranch",

            PossibleUse::Recreational => "Recreational",

            PossibleUse::Residential => "Residential",

            PossibleUse::Retail => "Retail",

            PossibleUse::SeeRemarks => "See Remarks",

            PossibleUse::SingleFamily => "Single Family",

            PossibleUse::Subdevelopment => "Subdevelopment",

            PossibleUse::Timber => "Timber",

            PossibleUse::Unimproved => "Unimproved",

            PossibleUse::Vacant => "Vacant",

            PossibleUse::Warehouse => "Warehouse",

            PossibleUse::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for PossibleUse {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for PossibleUse {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_possible_use_format {
    use super::PossibleUse;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<PossibleUse>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<PossibleUse>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [PowerProductionAnnualStatus Lookups](https://ddwiki.reso.org/display/DDW17/PowerProductionAnnualStatus+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum PowerProductionAnnualStatus {
    /// "[Actual](https://ddwiki.reso.org/display/DDW17/Actual)": Annual production derived from 12 or more months of actual data. The most recent 12 months is preferred because systems can degrade, albeit slowly, over time and, more importantly, conditions (e.g., trees) can change.  Therefore older data might over- or under-estimate current production amounts.
    Actual,

    /// "[Estimated](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245861)": Annual production as estimated at the time or before the system began operation.
    Estimated,

    /// "[Partially Estimated](https://ddwiki.reso.org/display/DDW17/Partially+Estimated)": Annual production derived from less than 12 months of actual data, and therefore extrapolated to estimate annual production.
    PartiallyEstimated,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for PowerProductionAnnualStatus {
    fn from(s: String) -> PowerProductionAnnualStatus {
        match s.as_ref() {
            "Actual" => PowerProductionAnnualStatus::Actual,

            "Estimated" => PowerProductionAnnualStatus::Estimated,

            "Partially Estimated" => PowerProductionAnnualStatus::PartiallyEstimated,

            _ => PowerProductionAnnualStatus::OpenEnumeration(s),
        }
    }
}

impl From<&str> for PowerProductionAnnualStatus {
    fn from(s: &str) -> PowerProductionAnnualStatus {
        match s {
            "Actual" => PowerProductionAnnualStatus::Actual,

            "Estimated" => PowerProductionAnnualStatus::Estimated,

            "Partially Estimated" => PowerProductionAnnualStatus::PartiallyEstimated,

            _ => PowerProductionAnnualStatus::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a PowerProductionAnnualStatus> for &'a str {
    fn from(s: &'a PowerProductionAnnualStatus) -> &'a str {
        match s {
            PowerProductionAnnualStatus::Actual => "Actual",

            PowerProductionAnnualStatus::Estimated => "Estimated",

            PowerProductionAnnualStatus::PartiallyEstimated => "Partially Estimated",

            PowerProductionAnnualStatus::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for PowerProductionAnnualStatus {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for PowerProductionAnnualStatus {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_power_production_annual_status_format {
    use super::PowerProductionAnnualStatus;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<PowerProductionAnnualStatus>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<PowerProductionAnnualStatus>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [PowerProductionType Lookups](https://ddwiki.reso.org/display/DDW17/PowerProductionType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum PowerProductionType {
    /// "[Photovoltaics](https://ddwiki.reso.org/display/DDW17/Photovoltaics)": Solar photovoltaic (PV) devices which generate electricity directly from sunlight via an electronic process that occurs naturally in certain types of material, called semiconductors. Powers electrical devices or sends electricity to the grid. See: <a href="http://www.seia.org/policy/solar-technology/photovoltaic-solar-electric">http://www.seia.org/policy/solar-technology/photovoltaic-solar-electric</a>
    Photovoltaics,

    /// "[Wind](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245865)": Renewable form of onsite power generation. Wind turbines use wind to make electricity. Powers electrical devices or sends electricity to the grid. http://energy.gov/eere/wind/how-do-wind-turbines-work
    Wind,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for PowerProductionType {
    fn from(s: String) -> PowerProductionType {
        match s.as_ref() {
            "Photovoltaics" => PowerProductionType::Photovoltaics,

            "Wind" => PowerProductionType::Wind,

            _ => PowerProductionType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for PowerProductionType {
    fn from(s: &str) -> PowerProductionType {
        match s {
            "Photovoltaics" => PowerProductionType::Photovoltaics,

            "Wind" => PowerProductionType::Wind,

            _ => PowerProductionType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a PowerProductionType> for &'a str {
    fn from(s: &'a PowerProductionType) -> &'a str {
        match s {
            PowerProductionType::Photovoltaics => "Photovoltaics",

            PowerProductionType::Wind => "Wind",

            PowerProductionType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for PowerProductionType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for PowerProductionType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_power_production_type_format {
    use super::PowerProductionType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<PowerProductionType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<PowerProductionType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [PreferredAddress Lookups](https://ddwiki.reso.org/display/DDW17/PreferredAddress+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum PreferredAddress {
    /// "[Home](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245953)": The contact prefers the use of their home address.
    Home,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245954)": The contact prefers the use of their other address.
    Other,

    /// "[Work](https://ddwiki.reso.org/display/DDW17/Work)": The contact prefers the use of their work address.
    Work,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for PreferredAddress {
    fn from(s: String) -> PreferredAddress {
        match s.as_ref() {
            "Home" => PreferredAddress::Home,

            "Other" => PreferredAddress::Other,

            "Work" => PreferredAddress::Work,

            _ => PreferredAddress::OpenEnumeration(s),
        }
    }
}

impl From<&str> for PreferredAddress {
    fn from(s: &str) -> PreferredAddress {
        match s {
            "Home" => PreferredAddress::Home,

            "Other" => PreferredAddress::Other,

            "Work" => PreferredAddress::Work,

            _ => PreferredAddress::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a PreferredAddress> for &'a str {
    fn from(s: &'a PreferredAddress) -> &'a str {
        match s {
            PreferredAddress::Home => "Home",

            PreferredAddress::Other => "Other",

            PreferredAddress::Work => "Work",

            PreferredAddress::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for PreferredAddress {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for PreferredAddress {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_preferred_address_format {
    use super::PreferredAddress;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<PreferredAddress>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<PreferredAddress>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [PreferredPhone Lookups](https://ddwiki.reso.org/display/DDW17/PreferredPhone+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum PreferredPhone {
    /// "[Direct](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245957)": The contact prefers the use of their direct phone.
    Direct,

    /// "[Home](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245958)": The contact prefers the use of their home phone.
    Home,

    /// "[Mobile](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245959)": The contact prefers the use of their mobile phone.
    Mobile,

    /// "[Office](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245960)": The contact prefers the use of their office phone.
    Office,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245961)": The contact prefers the use of their other phone.
    Other,

    /// "[Toll Free](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245962)": The contact prefers the use of their toll free phone.
    TollFree,

    /// "[Voicemail](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245963)": The contact prefers the use of their voicemail phone.
    Voicemail,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for PreferredPhone {
    fn from(s: String) -> PreferredPhone {
        match s.as_ref() {
            "Direct" => PreferredPhone::Direct,

            "Home" => PreferredPhone::Home,

            "Mobile" => PreferredPhone::Mobile,

            "Office" => PreferredPhone::Office,

            "Other" => PreferredPhone::Other,

            "Toll Free" => PreferredPhone::TollFree,

            "Voicemail" => PreferredPhone::Voicemail,

            _ => PreferredPhone::OpenEnumeration(s),
        }
    }
}

impl From<&str> for PreferredPhone {
    fn from(s: &str) -> PreferredPhone {
        match s {
            "Direct" => PreferredPhone::Direct,

            "Home" => PreferredPhone::Home,

            "Mobile" => PreferredPhone::Mobile,

            "Office" => PreferredPhone::Office,

            "Other" => PreferredPhone::Other,

            "Toll Free" => PreferredPhone::TollFree,

            "Voicemail" => PreferredPhone::Voicemail,

            _ => PreferredPhone::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a PreferredPhone> for &'a str {
    fn from(s: &'a PreferredPhone) -> &'a str {
        match s {
            PreferredPhone::Direct => "Direct",

            PreferredPhone::Home => "Home",

            PreferredPhone::Mobile => "Mobile",

            PreferredPhone::Office => "Office",

            PreferredPhone::Other => "Other",

            PreferredPhone::TollFree => "Toll Free",

            PreferredPhone::Voicemail => "Voicemail",

            PreferredPhone::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for PreferredPhone {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for PreferredPhone {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_preferred_phone_format {
    use super::PreferredPhone;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<PreferredPhone>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<PreferredPhone>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [PropertyCondition Lookups](https://ddwiki.reso.org/display/DDW17/PropertyCondition+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum PropertyCondition {
    /// "[Fixer](https://ddwiki.reso.org/display/DDW17/Fixer)": The property is a "fixer" or property in need of moderate or extensive repair.
    Fixer,

    /// "[New Construction](https://ddwiki.reso.org/display/DDW17/New+Construction)": The property is newly built.
    NewConstruction,

    /// "[Under Construction](https://ddwiki.reso.org/display/DDW17/Under+Construction)": The property is still under construction and building has not been completed.
    UnderConstruction,

    /// "[Updated/Remodeled](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245870)": The property has been remolded or updated is some fashion.
    UpdatedRemodeled,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for PropertyCondition {
    fn from(s: String) -> PropertyCondition {
        match s.as_ref() {
            "Fixer" => PropertyCondition::Fixer,

            "New Construction" => PropertyCondition::NewConstruction,

            "Under Construction" => PropertyCondition::UnderConstruction,

            "Updated/Remodeled" => PropertyCondition::UpdatedRemodeled,

            _ => PropertyCondition::OpenEnumeration(s),
        }
    }
}

impl From<&str> for PropertyCondition {
    fn from(s: &str) -> PropertyCondition {
        match s {
            "Fixer" => PropertyCondition::Fixer,

            "New Construction" => PropertyCondition::NewConstruction,

            "Under Construction" => PropertyCondition::UnderConstruction,

            "Updated/Remodeled" => PropertyCondition::UpdatedRemodeled,

            _ => PropertyCondition::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a PropertyCondition> for &'a str {
    fn from(s: &'a PropertyCondition) -> &'a str {
        match s {
            PropertyCondition::Fixer => "Fixer",

            PropertyCondition::NewConstruction => "New Construction",

            PropertyCondition::UnderConstruction => "Under Construction",

            PropertyCondition::UpdatedRemodeled => "Updated/Remodeled",

            PropertyCondition::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for PropertyCondition {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for PropertyCondition {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_property_condition_format {
    use super::PropertyCondition;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<PropertyCondition>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<PropertyCondition>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [PropertySubType Lookups](https://ddwiki.reso.org/display/DDW17/PropertySubType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum PropertySubType {
    /// "[Agriculture](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245890)": The property is for farming and agricultural activities.
    Agriculture,

    /// "[Apartment](https://ddwiki.reso.org/display/DDW17/Apartment)": A unit within a wholly owned structure of 5 or more units. This may not be used for Residential or Residential Income. For Residential use Condo. For Income used Residential Income.
    Apartment,

    /// "[Boat Slip](https://ddwiki.reso.org/display/DDW17/Boat+Slip)": A place where you can tie up a boat or house boat.
    BoatSlip,

    /// "[Business](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245891)": The property is designed for any type of business.
    Business,

    /// "[Cabin](https://ddwiki.reso.org/display/DDW17/Cabin)": A single family residence that may have limited utilities.
    Cabin,

    /// "[Condominium](https://ddwiki.reso.org/display/DDW17/Condominium)": A unit within a structure where ownership is on a unit by unit basis.
    Condominium,

    /// "[Deeded Parking](https://ddwiki.reso.org/display/DDW17/Deeded+Parking)": A parking space (or spaces) that are owned and separate from a residence.
    DeededParking,

    /// "[Duplex](https://ddwiki.reso.org/display/DDW17/Duplex)": A multi family structure with two independent units with a shared wall or ceiling/floor.
    Duplex,

    /// "[Farm](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245878)": A place where agricultural and similar activities take place, especially the growing of crops.
    Farm,

    /// "[Hotel/Motel](https://ddwiki.reso.org/display/DDW17/Hotel-Motel)": The property is designed for hotel or motel use.
    HotelMotel,

    /// "[Industrial](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245893)": The property is designed for industrial use.
    Industrial,

    /// "[Manufactured Home](https://ddwiki.reso.org/display/DDW17/Manufactured+Home)": A factory built house that is transported to the lot.
    ManufacturedHome,

    /// "[Manufactured On Land](https://ddwiki.reso.org/display/DDW17/Manufactured+On+Land)": A factory built house that is transported to the lot and sold with the land. The property may or may not have a 433a certification.
    ManufacturedOnLand,

    /// "[Mixed Use](https://ddwiki.reso.org/display/DDW17/Mixed+Use)": The property is designed be used in more than one way.  i.e. Office and Retail.
    MixedUse,

    /// "[Mobile Home](https://ddwiki.reso.org/display/DDW17/Mobile+Home)": A factory built house that is transported to the lot, retains axles and was built prior to June 15, 1976.
    MobileHome,

    /// "[Multi Family](https://ddwiki.reso.org/display/DDW17/Multi+Family)": A structure or complex with 5 or more units that are individual dwellings.
    MultiFamily,

    /// "[Office](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245896)": The property is designed to be used as office space.
    Office,

    /// "[Own Your Own](https://ddwiki.reso.org/display/DDW17/Own+Your+Own)": A unit within a structure where ownership is based on a partial deed and rights to occupy a unit.
    OwnYourOwn,

    /// "[Quadruplex](https://ddwiki.reso.org/display/DDW17/Quadruplex)": A multi family structure with four independent units with shared walls or ceilings/floors.
    Quadruplex,

    /// "[Ranch](https://ddwiki.reso.org/display/DDW17/Ranch)": A place where agricultural and similar activities take place, especially the raising of livestock.
    Ranch,

    /// "[Retail](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245897)": The property designed to be used as retail space.
    Retail,

    /// "[Single Family Residence](https://ddwiki.reso.org/display/DDW17/Single+Family+Residence)": A single family residence on real property.
    SingleFamilyResidence,

    /// "[Stock Cooperative](https://ddwiki.reso.org/display/DDW17/Stock+Cooperative)": A unit within a structure where ownership is based on a share of stock and rights to occupy a unit.
    StockCooperative,

    /// "[Timeshare](https://ddwiki.reso.org/display/DDW17/Timeshare)": A form of property ownership under with a property is held by a number of people, each with the right of possession for a specified time interval.
    Timeshare,

    /// "[Townhouse](https://ddwiki.reso.org/display/DDW17/Townhouse)": A dwelling unit, generally having two or more floors and attached to other similar units via party walls.
    Townhouse,

    /// "[Triplex](https://ddwiki.reso.org/display/DDW17/Triplex)": A multi family structure with three independent units with shared walls or ceilings/floors.
    Triplex,

    /// "[Unimproved Land](https://ddwiki.reso.org/display/DDW17/Unimproved+Land)": Commercial land that has not been built upon or improved.
    UnimprovedLand,

    /// "[Warehouse](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245899)": The property is designed to be used for warehousing.
    Warehouse,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for PropertySubType {
    fn from(s: String) -> PropertySubType {
        match s.as_ref() {
            "Agriculture" => PropertySubType::Agriculture,

            "Apartment" => PropertySubType::Apartment,

            "Boat Slip" => PropertySubType::BoatSlip,

            "Business" => PropertySubType::Business,

            "Cabin" => PropertySubType::Cabin,

            "Condominium" => PropertySubType::Condominium,

            "Deeded Parking" => PropertySubType::DeededParking,

            "Duplex" => PropertySubType::Duplex,

            "Farm" => PropertySubType::Farm,

            "Hotel/Motel" => PropertySubType::HotelMotel,

            "Industrial" => PropertySubType::Industrial,

            "Manufactured Home" => PropertySubType::ManufacturedHome,

            "Manufactured On Land" => PropertySubType::ManufacturedOnLand,

            "Mixed Use" => PropertySubType::MixedUse,

            "Mobile Home" => PropertySubType::MobileHome,

            "Multi Family" => PropertySubType::MultiFamily,

            "Office" => PropertySubType::Office,

            "Own Your Own" => PropertySubType::OwnYourOwn,

            "Quadruplex" => PropertySubType::Quadruplex,

            "Ranch" => PropertySubType::Ranch,

            "Retail" => PropertySubType::Retail,

            "Single Family Residence" => PropertySubType::SingleFamilyResidence,

            "Stock Cooperative" => PropertySubType::StockCooperative,

            "Timeshare" => PropertySubType::Timeshare,

            "Townhouse" => PropertySubType::Townhouse,

            "Triplex" => PropertySubType::Triplex,

            "Unimproved Land" => PropertySubType::UnimprovedLand,

            "Warehouse" => PropertySubType::Warehouse,

            _ => PropertySubType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for PropertySubType {
    fn from(s: &str) -> PropertySubType {
        match s {
            "Agriculture" => PropertySubType::Agriculture,

            "Apartment" => PropertySubType::Apartment,

            "Boat Slip" => PropertySubType::BoatSlip,

            "Business" => PropertySubType::Business,

            "Cabin" => PropertySubType::Cabin,

            "Condominium" => PropertySubType::Condominium,

            "Deeded Parking" => PropertySubType::DeededParking,

            "Duplex" => PropertySubType::Duplex,

            "Farm" => PropertySubType::Farm,

            "Hotel/Motel" => PropertySubType::HotelMotel,

            "Industrial" => PropertySubType::Industrial,

            "Manufactured Home" => PropertySubType::ManufacturedHome,

            "Manufactured On Land" => PropertySubType::ManufacturedOnLand,

            "Mixed Use" => PropertySubType::MixedUse,

            "Mobile Home" => PropertySubType::MobileHome,

            "Multi Family" => PropertySubType::MultiFamily,

            "Office" => PropertySubType::Office,

            "Own Your Own" => PropertySubType::OwnYourOwn,

            "Quadruplex" => PropertySubType::Quadruplex,

            "Ranch" => PropertySubType::Ranch,

            "Retail" => PropertySubType::Retail,

            "Single Family Residence" => PropertySubType::SingleFamilyResidence,

            "Stock Cooperative" => PropertySubType::StockCooperative,

            "Timeshare" => PropertySubType::Timeshare,

            "Townhouse" => PropertySubType::Townhouse,

            "Triplex" => PropertySubType::Triplex,

            "Unimproved Land" => PropertySubType::UnimprovedLand,

            "Warehouse" => PropertySubType::Warehouse,

            _ => PropertySubType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a PropertySubType> for &'a str {
    fn from(s: &'a PropertySubType) -> &'a str {
        match s {
            PropertySubType::Agriculture => "Agriculture",

            PropertySubType::Apartment => "Apartment",

            PropertySubType::BoatSlip => "Boat Slip",

            PropertySubType::Business => "Business",

            PropertySubType::Cabin => "Cabin",

            PropertySubType::Condominium => "Condominium",

            PropertySubType::DeededParking => "Deeded Parking",

            PropertySubType::Duplex => "Duplex",

            PropertySubType::Farm => "Farm",

            PropertySubType::HotelMotel => "Hotel/Motel",

            PropertySubType::Industrial => "Industrial",

            PropertySubType::ManufacturedHome => "Manufactured Home",

            PropertySubType::ManufacturedOnLand => "Manufactured On Land",

            PropertySubType::MixedUse => "Mixed Use",

            PropertySubType::MobileHome => "Mobile Home",

            PropertySubType::MultiFamily => "Multi Family",

            PropertySubType::Office => "Office",

            PropertySubType::OwnYourOwn => "Own Your Own",

            PropertySubType::Quadruplex => "Quadruplex",

            PropertySubType::Ranch => "Ranch",

            PropertySubType::Retail => "Retail",

            PropertySubType::SingleFamilyResidence => "Single Family Residence",

            PropertySubType::StockCooperative => "Stock Cooperative",

            PropertySubType::Timeshare => "Timeshare",

            PropertySubType::Townhouse => "Townhouse",

            PropertySubType::Triplex => "Triplex",

            PropertySubType::UnimprovedLand => "Unimproved Land",

            PropertySubType::Warehouse => "Warehouse",

            PropertySubType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for PropertySubType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for PropertySubType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_property_sub_type_format {
    use super::PropertySubType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<PropertySubType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<PropertySubType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [PropertyType Lookups](https://ddwiki.reso.org/display/DDW17/PropertyType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum PropertyType {
    /// "[Business Opportunity](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245901)": The property type of the listing is Business Opportunity. The property type can be references as a class or a field within a single class structure.
    BusinessOpportunity,

    /// "[Commercial Lease](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245902)": The property type of the listing is Commercial Lease. The property type can be references as a class or a field within a single class structure.
    CommercialLease,

    /// "[Commercial Sale](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245903)": The property type of the listing is Commercial Sale. The property type can be references as a class or a field within a single class structure.
    CommercialSale,

    /// "[Farm](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245904)": The property type of the listing is Farm.  The property type can be references as a class or a field within a single class structure.
    Farm,

    /// "[Land](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245905)": The property type of the listing is Land.  The property type can be references as a class or a field within a single class structure.
    Land,

    /// "[Manufactured In Park](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245906)": The property type of the listing is Manufactured in Park.  The property type can be references as a class or a field within a single class structure.
    ManufacturedInPark,

    /// "[Residential](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245907)": The property type of the listing is Residential.  The property type can be references as a class or a field within a single class structure.
    Residential,

    /// "[Residential Income](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245908)": The property type of the listing is Residential Income.  The property type can be references as a class or a field within a single class structure.
    ResidentialIncome,

    /// "[Residential Lease](https://ddwiki.reso.org/pages/viewpage.action?pageId=29245909)": The property type of the listing is Residential Lease.  The property type can be references as a class or a field within a single class structure.
    ResidentialLease,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for PropertyType {
    fn from(s: String) -> PropertyType {
        match s.as_ref() {
            "Business Opportunity" => PropertyType::BusinessOpportunity,

            "Commercial Lease" => PropertyType::CommercialLease,

            "Commercial Sale" => PropertyType::CommercialSale,

            "Farm" => PropertyType::Farm,

            "Land" => PropertyType::Land,

            "Manufactured In Park" => PropertyType::ManufacturedInPark,

            "Residential" => PropertyType::Residential,

            "Residential Income" => PropertyType::ResidentialIncome,

            "Residential Lease" => PropertyType::ResidentialLease,

            _ => PropertyType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for PropertyType {
    fn from(s: &str) -> PropertyType {
        match s {
            "Business Opportunity" => PropertyType::BusinessOpportunity,

            "Commercial Lease" => PropertyType::CommercialLease,

            "Commercial Sale" => PropertyType::CommercialSale,

            "Farm" => PropertyType::Farm,

            "Land" => PropertyType::Land,

            "Manufactured In Park" => PropertyType::ManufacturedInPark,

            "Residential" => PropertyType::Residential,

            "Residential Income" => PropertyType::ResidentialIncome,

            "Residential Lease" => PropertyType::ResidentialLease,

            _ => PropertyType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a PropertyType> for &'a str {
    fn from(s: &'a PropertyType) -> &'a str {
        match s {
            PropertyType::BusinessOpportunity => "Business Opportunity",

            PropertyType::CommercialLease => "Commercial Lease",

            PropertyType::CommercialSale => "Commercial Sale",

            PropertyType::Farm => "Farm",

            PropertyType::Land => "Land",

            PropertyType::ManufacturedInPark => "Manufactured In Park",

            PropertyType::Residential => "Residential",

            PropertyType::ResidentialIncome => "Residential Income",

            PropertyType::ResidentialLease => "Residential Lease",

            PropertyType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for PropertyType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for PropertyType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_property_type_format {
    use super::PropertyType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<PropertyType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<PropertyType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [QueueTransactionType Lookups](https://ddwiki.reso.org/display/DDW17/QueueTransactionType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum QueueTransactionType {
    /// "[Add](https://ddwiki.reso.org/display/DDW17/Add)": The resource record being referenced by the queue does not yet exist in the target and is an addition.
    Add,

    /// "[Change](https://ddwiki.reso.org/display/DDW17/Change)": The resource record being referenced by the queue exists in the target and is being modified.
    Change,

    /// "[Delete](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246733)": The resource record being referenced by the queue exists in the target and is to be removed.
    Delete,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for QueueTransactionType {
    fn from(s: String) -> QueueTransactionType {
        match s.as_ref() {
            "Add" => QueueTransactionType::Add,

            "Change" => QueueTransactionType::Change,

            "Delete" => QueueTransactionType::Delete,

            _ => QueueTransactionType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for QueueTransactionType {
    fn from(s: &str) -> QueueTransactionType {
        match s {
            "Add" => QueueTransactionType::Add,

            "Change" => QueueTransactionType::Change,

            "Delete" => QueueTransactionType::Delete,

            _ => QueueTransactionType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a QueueTransactionType> for &'a str {
    fn from(s: &'a QueueTransactionType) -> &'a str {
        match s {
            QueueTransactionType::Add => "Add",

            QueueTransactionType::Change => "Change",

            QueueTransactionType::Delete => "Delete",

            QueueTransactionType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for QueueTransactionType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for QueueTransactionType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_queue_transaction_type_format {
    use super::QueueTransactionType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<QueueTransactionType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<QueueTransactionType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ReasonActiveOrDisabled Lookups](https://ddwiki.reso.org/display/DDW17/ReasonActiveOrDisabled+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ReasonActiveOrDisabled {
    /// "[Agent Disabled](https://ddwiki.reso.org/display/DDW17/Agent+Disabled)": The agent has disabled this auto email.
    AgentDisabled,

    /// "[Client Disabled](https://ddwiki.reso.org/display/DDW17/Client+Disabled)": The auto email has been disabled by the client/recipient.
    ClientDisabled,

    /// "[Concierge Notification](https://ddwiki.reso.org/display/DDW17/Concierge+Notification)": The auto email is on hold pending concierge approval by the member. The auto email is temporarily disabled.
    ConciergeNotification,

    /// "[Final Ignored Warning](https://ddwiki.reso.org/display/DDW17/Final+Ignored+Warning)": The final warning that the auto email has not been viewed by the client/recipient and may be inactivated due to being ignored. The auto email is still active.
    FinalIgnoredWarning,

    /// "[Ignored](https://ddwiki.reso.org/display/DDW17/Ignored)": The auto email was not viewed by the client/recipient in the time frame designated by the host system. The auto email is disabled.
    Ignored,

    /// "[Initial Ignored Warning](https://ddwiki.reso.org/display/DDW17/Initial+Ignored+Warning)": The first warning that the auto email has not been viewed by the client/recipient. The auto email is still active.
    InitialIgnoredWarning,

    /// "[Invalid](https://ddwiki.reso.org/display/DDW17/Invalid)": The auto email is no longer valid per some conditions set by the host system. The auto email is disabled.
    Invalid,

    /// "[No Listings Found](https://ddwiki.reso.org/display/DDW17/No+Listings+Found)": The auto email has not found any listings matching the criteria and been disabled per the host system rules.
    NoListingsFound,

    /// "[No Listings Found Warning](https://ddwiki.reso.org/display/DDW17/No+Listings+Found+Warning)": The auto email has not found any listings matching the criteria and may be disabled. The auto email is still active.
    NoListingsFoundWarning,

    /// "[No One To Send To](https://ddwiki.reso.org/display/DDW17/No+One+To+Send+To)": There is no valid email address and the auto email has been inactivated.
    NoOneToSendTo,

    /// "[Over Limit](https://ddwiki.reso.org/display/DDW17/Over+Limit)": The auto email has reached the limit of listing results as set by the host system. The auto email is disabled.
    OverLimit,

    /// "[Re-Activated](https://ddwiki.reso.org/display/DDW17/Re-Activated)": The auto email has was previously disabled and has been set back to active.
    ReActivated,

    /// "[Revised](https://ddwiki.reso.org/display/DDW17/Revised)": The auto email has been revised and is active.
    Revised,

    /// "[Search Failing](https://ddwiki.reso.org/display/DDW17/Search+Failing)": The auto email's search criteria is failing and should be reviewed by the host system. The auto email is disabled.
    SearchFailing,

    /// "[Welcome Email Ignored](https://ddwiki.reso.org/display/DDW17/Welcome+Email+Ignored)": The initial auto email has not been viewed by the client/recipient and the auto email has been deactivated.
    WelcomeEmailIgnored,

    /// "[Welcome Email Ignored Warning](https://ddwiki.reso.org/display/DDW17/Welcome+Email+Ignored+Warning)": The initial auto email has not been viewed by the client/recipient. The auto email is still active.
    WelcomeEmailIgnoredWarning,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ReasonActiveOrDisabled {
    fn from(s: String) -> ReasonActiveOrDisabled {
        match s.as_ref() {
            "Agent Disabled" => ReasonActiveOrDisabled::AgentDisabled,

            "Client Disabled" => ReasonActiveOrDisabled::ClientDisabled,

            "Concierge Notification" => ReasonActiveOrDisabled::ConciergeNotification,

            "Final Ignored Warning" => ReasonActiveOrDisabled::FinalIgnoredWarning,

            "Ignored" => ReasonActiveOrDisabled::Ignored,

            "Initial Ignored Warning" => ReasonActiveOrDisabled::InitialIgnoredWarning,

            "Invalid" => ReasonActiveOrDisabled::Invalid,

            "No Listings Found" => ReasonActiveOrDisabled::NoListingsFound,

            "No Listings Found Warning" => ReasonActiveOrDisabled::NoListingsFoundWarning,

            "No One To Send To" => ReasonActiveOrDisabled::NoOneToSendTo,

            "Over Limit" => ReasonActiveOrDisabled::OverLimit,

            "Re-Activated" => ReasonActiveOrDisabled::ReActivated,

            "Revised" => ReasonActiveOrDisabled::Revised,

            "Search Failing" => ReasonActiveOrDisabled::SearchFailing,

            "Welcome Email Ignored" => ReasonActiveOrDisabled::WelcomeEmailIgnored,

            "Welcome Email Ignored Warning" => ReasonActiveOrDisabled::WelcomeEmailIgnoredWarning,

            _ => ReasonActiveOrDisabled::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ReasonActiveOrDisabled {
    fn from(s: &str) -> ReasonActiveOrDisabled {
        match s {
            "Agent Disabled" => ReasonActiveOrDisabled::AgentDisabled,

            "Client Disabled" => ReasonActiveOrDisabled::ClientDisabled,

            "Concierge Notification" => ReasonActiveOrDisabled::ConciergeNotification,

            "Final Ignored Warning" => ReasonActiveOrDisabled::FinalIgnoredWarning,

            "Ignored" => ReasonActiveOrDisabled::Ignored,

            "Initial Ignored Warning" => ReasonActiveOrDisabled::InitialIgnoredWarning,

            "Invalid" => ReasonActiveOrDisabled::Invalid,

            "No Listings Found" => ReasonActiveOrDisabled::NoListingsFound,

            "No Listings Found Warning" => ReasonActiveOrDisabled::NoListingsFoundWarning,

            "No One To Send To" => ReasonActiveOrDisabled::NoOneToSendTo,

            "Over Limit" => ReasonActiveOrDisabled::OverLimit,

            "Re-Activated" => ReasonActiveOrDisabled::ReActivated,

            "Revised" => ReasonActiveOrDisabled::Revised,

            "Search Failing" => ReasonActiveOrDisabled::SearchFailing,

            "Welcome Email Ignored" => ReasonActiveOrDisabled::WelcomeEmailIgnored,

            "Welcome Email Ignored Warning" => ReasonActiveOrDisabled::WelcomeEmailIgnoredWarning,

            _ => ReasonActiveOrDisabled::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ReasonActiveOrDisabled> for &'a str {
    fn from(s: &'a ReasonActiveOrDisabled) -> &'a str {
        match s {
            ReasonActiveOrDisabled::AgentDisabled => "Agent Disabled",

            ReasonActiveOrDisabled::ClientDisabled => "Client Disabled",

            ReasonActiveOrDisabled::ConciergeNotification => "Concierge Notification",

            ReasonActiveOrDisabled::FinalIgnoredWarning => "Final Ignored Warning",

            ReasonActiveOrDisabled::Ignored => "Ignored",

            ReasonActiveOrDisabled::InitialIgnoredWarning => "Initial Ignored Warning",

            ReasonActiveOrDisabled::Invalid => "Invalid",

            ReasonActiveOrDisabled::NoListingsFound => "No Listings Found",

            ReasonActiveOrDisabled::NoListingsFoundWarning => "No Listings Found Warning",

            ReasonActiveOrDisabled::NoOneToSendTo => "No One To Send To",

            ReasonActiveOrDisabled::OverLimit => "Over Limit",

            ReasonActiveOrDisabled::ReActivated => "Re-Activated",

            ReasonActiveOrDisabled::Revised => "Revised",

            ReasonActiveOrDisabled::SearchFailing => "Search Failing",

            ReasonActiveOrDisabled::WelcomeEmailIgnored => "Welcome Email Ignored",

            ReasonActiveOrDisabled::WelcomeEmailIgnoredWarning => "Welcome Email Ignored Warning",

            ReasonActiveOrDisabled::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ReasonActiveOrDisabled {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ReasonActiveOrDisabled {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_reason_active_or_disabled_format {
    use super::ReasonActiveOrDisabled;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ReasonActiveOrDisabled>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ReasonActiveOrDisabled>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [RentIncludes Lookups](https://ddwiki.reso.org/display/DDW17/RentIncludes+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum RentIncludes {
    /// "[All Utilities](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246093)": Rent for the dwelling includes all utilities.
    AllUtilities,

    /// "[Cable TV](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246094)": Rent for the dwelling includes cable TV.
    CableTV,

    /// "[Electricity](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246095)": Rent for the dwelling includes electricity.
    Electricity,

    /// "[Gardener](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246096)": Rent for the dwelling includes gardener.
    Gardener,

    /// "[Gas](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246097)": Rent for the dwelling includes gas.
    Gas,

    /// "[Internet](https://ddwiki.reso.org/display/DDW17/Internet)": Rent for the dwelling includes internet.
    Internet,

    /// "[Management](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246099)": Rent for the dwelling includes management.
    Management,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246100)": Rent for the dwelling does not include other potential costs such as utilities, management, services, etc.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246105)": An item of what rent includes not in this list.
    Other,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246101)": See the listing's remarks for details about things included in the rent.
    SeeRemarks,

    /// "[Sewer](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246102)": Rent for the dwelling includes sewer.
    Sewer,

    /// "[Trash Collection](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246103)": Rent for the dwelling includes trash collection.
    TrashCollection,

    /// "[Water](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246104)": Rent for the dwelling includes water.
    Water,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for RentIncludes {
    fn from(s: String) -> RentIncludes {
        match s.as_ref() {
            "All Utilities" => RentIncludes::AllUtilities,

            "Cable TV" => RentIncludes::CableTV,

            "Electricity" => RentIncludes::Electricity,

            "Gardener" => RentIncludes::Gardener,

            "Gas" => RentIncludes::Gas,

            "Internet" => RentIncludes::Internet,

            "Management" => RentIncludes::Management,

            "None" => RentIncludes::None,

            "Other" => RentIncludes::Other,

            "See Remarks" => RentIncludes::SeeRemarks,

            "Sewer" => RentIncludes::Sewer,

            "Trash Collection" => RentIncludes::TrashCollection,

            "Water" => RentIncludes::Water,

            _ => RentIncludes::OpenEnumeration(s),
        }
    }
}

impl From<&str> for RentIncludes {
    fn from(s: &str) -> RentIncludes {
        match s {
            "All Utilities" => RentIncludes::AllUtilities,

            "Cable TV" => RentIncludes::CableTV,

            "Electricity" => RentIncludes::Electricity,

            "Gardener" => RentIncludes::Gardener,

            "Gas" => RentIncludes::Gas,

            "Internet" => RentIncludes::Internet,

            "Management" => RentIncludes::Management,

            "None" => RentIncludes::None,

            "Other" => RentIncludes::Other,

            "See Remarks" => RentIncludes::SeeRemarks,

            "Sewer" => RentIncludes::Sewer,

            "Trash Collection" => RentIncludes::TrashCollection,

            "Water" => RentIncludes::Water,

            _ => RentIncludes::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a RentIncludes> for &'a str {
    fn from(s: &'a RentIncludes) -> &'a str {
        match s {
            RentIncludes::AllUtilities => "All Utilities",

            RentIncludes::CableTV => "Cable TV",

            RentIncludes::Electricity => "Electricity",

            RentIncludes::Gardener => "Gardener",

            RentIncludes::Gas => "Gas",

            RentIncludes::Internet => "Internet",

            RentIncludes::Management => "Management",

            RentIncludes::None => "None",

            RentIncludes::Other => "Other",

            RentIncludes::SeeRemarks => "See Remarks",

            RentIncludes::Sewer => "Sewer",

            RentIncludes::TrashCollection => "Trash Collection",

            RentIncludes::Water => "Water",

            RentIncludes::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for RentIncludes {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for RentIncludes {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_rent_includes_format {
    use super::RentIncludes;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<RentIncludes>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<RentIncludes>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ResourceName Lookups](https://ddwiki.reso.org/display/DDW17/ResourceName+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ResourceName {
    /// "[Contacts](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246107)": This record is related to another record in the Contacts resource.
    Contacts,

    /// "[Member](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246108)": This record is related to another record in the Member resource.
    Member,

    /// "[Office](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246109)": This record is related to another record in the Office resource.
    Office,

    /// "[Property](https://ddwiki.reso.org/display/DDW17/Property)": This record is related to another record in the Property resource.
    Property,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ResourceName {
    fn from(s: String) -> ResourceName {
        match s.as_ref() {
            "Contacts" => ResourceName::Contacts,

            "Member" => ResourceName::Member,

            "Office" => ResourceName::Office,

            "Property" => ResourceName::Property,

            _ => ResourceName::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ResourceName {
    fn from(s: &str) -> ResourceName {
        match s {
            "Contacts" => ResourceName::Contacts,

            "Member" => ResourceName::Member,

            "Office" => ResourceName::Office,

            "Property" => ResourceName::Property,

            _ => ResourceName::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ResourceName> for &'a str {
    fn from(s: &'a ResourceName) -> &'a str {
        match s {
            ResourceName::Contacts => "Contacts",

            ResourceName::Member => "Member",

            ResourceName::Office => "Office",

            ResourceName::Property => "Property",

            ResourceName::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ResourceName {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ResourceName {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_resource_name_format {
    use super::ResourceName;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ResourceName>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ResourceName>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [RoadFrontageType Lookups](https://ddwiki.reso.org/display/DDW17/RoadFrontageType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum RoadFrontageType {
    /// "[Alley](https://ddwiki.reso.org/display/DDW17/Alley)": The property fronts to an alley.
    Alley,

    /// "[City Street](https://ddwiki.reso.org/display/DDW17/City+Street)": The property fronts to a city street.
    CityStreet,

    /// "[County Road](https://ddwiki.reso.org/display/DDW17/County+Road)": The property fronts to a county road.
    CountyRoad,

    /// "[Easement](https://ddwiki.reso.org/display/DDW17/Easement)": The property fronts to an easement.
    Easement,

    /// "[Freeway](https://ddwiki.reso.org/display/DDW17/Freeway)": The property fronts to a freeway.
    Freeway,

    /// "[Highway](https://ddwiki.reso.org/display/DDW17/Highway)": The property fronts to a highway.
    Highway,

    /// "[Interstate](https://ddwiki.reso.org/display/DDW17/Interstate)": The property fronts to an interstate.
    Interstate,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246205)": The property does not have any road frontage.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246206)": The property fronts to a road other than those in this list.
    Other,

    /// "[Private Road](https://ddwiki.reso.org/display/DDW17/Private+Road)": The property fronts to a private road.
    PrivateRoad,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246208)": See Public or Private Remarks for details on the road frontage.
    SeeRemarks,

    /// "[State Road](https://ddwiki.reso.org/display/DDW17/State+Road)": The property fronts to a state road.
    StateRoad,

    /// "[Unimproved](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246210)": The property's road frontage is unimproved.
    Unimproved,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for RoadFrontageType {
    fn from(s: String) -> RoadFrontageType {
        match s.as_ref() {
            "Alley" => RoadFrontageType::Alley,

            "City Street" => RoadFrontageType::CityStreet,

            "County Road" => RoadFrontageType::CountyRoad,

            "Easement" => RoadFrontageType::Easement,

            "Freeway" => RoadFrontageType::Freeway,

            "Highway" => RoadFrontageType::Highway,

            "Interstate" => RoadFrontageType::Interstate,

            "None" => RoadFrontageType::None,

            "Other" => RoadFrontageType::Other,

            "Private Road" => RoadFrontageType::PrivateRoad,

            "See Remarks" => RoadFrontageType::SeeRemarks,

            "State Road" => RoadFrontageType::StateRoad,

            "Unimproved" => RoadFrontageType::Unimproved,

            _ => RoadFrontageType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for RoadFrontageType {
    fn from(s: &str) -> RoadFrontageType {
        match s {
            "Alley" => RoadFrontageType::Alley,

            "City Street" => RoadFrontageType::CityStreet,

            "County Road" => RoadFrontageType::CountyRoad,

            "Easement" => RoadFrontageType::Easement,

            "Freeway" => RoadFrontageType::Freeway,

            "Highway" => RoadFrontageType::Highway,

            "Interstate" => RoadFrontageType::Interstate,

            "None" => RoadFrontageType::None,

            "Other" => RoadFrontageType::Other,

            "Private Road" => RoadFrontageType::PrivateRoad,

            "See Remarks" => RoadFrontageType::SeeRemarks,

            "State Road" => RoadFrontageType::StateRoad,

            "Unimproved" => RoadFrontageType::Unimproved,

            _ => RoadFrontageType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a RoadFrontageType> for &'a str {
    fn from(s: &'a RoadFrontageType) -> &'a str {
        match s {
            RoadFrontageType::Alley => "Alley",

            RoadFrontageType::CityStreet => "City Street",

            RoadFrontageType::CountyRoad => "County Road",

            RoadFrontageType::Easement => "Easement",

            RoadFrontageType::Freeway => "Freeway",

            RoadFrontageType::Highway => "Highway",

            RoadFrontageType::Interstate => "Interstate",

            RoadFrontageType::None => "None",

            RoadFrontageType::Other => "Other",

            RoadFrontageType::PrivateRoad => "Private Road",

            RoadFrontageType::SeeRemarks => "See Remarks",

            RoadFrontageType::StateRoad => "State Road",

            RoadFrontageType::Unimproved => "Unimproved",

            RoadFrontageType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for RoadFrontageType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for RoadFrontageType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_road_frontage_type_format {
    use super::RoadFrontageType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<RoadFrontageType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<RoadFrontageType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [RoadResponsibility Lookups](https://ddwiki.reso.org/display/DDW17/RoadResponsibility+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum RoadResponsibility {
    /// "[Private Maintained Road](https://ddwiki.reso.org/display/DDW17/Private+Maintained+Road)": The property's road is privately maintained.
    PrivateMaintainedRoad,

    /// "[Public Maintained Road](https://ddwiki.reso.org/display/DDW17/Public+Maintained+Road)": The property's road is publicly maintained.
    PublicMaintainedRoad,

    /// "[Road Maintenance Agreement](https://ddwiki.reso.org/display/DDW17/Road+Maintenance+Agreement)": The property has a road maintenance agreement.
    RoadMaintenanceAgreement,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for RoadResponsibility {
    fn from(s: String) -> RoadResponsibility {
        match s.as_ref() {
            "Private Maintained Road" => RoadResponsibility::PrivateMaintainedRoad,

            "Public Maintained Road" => RoadResponsibility::PublicMaintainedRoad,

            "Road Maintenance Agreement" => RoadResponsibility::RoadMaintenanceAgreement,

            _ => RoadResponsibility::OpenEnumeration(s),
        }
    }
}

impl From<&str> for RoadResponsibility {
    fn from(s: &str) -> RoadResponsibility {
        match s {
            "Private Maintained Road" => RoadResponsibility::PrivateMaintainedRoad,

            "Public Maintained Road" => RoadResponsibility::PublicMaintainedRoad,

            "Road Maintenance Agreement" => RoadResponsibility::RoadMaintenanceAgreement,

            _ => RoadResponsibility::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a RoadResponsibility> for &'a str {
    fn from(s: &'a RoadResponsibility) -> &'a str {
        match s {
            RoadResponsibility::PrivateMaintainedRoad => "Private Maintained Road",

            RoadResponsibility::PublicMaintainedRoad => "Public Maintained Road",

            RoadResponsibility::RoadMaintenanceAgreement => "Road Maintenance Agreement",

            RoadResponsibility::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for RoadResponsibility {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for RoadResponsibility {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_road_responsibility_format {
    use super::RoadResponsibility;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<RoadResponsibility>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<RoadResponsibility>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [RoadSurfaceType Lookups](https://ddwiki.reso.org/display/DDW17/RoadSurfaceType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum RoadSurfaceType {
    /// "[Alley Paved](https://ddwiki.reso.org/display/DDW17/Alley+Paved)": The property's road is a paved alley.
    AlleyPaved,

    /// "[Asphalt](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246217)": The property's road is asphalt.
    Asphalt,

    /// "[Chip And Seal](https://ddwiki.reso.org/display/DDW17/Chip+And+Seal)": The property's road is chip and seal.
    ChipAndSeal,

    /// "[Concrete](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246219)": The property's road is concrete.
    Concrete,

    /// "[Dirt](https://ddwiki.reso.org/display/DDW17/Dirt)": The property's road is dirt.
    Dirt,

    /// "[Gravel](https://ddwiki.reso.org/display/DDW17/Gravel)": The property's road is gravel.
    Gravel,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246222)": The property has no road.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246223)": The surface type of the property's road is something other than those in this list.
    Other,

    /// "[Paved](https://ddwiki.reso.org/display/DDW17/Paved)": The property's road is paved.
    Paved,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246225)": See the Public or Private Remarks for details on the road surface type.
    SeeRemarks,

    /// "[Unimproved](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246226)": The property's road is unimproved.
    Unimproved,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for RoadSurfaceType {
    fn from(s: String) -> RoadSurfaceType {
        match s.as_ref() {
            "Alley Paved" => RoadSurfaceType::AlleyPaved,

            "Asphalt" => RoadSurfaceType::Asphalt,

            "Chip And Seal" => RoadSurfaceType::ChipAndSeal,

            "Concrete" => RoadSurfaceType::Concrete,

            "Dirt" => RoadSurfaceType::Dirt,

            "Gravel" => RoadSurfaceType::Gravel,

            "None" => RoadSurfaceType::None,

            "Other" => RoadSurfaceType::Other,

            "Paved" => RoadSurfaceType::Paved,

            "See Remarks" => RoadSurfaceType::SeeRemarks,

            "Unimproved" => RoadSurfaceType::Unimproved,

            _ => RoadSurfaceType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for RoadSurfaceType {
    fn from(s: &str) -> RoadSurfaceType {
        match s {
            "Alley Paved" => RoadSurfaceType::AlleyPaved,

            "Asphalt" => RoadSurfaceType::Asphalt,

            "Chip And Seal" => RoadSurfaceType::ChipAndSeal,

            "Concrete" => RoadSurfaceType::Concrete,

            "Dirt" => RoadSurfaceType::Dirt,

            "Gravel" => RoadSurfaceType::Gravel,

            "None" => RoadSurfaceType::None,

            "Other" => RoadSurfaceType::Other,

            "Paved" => RoadSurfaceType::Paved,

            "See Remarks" => RoadSurfaceType::SeeRemarks,

            "Unimproved" => RoadSurfaceType::Unimproved,

            _ => RoadSurfaceType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a RoadSurfaceType> for &'a str {
    fn from(s: &'a RoadSurfaceType) -> &'a str {
        match s {
            RoadSurfaceType::AlleyPaved => "Alley Paved",

            RoadSurfaceType::Asphalt => "Asphalt",

            RoadSurfaceType::ChipAndSeal => "Chip And Seal",

            RoadSurfaceType::Concrete => "Concrete",

            RoadSurfaceType::Dirt => "Dirt",

            RoadSurfaceType::Gravel => "Gravel",

            RoadSurfaceType::None => "None",

            RoadSurfaceType::Other => "Other",

            RoadSurfaceType::Paved => "Paved",

            RoadSurfaceType::SeeRemarks => "See Remarks",

            RoadSurfaceType::Unimproved => "Unimproved",

            RoadSurfaceType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for RoadSurfaceType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for RoadSurfaceType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_road_surface_type_format {
    use super::RoadSurfaceType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<RoadSurfaceType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<RoadSurfaceType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Roof Lookups](https://ddwiki.reso.org/display/DDW17/Roof+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Roof {
    /// "[Aluminum](https://ddwiki.reso.org/display/DDW17/Aluminum)": The roof is made wholly/partially of aluminum.
    Aluminum,

    /// "[Asbestos Shingle](https://ddwiki.reso.org/display/DDW17/Asbestos+Shingle)": The roof is made wholly/partially of asbestos shingles.
    AsbestosShingle,

    /// "[Asphalt](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246114)": The roof is made wholly/partially of asphalt.
    Asphalt,

    /// "[Bahama](https://ddwiki.reso.org/display/DDW17/Bahama)": The roof is a Bahama roof.
    Bahama,

    /// "[Barrel](https://ddwiki.reso.org/display/DDW17/Barrel)": The roof is a Barrel roof.
    Barrel,

    /// "[Bituthene](https://ddwiki.reso.org/display/DDW17/Bituthene)": The roof is made wholly/partially of Bituthene.
    Bituthene,

    /// "[Built-Up](https://ddwiki.reso.org/display/DDW17/Built-Up)": The roof is made wholly/partially of built-up.
    BuiltUp,

    /// "[Composition](https://ddwiki.reso.org/display/DDW17/Composition)": The roof is made wholly/partially of composition.
    Composition,

    /// "[Concrete](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246120)": The roof is made wholly/partially of concrete.
    Concrete,

    /// "[Copper](https://ddwiki.reso.org/display/DDW17/Copper)": The roof is made wholly/partially of copper.
    Copper,

    /// "[Elastomeric](https://ddwiki.reso.org/display/DDW17/Elastomeric)": The roof is made wholly/partially of elastomeric.
    Elastomeric,

    /// "[Fiberglass](https://ddwiki.reso.org/display/DDW17/Fiberglass)": The roof is made wholly/partially of fiberglass.
    Fiberglass,

    /// "[Flat](https://ddwiki.reso.org/display/DDW17/Flat)": The roof is wholly/partially flat.
    Flat,

    /// "[Flat Tile](https://ddwiki.reso.org/display/DDW17/Flat+Tile)": The roof is made wholly/partially of flat tile.
    FlatTile,

    /// "[Foam](https://ddwiki.reso.org/display/DDW17/Foam)": The roof is made wholly/partially of foam.
    Foam,

    /// "[Green Roof](https://ddwiki.reso.org/display/DDW17/Green+Roof)": The roof is wholly/partially a green roof.
    GreenRoof,

    /// "[Mansard](https://ddwiki.reso.org/display/DDW17/Mansard)": The roof is made wholly/partially of mansard.
    Mansard,

    /// "[Membrane](https://ddwiki.reso.org/display/DDW17/Membrane)": The roof is made wholly/partially of membrane.
    Membrane,

    /// "[Metal](https://ddwiki.reso.org/display/DDW17/Metal)": The roof is made wholly/partially of metal.
    Metal,

    /// "[Mixed](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246131)": The roof is made wholly/partially of mixed materials.
    Mixed,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246132)": The roof materials are unstated, unknown or there are none.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246133)": The roof is made wholly/partially of materials other than those in this list.
    Other,

    /// "[Rolled/Hot Mop](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246134)": The roof is made wholly/partially of rolled/hot mop.
    RolledHotMop,

    /// "[Rubber](https://ddwiki.reso.org/display/DDW17/Rubber)": The roof is made wholly/partially of rubber.
    Rubber,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246136)": See the listing's remarks for details on the roof.
    SeeRemarks,

    /// "[Shake](https://ddwiki.reso.org/display/DDW17/Shake)": The roof is made wholly/partially of shake.
    Shake,

    /// "[Shingle](https://ddwiki.reso.org/display/DDW17/Shingle)": The roof is made wholly/partially of shingle.
    Shingle,

    /// "[Slate](https://ddwiki.reso.org/display/DDW17/Slate)": The roof is made wholly/partially of slate.
    Slate,

    /// "[Spanish Tile](https://ddwiki.reso.org/display/DDW17/Spanish+Tile)": The roof is made wholly/partially of Spanish tile.
    SpanishTile,

    /// "[Stone](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246141)": The roof is made wholly/partially of stone.
    Stone,

    /// "[Synthetic](https://ddwiki.reso.org/display/DDW17/Synthetic)": The roof is made wholly/partially of synthetic materials.
    Synthetic,

    /// "[Tar/Gravel](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246143)": The roof is made wholly/partially of tar/gravel.
    TarGravel,

    /// "[Tile](https://ddwiki.reso.org/display/DDW17/Tile)": The roof is made wholly/partially of tile.
    Tile,

    /// "[Wood](https://ddwiki.reso.org/display/DDW17/Wood)": The roof is made wholly/partially of wood.
    Wood,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Roof {
    fn from(s: String) -> Roof {
        match s.as_ref() {
            "Aluminum" => Roof::Aluminum,

            "Asbestos Shingle" => Roof::AsbestosShingle,

            "Asphalt" => Roof::Asphalt,

            "Bahama" => Roof::Bahama,

            "Barrel" => Roof::Barrel,

            "Bituthene" => Roof::Bituthene,

            "Built-Up" => Roof::BuiltUp,

            "Composition" => Roof::Composition,

            "Concrete" => Roof::Concrete,

            "Copper" => Roof::Copper,

            "Elastomeric" => Roof::Elastomeric,

            "Fiberglass" => Roof::Fiberglass,

            "Flat" => Roof::Flat,

            "Flat Tile" => Roof::FlatTile,

            "Foam" => Roof::Foam,

            "Green Roof" => Roof::GreenRoof,

            "Mansard" => Roof::Mansard,

            "Membrane" => Roof::Membrane,

            "Metal" => Roof::Metal,

            "Mixed" => Roof::Mixed,

            "None" => Roof::None,

            "Other" => Roof::Other,

            "Rolled/Hot Mop" => Roof::RolledHotMop,

            "Rubber" => Roof::Rubber,

            "See Remarks" => Roof::SeeRemarks,

            "Shake" => Roof::Shake,

            "Shingle" => Roof::Shingle,

            "Slate" => Roof::Slate,

            "Spanish Tile" => Roof::SpanishTile,

            "Stone" => Roof::Stone,

            "Synthetic" => Roof::Synthetic,

            "Tar/Gravel" => Roof::TarGravel,

            "Tile" => Roof::Tile,

            "Wood" => Roof::Wood,

            _ => Roof::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Roof {
    fn from(s: &str) -> Roof {
        match s {
            "Aluminum" => Roof::Aluminum,

            "Asbestos Shingle" => Roof::AsbestosShingle,

            "Asphalt" => Roof::Asphalt,

            "Bahama" => Roof::Bahama,

            "Barrel" => Roof::Barrel,

            "Bituthene" => Roof::Bituthene,

            "Built-Up" => Roof::BuiltUp,

            "Composition" => Roof::Composition,

            "Concrete" => Roof::Concrete,

            "Copper" => Roof::Copper,

            "Elastomeric" => Roof::Elastomeric,

            "Fiberglass" => Roof::Fiberglass,

            "Flat" => Roof::Flat,

            "Flat Tile" => Roof::FlatTile,

            "Foam" => Roof::Foam,

            "Green Roof" => Roof::GreenRoof,

            "Mansard" => Roof::Mansard,

            "Membrane" => Roof::Membrane,

            "Metal" => Roof::Metal,

            "Mixed" => Roof::Mixed,

            "None" => Roof::None,

            "Other" => Roof::Other,

            "Rolled/Hot Mop" => Roof::RolledHotMop,

            "Rubber" => Roof::Rubber,

            "See Remarks" => Roof::SeeRemarks,

            "Shake" => Roof::Shake,

            "Shingle" => Roof::Shingle,

            "Slate" => Roof::Slate,

            "Spanish Tile" => Roof::SpanishTile,

            "Stone" => Roof::Stone,

            "Synthetic" => Roof::Synthetic,

            "Tar/Gravel" => Roof::TarGravel,

            "Tile" => Roof::Tile,

            "Wood" => Roof::Wood,

            _ => Roof::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Roof> for &'a str {
    fn from(s: &'a Roof) -> &'a str {
        match s {
            Roof::Aluminum => "Aluminum",

            Roof::AsbestosShingle => "Asbestos Shingle",

            Roof::Asphalt => "Asphalt",

            Roof::Bahama => "Bahama",

            Roof::Barrel => "Barrel",

            Roof::Bituthene => "Bituthene",

            Roof::BuiltUp => "Built-Up",

            Roof::Composition => "Composition",

            Roof::Concrete => "Concrete",

            Roof::Copper => "Copper",

            Roof::Elastomeric => "Elastomeric",

            Roof::Fiberglass => "Fiberglass",

            Roof::Flat => "Flat",

            Roof::FlatTile => "Flat Tile",

            Roof::Foam => "Foam",

            Roof::GreenRoof => "Green Roof",

            Roof::Mansard => "Mansard",

            Roof::Membrane => "Membrane",

            Roof::Metal => "Metal",

            Roof::Mixed => "Mixed",

            Roof::None => "None",

            Roof::Other => "Other",

            Roof::RolledHotMop => "Rolled/Hot Mop",

            Roof::Rubber => "Rubber",

            Roof::SeeRemarks => "See Remarks",

            Roof::Shake => "Shake",

            Roof::Shingle => "Shingle",

            Roof::Slate => "Slate",

            Roof::SpanishTile => "Spanish Tile",

            Roof::Stone => "Stone",

            Roof::Synthetic => "Synthetic",

            Roof::TarGravel => "Tar/Gravel",

            Roof::Tile => "Tile",

            Roof::Wood => "Wood",

            Roof::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Roof {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Roof {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_roof_format {
    use super::Roof;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(items: &Option<Vec<Roof>>, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Roof>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [RoomType Lookups](https://ddwiki.reso.org/display/DDW17/RoomType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum RoomType {
    /// "[Basement](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246147)": A floor of a building below ground level.
    Basement,

    /// "[Bathroom](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246179)": The first bathroom, when a Master Bathroom is not designated.
    Bathroom,

    /// "[Bathroom 1](https://ddwiki.reso.org/display/DDW17/Bathroom+1)": The first bathroom, when a Master Bathroom is not designated.
    Bathroom1,

    /// "[Bathroom 2](https://ddwiki.reso.org/display/DDW17/Bathroom+2)": The second bathroom.
    Bathroom2,

    /// "[Bathroom 3](https://ddwiki.reso.org/display/DDW17/Bathroom+3)": The third bathroom.
    Bathroom3,

    /// "[Bathroom 4](https://ddwiki.reso.org/display/DDW17/Bathroom+4)": The fourth bathroom.
    Bathroom4,

    /// "[Bathroom 5](https://ddwiki.reso.org/display/DDW17/Bathroom+5)": The fifth bathroom.
    Bathroom5,

    /// "[Bedroom](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246178)": The type of room is a bedroom.
    Bedroom,

    /// "[Bedroom 1](https://ddwiki.reso.org/display/DDW17/Bedroom+1)": The first bedroom, when a Master Bedroom is not designated.
    Bedroom1,

    /// "[Bedroom 2](https://ddwiki.reso.org/display/DDW17/Bedroom+2)": The second bedroom.
    Bedroom2,

    /// "[Bedroom 3](https://ddwiki.reso.org/display/DDW17/Bedroom+3)": The third bedroom.
    Bedroom3,

    /// "[Bedroom 4](https://ddwiki.reso.org/display/DDW17/Bedroom+4)": The fourth bedroom.
    Bedroom4,

    /// "[Bedroom 5](https://ddwiki.reso.org/display/DDW17/Bedroom+5)": The fifth bedroom.
    Bedroom5,

    /// "[Bonus Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246158)": A room that can be used for multiple purposes.
    BonusRoom,

    /// "[Den](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246159)": Used for a variety of purposes, a den is typically a secluded comfortable room use as a study or entertainment room.
    Den,

    /// "[Dining Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246160)": A room, in a home, where meals are eaten.
    DiningRoom,

    /// "[Exercise Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246161)": A room that is specifically geared to contain exercise equipment.
    ExerciseRoom,

    /// "[Family Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246162)": A comfortable room in a dwelling, for frequent leisure use.
    FamilyRoom,

    /// "[Game Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246163)": A room that, typically a bonus room, that is specifically equipped for game play.  This may include billiards, Ping-Pong, video games, board games or other recreational activities.
    GameRoom,

    /// "[Great Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246164)": The term great room denotes a room space within an abode which combines the specific functions of several of the more traditional room spaces (e.g. the family room, the living room, the study, etc.) into a singular unified space. Great rooms are typically at or near the center of the house, feature raised ceilings, and have been common in American homes since the early 1990s.
    GreatRoom,

    /// "[Gym](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246165)": A room that, in addition to exercise equipment, has other characteristics of a gymnasium.
    Gym,

    /// "[Kitchen](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246166)": The room used for the preparation and storage of food. Cookery.
    Kitchen,

    /// "[Laundry](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246167)": A utility room specifically equipment and used for laundry equipment (washer and dryer).
    Laundry,

    /// "[Library](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246168)": A room that is specifically geared to house books and other media typically found in a library.
    Library,

    /// "[Living Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246169)": A room in a private house used for general social and leisure activities.
    LivingRoom,

    /// "[Loft](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246170)": A loft can be an upper story or attic in a building, directly under the roof. Alternatively, a loft apartment refers to large adaptable open space, often converted for residential use (a converted loft) from some other use, often light industrial. Adding to the confusion, some converted lofts include upper open loft areas.
    Loft,

    /// "[Master Bathroom](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246171)": Typically the largest of the bathrooms and attached to the master bedroom.
    MasterBathroom,

    /// "[Master Bedroom](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246172)": Typically the largest of the bedrooms with an attached bathroom.
    MasterBedroom,

    /// "[Media Room](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246173)": A room that is specifically geared for the watching of movies, TV or other forms of multimedia.
    MediaRoom,

    /// "[Office](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246174)": A room used for business.
    Office,

    /// "[Sauna](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246175)": A small room or house designed as a place to experience dry or wet heat sessions, or an establishment with one or more of these and auxiliary facilities.
    Sauna,

    /// "[Utility Room](https://ddwiki.reso.org/display/DDW17/Utility+Room)": A room that usually contains laundry, HVAC, water heating or some other utilitarian equipment.  In some areas this is simply the laundry room.  In other areas it may be used for many other purposes, all having some utility.
    UtilityRoom,

    /// "[Workshop](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246177)": A room containing tools or equipment used for the manufacturing or repair of goods.
    Workshop,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for RoomType {
    fn from(s: String) -> RoomType {
        match s.as_ref() {
            "Basement" => RoomType::Basement,

            "Bathroom" => RoomType::Bathroom,

            "Bathroom 1" => RoomType::Bathroom1,

            "Bathroom 2" => RoomType::Bathroom2,

            "Bathroom 3" => RoomType::Bathroom3,

            "Bathroom 4" => RoomType::Bathroom4,

            "Bathroom 5" => RoomType::Bathroom5,

            "Bedroom" => RoomType::Bedroom,

            "Bedroom 1" => RoomType::Bedroom1,

            "Bedroom 2" => RoomType::Bedroom2,

            "Bedroom 3" => RoomType::Bedroom3,

            "Bedroom 4" => RoomType::Bedroom4,

            "Bedroom 5" => RoomType::Bedroom5,

            "Bonus Room" => RoomType::BonusRoom,

            "Den" => RoomType::Den,

            "Dining Room" => RoomType::DiningRoom,

            "Exercise Room" => RoomType::ExerciseRoom,

            "Family Room" => RoomType::FamilyRoom,

            "Game Room" => RoomType::GameRoom,

            "Great Room" => RoomType::GreatRoom,

            "Gym" => RoomType::Gym,

            "Kitchen" => RoomType::Kitchen,

            "Laundry" => RoomType::Laundry,

            "Library" => RoomType::Library,

            "Living Room" => RoomType::LivingRoom,

            "Loft" => RoomType::Loft,

            "Master Bathroom" => RoomType::MasterBathroom,

            "Master Bedroom" => RoomType::MasterBedroom,

            "Media Room" => RoomType::MediaRoom,

            "Office" => RoomType::Office,

            "Sauna" => RoomType::Sauna,

            "Utility Room" => RoomType::UtilityRoom,

            "Workshop" => RoomType::Workshop,

            _ => RoomType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for RoomType {
    fn from(s: &str) -> RoomType {
        match s {
            "Basement" => RoomType::Basement,

            "Bathroom" => RoomType::Bathroom,

            "Bathroom 1" => RoomType::Bathroom1,

            "Bathroom 2" => RoomType::Bathroom2,

            "Bathroom 3" => RoomType::Bathroom3,

            "Bathroom 4" => RoomType::Bathroom4,

            "Bathroom 5" => RoomType::Bathroom5,

            "Bedroom" => RoomType::Bedroom,

            "Bedroom 1" => RoomType::Bedroom1,

            "Bedroom 2" => RoomType::Bedroom2,

            "Bedroom 3" => RoomType::Bedroom3,

            "Bedroom 4" => RoomType::Bedroom4,

            "Bedroom 5" => RoomType::Bedroom5,

            "Bonus Room" => RoomType::BonusRoom,

            "Den" => RoomType::Den,

            "Dining Room" => RoomType::DiningRoom,

            "Exercise Room" => RoomType::ExerciseRoom,

            "Family Room" => RoomType::FamilyRoom,

            "Game Room" => RoomType::GameRoom,

            "Great Room" => RoomType::GreatRoom,

            "Gym" => RoomType::Gym,

            "Kitchen" => RoomType::Kitchen,

            "Laundry" => RoomType::Laundry,

            "Library" => RoomType::Library,

            "Living Room" => RoomType::LivingRoom,

            "Loft" => RoomType::Loft,

            "Master Bathroom" => RoomType::MasterBathroom,

            "Master Bedroom" => RoomType::MasterBedroom,

            "Media Room" => RoomType::MediaRoom,

            "Office" => RoomType::Office,

            "Sauna" => RoomType::Sauna,

            "Utility Room" => RoomType::UtilityRoom,

            "Workshop" => RoomType::Workshop,

            _ => RoomType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a RoomType> for &'a str {
    fn from(s: &'a RoomType) -> &'a str {
        match s {
            RoomType::Basement => "Basement",

            RoomType::Bathroom => "Bathroom",

            RoomType::Bathroom1 => "Bathroom 1",

            RoomType::Bathroom2 => "Bathroom 2",

            RoomType::Bathroom3 => "Bathroom 3",

            RoomType::Bathroom4 => "Bathroom 4",

            RoomType::Bathroom5 => "Bathroom 5",

            RoomType::Bedroom => "Bedroom",

            RoomType::Bedroom1 => "Bedroom 1",

            RoomType::Bedroom2 => "Bedroom 2",

            RoomType::Bedroom3 => "Bedroom 3",

            RoomType::Bedroom4 => "Bedroom 4",

            RoomType::Bedroom5 => "Bedroom 5",

            RoomType::BonusRoom => "Bonus Room",

            RoomType::Den => "Den",

            RoomType::DiningRoom => "Dining Room",

            RoomType::ExerciseRoom => "Exercise Room",

            RoomType::FamilyRoom => "Family Room",

            RoomType::GameRoom => "Game Room",

            RoomType::GreatRoom => "Great Room",

            RoomType::Gym => "Gym",

            RoomType::Kitchen => "Kitchen",

            RoomType::Laundry => "Laundry",

            RoomType::Library => "Library",

            RoomType::LivingRoom => "Living Room",

            RoomType::Loft => "Loft",

            RoomType::MasterBathroom => "Master Bathroom",

            RoomType::MasterBedroom => "Master Bedroom",

            RoomType::MediaRoom => "Media Room",

            RoomType::Office => "Office",

            RoomType::Sauna => "Sauna",

            RoomType::UtilityRoom => "Utility Room",

            RoomType::Workshop => "Workshop",

            RoomType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for RoomType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for RoomType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_room_type_format {
    use super::RoomType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<RoomType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<RoomType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [RuleFormat Lookups](https://ddwiki.reso.org/display/DDW17/RuleFormat+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum RuleFormat {
    /// "[$filter](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246248)": Business rules expressed utilizing the OData $filter syntax.  The underlying structure of the rules are not defined at this time and may vary from source to source.
    Filter,

    /// "[JavaScript](https://ddwiki.reso.org/display/DDW17/JavaScript)": Business rules expressed utilizing the JavaScript language.  The underlying structure of the rules are not defined at this time and may vary from source to source.
    JavaScript,

    /// "[REBR](https://ddwiki.reso.org/display/DDW17/REBR)": Real Estate Business Rule (REBR) notation, based on  RuleSpeak structured notation, uses a predictable syntax to allow humans to clearly and unambiguously specify real estate business rules.  REBR is not machine consumable and design for human production and consumption.
    REBR,

    /// "[RetsValidation](https://ddwiki.reso.org/display/DDW17/RetsValidation)": Business rules expressed using the well defined RETS 1.9 Validation Expressions.  See section 11.4.7 of the RETS 1.9 Specification for additional details. https://www.reso.org/download/rets-1-9-specification/
    RetsValidation,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for RuleFormat {
    fn from(s: String) -> RuleFormat {
        match s.as_ref() {
            "$filter" => RuleFormat::Filter,

            "JavaScript" => RuleFormat::JavaScript,

            "REBR" => RuleFormat::REBR,

            "RetsValidation" => RuleFormat::RetsValidation,

            _ => RuleFormat::OpenEnumeration(s),
        }
    }
}

impl From<&str> for RuleFormat {
    fn from(s: &str) -> RuleFormat {
        match s {
            "$filter" => RuleFormat::Filter,

            "JavaScript" => RuleFormat::JavaScript,

            "REBR" => RuleFormat::REBR,

            "RetsValidation" => RuleFormat::RetsValidation,

            _ => RuleFormat::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a RuleFormat> for &'a str {
    fn from(s: &'a RuleFormat) -> &'a str {
        match s {
            RuleFormat::Filter => "$filter",

            RuleFormat::JavaScript => "JavaScript",

            RuleFormat::REBR => "REBR",

            RuleFormat::RetsValidation => "RetsValidation",

            RuleFormat::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for RuleFormat {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for RuleFormat {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_rule_format_format {
    use super::RuleFormat;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<RuleFormat>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<RuleFormat>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ScheduleType Lookups](https://ddwiki.reso.org/display/DDW17/ScheduleType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ScheduleType {
    /// "[ASAP](https://ddwiki.reso.org/display/DDW17/ASAP)": The prospect (auto email) will be sent as soon as possible through each day. Actual time is determined by listing additions/changes that match the given criteria and by the host system's delivery policy/schedule.
    ASAP,

    /// "[Daily](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246434)": The prospect (auto email) will be sent according to the Daily Schedule.
    Daily,

    /// "[Monthly](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246435)": The prospect (auto email) will be sent once per month.
    Monthly,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ScheduleType {
    fn from(s: String) -> ScheduleType {
        match s.as_ref() {
            "ASAP" => ScheduleType::ASAP,

            "Daily" => ScheduleType::Daily,

            "Monthly" => ScheduleType::Monthly,

            _ => ScheduleType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ScheduleType {
    fn from(s: &str) -> ScheduleType {
        match s {
            "ASAP" => ScheduleType::ASAP,

            "Daily" => ScheduleType::Daily,

            "Monthly" => ScheduleType::Monthly,

            _ => ScheduleType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ScheduleType> for &'a str {
    fn from(s: &'a ScheduleType) -> &'a str {
        match s {
            ScheduleType::ASAP => "ASAP",

            ScheduleType::Daily => "Daily",

            ScheduleType::Monthly => "Monthly",

            ScheduleType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ScheduleType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ScheduleType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_schedule_type_format {
    use super::ScheduleType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ScheduleType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ScheduleType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [SearchQueryType Lookups](https://ddwiki.reso.org/display/DDW17/SearchQueryType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum SearchQueryType {
    /// "[$filter](https://ddwiki.reso.org/display/DDW17/%24filter)": The query is in the form of Odata's $filter.
    Filter,

    /// "[DMQL2](https://ddwiki.reso.org/display/DDW17/DMQL2)": The query is in the form of DMQL2.
    DMQL2,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for SearchQueryType {
    fn from(s: String) -> SearchQueryType {
        match s.as_ref() {
            "$filter" => SearchQueryType::Filter,

            "DMQL2" => SearchQueryType::DMQL2,

            _ => SearchQueryType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for SearchQueryType {
    fn from(s: &str) -> SearchQueryType {
        match s {
            "$filter" => SearchQueryType::Filter,

            "DMQL2" => SearchQueryType::DMQL2,

            _ => SearchQueryType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a SearchQueryType> for &'a str {
    fn from(s: &'a SearchQueryType) -> &'a str {
        match s {
            SearchQueryType::Filter => "$filter",

            SearchQueryType::DMQL2 => "DMQL2",

            SearchQueryType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for SearchQueryType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for SearchQueryType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_search_query_type_format {
    use super::SearchQueryType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<SearchQueryType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<SearchQueryType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [SecurityFeatures Lookups](https://ddwiki.reso.org/display/DDW17/SecurityFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum SecurityFeatures {
    /// "[24 Hour Security](https://ddwiki.reso.org/display/DDW17/24+Hour+Security)": The property has 24 hour security.
    _24HourSecurity,

    /// "[Building Security](https://ddwiki.reso.org/display/DDW17/Building+Security)": The property has building security.
    BuildingSecurity,

    /// "[Carbon Monoxide Detector(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246457)": The property has carbon monoxide detector(s).
    CarbonMonoxideDetectors,

    /// "[Closed Circuit Camera(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246458)": The property has closed circuit camera(s).
    ClosedCircuitCameras,

    /// "[Fire Alarm](https://ddwiki.reso.org/display/DDW17/Fire+Alarm)": The property has fire alarm(s).
    FireAlarm,

    /// "[Fire Escape](https://ddwiki.reso.org/display/DDW17/Fire+Escape)": The property has a fire escape.
    FireEscape,

    /// "[Fire Sprinkler System](https://ddwiki.reso.org/display/DDW17/Fire+Sprinkler+System)": The property has a fire sprinkler system.
    FireSprinklerSystem,

    /// "[Firewall(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246462)": The property has firewall(s).
    Firewalls,

    /// "[Gated Community](https://ddwiki.reso.org/display/DDW17/Gated+Community)": The property is in a gated community.
    GatedCommunity,

    /// "[Gated with Guard](https://ddwiki.reso.org/display/DDW17/Gated+with+Guard)": The property is in a gated community/area with guard service.
    GatedwithGuard,

    /// "[Key Card Entry](https://ddwiki.reso.org/display/DDW17/Key+Card+Entry)": The property or community has key card entry.
    KeyCardEntry,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246466)": The property has security features other than those in this list.
    Other,

    /// "[Panic Alarm](https://ddwiki.reso.org/display/DDW17/Panic+Alarm)": The property has a panic alarm.
    PanicAlarm,

    /// "[Prewired](https://ddwiki.reso.org/display/DDW17/Prewired)": The property is prewired for a security system.
    Prewired,

    /// "[Secured Garage/Parking](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246469)": The property has a secured garage or parking area.
    SecuredGarageParking,

    /// "[Security Fence](https://ddwiki.reso.org/display/DDW17/Security+Fence)": The property has a security fence.
    SecurityFence,

    /// "[Security Gate](https://ddwiki.reso.org/display/DDW17/Security+Gate)": The property has a security gate.
    SecurityGate,

    /// "[Security Guard](https://ddwiki.reso.org/display/DDW17/Security+Guard)": The property or community has a security guard.
    SecurityGuard,

    /// "[Security Lights](https://ddwiki.reso.org/display/DDW17/Security+Lights)": The property has security lights.
    SecurityLights,

    /// "[Security Service](https://ddwiki.reso.org/display/DDW17/Security+Service)": The property has a security service.
    SecurityService,

    /// "[Security System](https://ddwiki.reso.org/display/DDW17/Security+System)": The property has a security system.
    SecuritySystem,

    /// "[Security System Leased](https://ddwiki.reso.org/display/DDW17/Security+System+Leased)": The property has a leased security system.
    SecuritySystemLeased,

    /// "[Security System Owned](https://ddwiki.reso.org/display/DDW17/Security+System+Owned)": The property has an owned security system.
    SecuritySystemOwned,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246478)": See the remarks fields for more information about the security features of the property.
    SeeRemarks,

    /// "[Smoke Detector(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246479)": The property has smoke detector(s).
    SmokeDetectors,

    /// "[Varies By Unit](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246480)": The security features vary from unit to unit.
    VariesByUnit,

    /// "[Window Bars](https://ddwiki.reso.org/display/DDW17/Window+Bars)": The property has window bars.
    WindowBars,

    /// "[Window Bars with Quick Release](https://ddwiki.reso.org/display/DDW17/Window+Bars+with+Quick+Release)": The property has window bars with a quick release mechanism.
    WindowBarswithQuickRelease,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for SecurityFeatures {
    fn from(s: String) -> SecurityFeatures {
        match s.as_ref() {
            "24 Hour Security" => SecurityFeatures::_24HourSecurity,

            "Building Security" => SecurityFeatures::BuildingSecurity,

            "Carbon Monoxide Detector(s)" => SecurityFeatures::CarbonMonoxideDetectors,

            "Closed Circuit Camera(s)" => SecurityFeatures::ClosedCircuitCameras,

            "Fire Alarm" => SecurityFeatures::FireAlarm,

            "Fire Escape" => SecurityFeatures::FireEscape,

            "Fire Sprinkler System" => SecurityFeatures::FireSprinklerSystem,

            "Firewall(s)" => SecurityFeatures::Firewalls,

            "Gated Community" => SecurityFeatures::GatedCommunity,

            "Gated with Guard" => SecurityFeatures::GatedwithGuard,

            "Key Card Entry" => SecurityFeatures::KeyCardEntry,

            "Other" => SecurityFeatures::Other,

            "Panic Alarm" => SecurityFeatures::PanicAlarm,

            "Prewired" => SecurityFeatures::Prewired,

            "Secured Garage/Parking" => SecurityFeatures::SecuredGarageParking,

            "Security Fence" => SecurityFeatures::SecurityFence,

            "Security Gate" => SecurityFeatures::SecurityGate,

            "Security Guard" => SecurityFeatures::SecurityGuard,

            "Security Lights" => SecurityFeatures::SecurityLights,

            "Security Service" => SecurityFeatures::SecurityService,

            "Security System" => SecurityFeatures::SecuritySystem,

            "Security System Leased" => SecurityFeatures::SecuritySystemLeased,

            "Security System Owned" => SecurityFeatures::SecuritySystemOwned,

            "See Remarks" => SecurityFeatures::SeeRemarks,

            "Smoke Detector(s)" => SecurityFeatures::SmokeDetectors,

            "Varies By Unit" => SecurityFeatures::VariesByUnit,

            "Window Bars" => SecurityFeatures::WindowBars,

            "Window Bars with Quick Release" => SecurityFeatures::WindowBarswithQuickRelease,

            _ => SecurityFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for SecurityFeatures {
    fn from(s: &str) -> SecurityFeatures {
        match s {
            "24 Hour Security" => SecurityFeatures::_24HourSecurity,

            "Building Security" => SecurityFeatures::BuildingSecurity,

            "Carbon Monoxide Detector(s)" => SecurityFeatures::CarbonMonoxideDetectors,

            "Closed Circuit Camera(s)" => SecurityFeatures::ClosedCircuitCameras,

            "Fire Alarm" => SecurityFeatures::FireAlarm,

            "Fire Escape" => SecurityFeatures::FireEscape,

            "Fire Sprinkler System" => SecurityFeatures::FireSprinklerSystem,

            "Firewall(s)" => SecurityFeatures::Firewalls,

            "Gated Community" => SecurityFeatures::GatedCommunity,

            "Gated with Guard" => SecurityFeatures::GatedwithGuard,

            "Key Card Entry" => SecurityFeatures::KeyCardEntry,

            "Other" => SecurityFeatures::Other,

            "Panic Alarm" => SecurityFeatures::PanicAlarm,

            "Prewired" => SecurityFeatures::Prewired,

            "Secured Garage/Parking" => SecurityFeatures::SecuredGarageParking,

            "Security Fence" => SecurityFeatures::SecurityFence,

            "Security Gate" => SecurityFeatures::SecurityGate,

            "Security Guard" => SecurityFeatures::SecurityGuard,

            "Security Lights" => SecurityFeatures::SecurityLights,

            "Security Service" => SecurityFeatures::SecurityService,

            "Security System" => SecurityFeatures::SecuritySystem,

            "Security System Leased" => SecurityFeatures::SecuritySystemLeased,

            "Security System Owned" => SecurityFeatures::SecuritySystemOwned,

            "See Remarks" => SecurityFeatures::SeeRemarks,

            "Smoke Detector(s)" => SecurityFeatures::SmokeDetectors,

            "Varies By Unit" => SecurityFeatures::VariesByUnit,

            "Window Bars" => SecurityFeatures::WindowBars,

            "Window Bars with Quick Release" => SecurityFeatures::WindowBarswithQuickRelease,

            _ => SecurityFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a SecurityFeatures> for &'a str {
    fn from(s: &'a SecurityFeatures) -> &'a str {
        match s {
            SecurityFeatures::_24HourSecurity => "24 Hour Security",

            SecurityFeatures::BuildingSecurity => "Building Security",

            SecurityFeatures::CarbonMonoxideDetectors => "Carbon Monoxide Detector(s)",

            SecurityFeatures::ClosedCircuitCameras => "Closed Circuit Camera(s)",

            SecurityFeatures::FireAlarm => "Fire Alarm",

            SecurityFeatures::FireEscape => "Fire Escape",

            SecurityFeatures::FireSprinklerSystem => "Fire Sprinkler System",

            SecurityFeatures::Firewalls => "Firewall(s)",

            SecurityFeatures::GatedCommunity => "Gated Community",

            SecurityFeatures::GatedwithGuard => "Gated with Guard",

            SecurityFeatures::KeyCardEntry => "Key Card Entry",

            SecurityFeatures::Other => "Other",

            SecurityFeatures::PanicAlarm => "Panic Alarm",

            SecurityFeatures::Prewired => "Prewired",

            SecurityFeatures::SecuredGarageParking => "Secured Garage/Parking",

            SecurityFeatures::SecurityFence => "Security Fence",

            SecurityFeatures::SecurityGate => "Security Gate",

            SecurityFeatures::SecurityGuard => "Security Guard",

            SecurityFeatures::SecurityLights => "Security Lights",

            SecurityFeatures::SecurityService => "Security Service",

            SecurityFeatures::SecuritySystem => "Security System",

            SecurityFeatures::SecuritySystemLeased => "Security System Leased",

            SecurityFeatures::SecuritySystemOwned => "Security System Owned",

            SecurityFeatures::SeeRemarks => "See Remarks",

            SecurityFeatures::SmokeDetectors => "Smoke Detector(s)",

            SecurityFeatures::VariesByUnit => "Varies By Unit",

            SecurityFeatures::WindowBars => "Window Bars",

            SecurityFeatures::WindowBarswithQuickRelease => "Window Bars with Quick Release",

            SecurityFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for SecurityFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for SecurityFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_security_features_format {
    use super::SecurityFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<SecurityFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<SecurityFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Sewer Lookups](https://ddwiki.reso.org/display/DDW17/Sewer+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Sewer {
    /// "[Aerobic Septic](https://ddwiki.reso.org/display/DDW17/Aerobic+Septic)": The property has an aerobic septic.
    AerobicSeptic,

    /// "[Cesspool](https://ddwiki.reso.org/display/DDW17/Cesspool)": The property has a cesspool.
    Cesspool,

    /// "[Engineered Septic](https://ddwiki.reso.org/display/DDW17/Engineered+Septic)": The property has an engineered septic.
    EngineeredSeptic,

    /// "[Holding Tank](https://ddwiki.reso.org/display/DDW17/Holding+Tank)": The property has a holding tank.
    HoldingTank,

    /// "[Mound Septic](https://ddwiki.reso.org/display/DDW17/Mound+Septic)": The property has a mound septic.
    MoundSeptic,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246259)": The property has no sewer, septic or cesspool.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246260)": The property has a system other than sewer, sceptic or cesspool in this list.
    Other,

    /// "[Perc Test On File](https://ddwiki.reso.org/display/DDW17/Perc+Test+On+File)": The property has a perc test on file.
    PercTestOnFile,

    /// "[Perc Test Required](https://ddwiki.reso.org/display/DDW17/Perc+Test+Required)": The property requires a perc test.
    PercTestRequired,

    /// "[Private Sewer](https://ddwiki.reso.org/display/DDW17/Private+Sewer)": The property has a private sewer.
    PrivateSewer,

    /// "[Public Sewer](https://ddwiki.reso.org/display/DDW17/Public+Sewer)": The property has a public sewer.
    PublicSewer,

    /// "[Septic Needed](https://ddwiki.reso.org/display/DDW17/Septic+Needed)": The property needs a septic system.
    SepticNeeded,

    /// "[Septic Tank](https://ddwiki.reso.org/display/DDW17/Septic+Tank)": The property has a septic tank.
    SepticTank,

    /// "[Shared Septic](https://ddwiki.reso.org/display/DDW17/Shared+Septic)": The property has a shared septic.
    SharedSeptic,

    /// "[Unknown](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246268)": The property's sewer/septic is unknown.
    Unknown,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Sewer {
    fn from(s: String) -> Sewer {
        match s.as_ref() {
            "Aerobic Septic" => Sewer::AerobicSeptic,

            "Cesspool" => Sewer::Cesspool,

            "Engineered Septic" => Sewer::EngineeredSeptic,

            "Holding Tank" => Sewer::HoldingTank,

            "Mound Septic" => Sewer::MoundSeptic,

            "None" => Sewer::None,

            "Other" => Sewer::Other,

            "Perc Test On File" => Sewer::PercTestOnFile,

            "Perc Test Required" => Sewer::PercTestRequired,

            "Private Sewer" => Sewer::PrivateSewer,

            "Public Sewer" => Sewer::PublicSewer,

            "Septic Needed" => Sewer::SepticNeeded,

            "Septic Tank" => Sewer::SepticTank,

            "Shared Septic" => Sewer::SharedSeptic,

            "Unknown" => Sewer::Unknown,

            _ => Sewer::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Sewer {
    fn from(s: &str) -> Sewer {
        match s {
            "Aerobic Septic" => Sewer::AerobicSeptic,

            "Cesspool" => Sewer::Cesspool,

            "Engineered Septic" => Sewer::EngineeredSeptic,

            "Holding Tank" => Sewer::HoldingTank,

            "Mound Septic" => Sewer::MoundSeptic,

            "None" => Sewer::None,

            "Other" => Sewer::Other,

            "Perc Test On File" => Sewer::PercTestOnFile,

            "Perc Test Required" => Sewer::PercTestRequired,

            "Private Sewer" => Sewer::PrivateSewer,

            "Public Sewer" => Sewer::PublicSewer,

            "Septic Needed" => Sewer::SepticNeeded,

            "Septic Tank" => Sewer::SepticTank,

            "Shared Septic" => Sewer::SharedSeptic,

            "Unknown" => Sewer::Unknown,

            _ => Sewer::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Sewer> for &'a str {
    fn from(s: &'a Sewer) -> &'a str {
        match s {
            Sewer::AerobicSeptic => "Aerobic Septic",

            Sewer::Cesspool => "Cesspool",

            Sewer::EngineeredSeptic => "Engineered Septic",

            Sewer::HoldingTank => "Holding Tank",

            Sewer::MoundSeptic => "Mound Septic",

            Sewer::None => "None",

            Sewer::Other => "Other",

            Sewer::PercTestOnFile => "Perc Test On File",

            Sewer::PercTestRequired => "Perc Test Required",

            Sewer::PrivateSewer => "Private Sewer",

            Sewer::PublicSewer => "Public Sewer",

            Sewer::SepticNeeded => "Septic Needed",

            Sewer::SepticTank => "Septic Tank",

            Sewer::SharedSeptic => "Shared Septic",

            Sewer::Unknown => "Unknown",

            Sewer::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Sewer {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Sewer {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_sewer_format {
    use super::Sewer;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(items: &Option<Vec<Sewer>>, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Sewer>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ShowingContactType Lookups](https://ddwiki.reso.org/display/DDW17/ShowingContactType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ShowingContactType {
    /// "[Agent](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246270)": The showing contact is a licensed agent.
    Agent,

    /// "[Occupant](https://ddwiki.reso.org/display/DDW17/Occupant)": The showing contact is the occupant.
    Occupant,

    /// "[Owner](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246272)": The showing contact is the owner.
    Owner,

    /// "[Property Manager](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246273)": The showing contact is the property manager.
    PropertyManager,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ShowingContactType {
    fn from(s: String) -> ShowingContactType {
        match s.as_ref() {
            "Agent" => ShowingContactType::Agent,

            "Occupant" => ShowingContactType::Occupant,

            "Owner" => ShowingContactType::Owner,

            "Property Manager" => ShowingContactType::PropertyManager,

            _ => ShowingContactType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ShowingContactType {
    fn from(s: &str) -> ShowingContactType {
        match s {
            "Agent" => ShowingContactType::Agent,

            "Occupant" => ShowingContactType::Occupant,

            "Owner" => ShowingContactType::Owner,

            "Property Manager" => ShowingContactType::PropertyManager,

            _ => ShowingContactType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ShowingContactType> for &'a str {
    fn from(s: &'a ShowingContactType) -> &'a str {
        match s {
            ShowingContactType::Agent => "Agent",

            ShowingContactType::Occupant => "Occupant",

            ShowingContactType::Owner => "Owner",

            ShowingContactType::PropertyManager => "Property Manager",

            ShowingContactType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ShowingContactType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ShowingContactType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_showing_contact_type_format {
    use super::ShowingContactType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ShowingContactType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ShowingContactType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [ShowingRequirements Lookups](https://ddwiki.reso.org/display/DDW17/ShowingRequirements+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum ShowingRequirements {
    /// "[24 Hour Notice](https://ddwiki.reso.org/display/DDW17/24+Hour+Notice)": A 24 hour notice is required to show the property.
    _24HourNotice,

    /// "[Appointment Only](https://ddwiki.reso.org/display/DDW17/Appointment+Only)": Showing of the property is by appointment only.
    AppointmentOnly,

    /// "[Call Listing Agent](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246486)": Call the listing agent to arrange a showing of the property.
    CallListingAgent,

    /// "[Call Listing Office](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246487)": Call the listing office to arrange a showing of the property.
    CallListingOffice,

    /// "[Call Manager](https://ddwiki.reso.org/display/DDW17/Call+Manager)": Call the property manage to arrange a showing of the property.
    CallManager,

    /// "[Call Owner](https://ddwiki.reso.org/display/DDW17/Call+Owner)": Call the property owner to arrange a showing of the property.
    CallOwner,

    /// "[Call Tenant](https://ddwiki.reso.org/display/DDW17/Call+Tenant)": Call the tenant/occupant directly to arrange a showing of the property.
    CallTenant,

    /// "[Combination Lock Box](https://ddwiki.reso.org/display/DDW17/Combination+Lock+Box)": The property has a combination lock box for showing access.
    CombinationLockBox,

    /// "[Day Sleeper](https://ddwiki.reso.org/display/DDW17/Day+Sleeper)": The property has a tenant/occupant who sleeps during the day.
    DaySleeper,

    /// "[Do Not Show](https://ddwiki.reso.org/display/DDW17/Do+Not+Show)": Do not show this property.
    DoNotShow,

    /// "[Email Listing Agent](https://ddwiki.reso.org/display/DDW17/Email+Listing+Agent)": Email the listing agent for more information about showing the property.
    EmailListingAgent,

    /// "[Key In Office](https://ddwiki.reso.org/display/DDW17/Key+In+Office)": The key to access the property for showing must be retrieved from the listing or manager's office.
    KeyInOffice,

    /// "[Lockbox](https://ddwiki.reso.org/display/DDW17/Lockbox)": The property has an electronic lockbox for showing access.
    Lockbox,

    /// "[No Lockbox](https://ddwiki.reso.org/display/DDW17/No+Lockbox)": There is no lockbox on the property.
    NoLockbox,

    /// "[No Sign](https://ddwiki.reso.org/display/DDW17/No+Sign)": The property has no for sale sign.
    NoSign,

    /// "[Occupied](https://ddwiki.reso.org/display/DDW17/Occupied)": The property is currently occupied.
    Occupied,

    /// "[Pet(s) on Premises](https://ddwiki.reso.org/display/DDW17/Pet%28s%29+on+Premises)": There are currently pets at the property.
    PetsonPremises,

    /// "[Restricted Hours](https://ddwiki.reso.org/display/DDW17/Restricted+Hours)": The times when the property may be shown are restricted.
    RestrictedHours,

    /// "[Security System](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246502)": The property has a security system that is a consideration when showing.
    SecuritySystem,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246503)": See the remarks fields for more information about showing the property.
    SeeRemarks,

    /// "[Showing Service](https://ddwiki.reso.org/display/DDW17/Showing+Service)": A service used by a listing broker to provide showing services of listed properties.
    ShowingService,

    /// "[Text Listing Agent](https://ddwiki.reso.org/display/DDW17/Text+Listing+Agent)": Text message the listing agent to arrange a showing of the property.
    TextListingAgent,

    /// "[To Be Built](https://ddwiki.reso.org/display/DDW17/To+Be+Built)": The property has yet to be built.
    ToBeBuilt,

    /// "[Under Construction](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246506)": The property is under construction.
    UnderConstruction,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for ShowingRequirements {
    fn from(s: String) -> ShowingRequirements {
        match s.as_ref() {
            "24 Hour Notice" => ShowingRequirements::_24HourNotice,

            "Appointment Only" => ShowingRequirements::AppointmentOnly,

            "Call Listing Agent" => ShowingRequirements::CallListingAgent,

            "Call Listing Office" => ShowingRequirements::CallListingOffice,

            "Call Manager" => ShowingRequirements::CallManager,

            "Call Owner" => ShowingRequirements::CallOwner,

            "Call Tenant" => ShowingRequirements::CallTenant,

            "Combination Lock Box" => ShowingRequirements::CombinationLockBox,

            "Day Sleeper" => ShowingRequirements::DaySleeper,

            "Do Not Show" => ShowingRequirements::DoNotShow,

            "Email Listing Agent" => ShowingRequirements::EmailListingAgent,

            "Key In Office" => ShowingRequirements::KeyInOffice,

            "Lockbox" => ShowingRequirements::Lockbox,

            "No Lockbox" => ShowingRequirements::NoLockbox,

            "No Sign" => ShowingRequirements::NoSign,

            "Occupied" => ShowingRequirements::Occupied,

            "Pet(s) on Premises" => ShowingRequirements::PetsonPremises,

            "Restricted Hours" => ShowingRequirements::RestrictedHours,

            "Security System" => ShowingRequirements::SecuritySystem,

            "See Remarks" => ShowingRequirements::SeeRemarks,

            "Showing Service" => ShowingRequirements::ShowingService,

            "Text Listing Agent" => ShowingRequirements::TextListingAgent,

            "To Be Built" => ShowingRequirements::ToBeBuilt,

            "Under Construction" => ShowingRequirements::UnderConstruction,

            _ => ShowingRequirements::OpenEnumeration(s),
        }
    }
}

impl From<&str> for ShowingRequirements {
    fn from(s: &str) -> ShowingRequirements {
        match s {
            "24 Hour Notice" => ShowingRequirements::_24HourNotice,

            "Appointment Only" => ShowingRequirements::AppointmentOnly,

            "Call Listing Agent" => ShowingRequirements::CallListingAgent,

            "Call Listing Office" => ShowingRequirements::CallListingOffice,

            "Call Manager" => ShowingRequirements::CallManager,

            "Call Owner" => ShowingRequirements::CallOwner,

            "Call Tenant" => ShowingRequirements::CallTenant,

            "Combination Lock Box" => ShowingRequirements::CombinationLockBox,

            "Day Sleeper" => ShowingRequirements::DaySleeper,

            "Do Not Show" => ShowingRequirements::DoNotShow,

            "Email Listing Agent" => ShowingRequirements::EmailListingAgent,

            "Key In Office" => ShowingRequirements::KeyInOffice,

            "Lockbox" => ShowingRequirements::Lockbox,

            "No Lockbox" => ShowingRequirements::NoLockbox,

            "No Sign" => ShowingRequirements::NoSign,

            "Occupied" => ShowingRequirements::Occupied,

            "Pet(s) on Premises" => ShowingRequirements::PetsonPremises,

            "Restricted Hours" => ShowingRequirements::RestrictedHours,

            "Security System" => ShowingRequirements::SecuritySystem,

            "See Remarks" => ShowingRequirements::SeeRemarks,

            "Showing Service" => ShowingRequirements::ShowingService,

            "Text Listing Agent" => ShowingRequirements::TextListingAgent,

            "To Be Built" => ShowingRequirements::ToBeBuilt,

            "Under Construction" => ShowingRequirements::UnderConstruction,

            _ => ShowingRequirements::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a ShowingRequirements> for &'a str {
    fn from(s: &'a ShowingRequirements) -> &'a str {
        match s {
            ShowingRequirements::_24HourNotice => "24 Hour Notice",

            ShowingRequirements::AppointmentOnly => "Appointment Only",

            ShowingRequirements::CallListingAgent => "Call Listing Agent",

            ShowingRequirements::CallListingOffice => "Call Listing Office",

            ShowingRequirements::CallManager => "Call Manager",

            ShowingRequirements::CallOwner => "Call Owner",

            ShowingRequirements::CallTenant => "Call Tenant",

            ShowingRequirements::CombinationLockBox => "Combination Lock Box",

            ShowingRequirements::DaySleeper => "Day Sleeper",

            ShowingRequirements::DoNotShow => "Do Not Show",

            ShowingRequirements::EmailListingAgent => "Email Listing Agent",

            ShowingRequirements::KeyInOffice => "Key In Office",

            ShowingRequirements::Lockbox => "Lockbox",

            ShowingRequirements::NoLockbox => "No Lockbox",

            ShowingRequirements::NoSign => "No Sign",

            ShowingRequirements::Occupied => "Occupied",

            ShowingRequirements::PetsonPremises => "Pet(s) on Premises",

            ShowingRequirements::RestrictedHours => "Restricted Hours",

            ShowingRequirements::SecuritySystem => "Security System",

            ShowingRequirements::SeeRemarks => "See Remarks",

            ShowingRequirements::ShowingService => "Showing Service",

            ShowingRequirements::TextListingAgent => "Text Listing Agent",

            ShowingRequirements::ToBeBuilt => "To Be Built",

            ShowingRequirements::UnderConstruction => "Under Construction",

            ShowingRequirements::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for ShowingRequirements {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for ShowingRequirements {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_showing_requirements_format {
    use super::ShowingRequirements;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<ShowingRequirements>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<ShowingRequirements>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Skirt Lookups](https://ddwiki.reso.org/display/DDW17/Skirt+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Skirt {
    /// "[Aluminum](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246275)": The mobile/manufactured home has a skirt made of aluminum.
    Aluminum,

    /// "[Block](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246276)": The mobile/manufactured home has a skirt made of block.
    Block,

    /// "[Brick](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246277)": The mobile/manufactured home has a skirt made of brick.
    Brick,

    /// "[Combination](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246278)": The mobile/manufactured home has a skirt made of a combination of materials.
    Combination,

    /// "[Concrete](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246279)": The mobile/manufactured home has a skirt made of concrete.
    Concrete,

    /// "[Fiberglass](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246280)": The mobile/manufactured home has a skirt made of fiberglass.
    Fiberglass,

    /// "[Frame](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246281)": The mobile/manufactured home has a skirt that is framed.
    Frame,

    /// "[Glass](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246282)": The mobile/manufactured home has a skirt made of glass.
    Glass,

    /// "[Masonite](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246283)": The mobile/manufactured home has a skirt made of Masonite.
    Masonite,

    /// "[Metal](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246284)": The mobile/manufactured home has a skirt made of metal.
    Metal,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246285)": The mobile/manufactured home does not have a skirt.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246286)": The mobile/manufactured home has a skirt made of materials other than those in this list.
    Other,

    /// "[Steel](https://ddwiki.reso.org/display/DDW17/Steel)": The mobile/manufactured home has a skirt made of steel.
    Steel,

    /// "[Stone](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246288)": The mobile/manufactured home has a skirt made of stone.
    Stone,

    /// "[Stucco](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246289)": The mobile/manufactured home has a skirt made of stucco.
    Stucco,

    /// "[Synthetic](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246290)": The mobile/manufactured home has a skirt made of synthetic materials.
    Synthetic,

    /// "[Unknown](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246291)": The mobile/manufactured home has a skirt made of unknown materials.
    Unknown,

    /// "[Vinyl](https://ddwiki.reso.org/display/DDW17/Vinyl)": The mobile/manufactured home has a skirt made of vinyl.
    Vinyl,

    /// "[Wood](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246293)": The mobile/manufactured home has a skirt made of wood.
    Wood,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Skirt {
    fn from(s: String) -> Skirt {
        match s.as_ref() {
            "Aluminum" => Skirt::Aluminum,

            "Block" => Skirt::Block,

            "Brick" => Skirt::Brick,

            "Combination" => Skirt::Combination,

            "Concrete" => Skirt::Concrete,

            "Fiberglass" => Skirt::Fiberglass,

            "Frame" => Skirt::Frame,

            "Glass" => Skirt::Glass,

            "Masonite" => Skirt::Masonite,

            "Metal" => Skirt::Metal,

            "None" => Skirt::None,

            "Other" => Skirt::Other,

            "Steel" => Skirt::Steel,

            "Stone" => Skirt::Stone,

            "Stucco" => Skirt::Stucco,

            "Synthetic" => Skirt::Synthetic,

            "Unknown" => Skirt::Unknown,

            "Vinyl" => Skirt::Vinyl,

            "Wood" => Skirt::Wood,

            _ => Skirt::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Skirt {
    fn from(s: &str) -> Skirt {
        match s {
            "Aluminum" => Skirt::Aluminum,

            "Block" => Skirt::Block,

            "Brick" => Skirt::Brick,

            "Combination" => Skirt::Combination,

            "Concrete" => Skirt::Concrete,

            "Fiberglass" => Skirt::Fiberglass,

            "Frame" => Skirt::Frame,

            "Glass" => Skirt::Glass,

            "Masonite" => Skirt::Masonite,

            "Metal" => Skirt::Metal,

            "None" => Skirt::None,

            "Other" => Skirt::Other,

            "Steel" => Skirt::Steel,

            "Stone" => Skirt::Stone,

            "Stucco" => Skirt::Stucco,

            "Synthetic" => Skirt::Synthetic,

            "Unknown" => Skirt::Unknown,

            "Vinyl" => Skirt::Vinyl,

            "Wood" => Skirt::Wood,

            _ => Skirt::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Skirt> for &'a str {
    fn from(s: &'a Skirt) -> &'a str {
        match s {
            Skirt::Aluminum => "Aluminum",

            Skirt::Block => "Block",

            Skirt::Brick => "Brick",

            Skirt::Combination => "Combination",

            Skirt::Concrete => "Concrete",

            Skirt::Fiberglass => "Fiberglass",

            Skirt::Frame => "Frame",

            Skirt::Glass => "Glass",

            Skirt::Masonite => "Masonite",

            Skirt::Metal => "Metal",

            Skirt::None => "None",

            Skirt::Other => "Other",

            Skirt::Steel => "Steel",

            Skirt::Stone => "Stone",

            Skirt::Stucco => "Stucco",

            Skirt::Synthetic => "Synthetic",

            Skirt::Unknown => "Unknown",

            Skirt::Vinyl => "Vinyl",

            Skirt::Wood => "Wood",

            Skirt::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Skirt {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Skirt {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_skirt_format {
    use super::Skirt;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(items: &Option<Vec<Skirt>>, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Skirt>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [SocialMediaType Lookups](https://ddwiki.reso.org/display/DDW17/SocialMediaType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum SocialMediaType {
    /// "[Blog](https://ddwiki.reso.org/display/DDW17/Blog)": SocialMedia[Type]UrlOrId has a URL or ID that relates to the member/office/contact's blog.
    Blog,

    /// "[Digg](https://ddwiki.reso.org/display/DDW17/Digg)": SocialMedia[Type]UrlOrId has a URL or ID that relates to Digg.
    Digg,

    /// "[Facebook](https://ddwiki.reso.org/display/DDW17/Facebook)": SocialMedia[Type]UrlOrId has a URL or ID that relates to Facebook.
    Facebook,

    /// "[Facebook Messenger](https://ddwiki.reso.org/display/DDW17/Facebook+Messenger)": SocialMedia[Type]UrlOrId has a URL or ID that relates to Facebook Messenger.
    FacebookMessenger,

    /// "[GooglePlus](https://ddwiki.reso.org/display/DDW17/GooglePlus)": SocialMedia[Type]UrlOrId has a URL or ID that relates to GooglePlus.
    GooglePlus,

    /// "[iMessage](https://ddwiki.reso.org/display/DDW17/iMessage)": SocialMedia[Type]UrlOrId has a URL or ID that relates to iMessage.
    IMessage,

    /// "[Instagram](https://ddwiki.reso.org/display/DDW17/Instagram)": SocialMedia[Type]UrlOrId has a URL or ID that relates to Instagram.
    Instagram,

    /// "[LinkedIn](https://ddwiki.reso.org/display/DDW17/LinkedIn)": SocialMedia[Type]UrlOrId has a URL or ID that relates to LinkedIn.
    LinkedIn,

    /// "[Pinterest](https://ddwiki.reso.org/display/DDW17/Pinterest)": SocialMedia[Type]UrlOrId has a URL or ID that relates to Pinterest.
    Pinterest,

    /// "[Reddit](https://ddwiki.reso.org/display/DDW17/Reddit)": SocialMedia[Type]UrlOrId has a URL or ID that relates to Reddit.
    Reddit,

    /// "[Slack](https://ddwiki.reso.org/display/DDW17/Slack)": SocialMedia[Type]UrlOrId has a URL or ID that relates to Slack.
    Slack,

    /// "[Snapchat](https://ddwiki.reso.org/display/DDW17/Snapchat)": SocialMedia[Type]UrlOrId has a URL or ID that relates to Snapchat.
    Snapchat,

    /// "[StumbleUpon](https://ddwiki.reso.org/display/DDW17/StumbleUpon)": SocialMedia[Type]UrlOrId has a URL or ID that relates to StumbleUpon.
    StumbleUpon,

    /// "[Tumblr](https://ddwiki.reso.org/display/DDW17/Tumblr)": SocialMedia[Type]UrlOrId has a URL or ID that relates to Tumblr.
    Tumblr,

    /// "[Twitter](https://ddwiki.reso.org/display/DDW17/Twitter)": SocialMedia[Type]UrlOrId has a URL or ID that relates to Twitter.
    Twitter,

    /// "[Website](https://ddwiki.reso.org/display/DDW17/Website)": SocialMedia[Type]UrlOrId has a URL or ID that relates to the member/office/contact's website.
    Website,

    /// "[YouTube](https://ddwiki.reso.org/display/DDW17/YouTube)": SocialMedia[Type]UrlOrId has a URL or ID that relates to YouTube.
    YouTube,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for SocialMediaType {
    fn from(s: String) -> SocialMediaType {
        match s.as_ref() {
            "Blog" => SocialMediaType::Blog,

            "Digg" => SocialMediaType::Digg,

            "Facebook" => SocialMediaType::Facebook,

            "Facebook Messenger" => SocialMediaType::FacebookMessenger,

            "GooglePlus" => SocialMediaType::GooglePlus,

            "iMessage" => SocialMediaType::IMessage,

            "Instagram" => SocialMediaType::Instagram,

            "LinkedIn" => SocialMediaType::LinkedIn,

            "Pinterest" => SocialMediaType::Pinterest,

            "Reddit" => SocialMediaType::Reddit,

            "Slack" => SocialMediaType::Slack,

            "Snapchat" => SocialMediaType::Snapchat,

            "StumbleUpon" => SocialMediaType::StumbleUpon,

            "Tumblr" => SocialMediaType::Tumblr,

            "Twitter" => SocialMediaType::Twitter,

            "Website" => SocialMediaType::Website,

            "YouTube" => SocialMediaType::YouTube,

            _ => SocialMediaType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for SocialMediaType {
    fn from(s: &str) -> SocialMediaType {
        match s {
            "Blog" => SocialMediaType::Blog,

            "Digg" => SocialMediaType::Digg,

            "Facebook" => SocialMediaType::Facebook,

            "Facebook Messenger" => SocialMediaType::FacebookMessenger,

            "GooglePlus" => SocialMediaType::GooglePlus,

            "iMessage" => SocialMediaType::IMessage,

            "Instagram" => SocialMediaType::Instagram,

            "LinkedIn" => SocialMediaType::LinkedIn,

            "Pinterest" => SocialMediaType::Pinterest,

            "Reddit" => SocialMediaType::Reddit,

            "Slack" => SocialMediaType::Slack,

            "Snapchat" => SocialMediaType::Snapchat,

            "StumbleUpon" => SocialMediaType::StumbleUpon,

            "Tumblr" => SocialMediaType::Tumblr,

            "Twitter" => SocialMediaType::Twitter,

            "Website" => SocialMediaType::Website,

            "YouTube" => SocialMediaType::YouTube,

            _ => SocialMediaType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a SocialMediaType> for &'a str {
    fn from(s: &'a SocialMediaType) -> &'a str {
        match s {
            SocialMediaType::Blog => "Blog",

            SocialMediaType::Digg => "Digg",

            SocialMediaType::Facebook => "Facebook",

            SocialMediaType::FacebookMessenger => "Facebook Messenger",

            SocialMediaType::GooglePlus => "GooglePlus",

            SocialMediaType::IMessage => "iMessage",

            SocialMediaType::Instagram => "Instagram",

            SocialMediaType::LinkedIn => "LinkedIn",

            SocialMediaType::Pinterest => "Pinterest",

            SocialMediaType::Reddit => "Reddit",

            SocialMediaType::Slack => "Slack",

            SocialMediaType::Snapchat => "Snapchat",

            SocialMediaType::StumbleUpon => "StumbleUpon",

            SocialMediaType::Tumblr => "Tumblr",

            SocialMediaType::Twitter => "Twitter",

            SocialMediaType::Website => "Website",

            SocialMediaType::YouTube => "YouTube",

            SocialMediaType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for SocialMediaType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for SocialMediaType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_social_media_type_format {
    use super::SocialMediaType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<SocialMediaType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<SocialMediaType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [SpaFeatures Lookups](https://ddwiki.reso.org/display/DDW17/SpaFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum SpaFeatures {
    /// "[Above Ground](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246509)": The spa is not built into the ground.
    AboveGround,

    /// "[Bath](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246510)": The bath has a built in spa/jets.
    Bath,

    /// "[Community](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246511)": The property has access to a community spa.
    Community,

    /// "[Fiberglass](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246512)": The spa is lined or made of fiberglass.
    Fiberglass,

    /// "[Gunite](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246513)": The spa is lined with gunite.
    Gunite,

    /// "[Heated](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246514)": The spa is heated.
    Heated,

    /// "[In Ground](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246515)": The spa is built into the ground.
    InGround,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246516)": The property has no spa.
    None,

    /// "[Private](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246517)": The spa is privately owned or is secluded.
    Private,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246518)": See the remarks fields for more information about the spa.
    SeeRemarks,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for SpaFeatures {
    fn from(s: String) -> SpaFeatures {
        match s.as_ref() {
            "Above Ground" => SpaFeatures::AboveGround,

            "Bath" => SpaFeatures::Bath,

            "Community" => SpaFeatures::Community,

            "Fiberglass" => SpaFeatures::Fiberglass,

            "Gunite" => SpaFeatures::Gunite,

            "Heated" => SpaFeatures::Heated,

            "In Ground" => SpaFeatures::InGround,

            "None" => SpaFeatures::None,

            "Private" => SpaFeatures::Private,

            "See Remarks" => SpaFeatures::SeeRemarks,

            _ => SpaFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for SpaFeatures {
    fn from(s: &str) -> SpaFeatures {
        match s {
            "Above Ground" => SpaFeatures::AboveGround,

            "Bath" => SpaFeatures::Bath,

            "Community" => SpaFeatures::Community,

            "Fiberglass" => SpaFeatures::Fiberglass,

            "Gunite" => SpaFeatures::Gunite,

            "Heated" => SpaFeatures::Heated,

            "In Ground" => SpaFeatures::InGround,

            "None" => SpaFeatures::None,

            "Private" => SpaFeatures::Private,

            "See Remarks" => SpaFeatures::SeeRemarks,

            _ => SpaFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a SpaFeatures> for &'a str {
    fn from(s: &'a SpaFeatures) -> &'a str {
        match s {
            SpaFeatures::AboveGround => "Above Ground",

            SpaFeatures::Bath => "Bath",

            SpaFeatures::Community => "Community",

            SpaFeatures::Fiberglass => "Fiberglass",

            SpaFeatures::Gunite => "Gunite",

            SpaFeatures::Heated => "Heated",

            SpaFeatures::InGround => "In Ground",

            SpaFeatures::None => "None",

            SpaFeatures::Private => "Private",

            SpaFeatures::SeeRemarks => "See Remarks",

            SpaFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for SpaFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for SpaFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_spa_features_format {
    use super::SpaFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<SpaFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<SpaFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [SpecialLicenses Lookups](https://ddwiki.reso.org/display/DDW17/SpecialLicenses+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum SpecialLicenses {
    /// "[Beer/Wine](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246295)": The business being sold uses/requires a Beer/Wine license.
    BeerWine,

    /// "[Class H](https://ddwiki.reso.org/display/DDW17/Class+H)": The business being sold uses/requires a Class H license.
    ClassH,

    /// "[Entertainment](https://ddwiki.reso.org/display/DDW17/Entertainment)": The business being sold uses/requires an Entertainment license.
    Entertainment,

    /// "[Franchise](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246298)": The business being sold uses/requires a Franchise license.
    Franchise,

    /// "[Gambling](https://ddwiki.reso.org/display/DDW17/Gambling)": The business being sold uses/requires a Gambling license.
    Gambling,

    /// "[Liquor](https://ddwiki.reso.org/display/DDW17/Liquor)": The business being sold uses/requires a Liquor license.
    Liquor,

    /// "[Liquor 5 Years Or Less](https://ddwiki.reso.org/display/DDW17/Liquor+5+Years+Or+Less)": The business being sold uses/requires a Liquor 5 years or less license.
    Liquor5YearsOrLess,

    /// "[Liquor 5 Years Or More](https://ddwiki.reso.org/display/DDW17/Liquor+5+Years+Or+More)": The business being sold uses/requires a Liquor 5 years or more license.
    Liquor5YearsOrMore,

    /// "[Liquor-Off Sale](https://ddwiki.reso.org/display/DDW17/Liquor-Off+Sale)": The business being sold uses/requires a Liquor-Off Sale license.
    LiquorOffSale,

    /// "[Liquor-On Sale](https://ddwiki.reso.org/display/DDW17/Liquor-On+Sale)": The business being sold uses/requires a Liquor-On Sale license.
    LiquorOnSale,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246305)": The business being sold uses/requires/has no license.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246306)": The business being sold uses/requires an other license.
    Other,

    /// "[Professional](https://ddwiki.reso.org/display/DDW17/Professional)": The business being sold uses/requires a Professional license.
    Professional,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for SpecialLicenses {
    fn from(s: String) -> SpecialLicenses {
        match s.as_ref() {
            "Beer/Wine" => SpecialLicenses::BeerWine,

            "Class H" => SpecialLicenses::ClassH,

            "Entertainment" => SpecialLicenses::Entertainment,

            "Franchise" => SpecialLicenses::Franchise,

            "Gambling" => SpecialLicenses::Gambling,

            "Liquor" => SpecialLicenses::Liquor,

            "Liquor 5 Years Or Less" => SpecialLicenses::Liquor5YearsOrLess,

            "Liquor 5 Years Or More" => SpecialLicenses::Liquor5YearsOrMore,

            "Liquor-Off Sale" => SpecialLicenses::LiquorOffSale,

            "Liquor-On Sale" => SpecialLicenses::LiquorOnSale,

            "None" => SpecialLicenses::None,

            "Other" => SpecialLicenses::Other,

            "Professional" => SpecialLicenses::Professional,

            _ => SpecialLicenses::OpenEnumeration(s),
        }
    }
}

impl From<&str> for SpecialLicenses {
    fn from(s: &str) -> SpecialLicenses {
        match s {
            "Beer/Wine" => SpecialLicenses::BeerWine,

            "Class H" => SpecialLicenses::ClassH,

            "Entertainment" => SpecialLicenses::Entertainment,

            "Franchise" => SpecialLicenses::Franchise,

            "Gambling" => SpecialLicenses::Gambling,

            "Liquor" => SpecialLicenses::Liquor,

            "Liquor 5 Years Or Less" => SpecialLicenses::Liquor5YearsOrLess,

            "Liquor 5 Years Or More" => SpecialLicenses::Liquor5YearsOrMore,

            "Liquor-Off Sale" => SpecialLicenses::LiquorOffSale,

            "Liquor-On Sale" => SpecialLicenses::LiquorOnSale,

            "None" => SpecialLicenses::None,

            "Other" => SpecialLicenses::Other,

            "Professional" => SpecialLicenses::Professional,

            _ => SpecialLicenses::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a SpecialLicenses> for &'a str {
    fn from(s: &'a SpecialLicenses) -> &'a str {
        match s {
            SpecialLicenses::BeerWine => "Beer/Wine",

            SpecialLicenses::ClassH => "Class H",

            SpecialLicenses::Entertainment => "Entertainment",

            SpecialLicenses::Franchise => "Franchise",

            SpecialLicenses::Gambling => "Gambling",

            SpecialLicenses::Liquor => "Liquor",

            SpecialLicenses::Liquor5YearsOrLess => "Liquor 5 Years Or Less",

            SpecialLicenses::Liquor5YearsOrMore => "Liquor 5 Years Or More",

            SpecialLicenses::LiquorOffSale => "Liquor-Off Sale",

            SpecialLicenses::LiquorOnSale => "Liquor-On Sale",

            SpecialLicenses::None => "None",

            SpecialLicenses::Other => "Other",

            SpecialLicenses::Professional => "Professional",

            SpecialLicenses::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for SpecialLicenses {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for SpecialLicenses {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_special_licenses_format {
    use super::SpecialLicenses;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<SpecialLicenses>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<SpecialLicenses>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [SpecialListingConditions Lookups](https://ddwiki.reso.org/display/DDW17/SpecialListingConditions+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum SpecialListingConditions {
    /// "[Auction](https://ddwiki.reso.org/display/DDW17/Auction)": The listing is an auction.
    Auction,

    /// "[Bankruptcy Property](https://ddwiki.reso.org/display/DDW17/Bankruptcy+Property)": The listed property is currently involved in a bankruptcy.
    BankruptcyProperty,

    /// "[HUD Owned](https://ddwiki.reso.org/display/DDW17/HUD+Owned)": The listed property is owned, and being sold, by the US Department of Housing and Urban Development.
    HUDOwned,

    /// "[In Foreclosure](https://ddwiki.reso.org/display/DDW17/In+Foreclosure)": The listed property is currently in the process of foreclosure.
    InForeclosure,

    /// "[Notice Of Default](https://ddwiki.reso.org/display/DDW17/Notice+Of+Default)": There is a notice of default on the listed property.
    NoticeOfDefault,

    /// "[Probate Listing](https://ddwiki.reso.org/display/DDW17/Probate+Listing)": The listed property is a probate sale.
    ProbateListing,

    /// "[Real Estate Owned](https://ddwiki.reso.org/display/DDW17/Real+Estate+Owned)": The listed property is currently bank/lender owned.
    RealEstateOwned,

    /// "[Short Sale](https://ddwiki.reso.org/display/DDW17/Short+Sale)": The listing is a short sale (short pay) and may require bank approval.
    ShortSale,

    /// "[Standard](https://ddwiki.reso.org/display/DDW17/Standard)": The listing has none of the other conditions in the Special Listing Conditions field.
    Standard,

    /// "[Third Party Approval](https://ddwiki.reso.org/display/DDW17/Third+Party+Approval)": A court or other third party approval is required for the sale to finalize.
    ThirdPartyApproval,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for SpecialListingConditions {
    fn from(s: String) -> SpecialListingConditions {
        match s.as_ref() {
            "Auction" => SpecialListingConditions::Auction,

            "Bankruptcy Property" => SpecialListingConditions::BankruptcyProperty,

            "HUD Owned" => SpecialListingConditions::HUDOwned,

            "In Foreclosure" => SpecialListingConditions::InForeclosure,

            "Notice Of Default" => SpecialListingConditions::NoticeOfDefault,

            "Probate Listing" => SpecialListingConditions::ProbateListing,

            "Real Estate Owned" => SpecialListingConditions::RealEstateOwned,

            "Short Sale" => SpecialListingConditions::ShortSale,

            "Standard" => SpecialListingConditions::Standard,

            "Third Party Approval" => SpecialListingConditions::ThirdPartyApproval,

            _ => SpecialListingConditions::OpenEnumeration(s),
        }
    }
}

impl From<&str> for SpecialListingConditions {
    fn from(s: &str) -> SpecialListingConditions {
        match s {
            "Auction" => SpecialListingConditions::Auction,

            "Bankruptcy Property" => SpecialListingConditions::BankruptcyProperty,

            "HUD Owned" => SpecialListingConditions::HUDOwned,

            "In Foreclosure" => SpecialListingConditions::InForeclosure,

            "Notice Of Default" => SpecialListingConditions::NoticeOfDefault,

            "Probate Listing" => SpecialListingConditions::ProbateListing,

            "Real Estate Owned" => SpecialListingConditions::RealEstateOwned,

            "Short Sale" => SpecialListingConditions::ShortSale,

            "Standard" => SpecialListingConditions::Standard,

            "Third Party Approval" => SpecialListingConditions::ThirdPartyApproval,

            _ => SpecialListingConditions::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a SpecialListingConditions> for &'a str {
    fn from(s: &'a SpecialListingConditions) -> &'a str {
        match s {
            SpecialListingConditions::Auction => "Auction",

            SpecialListingConditions::BankruptcyProperty => "Bankruptcy Property",

            SpecialListingConditions::HUDOwned => "HUD Owned",

            SpecialListingConditions::InForeclosure => "In Foreclosure",

            SpecialListingConditions::NoticeOfDefault => "Notice Of Default",

            SpecialListingConditions::ProbateListing => "Probate Listing",

            SpecialListingConditions::RealEstateOwned => "Real Estate Owned",

            SpecialListingConditions::ShortSale => "Short Sale",

            SpecialListingConditions::Standard => "Standard",

            SpecialListingConditions::ThirdPartyApproval => "Third Party Approval",

            SpecialListingConditions::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for SpecialListingConditions {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for SpecialListingConditions {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_special_listing_conditions_format {
    use super::SpecialListingConditions;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<SpecialListingConditions>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<SpecialListingConditions>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [StandardStatus Lookups](https://ddwiki.reso.org/display/DDW17/StandardStatus+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum StandardStatus {
    /// "[Active](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246320)": The listing is on market and an offer has not been accepted.
    Active,

    /// "[Active Under Contract](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246321)": An offer has been accepted but the listing is still on market.
    ActiveUnderContract,

    /// "[Canceled](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246322)": The listing contract has been terminated.
    Canceled,

    /// "[Closed](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246323)": The purchase agreement has been fulfilled or the lease agreement has been executed.
    Closed,

    /// "[Coming Soon](https://ddwiki.reso.org/display/DDW17/Coming+Soon)": This is a listing that has not yet been on market but will be on market soon.  A listing contract has been executed.  Some systems may use Hold or Withdrawn for similar purposes.  When all three are in use, Hold expresses a listing that may have been on market but is off market temporarily and is expected to return to market.  Withdrawn may have been on market but when used in conjunction with Hold, is not expected to return to market.  Coming Soon is different from Hold and Withdrawn as the property, under the current listing contract only, has not been previously on market.
    ComingSoon,

    /// "[Delete](https://ddwiki.reso.org/display/DDW17/Delete)": The listing contract was never valid or other reason for the contract to be nullified.
    Delete,

    /// "[Expired](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246326)": The listing contract has expired.
    Expired,

    /// "[Hold](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246327)": A contract exists between the seller and the listing member.  The listing may be completely off market, not allowing any showings and/or not taking any further offers.  For systems that don't use Hold, Withdrawn is a similar status that may be in use.  When both Hold and Withdrawn are in use, Withdrawn may be used to indicate a greater certainty that the listing will not come back on market.
    Hold,

    /// "[Incomplete](https://ddwiki.reso.org/display/DDW17/Incomplete)": The listing has not yet be completely entered and is not yet published in the MLS.
    Incomplete,

    /// "[Pending](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246329)": An offer has been accepted and the listing is no longer on market.
    Pending,

    /// "[Withdrawn](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246330)": The listing has been withdrawn from the market, but a contract still exists between the seller and the listing member.  For those systems that use both Hold and Withdrawn, Withdrawn may represent an intention not to bring the listing back on the market.  When Hold is not used by the system, Withdrawn does not represent any intention of returning to market or not.
    Withdrawn,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for StandardStatus {
    fn from(s: String) -> StandardStatus {
        match s.as_ref() {
            "Active" => StandardStatus::Active,

            "Active Under Contract" => StandardStatus::ActiveUnderContract,

            "Canceled" => StandardStatus::Canceled,

            "Closed" => StandardStatus::Closed,

            "Coming Soon" => StandardStatus::ComingSoon,

            "Delete" => StandardStatus::Delete,

            "Expired" => StandardStatus::Expired,

            "Hold" => StandardStatus::Hold,

            "Incomplete" => StandardStatus::Incomplete,

            "Pending" => StandardStatus::Pending,

            "Withdrawn" => StandardStatus::Withdrawn,

            _ => StandardStatus::OpenEnumeration(s),
        }
    }
}

impl From<&str> for StandardStatus {
    fn from(s: &str) -> StandardStatus {
        match s {
            "Active" => StandardStatus::Active,

            "Active Under Contract" => StandardStatus::ActiveUnderContract,

            "Canceled" => StandardStatus::Canceled,

            "Closed" => StandardStatus::Closed,

            "Coming Soon" => StandardStatus::ComingSoon,

            "Delete" => StandardStatus::Delete,

            "Expired" => StandardStatus::Expired,

            "Hold" => StandardStatus::Hold,

            "Incomplete" => StandardStatus::Incomplete,

            "Pending" => StandardStatus::Pending,

            "Withdrawn" => StandardStatus::Withdrawn,

            _ => StandardStatus::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a StandardStatus> for &'a str {
    fn from(s: &'a StandardStatus) -> &'a str {
        match s {
            StandardStatus::Active => "Active",

            StandardStatus::ActiveUnderContract => "Active Under Contract",

            StandardStatus::Canceled => "Canceled",

            StandardStatus::Closed => "Closed",

            StandardStatus::ComingSoon => "Coming Soon",

            StandardStatus::Delete => "Delete",

            StandardStatus::Expired => "Expired",

            StandardStatus::Hold => "Hold",

            StandardStatus::Incomplete => "Incomplete",

            StandardStatus::Pending => "Pending",

            StandardStatus::Withdrawn => "Withdrawn",

            StandardStatus::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for StandardStatus {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for StandardStatus {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_standard_status_format {
    use super::StandardStatus;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<StandardStatus>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<StandardStatus>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [StateOrProvince Lookups](https://ddwiki.reso.org/display/DDW17/StateOrProvince+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum StateOrProvince {
    /// "[AB](https://ddwiki.reso.org/display/DDW17/AB)": The Canadian province in which the listing is located is Alberta.
    AB,

    /// "[AK](https://ddwiki.reso.org/display/DDW17/AK)": The state in which the listing is located is Alaska.
    AK,

    /// "[AL](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246334)": The state in which the listing is located is Alabama.
    AL,

    /// "[AR](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246335)": The state in which the listing is located is Arkansas.
    AR,

    /// "[AZ](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246336)": The state in which the listing is located is Arizona.
    AZ,

    /// "[BC](https://ddwiki.reso.org/display/DDW17/BC)": The Canadian province in which the listing is located is British Columbia.
    BC,

    /// "[CA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246338)": The state in which the listing is located is California.
    CA,

    /// "[CO](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246339)": The state in which the listing is located is Colorado.
    CO,

    /// "[CT](https://ddwiki.reso.org/display/DDW17/CT)": The state in which the listing is located is Connecticut.
    CT,

    /// "[DC](https://ddwiki.reso.org/display/DDW17/DC)": The federal district in which the listing is located is District of Columbia.
    DC,

    /// "[DE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246342)": The state in which the listing is located is Delaware.
    DE,

    /// "[FL](https://ddwiki.reso.org/display/DDW17/FL)": The state in which the listing is located is Florida.
    FL,

    /// "[GA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246344)": The state in which the listing is located is Georgia.
    GA,

    /// "[HI](https://ddwiki.reso.org/display/DDW17/HI)": The state in which the listing is located is Hawaii.
    HI,

    /// "[IA](https://ddwiki.reso.org/display/DDW17/IA)": The state in which the listing is located is Iowa.
    IA,

    /// "[ID](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246347)": The state in which the listing is located is Idaho.
    ID,

    /// "[IL](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246348)": The state in which the listing is located is Illinois.
    IL,

    /// "[IN](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246349)": The state in which the listing is located is Indiana.
    IN,

    /// "[KS](https://ddwiki.reso.org/display/DDW17/KS)": The state in which the listing is located is Kansas.
    KS,

    /// "[KY](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246351)": The state in which the listing is located is Kentucky.
    KY,

    /// "[LA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246352)": The state in which the listing is located is Louisiana.
    LA,

    /// "[MA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246353)": The state in which the listing is located is Massachusetts.
    MA,

    /// "[MB](https://ddwiki.reso.org/display/DDW17/MB)": The Canadian province in which the listing is located is Manitoba.
    MB,

    /// "[MD](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246355)": The state in which the listing is located is Maryland.
    MD,

    /// "[ME](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246356)": The state in which the listing is located is Maine.
    ME,

    /// "[MI](https://ddwiki.reso.org/display/DDW17/MI)": The state in which the listing is located is Michigan.
    MI,

    /// "[MN](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246358)": The state in which the listing is located is Minnesota.
    MN,

    /// "[MO](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246359)": The state in which the listing is located is Missouri.
    MO,

    /// "[MS](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246360)": The state in which the listing is located is Mississippi.
    MS,

    /// "[MT](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246361)": The state in which the listing is located is Montana.
    MT,

    /// "[NB](https://ddwiki.reso.org/display/DDW17/NB)": The Canadian province in which the listing is located is New Brunswick.
    NB,

    /// "[NC](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246363)": The state in which the listing is located is North Carolina.
    NC,

    /// "[ND](https://ddwiki.reso.org/display/DDW17/ND)": The state in which the listing is located is North Dakota.
    ND,

    /// "[NE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246365)": The state in which the listing is located is Nebraska.
    NE,

    /// "[NF](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246366)": The Canadian province in which the listing is located is Newfoundland and Labrador.
    NF,

    /// "[NH](https://ddwiki.reso.org/display/DDW17/NH)": The state in which the listing is located is New Hampshire.
    NH,

    /// "[NJ](https://ddwiki.reso.org/display/DDW17/NJ)": The state in which the listing is located is New Jersey.
    NJ,

    /// "[NM](https://ddwiki.reso.org/display/DDW17/NM)": The state in which the listing is located is New Mexico.
    NM,

    /// "[NS](https://ddwiki.reso.org/display/DDW17/NS)": The Canadian province in which the listing is located is Nova Scotia.
    NS,

    /// "[NT](https://ddwiki.reso.org/display/DDW17/NT)": The Canadian territory in which the listing is located is Northwest Territories.
    NT,

    /// "[NU](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246372)": The Canadian territory in which the listing is located is Nunavut.
    NU,

    /// "[NV](https://ddwiki.reso.org/display/DDW17/NV)": The state in which the listing is located is Nevada.
    NV,

    /// "[NY](https://ddwiki.reso.org/display/DDW17/NY)": The state in which the listing is located is New York.
    NY,

    /// "[OH](https://ddwiki.reso.org/display/DDW17/OH)": The state in which the listing is located is Ohio.
    OH,

    /// "[OK](https://ddwiki.reso.org/display/DDW17/OK)": The state in which the listing is located is Oklahoma.
    OK,

    /// "[ON](https://ddwiki.reso.org/display/DDW17/ON)": The Canadian province in which the listing is located is Ontario.
    ON,

    /// "[OR](https://ddwiki.reso.org/display/DDW17/OR)": The state in which the listing is located is Oregon.
    OR,

    /// "[PA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246379)": The state in which the listing is located is Pennsylvania.
    PA,

    /// "[PE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246380)": The Canadian province in which the listing is located is Prince Edward Island.
    PE,

    /// "[QC](https://ddwiki.reso.org/display/DDW17/QC)": The Canadian province in which the listing is located is Quebec.
    QC,

    /// "[RI](https://ddwiki.reso.org/display/DDW17/RI)": The state in which the listing is located is Rhode Island.
    RI,

    /// "[SC](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246383)": The state in which the listing is located is South Carolina.
    SC,

    /// "[SD](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246384)": The state in which the listing is located is South Dakota.
    SD,

    /// "[SK](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246385)": The Canadian province in which the listing is located is Saskatchewan.
    SK,

    /// "[TN](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246386)": The state in which the listing is located is Tennessee.
    TN,

    /// "[TX](https://ddwiki.reso.org/display/DDW17/TX)": The state in which the listing is located is Texas.
    TX,

    /// "[UT](https://ddwiki.reso.org/display/DDW17/UT)": The state in which the listing is located is Utah.
    UT,

    /// "[VA](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246389)": The state in which the listing is located is Virginia.
    VA,

    /// "[VI](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246390)": The territory in which the listing is located is Virgin Islands.
    VI,

    /// "[VT](https://ddwiki.reso.org/display/DDW17/VT)": The state in which the listing is located is Vermont.
    VT,

    /// "[WA](https://ddwiki.reso.org/display/DDW17/WA)": The state in which the listing is located is Washington.
    WA,

    /// "[WI](https://ddwiki.reso.org/display/DDW17/WI)": The state in which the listing is located is Wisconsin.
    WI,

    /// "[WV](https://ddwiki.reso.org/display/DDW17/WV)": The state in which the listing is located is West Virginia.
    WV,

    /// "[WY](https://ddwiki.reso.org/display/DDW17/WY)": The state in which the listing is located is Wyoming.
    WY,

    /// "[YT](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246396)": The Canadian territory in which the listing is located is Yukon.
    YT,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for StateOrProvince {
    fn from(s: String) -> StateOrProvince {
        match s.as_ref() {
            "AB" => StateOrProvince::AB,

            "AK" => StateOrProvince::AK,

            "AL" => StateOrProvince::AL,

            "AR" => StateOrProvince::AR,

            "AZ" => StateOrProvince::AZ,

            "BC" => StateOrProvince::BC,

            "CA" => StateOrProvince::CA,

            "CO" => StateOrProvince::CO,

            "CT" => StateOrProvince::CT,

            "DC" => StateOrProvince::DC,

            "DE" => StateOrProvince::DE,

            "FL" => StateOrProvince::FL,

            "GA" => StateOrProvince::GA,

            "HI" => StateOrProvince::HI,

            "IA" => StateOrProvince::IA,

            "ID" => StateOrProvince::ID,

            "IL" => StateOrProvince::IL,

            "IN" => StateOrProvince::IN,

            "KS" => StateOrProvince::KS,

            "KY" => StateOrProvince::KY,

            "LA" => StateOrProvince::LA,

            "MA" => StateOrProvince::MA,

            "MB" => StateOrProvince::MB,

            "MD" => StateOrProvince::MD,

            "ME" => StateOrProvince::ME,

            "MI" => StateOrProvince::MI,

            "MN" => StateOrProvince::MN,

            "MO" => StateOrProvince::MO,

            "MS" => StateOrProvince::MS,

            "MT" => StateOrProvince::MT,

            "NB" => StateOrProvince::NB,

            "NC" => StateOrProvince::NC,

            "ND" => StateOrProvince::ND,

            "NE" => StateOrProvince::NE,

            "NF" => StateOrProvince::NF,

            "NH" => StateOrProvince::NH,

            "NJ" => StateOrProvince::NJ,

            "NM" => StateOrProvince::NM,

            "NS" => StateOrProvince::NS,

            "NT" => StateOrProvince::NT,

            "NU" => StateOrProvince::NU,

            "NV" => StateOrProvince::NV,

            "NY" => StateOrProvince::NY,

            "OH" => StateOrProvince::OH,

            "OK" => StateOrProvince::OK,

            "ON" => StateOrProvince::ON,

            "OR" => StateOrProvince::OR,

            "PA" => StateOrProvince::PA,

            "PE" => StateOrProvince::PE,

            "QC" => StateOrProvince::QC,

            "RI" => StateOrProvince::RI,

            "SC" => StateOrProvince::SC,

            "SD" => StateOrProvince::SD,

            "SK" => StateOrProvince::SK,

            "TN" => StateOrProvince::TN,

            "TX" => StateOrProvince::TX,

            "UT" => StateOrProvince::UT,

            "VA" => StateOrProvince::VA,

            "VI" => StateOrProvince::VI,

            "VT" => StateOrProvince::VT,

            "WA" => StateOrProvince::WA,

            "WI" => StateOrProvince::WI,

            "WV" => StateOrProvince::WV,

            "WY" => StateOrProvince::WY,

            "YT" => StateOrProvince::YT,

            _ => StateOrProvince::OpenEnumeration(s),
        }
    }
}

impl From<&str> for StateOrProvince {
    fn from(s: &str) -> StateOrProvince {
        match s {
            "AB" => StateOrProvince::AB,

            "AK" => StateOrProvince::AK,

            "AL" => StateOrProvince::AL,

            "AR" => StateOrProvince::AR,

            "AZ" => StateOrProvince::AZ,

            "BC" => StateOrProvince::BC,

            "CA" => StateOrProvince::CA,

            "CO" => StateOrProvince::CO,

            "CT" => StateOrProvince::CT,

            "DC" => StateOrProvince::DC,

            "DE" => StateOrProvince::DE,

            "FL" => StateOrProvince::FL,

            "GA" => StateOrProvince::GA,

            "HI" => StateOrProvince::HI,

            "IA" => StateOrProvince::IA,

            "ID" => StateOrProvince::ID,

            "IL" => StateOrProvince::IL,

            "IN" => StateOrProvince::IN,

            "KS" => StateOrProvince::KS,

            "KY" => StateOrProvince::KY,

            "LA" => StateOrProvince::LA,

            "MA" => StateOrProvince::MA,

            "MB" => StateOrProvince::MB,

            "MD" => StateOrProvince::MD,

            "ME" => StateOrProvince::ME,

            "MI" => StateOrProvince::MI,

            "MN" => StateOrProvince::MN,

            "MO" => StateOrProvince::MO,

            "MS" => StateOrProvince::MS,

            "MT" => StateOrProvince::MT,

            "NB" => StateOrProvince::NB,

            "NC" => StateOrProvince::NC,

            "ND" => StateOrProvince::ND,

            "NE" => StateOrProvince::NE,

            "NF" => StateOrProvince::NF,

            "NH" => StateOrProvince::NH,

            "NJ" => StateOrProvince::NJ,

            "NM" => StateOrProvince::NM,

            "NS" => StateOrProvince::NS,

            "NT" => StateOrProvince::NT,

            "NU" => StateOrProvince::NU,

            "NV" => StateOrProvince::NV,

            "NY" => StateOrProvince::NY,

            "OH" => StateOrProvince::OH,

            "OK" => StateOrProvince::OK,

            "ON" => StateOrProvince::ON,

            "OR" => StateOrProvince::OR,

            "PA" => StateOrProvince::PA,

            "PE" => StateOrProvince::PE,

            "QC" => StateOrProvince::QC,

            "RI" => StateOrProvince::RI,

            "SC" => StateOrProvince::SC,

            "SD" => StateOrProvince::SD,

            "SK" => StateOrProvince::SK,

            "TN" => StateOrProvince::TN,

            "TX" => StateOrProvince::TX,

            "UT" => StateOrProvince::UT,

            "VA" => StateOrProvince::VA,

            "VI" => StateOrProvince::VI,

            "VT" => StateOrProvince::VT,

            "WA" => StateOrProvince::WA,

            "WI" => StateOrProvince::WI,

            "WV" => StateOrProvince::WV,

            "WY" => StateOrProvince::WY,

            "YT" => StateOrProvince::YT,

            _ => StateOrProvince::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a StateOrProvince> for &'a str {
    fn from(s: &'a StateOrProvince) -> &'a str {
        match s {
            StateOrProvince::AB => "AB",

            StateOrProvince::AK => "AK",

            StateOrProvince::AL => "AL",

            StateOrProvince::AR => "AR",

            StateOrProvince::AZ => "AZ",

            StateOrProvince::BC => "BC",

            StateOrProvince::CA => "CA",

            StateOrProvince::CO => "CO",

            StateOrProvince::CT => "CT",

            StateOrProvince::DC => "DC",

            StateOrProvince::DE => "DE",

            StateOrProvince::FL => "FL",

            StateOrProvince::GA => "GA",

            StateOrProvince::HI => "HI",

            StateOrProvince::IA => "IA",

            StateOrProvince::ID => "ID",

            StateOrProvince::IL => "IL",

            StateOrProvince::IN => "IN",

            StateOrProvince::KS => "KS",

            StateOrProvince::KY => "KY",

            StateOrProvince::LA => "LA",

            StateOrProvince::MA => "MA",

            StateOrProvince::MB => "MB",

            StateOrProvince::MD => "MD",

            StateOrProvince::ME => "ME",

            StateOrProvince::MI => "MI",

            StateOrProvince::MN => "MN",

            StateOrProvince::MO => "MO",

            StateOrProvince::MS => "MS",

            StateOrProvince::MT => "MT",

            StateOrProvince::NB => "NB",

            StateOrProvince::NC => "NC",

            StateOrProvince::ND => "ND",

            StateOrProvince::NE => "NE",

            StateOrProvince::NF => "NF",

            StateOrProvince::NH => "NH",

            StateOrProvince::NJ => "NJ",

            StateOrProvince::NM => "NM",

            StateOrProvince::NS => "NS",

            StateOrProvince::NT => "NT",

            StateOrProvince::NU => "NU",

            StateOrProvince::NV => "NV",

            StateOrProvince::NY => "NY",

            StateOrProvince::OH => "OH",

            StateOrProvince::OK => "OK",

            StateOrProvince::ON => "ON",

            StateOrProvince::OR => "OR",

            StateOrProvince::PA => "PA",

            StateOrProvince::PE => "PE",

            StateOrProvince::QC => "QC",

            StateOrProvince::RI => "RI",

            StateOrProvince::SC => "SC",

            StateOrProvince::SD => "SD",

            StateOrProvince::SK => "SK",

            StateOrProvince::TN => "TN",

            StateOrProvince::TX => "TX",

            StateOrProvince::UT => "UT",

            StateOrProvince::VA => "VA",

            StateOrProvince::VI => "VI",

            StateOrProvince::VT => "VT",

            StateOrProvince::WA => "WA",

            StateOrProvince::WI => "WI",

            StateOrProvince::WV => "WV",

            StateOrProvince::WY => "WY",

            StateOrProvince::YT => "YT",

            StateOrProvince::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for StateOrProvince {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for StateOrProvince {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_state_or_province_format {
    use super::StateOrProvince;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<StateOrProvince>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<StateOrProvince>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [StreetDirection Lookups](https://ddwiki.reso.org/display/DDW17/StreetDirection+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum StreetDirection {
    /// "[E](https://ddwiki.reso.org/display/DDW17/E)": The street suffix or prefix direction is East.
    E,

    /// "[N](https://ddwiki.reso.org/display/DDW17/N)": The street suffix or prefix direction is North.
    N,

    /// "[NE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246400)": The street suffix or prefix direction is North East.
    NE,

    /// "[NW](https://ddwiki.reso.org/display/DDW17/NW)": The street suffix or prefix direction is North West.
    NW,

    /// "[S](https://ddwiki.reso.org/display/DDW17/S)": The street suffix or prefix direction is South.
    S,

    /// "[SE](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246403)": The street suffix or prefix direction is South East.
    SE,

    /// "[SW](https://ddwiki.reso.org/display/DDW17/SW)": The street suffix or prefix direction is South West.
    SW,

    /// "[W](https://ddwiki.reso.org/display/DDW17/W)": The street suffix or prefix direction is West.
    W,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for StreetDirection {
    fn from(s: String) -> StreetDirection {
        match s.as_ref() {
            "E" => StreetDirection::E,

            "N" => StreetDirection::N,

            "NE" => StreetDirection::NE,

            "NW" => StreetDirection::NW,

            "S" => StreetDirection::S,

            "SE" => StreetDirection::SE,

            "SW" => StreetDirection::SW,

            "W" => StreetDirection::W,

            _ => StreetDirection::OpenEnumeration(s),
        }
    }
}

impl From<&str> for StreetDirection {
    fn from(s: &str) -> StreetDirection {
        match s {
            "E" => StreetDirection::E,

            "N" => StreetDirection::N,

            "NE" => StreetDirection::NE,

            "NW" => StreetDirection::NW,

            "S" => StreetDirection::S,

            "SE" => StreetDirection::SE,

            "SW" => StreetDirection::SW,

            "W" => StreetDirection::W,

            _ => StreetDirection::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a StreetDirection> for &'a str {
    fn from(s: &'a StreetDirection) -> &'a str {
        match s {
            StreetDirection::E => "E",

            StreetDirection::N => "N",

            StreetDirection::NE => "NE",

            StreetDirection::NW => "NW",

            StreetDirection::S => "S",

            StreetDirection::SE => "SE",

            StreetDirection::SW => "SW",

            StreetDirection::W => "W",

            StreetDirection::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for StreetDirection {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for StreetDirection {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_street_direction_format {
    use super::StreetDirection;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<StreetDirection>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<StreetDirection>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [StructureType Lookups](https://ddwiki.reso.org/display/DDW17/StructureType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum StructureType {
    /// "[Cabin](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246437)": A single family residence that may have limited utilities and rooms.
    Cabin,

    /// "[Dock](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246438)": A floating or pillar supported structure over water used to park water craft.
    Dock,

    /// "[Duplex](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246439)": A multi family structure with two independent units sharing a common roof.
    Duplex,

    /// "[Flex](https://ddwiki.reso.org/display/DDW17/Flex)": A commercial property that is designed to be used in different ways.  e.g. Office, Retail or Warehouse.
    Flex,

    /// "[Hotel/Motel](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246441)": A commercial structure designed to be a hotel or motel.
    HotelMotel,

    /// "[House](https://ddwiki.reso.org/display/DDW17/House)": A single family residence on real property either attached or detached from another structure.  A house may be modular (aka prefabricated), but not a manufactured home with serial/license number.
    House,

    /// "[Industrial](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246443)": A commercial structure designed for industrial use.
    Industrial,

    /// "[Manufactured House](https://ddwiki.reso.org/display/DDW17/Manufactured+House)": A factory built house that is transported to the lot.  A manufactured home will have a serial/license number, where prefabricated (modular) homes are classified with stick built as "House" in this list.
    ManufacturedHouse,

    /// "[Mixed Use](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246445)": The property is designed be used in more than one way.  This is typically a combination of residential and commercial space.  e.g. a dwelling over a retail space.
    MixedUse,

    /// "[Multi Family](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246446)": A structure or complex with 5 or more units that are individual dwellings.
    MultiFamily,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246447)": The property has no structure.
    None,

    /// "[Office](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246448)": A commercial structure designed to be used as office space.
    Office,

    /// "[Quadruplex](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246449)": A multi family structure with four independent units sharing a common roof.
    Quadruplex,

    /// "[Retail](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246450)": A commercial structure designed to be used for retail space.
    Retail,

    /// "[Townhouse](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246451)": A dwelling unit, generally having two or more floors and attached to other similar units via party walls.
    Townhouse,

    /// "[Triplex](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246452)": A multi family structure with three independent units sharing a common roof.
    Triplex,

    /// "[Warehouse](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246453)": A commercial structure designed for warehousing.
    Warehouse,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for StructureType {
    fn from(s: String) -> StructureType {
        match s.as_ref() {
            "Cabin" => StructureType::Cabin,

            "Dock" => StructureType::Dock,

            "Duplex" => StructureType::Duplex,

            "Flex" => StructureType::Flex,

            "Hotel/Motel" => StructureType::HotelMotel,

            "House" => StructureType::House,

            "Industrial" => StructureType::Industrial,

            "Manufactured House" => StructureType::ManufacturedHouse,

            "Mixed Use" => StructureType::MixedUse,

            "Multi Family" => StructureType::MultiFamily,

            "None" => StructureType::None,

            "Office" => StructureType::Office,

            "Quadruplex" => StructureType::Quadruplex,

            "Retail" => StructureType::Retail,

            "Townhouse" => StructureType::Townhouse,

            "Triplex" => StructureType::Triplex,

            "Warehouse" => StructureType::Warehouse,

            _ => StructureType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for StructureType {
    fn from(s: &str) -> StructureType {
        match s {
            "Cabin" => StructureType::Cabin,

            "Dock" => StructureType::Dock,

            "Duplex" => StructureType::Duplex,

            "Flex" => StructureType::Flex,

            "Hotel/Motel" => StructureType::HotelMotel,

            "House" => StructureType::House,

            "Industrial" => StructureType::Industrial,

            "Manufactured House" => StructureType::ManufacturedHouse,

            "Mixed Use" => StructureType::MixedUse,

            "Multi Family" => StructureType::MultiFamily,

            "None" => StructureType::None,

            "Office" => StructureType::Office,

            "Quadruplex" => StructureType::Quadruplex,

            "Retail" => StructureType::Retail,

            "Townhouse" => StructureType::Townhouse,

            "Triplex" => StructureType::Triplex,

            "Warehouse" => StructureType::Warehouse,

            _ => StructureType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a StructureType> for &'a str {
    fn from(s: &'a StructureType) -> &'a str {
        match s {
            StructureType::Cabin => "Cabin",

            StructureType::Dock => "Dock",

            StructureType::Duplex => "Duplex",

            StructureType::Flex => "Flex",

            StructureType::HotelMotel => "Hotel/Motel",

            StructureType::House => "House",

            StructureType::Industrial => "Industrial",

            StructureType::ManufacturedHouse => "Manufactured House",

            StructureType::MixedUse => "Mixed Use",

            StructureType::MultiFamily => "Multi Family",

            StructureType::None => "None",

            StructureType::Office => "Office",

            StructureType::Quadruplex => "Quadruplex",

            StructureType::Retail => "Retail",

            StructureType::Townhouse => "Townhouse",

            StructureType::Triplex => "Triplex",

            StructureType::Warehouse => "Warehouse",

            StructureType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for StructureType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for StructureType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_structure_type_format {
    use super::StructureType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<StructureType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<StructureType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [SyndicateTo Lookups](https://ddwiki.reso.org/display/DDW17/SyndicateTo+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum SyndicateTo {
    /// "[Homes.com](https://ddwiki.reso.org/display/DDW17/Homes.com)": The Broker, or Member if permitted by the Broker, is allowing their listings to be sent to Homes.com.
    Homescom,

    /// "[ListHub](https://ddwiki.reso.org/display/DDW17/ListHub)": The Broker, or Member if permitted by the Broker, is allowing their listings to be sent to ListHub.com.
    ListHub,

    /// "[Realtor.com](https://ddwiki.reso.org/display/DDW17/Realtor.com)": The Broker, or Member if permitted by the Broker, is allowing their listings to be sent to Realtor.com.
    Realtorcom,

    /// "[Zillow/Trulia](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246431)": The Broker, or Member if permitted by the Broker, is allowing their listings to be sent to Zillow and Trulia.
    ZillowTrulia,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for SyndicateTo {
    fn from(s: String) -> SyndicateTo {
        match s.as_ref() {
            "Homes.com" => SyndicateTo::Homescom,

            "ListHub" => SyndicateTo::ListHub,

            "Realtor.com" => SyndicateTo::Realtorcom,

            "Zillow/Trulia" => SyndicateTo::ZillowTrulia,

            _ => SyndicateTo::OpenEnumeration(s),
        }
    }
}

impl From<&str> for SyndicateTo {
    fn from(s: &str) -> SyndicateTo {
        match s {
            "Homes.com" => SyndicateTo::Homescom,

            "ListHub" => SyndicateTo::ListHub,

            "Realtor.com" => SyndicateTo::Realtorcom,

            "Zillow/Trulia" => SyndicateTo::ZillowTrulia,

            _ => SyndicateTo::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a SyndicateTo> for &'a str {
    fn from(s: &'a SyndicateTo) -> &'a str {
        match s {
            SyndicateTo::Homescom => "Homes.com",

            SyndicateTo::ListHub => "ListHub",

            SyndicateTo::Realtorcom => "Realtor.com",

            SyndicateTo::ZillowTrulia => "Zillow/Trulia",

            SyndicateTo::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for SyndicateTo {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for SyndicateTo {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_syndicate_to_format {
    use super::SyndicateTo;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<SyndicateTo>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<SyndicateTo>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [TaxStatusCurrent Lookups](https://ddwiki.reso.org/display/DDW17/TaxStatusCurrent+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum TaxStatusCurrent {
    /// "[Personal](https://ddwiki.reso.org/display/DDW17/Personal)": The tax is based on personal property.
    Personal,

    /// "[Personal And Real](https://ddwiki.reso.org/display/DDW17/Personal+And+Real)": The tax is based on both personal and real property.
    PersonalAndReal,

    /// "[Real](https://ddwiki.reso.org/display/DDW17/Real)": The tax is based on real property.
    Real,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for TaxStatusCurrent {
    fn from(s: String) -> TaxStatusCurrent {
        match s.as_ref() {
            "Personal" => TaxStatusCurrent::Personal,

            "Personal And Real" => TaxStatusCurrent::PersonalAndReal,

            "Real" => TaxStatusCurrent::Real,

            _ => TaxStatusCurrent::OpenEnumeration(s),
        }
    }
}

impl From<&str> for TaxStatusCurrent {
    fn from(s: &str) -> TaxStatusCurrent {
        match s {
            "Personal" => TaxStatusCurrent::Personal,

            "Personal And Real" => TaxStatusCurrent::PersonalAndReal,

            "Real" => TaxStatusCurrent::Real,

            _ => TaxStatusCurrent::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a TaxStatusCurrent> for &'a str {
    fn from(s: &'a TaxStatusCurrent) -> &'a str {
        match s {
            TaxStatusCurrent::Personal => "Personal",

            TaxStatusCurrent::PersonalAndReal => "Personal And Real",

            TaxStatusCurrent::Real => "Real",

            TaxStatusCurrent::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for TaxStatusCurrent {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for TaxStatusCurrent {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_tax_status_current_format {
    use super::TaxStatusCurrent;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<TaxStatusCurrent>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<TaxStatusCurrent>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [TeamMemberType Lookups](https://ddwiki.reso.org/display/DDW17/TeamMemberType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum TeamMemberType {
    /// "[Administration Assistant](https://ddwiki.reso.org/display/DDW17/Administration+Assistant)": The member of a team who assists with administrative tasks.
    AdministrationAssistant,

    /// "[Buyer Agent](https://ddwiki.reso.org/display/DDW17/Buyer+Agent)": A member of the real estate team.
    BuyerAgent,

    /// "[Lead Manager](https://ddwiki.reso.org/display/DDW17/Lead+Manager)": The member of the team who is the lead manager.
    LeadManager,

    /// "[Listing Agent](https://ddwiki.reso.org/display/DDW17/Listing+Agent)": The member of a team who lists properties.
    ListingAgent,

    /// "[Marketing Assistant](https://ddwiki.reso.org/display/DDW17/Marketing+Assistant)": The member of a team who assists with marketing.
    MarketingAssistant,

    /// "[Operations Manager](https://ddwiki.reso.org/display/DDW17/Operations+Manager)": The member of the team who manages operations.
    OperationsManager,

    /// "[Team Lead](https://ddwiki.reso.org/display/DDW17/Team+Lead)": The leading member of a team.
    TeamLead,

    /// "[Team Member](https://ddwiki.reso.org/display/DDW17/Team+Member+Lead)": A member of the real estate team.
    TeamMember,

    /// "[Transaction Coordinator](https://ddwiki.reso.org/display/DDW17/Transaction+Coordinator)": The member of a team who handles transaction details.
    TransactionCoordinator,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for TeamMemberType {
    fn from(s: String) -> TeamMemberType {
        match s.as_ref() {
            "Administration Assistant" => TeamMemberType::AdministrationAssistant,

            "Buyer Agent" => TeamMemberType::BuyerAgent,

            "Lead Manager" => TeamMemberType::LeadManager,

            "Listing Agent" => TeamMemberType::ListingAgent,

            "Marketing Assistant" => TeamMemberType::MarketingAssistant,

            "Operations Manager" => TeamMemberType::OperationsManager,

            "Team Lead" => TeamMemberType::TeamLead,

            "Team Member" => TeamMemberType::TeamMember,

            "Transaction Coordinator" => TeamMemberType::TransactionCoordinator,

            _ => TeamMemberType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for TeamMemberType {
    fn from(s: &str) -> TeamMemberType {
        match s {
            "Administration Assistant" => TeamMemberType::AdministrationAssistant,

            "Buyer Agent" => TeamMemberType::BuyerAgent,

            "Lead Manager" => TeamMemberType::LeadManager,

            "Listing Agent" => TeamMemberType::ListingAgent,

            "Marketing Assistant" => TeamMemberType::MarketingAssistant,

            "Operations Manager" => TeamMemberType::OperationsManager,

            "Team Lead" => TeamMemberType::TeamLead,

            "Team Member" => TeamMemberType::TeamMember,

            "Transaction Coordinator" => TeamMemberType::TransactionCoordinator,

            _ => TeamMemberType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a TeamMemberType> for &'a str {
    fn from(s: &'a TeamMemberType) -> &'a str {
        match s {
            TeamMemberType::AdministrationAssistant => "Administration Assistant",

            TeamMemberType::BuyerAgent => "Buyer Agent",

            TeamMemberType::LeadManager => "Lead Manager",

            TeamMemberType::ListingAgent => "Listing Agent",

            TeamMemberType::MarketingAssistant => "Marketing Assistant",

            TeamMemberType::OperationsManager => "Operations Manager",

            TeamMemberType::TeamLead => "Team Lead",

            TeamMemberType::TeamMember => "Team Member",

            TeamMemberType::TransactionCoordinator => "Transaction Coordinator",

            TeamMemberType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for TeamMemberType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for TeamMemberType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_team_member_type_format {
    use super::TeamMemberType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<TeamMemberType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<TeamMemberType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [TeamStatus Lookups](https://ddwiki.reso.org/display/DDW17/TeamStatus+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum TeamStatus {
    /// "[Active](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246521)": The team is active.
    Active,

    /// "[Inactive](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246522)": The team is not active.
    Inactive,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for TeamStatus {
    fn from(s: String) -> TeamStatus {
        match s.as_ref() {
            "Active" => TeamStatus::Active,

            "Inactive" => TeamStatus::Inactive,

            _ => TeamStatus::OpenEnumeration(s),
        }
    }
}

impl From<&str> for TeamStatus {
    fn from(s: &str) -> TeamStatus {
        match s {
            "Active" => TeamStatus::Active,

            "Inactive" => TeamStatus::Inactive,

            _ => TeamStatus::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a TeamStatus> for &'a str {
    fn from(s: &'a TeamStatus) -> &'a str {
        match s {
            TeamStatus::Active => "Active",

            TeamStatus::Inactive => "Inactive",

            TeamStatus::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for TeamStatus {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for TeamStatus {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_team_status_format {
    use super::TeamStatus;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<TeamStatus>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<TeamStatus>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [TenantPays Lookups](https://ddwiki.reso.org/display/DDW17/TenantPays+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum TenantPays {
    /// "[All Utilities](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246524)": The tenant pays for all utilities.
    AllUtilities,

    /// "[Association Fees](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246525)": The tenant pays for association fees.
    AssociationFees,

    /// "[Cable TV](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246526)": The tenant pays for cable TV.
    CableTV,

    /// "[Common Area Maintenance](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246527)": The tenant pays for common area maintenance.
    CommonAreaMaintenance,

    /// "[Electricity](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246528)": The tenant pays for electricity.
    Electricity,

    /// "[Exterior Maintenance](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246529)": The tenant pays for exterior maintenance.
    ExteriorMaintenance,

    /// "[Gas](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246530)": The tenant pays for gas.
    Gas,

    /// "[Grounds Care](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246531)": The tenant pays for grounds care.
    GroundsCare,

    /// "[Hot Water](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246532)": The tenant pays for hot water.
    HotWater,

    /// "[HVAC Maintenance](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246533)": The tenant pays for HVAC maintenance.
    HVACMaintenance,

    /// "[Insurance](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246534)": The tenant pays for insurance.
    Insurance,

    /// "[Janitorial Service](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246535)": The tenant pays for janitorial service.
    JanitorialService,

    /// "[Management](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246536)": The tenant pays for management.
    Management,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246537)": The tenant pays for no other utilities, services, etc.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246538)": The tenant pays for items other than those in this list.
    Other,

    /// "[Other Tax](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246539)": The tenant pays for other taxes.
    OtherTax,

    /// "[Parking Fee](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246540)": The tenant pays for parking fees.
    ParkingFee,

    /// "[Pest Control](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246541)": The tenant pays for pest control.
    PestControl,

    /// "[Pool Maintenance](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246542)": The tenant pays for pool maintenance.
    PoolMaintenance,

    /// "[Repairs](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246543)": The tenant pays for repairs.
    Repairs,

    /// "[Roof](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246544)": The tenant pays for roof maintenance.
    Roof,

    /// "[Security](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246545)": The tenant pays for security.
    Security,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246546)": See the listing's remarks for details on what they tenant pays for.
    SeeRemarks,

    /// "[Sewer](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246547)": The tenant pays for sewer.
    Sewer,

    /// "[Snow Removal](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246548)": The tenant pays for snow removal.
    SnowRemoval,

    /// "[Taxes](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246549)": The tenant pays for taxes.
    Taxes,

    /// "[Telephone](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246550)": The tenant pays for telephone.
    Telephone,

    /// "[Trash Collection](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246551)": The tenant pays for trash collection.
    TrashCollection,

    /// "[Water](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246552)": The tenant pays for water.
    Water,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for TenantPays {
    fn from(s: String) -> TenantPays {
        match s.as_ref() {
            "All Utilities" => TenantPays::AllUtilities,

            "Association Fees" => TenantPays::AssociationFees,

            "Cable TV" => TenantPays::CableTV,

            "Common Area Maintenance" => TenantPays::CommonAreaMaintenance,

            "Electricity" => TenantPays::Electricity,

            "Exterior Maintenance" => TenantPays::ExteriorMaintenance,

            "Gas" => TenantPays::Gas,

            "Grounds Care" => TenantPays::GroundsCare,

            "Hot Water" => TenantPays::HotWater,

            "HVAC Maintenance" => TenantPays::HVACMaintenance,

            "Insurance" => TenantPays::Insurance,

            "Janitorial Service" => TenantPays::JanitorialService,

            "Management" => TenantPays::Management,

            "None" => TenantPays::None,

            "Other" => TenantPays::Other,

            "Other Tax" => TenantPays::OtherTax,

            "Parking Fee" => TenantPays::ParkingFee,

            "Pest Control" => TenantPays::PestControl,

            "Pool Maintenance" => TenantPays::PoolMaintenance,

            "Repairs" => TenantPays::Repairs,

            "Roof" => TenantPays::Roof,

            "Security" => TenantPays::Security,

            "See Remarks" => TenantPays::SeeRemarks,

            "Sewer" => TenantPays::Sewer,

            "Snow Removal" => TenantPays::SnowRemoval,

            "Taxes" => TenantPays::Taxes,

            "Telephone" => TenantPays::Telephone,

            "Trash Collection" => TenantPays::TrashCollection,

            "Water" => TenantPays::Water,

            _ => TenantPays::OpenEnumeration(s),
        }
    }
}

impl From<&str> for TenantPays {
    fn from(s: &str) -> TenantPays {
        match s {
            "All Utilities" => TenantPays::AllUtilities,

            "Association Fees" => TenantPays::AssociationFees,

            "Cable TV" => TenantPays::CableTV,

            "Common Area Maintenance" => TenantPays::CommonAreaMaintenance,

            "Electricity" => TenantPays::Electricity,

            "Exterior Maintenance" => TenantPays::ExteriorMaintenance,

            "Gas" => TenantPays::Gas,

            "Grounds Care" => TenantPays::GroundsCare,

            "Hot Water" => TenantPays::HotWater,

            "HVAC Maintenance" => TenantPays::HVACMaintenance,

            "Insurance" => TenantPays::Insurance,

            "Janitorial Service" => TenantPays::JanitorialService,

            "Management" => TenantPays::Management,

            "None" => TenantPays::None,

            "Other" => TenantPays::Other,

            "Other Tax" => TenantPays::OtherTax,

            "Parking Fee" => TenantPays::ParkingFee,

            "Pest Control" => TenantPays::PestControl,

            "Pool Maintenance" => TenantPays::PoolMaintenance,

            "Repairs" => TenantPays::Repairs,

            "Roof" => TenantPays::Roof,

            "Security" => TenantPays::Security,

            "See Remarks" => TenantPays::SeeRemarks,

            "Sewer" => TenantPays::Sewer,

            "Snow Removal" => TenantPays::SnowRemoval,

            "Taxes" => TenantPays::Taxes,

            "Telephone" => TenantPays::Telephone,

            "Trash Collection" => TenantPays::TrashCollection,

            "Water" => TenantPays::Water,

            _ => TenantPays::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a TenantPays> for &'a str {
    fn from(s: &'a TenantPays) -> &'a str {
        match s {
            TenantPays::AllUtilities => "All Utilities",

            TenantPays::AssociationFees => "Association Fees",

            TenantPays::CableTV => "Cable TV",

            TenantPays::CommonAreaMaintenance => "Common Area Maintenance",

            TenantPays::Electricity => "Electricity",

            TenantPays::ExteriorMaintenance => "Exterior Maintenance",

            TenantPays::Gas => "Gas",

            TenantPays::GroundsCare => "Grounds Care",

            TenantPays::HotWater => "Hot Water",

            TenantPays::HVACMaintenance => "HVAC Maintenance",

            TenantPays::Insurance => "Insurance",

            TenantPays::JanitorialService => "Janitorial Service",

            TenantPays::Management => "Management",

            TenantPays::None => "None",

            TenantPays::Other => "Other",

            TenantPays::OtherTax => "Other Tax",

            TenantPays::ParkingFee => "Parking Fee",

            TenantPays::PestControl => "Pest Control",

            TenantPays::PoolMaintenance => "Pool Maintenance",

            TenantPays::Repairs => "Repairs",

            TenantPays::Roof => "Roof",

            TenantPays::Security => "Security",

            TenantPays::SeeRemarks => "See Remarks",

            TenantPays::Sewer => "Sewer",

            TenantPays::SnowRemoval => "Snow Removal",

            TenantPays::Taxes => "Taxes",

            TenantPays::Telephone => "Telephone",

            TenantPays::TrashCollection => "Trash Collection",

            TenantPays::Water => "Water",

            TenantPays::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for TenantPays {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for TenantPays {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_tenant_pays_format {
    use super::TenantPays;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<TenantPays>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<TenantPays>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [UnitTypeType Lookups](https://ddwiki.reso.org/display/DDW17/UnitTypeType+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum UnitTypeType {
    /// "[1 Bedroom](https://ddwiki.reso.org/display/DDW17/1+Bedroom)": The type of unit is a 1 bedroom.
    _1Bedroom,

    /// "[2 Bedroom](https://ddwiki.reso.org/display/DDW17/2+Bedroom)": The type of unit is a 2 bedroom.
    _2Bedroom,

    /// "[3 Bedroom](https://ddwiki.reso.org/display/DDW17/3+Bedroom)": The type of unit is a 3 bedroom.
    _3Bedroom,

    /// "[4 Bedroom Or More](https://ddwiki.reso.org/display/DDW17/4+Bedroom+Or+More)": The type of unit is a 4 or more bedroom.
    _4BedroomOrMore,

    /// "[Apartments](https://ddwiki.reso.org/display/DDW17/Apartments)": The type of unit is apartments.
    Apartments,

    /// "[Efficiency](https://ddwiki.reso.org/display/DDW17/Efficiency)": The type of unit is an efficiency.
    Efficiency,

    /// "[Loft](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246608)": The type of unit is a loft.
    Loft,

    /// "[Manager's Unit](https://ddwiki.reso.org/display/DDW17/Manager%27s+Unit)": The type of unit is a manager's unit.
    ManagersUnit,

    /// "[Penthouse](https://ddwiki.reso.org/display/DDW17/Penthouse)": The type of unit is a penthouse.
    Penthouse,

    /// "[Studio](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246611)": The type of unit is a studio.
    Studio,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for UnitTypeType {
    fn from(s: String) -> UnitTypeType {
        match s.as_ref() {
            "1 Bedroom" => UnitTypeType::_1Bedroom,

            "2 Bedroom" => UnitTypeType::_2Bedroom,

            "3 Bedroom" => UnitTypeType::_3Bedroom,

            "4 Bedroom Or More" => UnitTypeType::_4BedroomOrMore,

            "Apartments" => UnitTypeType::Apartments,

            "Efficiency" => UnitTypeType::Efficiency,

            "Loft" => UnitTypeType::Loft,

            "Manager's Unit" => UnitTypeType::ManagersUnit,

            "Penthouse" => UnitTypeType::Penthouse,

            "Studio" => UnitTypeType::Studio,

            _ => UnitTypeType::OpenEnumeration(s),
        }
    }
}

impl From<&str> for UnitTypeType {
    fn from(s: &str) -> UnitTypeType {
        match s {
            "1 Bedroom" => UnitTypeType::_1Bedroom,

            "2 Bedroom" => UnitTypeType::_2Bedroom,

            "3 Bedroom" => UnitTypeType::_3Bedroom,

            "4 Bedroom Or More" => UnitTypeType::_4BedroomOrMore,

            "Apartments" => UnitTypeType::Apartments,

            "Efficiency" => UnitTypeType::Efficiency,

            "Loft" => UnitTypeType::Loft,

            "Manager's Unit" => UnitTypeType::ManagersUnit,

            "Penthouse" => UnitTypeType::Penthouse,

            "Studio" => UnitTypeType::Studio,

            _ => UnitTypeType::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a UnitTypeType> for &'a str {
    fn from(s: &'a UnitTypeType) -> &'a str {
        match s {
            UnitTypeType::_1Bedroom => "1 Bedroom",

            UnitTypeType::_2Bedroom => "2 Bedroom",

            UnitTypeType::_3Bedroom => "3 Bedroom",

            UnitTypeType::_4BedroomOrMore => "4 Bedroom Or More",

            UnitTypeType::Apartments => "Apartments",

            UnitTypeType::Efficiency => "Efficiency",

            UnitTypeType::Loft => "Loft",

            UnitTypeType::ManagersUnit => "Manager's Unit",

            UnitTypeType::Penthouse => "Penthouse",

            UnitTypeType::Studio => "Studio",

            UnitTypeType::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for UnitTypeType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for UnitTypeType {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_unit_type_type_format {
    use super::UnitTypeType;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<UnitTypeType>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<UnitTypeType>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [UnitsFurnished Lookups](https://ddwiki.reso.org/display/DDW17/UnitsFurnished+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum UnitsFurnished {
    /// "[All Units](https://ddwiki.reso.org/display/DDW17/All+Units)": All of the units in the listed income property are furnished.
    AllUnits,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246595)": None of the units in the listed income property are furnished.
    None,

    /// "[Varies By Unit](https://ddwiki.reso.org/display/DDW17/Varies+By+Unit)": Some of the units in the listing income property are furnished.
    VariesByUnit,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for UnitsFurnished {
    fn from(s: String) -> UnitsFurnished {
        match s.as_ref() {
            "All Units" => UnitsFurnished::AllUnits,

            "None" => UnitsFurnished::None,

            "Varies By Unit" => UnitsFurnished::VariesByUnit,

            _ => UnitsFurnished::OpenEnumeration(s),
        }
    }
}

impl From<&str> for UnitsFurnished {
    fn from(s: &str) -> UnitsFurnished {
        match s {
            "All Units" => UnitsFurnished::AllUnits,

            "None" => UnitsFurnished::None,

            "Varies By Unit" => UnitsFurnished::VariesByUnit,

            _ => UnitsFurnished::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a UnitsFurnished> for &'a str {
    fn from(s: &'a UnitsFurnished) -> &'a str {
        match s {
            UnitsFurnished::AllUnits => "All Units",

            UnitsFurnished::None => "None",

            UnitsFurnished::VariesByUnit => "Varies By Unit",

            UnitsFurnished::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for UnitsFurnished {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for UnitsFurnished {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_units_furnished_format {
    use super::UnitsFurnished;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<UnitsFurnished>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<UnitsFurnished>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Utilities Lookups](https://ddwiki.reso.org/display/DDW17/Utilities+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Utilities {
    /// "[Cable Available](https://ddwiki.reso.org/display/DDW17/Cable+Available)": The property has cable available but is not connected.
    CableAvailable,

    /// "[Cable Connected](https://ddwiki.reso.org/display/DDW17/Cable+Connected)": Cable service is physically connected, but not necessarily paid.
    CableConnected,

    /// "[Cable Not Available](https://ddwiki.reso.org/display/DDW17/Cable+Not+Available)": Cable is not available in the area of the property.
    CableNotAvailable,

    /// "[Electricity Available](https://ddwiki.reso.org/display/DDW17/Electricity+Available)": Electricity is available from the public utility but not connected.
    ElectricityAvailable,

    /// "[Electricity Connected](https://ddwiki.reso.org/display/DDW17/Electricity+Connected)": Electricity from the public utility is available and connected, but not necessarily paid.
    ElectricityConnected,

    /// "[Electricity Not Available](https://ddwiki.reso.org/display/DDW17/Electricity+Not+Available)": Electricity from the public utility is not available.  An independent source of electricity is the only option.
    ElectricityNotAvailable,

    /// "[Natural Gas Available](https://ddwiki.reso.org/display/DDW17/Natural+Gas+Available)": Natural gas is available from the public utility but not connected.
    NaturalGasAvailable,

    /// "[Natural Gas Connected](https://ddwiki.reso.org/display/DDW17/Natural+Gas+Connected)": Natural gas from the public utility is available and connected, but not necessarily paid.
    NaturalGasConnected,

    /// "[Natural Gas Not Available](https://ddwiki.reso.org/display/DDW17/Natural+Gas+Not+Available)": Natural gas from the public utility is not available.  An independent source of gas is the only option.  i.e. propane.
    NaturalGasNotAvailable,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246579)": There are no public utilities currently available or connected.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246580)": There are utilities other than those listed.
    Other,

    /// "[Phone Available](https://ddwiki.reso.org/display/DDW17/Phone+Available)": The property has telephone service available but is not connected.
    PhoneAvailable,

    /// "[Phone Connected](https://ddwiki.reso.org/display/DDW17/Phone+Connected)": Telephone service is physically connected, but not necessarily paid.
    PhoneConnected,

    /// "[Phone Not Available](https://ddwiki.reso.org/display/DDW17/Phone+Not+Available)": Telephone service is not available in the area of the property.
    PhoneNotAvailable,

    /// "[Propane](https://ddwiki.reso.org/display/DDW17/Propane)": The property has a propane system.
    Propane,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246585)": See remarks for details about the public or other utilities available/installed at the property.
    SeeRemarks,

    /// "[Sewer Available](https://ddwiki.reso.org/display/DDW17/Sewer+Available)": Sewer service is available from the public utility but not connected.
    SewerAvailable,

    /// "[Sewer Connected](https://ddwiki.reso.org/display/DDW17/Sewer+Connected)": Sewer service from the public utility is available and connected, but not necessarily paid.
    SewerConnected,

    /// "[Sewer Not Available](https://ddwiki.reso.org/display/DDW17/Sewer+Not+Available)": Sewer service from the public utility is not available.  An independent alternative to sewer is the only option.  i.e. septic.
    SewerNotAvailable,

    /// "[Underground Utilities](https://ddwiki.reso.org/display/DDW17/Underground+Utilities)": All or some of the utilities are run underground.
    UndergroundUtilities,

    /// "[Water Available](https://ddwiki.reso.org/display/DDW17/Water+Available)": Water service is available from the public utility but not connected.
    WaterAvailable,

    /// "[Water Connected](https://ddwiki.reso.org/display/DDW17/Water+Connected)": Water service from the public utility is available and connected, but not necessarily paid.
    WaterConnected,

    /// "[Water Not Available](https://ddwiki.reso.org/display/DDW17/Water+Not+Available)": Water service from the public utility is not available.  An independent source for water is the only option.  i.e. well.
    WaterNotAvailable,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Utilities {
    fn from(s: String) -> Utilities {
        match s.as_ref() {
            "Cable Available" => Utilities::CableAvailable,

            "Cable Connected" => Utilities::CableConnected,

            "Cable Not Available" => Utilities::CableNotAvailable,

            "Electricity Available" => Utilities::ElectricityAvailable,

            "Electricity Connected" => Utilities::ElectricityConnected,

            "Electricity Not Available" => Utilities::ElectricityNotAvailable,

            "Natural Gas Available" => Utilities::NaturalGasAvailable,

            "Natural Gas Connected" => Utilities::NaturalGasConnected,

            "Natural Gas Not Available" => Utilities::NaturalGasNotAvailable,

            "None" => Utilities::None,

            "Other" => Utilities::Other,

            "Phone Available" => Utilities::PhoneAvailable,

            "Phone Connected" => Utilities::PhoneConnected,

            "Phone Not Available" => Utilities::PhoneNotAvailable,

            "Propane" => Utilities::Propane,

            "See Remarks" => Utilities::SeeRemarks,

            "Sewer Available" => Utilities::SewerAvailable,

            "Sewer Connected" => Utilities::SewerConnected,

            "Sewer Not Available" => Utilities::SewerNotAvailable,

            "Underground Utilities" => Utilities::UndergroundUtilities,

            "Water Available" => Utilities::WaterAvailable,

            "Water Connected" => Utilities::WaterConnected,

            "Water Not Available" => Utilities::WaterNotAvailable,

            _ => Utilities::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Utilities {
    fn from(s: &str) -> Utilities {
        match s {
            "Cable Available" => Utilities::CableAvailable,

            "Cable Connected" => Utilities::CableConnected,

            "Cable Not Available" => Utilities::CableNotAvailable,

            "Electricity Available" => Utilities::ElectricityAvailable,

            "Electricity Connected" => Utilities::ElectricityConnected,

            "Electricity Not Available" => Utilities::ElectricityNotAvailable,

            "Natural Gas Available" => Utilities::NaturalGasAvailable,

            "Natural Gas Connected" => Utilities::NaturalGasConnected,

            "Natural Gas Not Available" => Utilities::NaturalGasNotAvailable,

            "None" => Utilities::None,

            "Other" => Utilities::Other,

            "Phone Available" => Utilities::PhoneAvailable,

            "Phone Connected" => Utilities::PhoneConnected,

            "Phone Not Available" => Utilities::PhoneNotAvailable,

            "Propane" => Utilities::Propane,

            "See Remarks" => Utilities::SeeRemarks,

            "Sewer Available" => Utilities::SewerAvailable,

            "Sewer Connected" => Utilities::SewerConnected,

            "Sewer Not Available" => Utilities::SewerNotAvailable,

            "Underground Utilities" => Utilities::UndergroundUtilities,

            "Water Available" => Utilities::WaterAvailable,

            "Water Connected" => Utilities::WaterConnected,

            "Water Not Available" => Utilities::WaterNotAvailable,

            _ => Utilities::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Utilities> for &'a str {
    fn from(s: &'a Utilities) -> &'a str {
        match s {
            Utilities::CableAvailable => "Cable Available",

            Utilities::CableConnected => "Cable Connected",

            Utilities::CableNotAvailable => "Cable Not Available",

            Utilities::ElectricityAvailable => "Electricity Available",

            Utilities::ElectricityConnected => "Electricity Connected",

            Utilities::ElectricityNotAvailable => "Electricity Not Available",

            Utilities::NaturalGasAvailable => "Natural Gas Available",

            Utilities::NaturalGasConnected => "Natural Gas Connected",

            Utilities::NaturalGasNotAvailable => "Natural Gas Not Available",

            Utilities::None => "None",

            Utilities::Other => "Other",

            Utilities::PhoneAvailable => "Phone Available",

            Utilities::PhoneConnected => "Phone Connected",

            Utilities::PhoneNotAvailable => "Phone Not Available",

            Utilities::Propane => "Propane",

            Utilities::SeeRemarks => "See Remarks",

            Utilities::SewerAvailable => "Sewer Available",

            Utilities::SewerConnected => "Sewer Connected",

            Utilities::SewerNotAvailable => "Sewer Not Available",

            Utilities::UndergroundUtilities => "Underground Utilities",

            Utilities::WaterAvailable => "Water Available",

            Utilities::WaterConnected => "Water Connected",

            Utilities::WaterNotAvailable => "Water Not Available",

            Utilities::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Utilities {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Utilities {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_utilities_format {
    use super::Utilities;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Utilities>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Utilities>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [Vegetation Lookups](https://ddwiki.reso.org/display/DDW17/Vegetation+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum Vegetation {
    /// "[Brush](https://ddwiki.reso.org/display/DDW17/Brush)": The lot has brush.
    Brush,

    /// "[Cleared](https://ddwiki.reso.org/display/DDW17/Cleared)": The lot has been cleared.
    Cleared,

    /// "[Crop(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246678)": There are crops on the lot.
    Crops,

    /// "[Grassed](https://ddwiki.reso.org/display/DDW17/Grassed)": The lot is grassed.
    Grassed,

    /// "[Heavily Wooded](https://ddwiki.reso.org/display/DDW17/Heavily+Wooded)": The lot is heavily wooded.
    HeavilyWooded,

    /// "[Natural State](https://ddwiki.reso.org/display/DDW17/Natural+State)": The lot is in its natural state.
    NaturalState,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246682)": There are other types of vegetation on the lot than those in this list.
    Other,

    /// "[Partially Wooded](https://ddwiki.reso.org/display/DDW17/Partially+Wooded)": The lot is partially wooded.
    PartiallyWooded,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246684)": See the Public or Private Remarks for details about the vegetation found on the lot.
    SeeRemarks,

    /// "[Wooded](https://ddwiki.reso.org/display/DDW17/Wooded)": The lot is wooded.
    Wooded,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for Vegetation {
    fn from(s: String) -> Vegetation {
        match s.as_ref() {
            "Brush" => Vegetation::Brush,

            "Cleared" => Vegetation::Cleared,

            "Crop(s)" => Vegetation::Crops,

            "Grassed" => Vegetation::Grassed,

            "Heavily Wooded" => Vegetation::HeavilyWooded,

            "Natural State" => Vegetation::NaturalState,

            "Other" => Vegetation::Other,

            "Partially Wooded" => Vegetation::PartiallyWooded,

            "See Remarks" => Vegetation::SeeRemarks,

            "Wooded" => Vegetation::Wooded,

            _ => Vegetation::OpenEnumeration(s),
        }
    }
}

impl From<&str> for Vegetation {
    fn from(s: &str) -> Vegetation {
        match s {
            "Brush" => Vegetation::Brush,

            "Cleared" => Vegetation::Cleared,

            "Crop(s)" => Vegetation::Crops,

            "Grassed" => Vegetation::Grassed,

            "Heavily Wooded" => Vegetation::HeavilyWooded,

            "Natural State" => Vegetation::NaturalState,

            "Other" => Vegetation::Other,

            "Partially Wooded" => Vegetation::PartiallyWooded,

            "See Remarks" => Vegetation::SeeRemarks,

            "Wooded" => Vegetation::Wooded,

            _ => Vegetation::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a Vegetation> for &'a str {
    fn from(s: &'a Vegetation) -> &'a str {
        match s {
            Vegetation::Brush => "Brush",

            Vegetation::Cleared => "Cleared",

            Vegetation::Crops => "Crop(s)",

            Vegetation::Grassed => "Grassed",

            Vegetation::HeavilyWooded => "Heavily Wooded",

            Vegetation::NaturalState => "Natural State",

            Vegetation::Other => "Other",

            Vegetation::PartiallyWooded => "Partially Wooded",

            Vegetation::SeeRemarks => "See Remarks",

            Vegetation::Wooded => "Wooded",

            Vegetation::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for Vegetation {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for Vegetation {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_vegetation_format {
    use super::Vegetation;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<Vegetation>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<Vegetation>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [View Lookups](https://ddwiki.reso.org/display/DDW17/View+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum View {
    /// "[Bay](https://ddwiki.reso.org/display/DDW17/Bay)": The property has a bay view.
    Bay,

    /// "[Beach](https://ddwiki.reso.org/display/DDW17/Beach)": The property has a beach view.
    Beach,

    /// "[Bridge(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246689)": The property has a bridge(s) view.
    Bridges,

    /// "[Canal](https://ddwiki.reso.org/display/DDW17/Canal)": The property has a canal view.
    Canal,

    /// "[Canyon](https://ddwiki.reso.org/display/DDW17/Canyon)": The property has a canyon view.
    Canyon,

    /// "[City](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246692)": The property has a city view.
    City,

    /// "[City Lights](https://ddwiki.reso.org/display/DDW17/City+Lights)": The property has a view of the city lights.
    CityLights,

    /// "[Creek/Stream](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246694)": The property has a creek/stream view.
    CreekStream,

    /// "[Desert](https://ddwiki.reso.org/display/DDW17/Desert)": The property has a desert view.
    Desert,

    /// "[Downtown](https://ddwiki.reso.org/display/DDW17/Downtown)": The property has a downtown view.
    Downtown,

    /// "[Forest](https://ddwiki.reso.org/display/DDW17/Forest)": The property has a forest view.
    Forest,

    /// "[Garden](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246698)": The property has a garden view.
    Garden,

    /// "[Golf Course](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246699)": The property has a view of the golf course.
    GolfCourse,

    /// "[Hills](https://ddwiki.reso.org/display/DDW17/Hills)": The property has a view of the hills.
    Hills,

    /// "[Lake](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246701)": The property has a lake view.
    Lake,

    /// "[Marina](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246702)": The property has a marina view.
    Marina,

    /// "[Meadow](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246703)": The property has a view of the meadow.
    Meadow,

    /// "[Mountain(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246704)": The property has a mountain view.
    Mountains,

    /// "[Neighborhood](https://ddwiki.reso.org/display/DDW17/Neighborhood)": The property has a view of the neighborhood.
    Neighborhood,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246706)": The property has no view.
    None,

    /// "[Ocean](https://ddwiki.reso.org/display/DDW17/Ocean)": The property has an ocean view.
    Ocean,

    /// "[Orchard](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246708)": The property has a view of the orchard(s).
    Orchard,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246709)": The property has a view other than those in this list.
    Other,

    /// "[Panoramic](https://ddwiki.reso.org/display/DDW17/Panoramic)": The property has a panoramic view.
    Panoramic,

    /// "[Park/Greenbelt](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246711)": The property has a park/greenbelt view.
    ParkGreenbelt,

    /// "[Pasture](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246712)": The property has a view of the pasture.
    Pasture,

    /// "[Pond](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246713)": The property has a view of a pond.
    Pond,

    /// "[Pool](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246714)": The property has a view of the pool.
    Pool,

    /// "[Ridge](https://ddwiki.reso.org/display/DDW17/Ridge)": The property has a view of the ridge.
    Ridge,

    /// "[River](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246716)": The property has a river view.
    River,

    /// "[Rural](https://ddwiki.reso.org/display/DDW17/Rural)": The property has a rural view.
    Rural,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246718)": See the remarks fields for more information about the view from the property.
    SeeRemarks,

    /// "[Skyline](https://ddwiki.reso.org/display/DDW17/Skyline)": The property has a view of the skyline.
    Skyline,

    /// "[Territorial](https://ddwiki.reso.org/display/DDW17/Territorial)": The property has a view of the surrounding area.
    Territorial,

    /// "[Trees/Woods](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246721)": The property has a view of the trees or woods.
    TreesWoods,

    /// "[Valley](https://ddwiki.reso.org/display/DDW17/Valley)": The property has a view of the valley.
    Valley,

    /// "[Vineyard](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246723)": The property has a view of the vineyard(s).
    Vineyard,

    /// "[Water](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246724)": The property has a water view.
    Water,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for View {
    fn from(s: String) -> View {
        match s.as_ref() {
            "Bay" => View::Bay,

            "Beach" => View::Beach,

            "Bridge(s)" => View::Bridges,

            "Canal" => View::Canal,

            "Canyon" => View::Canyon,

            "City" => View::City,

            "City Lights" => View::CityLights,

            "Creek/Stream" => View::CreekStream,

            "Desert" => View::Desert,

            "Downtown" => View::Downtown,

            "Forest" => View::Forest,

            "Garden" => View::Garden,

            "Golf Course" => View::GolfCourse,

            "Hills" => View::Hills,

            "Lake" => View::Lake,

            "Marina" => View::Marina,

            "Meadow" => View::Meadow,

            "Mountain(s)" => View::Mountains,

            "Neighborhood" => View::Neighborhood,

            "None" => View::None,

            "Ocean" => View::Ocean,

            "Orchard" => View::Orchard,

            "Other" => View::Other,

            "Panoramic" => View::Panoramic,

            "Park/Greenbelt" => View::ParkGreenbelt,

            "Pasture" => View::Pasture,

            "Pond" => View::Pond,

            "Pool" => View::Pool,

            "Ridge" => View::Ridge,

            "River" => View::River,

            "Rural" => View::Rural,

            "See Remarks" => View::SeeRemarks,

            "Skyline" => View::Skyline,

            "Territorial" => View::Territorial,

            "Trees/Woods" => View::TreesWoods,

            "Valley" => View::Valley,

            "Vineyard" => View::Vineyard,

            "Water" => View::Water,

            _ => View::OpenEnumeration(s),
        }
    }
}

impl From<&str> for View {
    fn from(s: &str) -> View {
        match s {
            "Bay" => View::Bay,

            "Beach" => View::Beach,

            "Bridge(s)" => View::Bridges,

            "Canal" => View::Canal,

            "Canyon" => View::Canyon,

            "City" => View::City,

            "City Lights" => View::CityLights,

            "Creek/Stream" => View::CreekStream,

            "Desert" => View::Desert,

            "Downtown" => View::Downtown,

            "Forest" => View::Forest,

            "Garden" => View::Garden,

            "Golf Course" => View::GolfCourse,

            "Hills" => View::Hills,

            "Lake" => View::Lake,

            "Marina" => View::Marina,

            "Meadow" => View::Meadow,

            "Mountain(s)" => View::Mountains,

            "Neighborhood" => View::Neighborhood,

            "None" => View::None,

            "Ocean" => View::Ocean,

            "Orchard" => View::Orchard,

            "Other" => View::Other,

            "Panoramic" => View::Panoramic,

            "Park/Greenbelt" => View::ParkGreenbelt,

            "Pasture" => View::Pasture,

            "Pond" => View::Pond,

            "Pool" => View::Pool,

            "Ridge" => View::Ridge,

            "River" => View::River,

            "Rural" => View::Rural,

            "See Remarks" => View::SeeRemarks,

            "Skyline" => View::Skyline,

            "Territorial" => View::Territorial,

            "Trees/Woods" => View::TreesWoods,

            "Valley" => View::Valley,

            "Vineyard" => View::Vineyard,

            "Water" => View::Water,

            _ => View::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a View> for &'a str {
    fn from(s: &'a View) -> &'a str {
        match s {
            View::Bay => "Bay",

            View::Beach => "Beach",

            View::Bridges => "Bridge(s)",

            View::Canal => "Canal",

            View::Canyon => "Canyon",

            View::City => "City",

            View::CityLights => "City Lights",

            View::CreekStream => "Creek/Stream",

            View::Desert => "Desert",

            View::Downtown => "Downtown",

            View::Forest => "Forest",

            View::Garden => "Garden",

            View::GolfCourse => "Golf Course",

            View::Hills => "Hills",

            View::Lake => "Lake",

            View::Marina => "Marina",

            View::Meadow => "Meadow",

            View::Mountains => "Mountain(s)",

            View::Neighborhood => "Neighborhood",

            View::None => "None",

            View::Ocean => "Ocean",

            View::Orchard => "Orchard",

            View::Other => "Other",

            View::Panoramic => "Panoramic",

            View::ParkGreenbelt => "Park/Greenbelt",

            View::Pasture => "Pasture",

            View::Pond => "Pond",

            View::Pool => "Pool",

            View::Ridge => "Ridge",

            View::River => "River",

            View::Rural => "Rural",

            View::SeeRemarks => "See Remarks",

            View::Skyline => "Skyline",

            View::Territorial => "Territorial",

            View::TreesWoods => "Trees/Woods",

            View::Valley => "Valley",

            View::Vineyard => "Vineyard",

            View::Water => "Water",

            View::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for View {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for View {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_view_format {
    use super::View;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(items: &Option<Vec<View>>, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<View>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [WaterSource Lookups](https://ddwiki.reso.org/display/DDW17/WaterSource+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum WaterSource {
    /// "[Cistern](https://ddwiki.reso.org/display/DDW17/Cistern)": The property's source of water has/includes a cistern.
    Cistern,

    /// "[None](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246615)": The property has no current source of water.
    None,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246616)": The property has a source of water other than those listed.
    Other,

    /// "[Private](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246617)": The property's source of water is private.
    Private,

    /// "[Public](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246618)": The property's source of water is public.
    Public,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246619)": See the listing's remarks for details on the property's water source.
    SeeRemarks,

    /// "[Shared Well](https://ddwiki.reso.org/display/DDW17/Shared+Well)": The property's source of water has/includes a shared well.
    SharedWell,

    /// "[Spring](https://ddwiki.reso.org/display/DDW17/Spring)": The property's source of water has/includes a spring.
    Spring,

    /// "[Well](https://ddwiki.reso.org/display/DDW17/Well)": The property's source of water has/includes a well.
    Well,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for WaterSource {
    fn from(s: String) -> WaterSource {
        match s.as_ref() {
            "Cistern" => WaterSource::Cistern,

            "None" => WaterSource::None,

            "Other" => WaterSource::Other,

            "Private" => WaterSource::Private,

            "Public" => WaterSource::Public,

            "See Remarks" => WaterSource::SeeRemarks,

            "Shared Well" => WaterSource::SharedWell,

            "Spring" => WaterSource::Spring,

            "Well" => WaterSource::Well,

            _ => WaterSource::OpenEnumeration(s),
        }
    }
}

impl From<&str> for WaterSource {
    fn from(s: &str) -> WaterSource {
        match s {
            "Cistern" => WaterSource::Cistern,

            "None" => WaterSource::None,

            "Other" => WaterSource::Other,

            "Private" => WaterSource::Private,

            "Public" => WaterSource::Public,

            "See Remarks" => WaterSource::SeeRemarks,

            "Shared Well" => WaterSource::SharedWell,

            "Spring" => WaterSource::Spring,

            "Well" => WaterSource::Well,

            _ => WaterSource::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a WaterSource> for &'a str {
    fn from(s: &'a WaterSource) -> &'a str {
        match s {
            WaterSource::Cistern => "Cistern",

            WaterSource::None => "None",

            WaterSource::Other => "Other",

            WaterSource::Private => "Private",

            WaterSource::Public => "Public",

            WaterSource::SeeRemarks => "See Remarks",

            WaterSource::SharedWell => "Shared Well",

            WaterSource::Spring => "Spring",

            WaterSource::Well => "Well",

            WaterSource::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for WaterSource {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for WaterSource {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_water_source_format {
    use super::WaterSource;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<WaterSource>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(deserializer: D) -> Result<Option<Vec<WaterSource>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [WaterfrontFeatures Lookups](https://ddwiki.reso.org/display/DDW17/WaterfrontFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum WaterfrontFeatures {
    /// "[Beach Access](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246624)": The property has access to the beach.
    BeachAccess,

    /// "[Beach Front](https://ddwiki.reso.org/display/DDW17/Beach+Front)": The property is on the beach front.
    BeachFront,

    /// "[Canal Access](https://ddwiki.reso.org/display/DDW17/Canal+Access)": The property has access to the canal(s).
    CanalAccess,

    /// "[Canal Front](https://ddwiki.reso.org/display/DDW17/Canal+Front)": The property is located on the canal.
    CanalFront,

    /// "[Creek](https://ddwiki.reso.org/display/DDW17/Creek)": The property is either on or near a creek.
    Creek,

    /// "[Lagoon](https://ddwiki.reso.org/display/DDW17/Lagoon)": The property is either on or near a lagoon.
    Lagoon,

    /// "[Lake](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246630)": The property is either on or near a lake.
    Lake,

    /// "[Lake Front](https://ddwiki.reso.org/display/DDW17/Lake+Front)": The property is on the lake front.
    LakeFront,

    /// "[Lake Privileges](https://ddwiki.reso.org/display/DDW17/Lake+Privileges)": The property includes rights to access the lake.
    LakePrivileges,

    /// "[Navigable Water](https://ddwiki.reso.org/display/DDW17/Navigable+Water)": The water wide, slow and deep enough for water vessels.
    NavigableWater,

    /// "[Ocean Access](https://ddwiki.reso.org/display/DDW17/Ocean+Access)": The property has access to the ocean.
    OceanAccess,

    /// "[Ocean Front](https://ddwiki.reso.org/display/DDW17/Ocean+Front)": The property is on the ocean front.
    OceanFront,

    /// "[Pond](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246636)": The property is on or near a pond.
    Pond,

    /// "[River Access](https://ddwiki.reso.org/display/DDW17/River+Access)": The property has access to the river.
    RiverAccess,

    /// "[River Front](https://ddwiki.reso.org/display/DDW17/River+Front)": The property is located on the river front.
    RiverFront,

    /// "[Seawall](https://ddwiki.reso.org/display/DDW17/Seawall)": The property is protected by a sea wall or barrier.
    Seawall,

    /// "[Stream](https://ddwiki.reso.org/display/DDW17/Stream)": The property is on our near a stream.
    Stream,

    /// "[Waterfront](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246641)": The property is located on the waterfront.
    Waterfront,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for WaterfrontFeatures {
    fn from(s: String) -> WaterfrontFeatures {
        match s.as_ref() {
            "Beach Access" => WaterfrontFeatures::BeachAccess,

            "Beach Front" => WaterfrontFeatures::BeachFront,

            "Canal Access" => WaterfrontFeatures::CanalAccess,

            "Canal Front" => WaterfrontFeatures::CanalFront,

            "Creek" => WaterfrontFeatures::Creek,

            "Lagoon" => WaterfrontFeatures::Lagoon,

            "Lake" => WaterfrontFeatures::Lake,

            "Lake Front" => WaterfrontFeatures::LakeFront,

            "Lake Privileges" => WaterfrontFeatures::LakePrivileges,

            "Navigable Water" => WaterfrontFeatures::NavigableWater,

            "Ocean Access" => WaterfrontFeatures::OceanAccess,

            "Ocean Front" => WaterfrontFeatures::OceanFront,

            "Pond" => WaterfrontFeatures::Pond,

            "River Access" => WaterfrontFeatures::RiverAccess,

            "River Front" => WaterfrontFeatures::RiverFront,

            "Seawall" => WaterfrontFeatures::Seawall,

            "Stream" => WaterfrontFeatures::Stream,

            "Waterfront" => WaterfrontFeatures::Waterfront,

            _ => WaterfrontFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for WaterfrontFeatures {
    fn from(s: &str) -> WaterfrontFeatures {
        match s {
            "Beach Access" => WaterfrontFeatures::BeachAccess,

            "Beach Front" => WaterfrontFeatures::BeachFront,

            "Canal Access" => WaterfrontFeatures::CanalAccess,

            "Canal Front" => WaterfrontFeatures::CanalFront,

            "Creek" => WaterfrontFeatures::Creek,

            "Lagoon" => WaterfrontFeatures::Lagoon,

            "Lake" => WaterfrontFeatures::Lake,

            "Lake Front" => WaterfrontFeatures::LakeFront,

            "Lake Privileges" => WaterfrontFeatures::LakePrivileges,

            "Navigable Water" => WaterfrontFeatures::NavigableWater,

            "Ocean Access" => WaterfrontFeatures::OceanAccess,

            "Ocean Front" => WaterfrontFeatures::OceanFront,

            "Pond" => WaterfrontFeatures::Pond,

            "River Access" => WaterfrontFeatures::RiverAccess,

            "River Front" => WaterfrontFeatures::RiverFront,

            "Seawall" => WaterfrontFeatures::Seawall,

            "Stream" => WaterfrontFeatures::Stream,

            "Waterfront" => WaterfrontFeatures::Waterfront,

            _ => WaterfrontFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a WaterfrontFeatures> for &'a str {
    fn from(s: &'a WaterfrontFeatures) -> &'a str {
        match s {
            WaterfrontFeatures::BeachAccess => "Beach Access",

            WaterfrontFeatures::BeachFront => "Beach Front",

            WaterfrontFeatures::CanalAccess => "Canal Access",

            WaterfrontFeatures::CanalFront => "Canal Front",

            WaterfrontFeatures::Creek => "Creek",

            WaterfrontFeatures::Lagoon => "Lagoon",

            WaterfrontFeatures::Lake => "Lake",

            WaterfrontFeatures::LakeFront => "Lake Front",

            WaterfrontFeatures::LakePrivileges => "Lake Privileges",

            WaterfrontFeatures::NavigableWater => "Navigable Water",

            WaterfrontFeatures::OceanAccess => "Ocean Access",

            WaterfrontFeatures::OceanFront => "Ocean Front",

            WaterfrontFeatures::Pond => "Pond",

            WaterfrontFeatures::RiverAccess => "River Access",

            WaterfrontFeatures::RiverFront => "River Front",

            WaterfrontFeatures::Seawall => "Seawall",

            WaterfrontFeatures::Stream => "Stream",

            WaterfrontFeatures::Waterfront => "Waterfront",

            WaterfrontFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for WaterfrontFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for WaterfrontFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_waterfront_features_format {
    use super::WaterfrontFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<WaterfrontFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<WaterfrontFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [WindowFeatures Lookups](https://ddwiki.reso.org/display/DDW17/WindowFeatures+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum WindowFeatures {
    /// "[Aluminum Frames](https://ddwiki.reso.org/display/DDW17/Aluminum+Frames)": The windows have aluminum frames.
    AluminumFrames,

    /// "[Bay Window(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246644)": The property has one or more bay windows.
    BayWindows,

    /// "[Blinds](https://ddwiki.reso.org/display/DDW17/Blinds)": The property has window blinds.
    Blinds,

    /// "[Display Window(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246646)": The property has one or more windows that would normally be used to display goods or products.
    DisplayWindows,

    /// "[Double Pane Windows](https://ddwiki.reso.org/display/DDW17/Double+Pane+Windows)": The property has windows with two panes of glass.
    DoublePaneWindows,

    /// "[Drapes](https://ddwiki.reso.org/display/DDW17/Drapes)": The property has drapes.
    Drapes,

    /// "[ENERGY STAR Qualified Windows](https://ddwiki.reso.org/display/DDW17/ENERGY+STAR+Qualified+Windows)": The property has ENERGY STAR Qualified windows.
    ENERGYSTARQualifiedWindows,

    /// "[Garden Window(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246650)": The property has one or more garden windows.
    GardenWindows,

    /// "[Insulated Windows](https://ddwiki.reso.org/display/DDW17/Insulated+Windows)": The property has insulated windows.
    InsulatedWindows,

    /// "[Low Emissivity Windows](https://ddwiki.reso.org/display/DDW17/Low+Emissivity+Windows)": The property has low emissivity windows.
    LowEmissivityWindows,

    /// "[Plantation Shutters](https://ddwiki.reso.org/display/DDW17/Plantation+Shutters)": The property has plantation shutters.
    PlantationShutters,

    /// "[Screens](https://ddwiki.reso.org/display/DDW17/Screens)": The property has screens.
    Screens,

    /// "[Shutters](https://ddwiki.reso.org/display/DDW17/Shutters)": The property has shutters.
    Shutters,

    /// "[Skylight(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246656)": The property has skylight(s).
    Skylights,

    /// "[Solar Screens](https://ddwiki.reso.org/display/DDW17/Solar+Screens)": The property has solar screens.
    SolarScreens,

    /// "[Storm Window(s)](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246658)": The property has storm window(s).
    StormWindows,

    /// "[Tinted Windows](https://ddwiki.reso.org/display/DDW17/Tinted+Windows)": The property has tinted windows.
    TintedWindows,

    /// "[Triple Pane Windows](https://ddwiki.reso.org/display/DDW17/Triple+Pane+Windows)": The property has triple pane windows.
    TriplePaneWindows,

    /// "[Window Coverings](https://ddwiki.reso.org/display/DDW17/Window+Coverings)": The property has window coverings.
    WindowCoverings,

    /// "[Window Treatments](https://ddwiki.reso.org/display/DDW17/Window+Treatments)": The property has window treatments.
    WindowTreatments,

    /// "[Wood Frames](https://ddwiki.reso.org/display/DDW17/Wood+Frames)": The property has wood framed windows.
    WoodFrames,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for WindowFeatures {
    fn from(s: String) -> WindowFeatures {
        match s.as_ref() {
            "Aluminum Frames" => WindowFeatures::AluminumFrames,

            "Bay Window(s)" => WindowFeatures::BayWindows,

            "Blinds" => WindowFeatures::Blinds,

            "Display Window(s)" => WindowFeatures::DisplayWindows,

            "Double Pane Windows" => WindowFeatures::DoublePaneWindows,

            "Drapes" => WindowFeatures::Drapes,

            "ENERGY STAR Qualified Windows" => WindowFeatures::ENERGYSTARQualifiedWindows,

            "Garden Window(s)" => WindowFeatures::GardenWindows,

            "Insulated Windows" => WindowFeatures::InsulatedWindows,

            "Low Emissivity Windows" => WindowFeatures::LowEmissivityWindows,

            "Plantation Shutters" => WindowFeatures::PlantationShutters,

            "Screens" => WindowFeatures::Screens,

            "Shutters" => WindowFeatures::Shutters,

            "Skylight(s)" => WindowFeatures::Skylights,

            "Solar Screens" => WindowFeatures::SolarScreens,

            "Storm Window(s)" => WindowFeatures::StormWindows,

            "Tinted Windows" => WindowFeatures::TintedWindows,

            "Triple Pane Windows" => WindowFeatures::TriplePaneWindows,

            "Window Coverings" => WindowFeatures::WindowCoverings,

            "Window Treatments" => WindowFeatures::WindowTreatments,

            "Wood Frames" => WindowFeatures::WoodFrames,

            _ => WindowFeatures::OpenEnumeration(s),
        }
    }
}

impl From<&str> for WindowFeatures {
    fn from(s: &str) -> WindowFeatures {
        match s {
            "Aluminum Frames" => WindowFeatures::AluminumFrames,

            "Bay Window(s)" => WindowFeatures::BayWindows,

            "Blinds" => WindowFeatures::Blinds,

            "Display Window(s)" => WindowFeatures::DisplayWindows,

            "Double Pane Windows" => WindowFeatures::DoublePaneWindows,

            "Drapes" => WindowFeatures::Drapes,

            "ENERGY STAR Qualified Windows" => WindowFeatures::ENERGYSTARQualifiedWindows,

            "Garden Window(s)" => WindowFeatures::GardenWindows,

            "Insulated Windows" => WindowFeatures::InsulatedWindows,

            "Low Emissivity Windows" => WindowFeatures::LowEmissivityWindows,

            "Plantation Shutters" => WindowFeatures::PlantationShutters,

            "Screens" => WindowFeatures::Screens,

            "Shutters" => WindowFeatures::Shutters,

            "Skylight(s)" => WindowFeatures::Skylights,

            "Solar Screens" => WindowFeatures::SolarScreens,

            "Storm Window(s)" => WindowFeatures::StormWindows,

            "Tinted Windows" => WindowFeatures::TintedWindows,

            "Triple Pane Windows" => WindowFeatures::TriplePaneWindows,

            "Window Coverings" => WindowFeatures::WindowCoverings,

            "Window Treatments" => WindowFeatures::WindowTreatments,

            "Wood Frames" => WindowFeatures::WoodFrames,

            _ => WindowFeatures::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a WindowFeatures> for &'a str {
    fn from(s: &'a WindowFeatures) -> &'a str {
        match s {
            WindowFeatures::AluminumFrames => "Aluminum Frames",

            WindowFeatures::BayWindows => "Bay Window(s)",

            WindowFeatures::Blinds => "Blinds",

            WindowFeatures::DisplayWindows => "Display Window(s)",

            WindowFeatures::DoublePaneWindows => "Double Pane Windows",

            WindowFeatures::Drapes => "Drapes",

            WindowFeatures::ENERGYSTARQualifiedWindows => "ENERGY STAR Qualified Windows",

            WindowFeatures::GardenWindows => "Garden Window(s)",

            WindowFeatures::InsulatedWindows => "Insulated Windows",

            WindowFeatures::LowEmissivityWindows => "Low Emissivity Windows",

            WindowFeatures::PlantationShutters => "Plantation Shutters",

            WindowFeatures::Screens => "Screens",

            WindowFeatures::Shutters => "Shutters",

            WindowFeatures::Skylights => "Skylight(s)",

            WindowFeatures::SolarScreens => "Solar Screens",

            WindowFeatures::StormWindows => "Storm Window(s)",

            WindowFeatures::TintedWindows => "Tinted Windows",

            WindowFeatures::TriplePaneWindows => "Triple Pane Windows",

            WindowFeatures::WindowCoverings => "Window Coverings",

            WindowFeatures::WindowTreatments => "Window Treatments",

            WindowFeatures::WoodFrames => "Wood Frames",

            WindowFeatures::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for WindowFeatures {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for WindowFeatures {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_window_features_format {
    use super::WindowFeatures;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<WindowFeatures>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<WindowFeatures>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}

/// [YearBuiltSource Lookups](https://ddwiki.reso.org/display/DDW17/YearBuiltSource+Lookups)
#[derive(Debug, Clone, Eq, PartialEq)]
pub enum YearBuiltSource {
    /// "[Appraiser](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246666)": An appraiser provided the year built.
    Appraiser,

    /// "[Assessor](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246667)": The assessor provided the year built.
    Assessor,

    /// "[Builder](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246668)": The builder provided the year built.
    Builder,

    /// "[Estimated](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246669)": The year built is an estimate.
    Estimated,

    /// "[Other](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246670)": The year built was provided by another party not listed.
    Other,

    /// "[Owner](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246671)": The owner provided the year built.
    Owner,

    /// "[Public Records](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246672)": The year built was received from public records.
    PublicRecords,

    /// "[See Remarks](https://ddwiki.reso.org/pages/viewpage.action?pageId=29246673)": See remarks for information about the source of the lot size measurement.
    SeeRemarks,

    /// A value that was not defined by the enumeration
    OpenEnumeration(String),
}

impl From<String> for YearBuiltSource {
    fn from(s: String) -> YearBuiltSource {
        match s.as_ref() {
            "Appraiser" => YearBuiltSource::Appraiser,

            "Assessor" => YearBuiltSource::Assessor,

            "Builder" => YearBuiltSource::Builder,

            "Estimated" => YearBuiltSource::Estimated,

            "Other" => YearBuiltSource::Other,

            "Owner" => YearBuiltSource::Owner,

            "Public Records" => YearBuiltSource::PublicRecords,

            "See Remarks" => YearBuiltSource::SeeRemarks,

            _ => YearBuiltSource::OpenEnumeration(s),
        }
    }
}

impl From<&str> for YearBuiltSource {
    fn from(s: &str) -> YearBuiltSource {
        match s {
            "Appraiser" => YearBuiltSource::Appraiser,

            "Assessor" => YearBuiltSource::Assessor,

            "Builder" => YearBuiltSource::Builder,

            "Estimated" => YearBuiltSource::Estimated,

            "Other" => YearBuiltSource::Other,

            "Owner" => YearBuiltSource::Owner,

            "Public Records" => YearBuiltSource::PublicRecords,

            "See Remarks" => YearBuiltSource::SeeRemarks,

            _ => YearBuiltSource::OpenEnumeration(s.into()),
        }
    }
}

impl<'a> From<&'a YearBuiltSource> for &'a str {
    fn from(s: &'a YearBuiltSource) -> &'a str {
        match s {
            YearBuiltSource::Appraiser => "Appraiser",

            YearBuiltSource::Assessor => "Assessor",

            YearBuiltSource::Builder => "Builder",

            YearBuiltSource::Estimated => "Estimated",

            YearBuiltSource::Other => "Other",

            YearBuiltSource::Owner => "Owner",

            YearBuiltSource::PublicRecords => "Public Records",

            YearBuiltSource::SeeRemarks => "See Remarks",

            YearBuiltSource::OpenEnumeration(s) => s,
        }
    }
}

impl Serialize for YearBuiltSource {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.into())
    }
}

impl<'de> Deserialize<'de> for YearBuiltSource {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        Ok(From::from(s))
    }
}

pub(crate) mod option_vec_year_built_source_format {
    use super::YearBuiltSource;
    use serde::{Deserialize, Deserializer, Serializer};

    pub(crate) fn serialize<S>(
        items: &Option<Vec<YearBuiltSource>>,
        serializer: S,
    ) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match items {
            None => return serializer.serialize_none(),
            Some(ref vec) if vec.len() == 0 => serializer.serialize_str(""),
            Some(ref vec) => {
                let items: Vec<&str> = vec.iter().map(|item| item.into()).collect();
                let joined = items.join(",");
                serializer.serialize_str(&joined)
            }
        }
    }

    pub(crate) fn deserialize<'de, D>(
        deserializer: D,
    ) -> Result<Option<Vec<YearBuiltSource>>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let s = String::deserialize(deserializer)?;
        if s == "" {
            return Ok(Some(vec![]));
        }

        let items = s.split(",").map(|i| From::<&str>::from(i)).collect();
        Ok(Some(items))
    }
}
